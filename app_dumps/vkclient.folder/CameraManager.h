/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "MovieRecorderDelegate.h"
#import "AVCaptureAudioDataOutputSampleBufferDelegate.h"
#import "vkclient-Structs.h"
#import "AVCaptureVideoDataOutputSampleBufferDelegate.h"
#import "AVCaptureFileOutputRecordingDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class AVCaptureConnection, NSDictionary, AVCaptureStillImageOutput, AVCaptureAudioDataOutput, AVCaptureVideoDataOutput, CameraConfig, AVCaptureDeviceInput, AVCaptureDevice, NSString, KVOObserver, AVCaptureSession, NSObject, MovieRecorder, NSURL;
@protocol OS_dispatch_queue, CameraManagerDelegate;

__attribute__((visibility("hidden")))
@interface CameraManager : XXUnknownSuperclass <AVCaptureFileOutputRecordingDelegate, AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, MovieRecorderDelegate> {
	BOOL _shouldRecord;
	BOOL _recording;
	BOOL _recorededFirstFrameOfVideo;
	BOOL _startRecordingWhenAudioFormatDescriptionReady;
	unsigned _captureSessionSetupResult;
	CameraConfig* _cameraConfig;
	id<CameraManagerDelegate> _delegate;
	unsigned _cameraPosition;
	float _zoomFactor;
	MovieRecorder* _recorder;
	NSObject<OS_dispatch_queue>* _sessionQueue;
	NSObject<OS_dispatch_queue>* _videoDataOutputQueue;
	NSObject<OS_dispatch_queue>* _audioDataOutputQueue;
	AVCaptureSession* _videoSession;
	AVCaptureSession* _audioSession;
	AVCaptureDevice* _backfacingCameraDevice;
	AVCaptureDeviceInput* _backfacingCameraDeviceInput;
	AVCaptureDevice* _frontfacingCameraDevice;
	AVCaptureDeviceInput* _frontfacingCameraDeviceInput;
	AVCaptureDevice* _microphoneDevice;
	AVCaptureDeviceInput* _microphoneDeviceInput;
	AVCaptureDevice* _currentCameraDevice;
	AVCaptureVideoDataOutput* _videoDataOutput;
	AVCaptureAudioDataOutput* _audioDataOutput;
	AVCaptureStillImageOutput* _stillImageOutput;
	AVCaptureConnection* _videoConnection;
	AVCaptureConnection* _audioConnection;
	KVOObserver* _stillImageOutputKVOObserver;
	KVOObserver* _currentDeviceKVOObserver;
	unsigned _backgroundRecordingId;
	CVBufferRef _currentPreviewPixelBuffer;
	opaqueCMFormatDescription* _outputVideoFormatDescription;
	opaqueCMFormatDescription* _outputAudioFormatDescription;
	int _videoBufferOrientation;
	NSDictionary* _videoCompressionSettings;
	NSDictionary* _audioCompressionSettings;
	NSURL* _recordingURL;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float zoomFactor;
@property(readonly, assign, nonatomic) BOOL videoRecordingInProgress;
@property(readonly, assign, nonatomic) BOOL currentCameraDeviceHasTorch;
@property(readonly, assign, nonatomic) BOOL currentCameraDeviceHasFlash;
@property(assign, nonatomic) __weak id<CameraManagerDelegate> delegate;
@property(assign, nonatomic) BOOL startRecordingWhenAudioFormatDescriptionReady;
@property(assign, nonatomic) BOOL recorededFirstFrameOfVideo;
@property(assign, nonatomic) BOOL recording;
@property(assign, nonatomic) BOOL shouldRecord;
@property(copy, nonatomic) NSURL* recordingURL;
@property(retain, nonatomic) NSDictionary* audioCompressionSettings;
@property(retain, nonatomic) NSDictionary* videoCompressionSettings;
@property(assign, nonatomic) int videoBufferOrientation;
@property(retain, nonatomic) opaqueCMFormatDescription* outputAudioFormatDescription;
@property(retain, nonatomic) opaqueCMFormatDescription* outputVideoFormatDescription;
@property(retain, nonatomic) CVBufferRef currentPreviewPixelBuffer;
@property(assign, nonatomic) unsigned cameraPosition;
@property(assign, nonatomic) unsigned backgroundRecordingId;
@property(retain, nonatomic) KVOObserver* currentDeviceKVOObserver;
@property(retain, nonatomic) KVOObserver* stillImageOutputKVOObserver;
@property(retain, nonatomic) AVCaptureConnection* audioConnection;
@property(retain, nonatomic) AVCaptureConnection* videoConnection;
@property(retain, nonatomic) AVCaptureStillImageOutput* stillImageOutput;
@property(retain, nonatomic) AVCaptureAudioDataOutput* audioDataOutput;
@property(retain, nonatomic) AVCaptureVideoDataOutput* videoDataOutput;
@property(retain, nonatomic) AVCaptureDevice* currentCameraDevice;
@property(retain, nonatomic) AVCaptureDeviceInput* microphoneDeviceInput;
@property(retain, nonatomic) AVCaptureDevice* microphoneDevice;
@property(retain, nonatomic) AVCaptureDeviceInput* frontfacingCameraDeviceInput;
@property(retain, nonatomic) AVCaptureDevice* frontfacingCameraDevice;
@property(retain, nonatomic) AVCaptureDeviceInput* backfacingCameraDeviceInput;
@property(retain, nonatomic) AVCaptureDevice* backfacingCameraDevice;
@property(retain, nonatomic) AVCaptureSession* audioSession;
@property(retain, nonatomic) AVCaptureSession* videoSession;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* audioDataOutputQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* videoDataOutputQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* sessionQueue;
@property(retain, nonatomic) MovieRecorder* recorder;
@property(retain, nonatomic) CameraConfig* cameraConfig;
@property(assign, nonatomic) unsigned captureSessionSetupResult;
+(BOOL)backfacingCameraDeviceAvailable;
+(BOOL)frontfacingCameraDeviceAvailable;
+(id)sessionPresetForStoryFrontfacingCamera;
+(id)sessionPresetForStoryBackfacingCamera;
+(id)sessionPresetForStoryCameraForPosition:(unsigned)position;
+(id)cameraDeviceWithPosition:(int)position;
-(void).cxx_destruct;
-(void)movieRecorderDidFinishPreparing:(id)movieRecorder;
-(void)movieRecorder:(id)recorder didFailWithError:(id)error;
-(void)movieRecorderDidFinishRecording:(id)movieRecorder;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)captureOutput:(id)output didFinishRecordingToOutputFileAtURL:(id)url fromConnections:(id)connections error:(id)error;
-(void)captureOutput:(id)output didStartRecordingToOutputFileAtURL:(id)url fromConnections:(id)connections;
-(CGAffineTransform)transformFromVideoBufferOrientationToOrientation:(int)orientation withAutoMirroring:(BOOL)autoMirroring;
-(void)addInputToSessionIfPossible:(id)sessionIfPossible input:(id)input;
-(void)removeInputFromSessionIfExists:(id)sessionIfExists input:(id)input;
-(BOOL)session:(id)session containsInput:(id)input;
-(void)addInputToSessionIfPossible:(id)sessionIfPossible;
-(void)removeInputFromSessionIfExists:(id)sessionIfExists;
-(BOOL)sessionContainsInput:(id)input;
-(void)askUserForPermissionIfNeededWithMediaType:(id)mediaType withCompletion:(id)completion;
-(void)handleCurrentCameraDeviceAdjustingExposureChange:(BOOL)change;
-(void)handleCurrentCameraDeviceAdjustingFocusChange:(BOOL)change;
-(void)handleStillImageOutputCapturingStillImageChange:(BOOL)change;
-(void)focusAndAdjustWhiteBalanceAtAdjustedPoint:(CGPoint)adjustedPoint;
-(void)stopAudioSession;
-(void)startAudioSession;
-(void)stopVideoRecording;
-(void)startVideoRecording;
-(void)capturePhotoWithSampleBufferProcessor:(id)sampleBufferProcessor;
-(void)setCameraConfig:(id)config asyncWithCompletion:(id)completion;
-(id)createKVOObserverForCurrentDevice:(id)currentDevice;
-(void)setupFocusAndExposureForDevice:(id)device;
-(void)applyCameraPosition:(unsigned)position;
-(void)applyConfiguration:(id)configuration lockSessionForConfiguration:(BOOL)configuration2;
-(id)createKVOObserverForStillImageOutput:(id)stillImageOutput;
-(void)initializeDevices;
-(void)initializeAndStartSessionWithConfig:(id)config requestCameraPermissionIfNeeded:(BOOL)needed requestMicrophonePermissionIfNeeded:(BOOL)needed3 attachSessionToCameraPreviewLayer:(id)cameraPreviewLayer completion:(id)completion;
-(void)dealloc;
-(id)init;
@end

