/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct CGAffineTransform {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
	float _field5;
	float _field6;
} CGAffineTransform;

typedef struct dispatch_queue_s dispatch_queue_s;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct _VK_TableReorderingManagerScrollParameters {
	float topMargin;
	float bottomMargin;
	float topContentOffset;
	float bottomContentOffset;
} VK_TableReorderingManagerScrollParameters;

typedef struct CGContext* CGContextRef;

typedef struct __CFSet* CFSetRef;

typedef struct vImage_Buffer {
	void* data;
	unsigned height;
	unsigned width;
	unsigned rowBytes;
} vImage_Buffer;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct __SecTrust SecTrust;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFString* CFStringRef;

typedef struct {
	int _field1;
	void* _field2;
	/*function-pointer*/ void* _field3;
	/*function-pointer*/ void* _field4;
	/*function-pointer*/ void* _field5;
} XXStruct_K1psTC;

typedef struct dispatch_source_s dispatch_source_s;

typedef struct __asl_object_s asl_object_s;

typedef struct UIColor {
	Class _field1;
} UIColor;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct __CFArray* CFArrayRef;

typedef struct objc_property objc_property;

typedef struct avro_obj_t {
	int _field1;
	int _field2;
	int _field3;
} avro_obj_t;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct __darwin_sigaltstack {
	void* ss_sp;
	unsigned ss_size;
	int ss_flags;
} darwin_sigaltstack;

typedef struct PLCrashReporterCallbacks {
	unsigned short _field1;
	void* _field2;
	/*function-pointer*/ void* _field3;
} PLCrashReporterCallbacks;

typedef struct _Plcrash__CrashReport {
	ProtobufCMessage _field1;
	Plcrash__CrashReport__SystemInfo* _field2;
	Plcrash__CrashReport__ApplicationInfo* _field3;
	unsigned _field4;
	Plcrash__CrashReport__Thread** _field5;
	unsigned _field6;
	Plcrash__CrashReport__BinaryImage** _field7;
	Plcrash__CrashReport__Exception* _field8;
	Plcrash__CrashReport__Signal* _field9;
	Plcrash__CrashReport__ProcessInfo* _field10;
	Plcrash__CrashReport__MachineInfo* _field11;
	Plcrash__CrashReport__ReportInfo* _field12;
} Plcrash__CrashReport;

typedef struct _PLCrashReportDecoder {
	Plcrash__CrashReport* _field1;
} PLCrashReportDecoder;

typedef struct __CFUUID* CFUUIDRef;

typedef struct _ProtobufCMessageDescriptor ProtobufCMessageDescriptor;

typedef struct _ProtobufCMessageUnknownField ProtobufCMessageUnknownField;

typedef struct _ProtobufCMessage {
	ProtobufCMessageDescriptor* _field1;
	unsigned _field2;
	ProtobufCMessageUnknownField* _field3;
} ProtobufCMessage;

typedef struct _Plcrash__CrashReport__SystemInfo {
	ProtobufCMessage _field1;
	int _field2;
	int _field3;
	char* _field4;
	int _field5;
	long long _field6;
	char* _field7;
} Plcrash__CrashReport__SystemInfo;

typedef struct _Plcrash__CrashReport__ApplicationInfo {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	char* _field4;
} Plcrash__CrashReport__ApplicationInfo;

typedef struct _Plcrash__CrashReport__Thread Plcrash__CrashReport__Thread;

typedef struct _Plcrash__CrashReport__BinaryImage Plcrash__CrashReport__BinaryImage;

typedef struct _Plcrash__CrashReport__Exception {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	unsigned _field4;
	Plcrash__CrashReport__Thread__StackFrame** _field5;
} Plcrash__CrashReport__Exception;

typedef struct _Plcrash__CrashReport__Signal {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	unsigned long long _field4;
	Plcrash__CrashReport__Signal__MachException* _field5;
} Plcrash__CrashReport__Signal;

typedef struct _Plcrash__CrashReport__ProcessInfo {
	ProtobufCMessage _field1;
	char* _field2;
	unsigned _field3;
	char* _field4;
	char* _field5;
	unsigned _field6;
	int _field7;
	int _field8;
	unsigned long long _field9;
} Plcrash__CrashReport__ProcessInfo;

typedef struct _Plcrash__CrashReport__MachineInfo {
	ProtobufCMessage _field1;
	char* _field2;
	Plcrash__CrashReport__Processor* _field3;
	unsigned _field4;
	unsigned _field5;
} Plcrash__CrashReport__MachineInfo;

typedef struct _Plcrash__CrashReport__ReportInfo Plcrash__CrashReport__ReportInfo;

typedef struct _Plcrash__CrashReport__Processor {
	ProtobufCMessage _field1;
	int _field2;
	int _field3;
	unsigned long long _field4;
	unsigned long long _field5;
} Plcrash__CrashReport__Processor;

typedef struct _Plcrash__CrashReport__Symbol {
	ProtobufCMessage _field1;
	char* _field2;
	unsigned long long _field3;
	int _field4;
	unsigned long long _field5;
} Plcrash__CrashReport__Symbol;

typedef struct _Plcrash__CrashReport__Thread__StackFrame {
	ProtobufCMessage _field1;
	unsigned long long _field2;
	Plcrash__CrashReport__Symbol* _field3;
} Plcrash__CrashReport__Thread__StackFrame;

typedef struct _Plcrash__CrashReport__Signal__MachException {
	ProtobufCMessage _field1;
	unsigned long long _field2;
	unsigned _field3;
	unsigned long long* _field4;
} Plcrash__CrashReport__Signal__MachException;

typedef struct _opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct _opaque_pthread_cond_t {
	long __sig;
	BOOL __opaque[24];
} opaque_pthread_cond_t;

typedef struct plcrash_exception_server_context {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	/*function-pointer*/ void* _field5;
	void* _field6;
	opaque_pthread_mutex_t _field7;
	opaque_pthread_cond_t _field8;
	unsigned _field9;
	bool _field10;
} plcrash_exception_server_context;

typedef struct timeval {
	int tv_sec;
	int tv_usec;
} timeval;

typedef struct PLCrashHostInfoVersion {
	unsigned major;
	unsigned minor;
	unsigned revision;
} PLCrashHostInfoVersion;

typedef struct plcrash_mach_exception_port_set {
	unsigned count;
	unsigned masks[14];
	unsigned ports[14];
	int behaviors[14];
	int flavors[14];
} plcrash_mach_exception_port_set;

typedef struct uregex uregex;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void* mData;
} AudioBuffer;

typedef struct {
	BOOL flushQueueOnSeek;
	BOOL enableVolumeMixer;
	float equalizerBandFrequencies[24];
	unsigned readBufferSize;
	unsigned bufferSizeInSeconds;
	float secondsRequiredToStartPlaying;
	float gracePeriodAfterSeekInSeconds;
	float secondsRequiredToStartPlayingAfterBufferUnderun;
} XXStruct_YzVsxB;

typedef struct OpaqueAUGraph OpaqueAUGraph;

typedef struct OpaqueAudioComponentInstance OpaqueAudioComponentInstance;

typedef struct AudioBufferList {
	unsigned mNumberBuffers;
	AudioBuffer mBuffers[1];
} AudioBufferList;

typedef struct OpaqueAudioConverter OpaqueAudioConverter;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct OpaqueAudioFileStreamID OpaqueAudioFileStreamID;

typedef struct OpaqueAudioFileID OpaqueAudioFileID;

typedef struct AudioStreamPacketDescription {
	long long _field1;
	unsigned _field2;
	unsigned _field3;
} AudioStreamPacketDescription;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct CLSMachOSlice {
	void* startAddress;
	int cputype;
	int cpusubtype;
} CLSMachOSlice;

typedef struct {
	BOOL _field1[33];
	bool _field2;
	PLCrashHostInfoVersion _field3;
	PLCrashHostInfoVersion _field4;
	struct {
		void* _field1;
		unsigned long long _field2;
		void* _field3;
	} _field5;
	CLSMachOSlice _field6;
	int _field7;
} XXStruct_sUoPdA;

typedef struct {
	char* _field1;
	void* _field2;
	bool _field3;
	void* _field4;
	char* _field5;
	char* _field6;
	char* _field7;
	char* _field8;
	char* _field9;
	unsigned _field10;
	bool _field11;
	bool _field12;
	unsigned _field13;
	unsigned _field14;
	unsigned _field15;
	unsigned _field16;
} XXStruct_69FNmD;

typedef struct {
	char* _field1;
	char* _field2;
	unsigned _field3;
	unsigned _field4;
} XXStruct_aQabGB;

typedef struct __SecCertificate SecCertificate;

typedef struct CLSMachOFile {
	int fd;
	unsigned mappedSize;
	void* mappedFile;
} CLSMachOFile;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct {
	SEL _field1;
	SEL _field2;
	SEL _field3;
} XXStruct_bmT6iB;

typedef struct CGImageSource* CGImageSourceRef;

@protocol NSObject
@optional
@property(readonly, copy) NSString* debugDescription;
@required
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(NSZone*)zone;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(id)self;
-(Class)class;
-(BOOL)isEqual:(id)equal;
@end

@protocol VK_StatusBarAlertViewDelegate <NSObject>
-(void)statusBarAlertView:(id)view needShow:(BOOL)show;
@end

@protocol UITabBarControllerDelegate <NSObject>
@optional
-(id)tabBarController:(id)controller animationControllerForTransitionFromViewController:(id)viewController toViewController:(id)viewController3;
-(id)tabBarController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)tabBarControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)tabBarControllerSupportedInterfaceOrientations:(id)orientations;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
@end

@protocol VK_DataProvider <NSObject>
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
-(void)removeDelegate:(id)delegate;
-(void)addDelegate:(id)delegate;
-(void)cancelFetching;
-(void)resetData;
-(void)fetchData:(id)data;
@end

@protocol VK_TrackListProviderFactory <NSObject>
-(id)createTrackListProviderFromTrack:(id)track;
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol VK_DataWithTracksProvider <VK_DataProvider, VK_TrackListProviderFactory, NSCopying>
@end

@protocol UIGestureRecognizerDelegate <NSObject>
@optional
-(BOOL)gestureRecognizer:(id)recognizer shouldReceivePress:(id)press;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
@end

@protocol UIBarPositioningDelegate <NSObject>
@optional
-(int)positionForBar:(id)bar;
@end

@protocol UINavigationBarDelegate <UIBarPositioningDelegate>
@optional
-(void)navigationBar:(id)bar didPopItem:(id)item;
-(BOOL)navigationBar:(id)bar shouldPopItem:(id)item;
-(void)navigationBar:(id)bar didPushItem:(id)item;
-(BOOL)navigationBar:(id)bar shouldPushItem:(id)item;
@end

@protocol VK_TableControllerDelegate <NSObject>
@optional
-(void)tableControllerRefreshingFinished:(id)finished;
-(void)tableControllerCellItemsAllocated:(id)allocated;
-(UIEdgeInsets)tableControllerGetTableViewContentInset:(id)inset;
-(void)tableController:(id)controller didReorderFromCellItem:(id)cellItem atIndexPath:(id)indexPath toCellItem:(id)cellItem4 atIndexPath:(id)indexPath5;
-(void)tableController:(id)controller willStartReordering:(id)reordering;
-(void)tableViewDidScrollToTop:(id)tableView;
-(void)tableViewDidFinishScrollAnimation:(id)tableView;
-(void)tableViewDidEndDecelerating:(id)tableView;
-(void)tableViewWillBeginDecelerating:(id)tableView;
-(void)tableViewDidEndDragging:(id)tableView willDecelerate:(BOOL)decelerate;
-(void)tableViewWillEndDragging:(id)tableView;
-(void)tableViewWillBeginDragging:(id)tableView;
-(void)tableViewDidScroll:(id)tableView;
@end

@protocol VK_DataAuthorizationHandler <NSObject>
-(void)startLoginWithCompletion:(id)completion;
@end

@protocol EKMappingProtocol
+(id)objectMapping;
@end

@protocol UIViewControllerAnimatedTransitioning <NSObject>
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@optional
-(void)animationEnded:(BOOL)ended;
@end

@protocol VK_TableViewCellBaseCellDelegate <NSObject>
-(void)tableCellTapped:(id)tapped;
-(void)tableCellDidFinishSwiping:(id)tableCell;
-(void)tableCellDidStartSwiping:(id)tableCell;
@end

@protocol VK_TableControllerCellReorderingManagerDelegate <NSObject>
-(void)tableControllerCellReorderingManager:(id)manager didFinishReorderingFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableControllerCellReorderingManager:(id)manager willMoveCellFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableControllerCellReorderingManager:(id)manager didStartReorderingAtIndexPath:(id)indexPath;
-(BOOL)tableControllerCellReorderingManager:(id)manager shouldStartReorderingAtIndexPath:(id)indexPath;
@end

@protocol VK_DataProviderDelegate <NSObject>
@optional
-(void)dataProviderErrorReceived:(id)received error:(id)error;
-(void)dataProviderDidFetchStatusChanged:(id)dataProvider;
-(void)dataProviderWillFetchingComplete:(id)dataProvider withSuccessful:(BOOL)successful;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderDidFetchingStarted:(id)dataProvider;
-(void)dataProviderDidDataChanged:(id)dataProvider;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(id)indexPathForPreferredFocusedViewInTableView:(id)tableView;
-(void)tableView:(id)view didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)animationCoordinator;
-(BOOL)tableView:(id)view shouldUpdateFocusInContext:(id)context;
-(BOOL)tableView:(id)view canFocusRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didUnhighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didHighlightRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForFooterInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
@end

@protocol UITableViewDataSource <NSObject>
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
@optional
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@protocol VK_EqualizerSliderDelegate <NSObject>
-(void)slidersDidChangeValues:(id)sliders;
@end

@protocol AudioPlayerDelegate <NSObject>
@optional
-(void)audioPlayer:(id)player trackListDidChanged:(id)trackList;
-(void)audioPlayer:(id)player didStateChanged:(unsigned)changed;
-(void)audioPlayer:(id)player progressChanged:(double)changed forPlayingTrack:(id)playingTrack;
-(void)audioPlayer:(id)player didCurrentTrackChanged:(id)changed;
@end

@protocol VK_TableViewDataAllocator <NSObject>
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
-(id)allocateCellsWithData:(id)data;
@end

@protocol UICollectionViewDelegate <UIScrollViewDelegate>
@optional
-(CGPoint)collectionView:(id)view targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset;
-(id)collectionView:(id)view targetIndexPathForMoveFromItemAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(id)indexPathForPreferredFocusedViewInCollectionView:(id)collectionView;
-(void)collectionView:(id)view didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)animationCoordinator;
-(BOOL)collectionView:(id)view shouldUpdateFocusInContext:(id)context;
-(BOOL)collectionView:(id)view canFocusItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view transitionLayoutForOldLayout:(id)oldLayout newLayout:(id)layout;
-(void)collectionView:(id)view performAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view canPerformAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view shouldShowMenuForItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingSupplementaryView:(id)view2 forElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplaySupplementaryView:(id)view2 forElementKind:(id)elementKind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldDeselectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didUnhighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didHighlightItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldHighlightItemAtIndexPath:(id)indexPath;
@end

@protocol UICollectionViewDataSource <NSObject>
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
@optional
-(void)collectionView:(id)view moveItemAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)collectionView:(id)view canMoveItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
@end

@protocol VK_TrackListProvider <VK_DataWithTracksProvider>
@property(readonly, assign, nonatomic) id tracksFilter;
@property(readonly, assign, nonatomic) VK_TrackListProviderOptions* options;
@property(readonly, assign, nonatomic) NSArray* tracks;
-(id)previousTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(id)nextTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(BOOL)canPlayTrack:(id)track;
-(id)trackAtIndex:(unsigned)index;
-(id)indexForTrack:(id)track;
-(void)fetchMoreTracksIfNeededFromTrack:(id)track;
-(void)needToReloadTracksProvider;
-(void)reloadTracksProviderIfNeeded;
-(void)reloadTracksProvider;
@end

@protocol VK_ShuffleableTrackListProvider <VK_TrackListProvider>
-(void)unshuffleFromTrack:(id)track;
-(void)shuffleFromTrack:(id)track;
@end

@protocol VK_RegistrationViewControllerDelegate <NSObject>
@optional
-(void)registrationViewControllerRegistrationFinished:(id)finished;
-(void)registrationViewControllerRegistrationCanceled:(id)canceled;
@end

@protocol VK_FeedDataProvider <VK_DataWithTracksProvider>
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)application:(id)application didUpdateUserActivity:(id)activity;
-(void)application:(id)application didFailToContinueUserActivityWithType:(id)type error:(id)error;
-(BOOL)application:(id)application continueUserActivity:(id)activity restorationHandler:(id)handler;
-(BOOL)application:(id)application willContinueUserActivityWithType:(id)type;
-(void)application:(id)application didDecodeRestorableStateWithCoder:(id)coder;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(id)application:(id)application viewControllerWithRestorationIdentifierPath:(id)restorationIdentifierPath coder:(id)coder;
-(BOOL)application:(id)application shouldAllowExtensionPointIdentifier:(id)identifier;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationShouldRequestHealthAuthorization:(id)application;
-(void)application:(id)application handleWatchKitExtensionRequest:(id)request reply:(id)reply;
-(void)application:(id)application handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(void)application:(id)application performActionForShortcutItem:(id)shortcutItem completionHandler:(id)handler;
-(void)application:(id)application performFetchWithCompletionHandler:(id)completionHandler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification completionHandler:(id)handler;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didRegisterUserNotificationSettings:(id)settings;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url options:(id)options;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)applicationDidFinishLaunching:(id)application;
@end

@protocol VK_NetworkReachabilitySubscriber <NSObject>
@optional
-(void)networkReachability:(id)reachability networkReachableChanged:(BOOL)changed;
-(void)networkReachability:(id)reachability networkStatusChanged:(int)changed;
@end

@protocol VK_TariffsReceiptProcessingScheduler <NSObject>
-(void)tariffsReceiptProcessingSchedulerDidReceiptProcessedInBackground;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol VK_SearchPopularRequestsViewDelegate <NSObject>
-(void)popularRequestView:(id)view didRequestSelected:(id)selected;
@end

@protocol VK_DataCheckable <NSObject>
@property(readonly, assign, nonatomic) BOOL isEmpty;
@end

@protocol VK_VCFactoryImplProtocol <NSObject>
-(id)createControllerWithType:(unsigned)type;
@end

@protocol VK_NetworkErrorListener <NSObject>
@optional
-(void)networkStartedWithRequest:(id)request;
-(void)networkFinishedWithRequest:(id)request;
-(void)networkErrorWithRequest:(id)request;
@end

@protocol STKAudioPlayerDelegate <NSObject>
-(void)audioPlayer:(id)player unexpectedError:(int)error;
-(void)audioPlayer:(id)player didFinishPlayingQueueItemId:(id)anId withReason:(int)reason andProgress:(double)progress andDuration:(double)duration;
-(void)audioPlayer:(id)player stateChanged:(int)changed previousState:(int)state;
-(void)audioPlayer:(id)player didFinishBufferingSourceWithQueueItemId:(id)queueItemId;
-(void)audioPlayer:(id)player didStartPlayingQueueItemId:(id)anId;
@optional
-(void)audioPlayer:(id)player didCancelQueuedItems:(id)items;
-(void)audioPlayer:(id)player logInfo:(id)info;
@end

@protocol PlayerProtocol <NSObject>
@property(readonly, assign, nonatomic) double currentTime;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) id currentItem;
@property(assign, nonatomic) __weak id<PlayerDelegate> delegate;
-(void)seekToTime:(double)time;
-(void)reset;
-(void)stop;
-(void)resume;
-(BOOL)getPaused;
-(void)pause;
-(void)play;
@end

@protocol VKSdkDelegate <NSObject>
-(void)vkSdkUserAuthorizationFailed;
-(void)vkSdkAccessAuthorizationFinishedWithResult:(id)result;
@optional
-(void)vkSdkTokenHasExpired:(id)expired;
-(void)vkSdkAccessTokenUpdated:(id)updated oldToken:(id)token;
-(void)vkSdkAuthorizationStateUpdatedWithResult:(id)result;
@end

@protocol VKSdkUIDelegate <NSObject>
-(void)vkSdkNeedCaptchaEnter:(id)enter;
-(void)vkSdkShouldPresentViewController:(id)vkSdk;
@optional
-(void)vkSdkDidDismissViewController:(id)vkSdk;
-(void)vkSdkWillDismissViewController:(id)vkSdk;
@end

@protocol VK_ModelWithAlbumCover <NSObject>
@property(readonly, assign, nonatomic) NSString* coverLargeUrl;
@property(readonly, assign, nonatomic) NSString* coverMediumUrl;
@property(readonly, assign, nonatomic) NSString* coverSmallUrl;
@end

@protocol VK_InlineSearchParent <NSObject>
-(void)hideSearchViewContainer;
-(void)showSearchViewContainer;
@end

@protocol VK_DataWithTracksShuffleableProvider <VK_DataWithTracksProvider>
-(void)unshuffleFromTrack:(id)track;
-(void)shuffleFromTrack:(id)track;
@end

@protocol VK_ShuffleCellProxyDelegate <NSObject>
-(void)onEnabledStateDidUpdated;
@end

@protocol VK_Disposable <NSObject>
-(void)dispose;
@end

@protocol VK_PlayerProgressSliderDelegate <NSObject>
@optional
-(void)sliderCancelSlide:(id)slide;
-(void)sliderEndSlide:(id)slide;
-(BOOL)sliderShouldBeginSlide:(id)slider;
@end

@protocol VK_InlineSearchDataProvider <VK_DataProvider>
@property(readonly, assign, nonatomic) BOOL isEmpty;
-(void)clear;
-(void)updateWithQuery:(id)query;
@end

@protocol VK_UpdateTimerSubscriber <NSObject>
-(void)updateTimerFired;
@end

@protocol UIViewControllerTransitionCoordinatorContext <NSObject>
-(CGAffineTransform)targetTransform;
-(id)containerView;
-(id)viewForKey:(id)key;
-(id)viewControllerForKey:(id)key;
-(int)completionCurve;
-(float)completionVelocity;
-(float)percentComplete;
-(double)transitionDuration;
-(BOOL)isCancelled;
-(BOOL)isInteractive;
-(BOOL)initiallyInteractive;
-(int)presentationStyle;
-(BOOL)isAnimated;
@end

@protocol UIViewControllerTransitionCoordinator <UIViewControllerTransitionCoordinatorContext>
-(void)notifyWhenInteractionEndsUsingBlock:(id)block;
-(BOOL)animateAlongsideTransitionInView:(id)view animation:(id)animation completion:(id)completion;
-(BOOL)animateAlongsideTransition:(id)transition completion:(id)completion;
@end

@protocol _LNPopupItemDelegate <NSObject>
-(void)_popupItem:(id)item didChangeValueForKey:(id)key;
@end

@protocol TLYShyNavBarManagerDelegate <NSObject>
@optional
-(void)shyNavBarManagerDidFinishExpanding:(id)shyNavBarManager;
-(void)shyNavBarManagerDidFinishContracting:(id)shyNavBarManager;
-(void)shyNavBarManagerDidBecomeFullyContracted:(id)shyNavBarManager;
@end

@protocol VK_RequestErrorHandler <NSObject>
-(void)handleRequestStarted:(id)started;
-(void)handleRequestFinished:(id)finished;
-(BOOL)handleRequestError:(id)error;
@end

@protocol VK_ValidationViewControllerDelegate <NSObject>
@optional
-(void)validationViewController:(id)controller validationFinishedWithAccessToken:(id)accessToken;
-(void)validationViewControllerValidationCanceled:(id)canceled;
@end

@protocol STKAsyncLoadingDataSource <NSObject>
@property(readonly, assign, nonatomic) __weak NSOperationQueue* loadingOperationQueue;
-(void)resumeLoadingIfNeeded;
-(void)pauseLoadingIfNeeded;
@end

@protocol VK_ProfileHeaderViewDelegate <NSObject>
-(void)profileHeaderView:(id)view updateNavBarContainer:(id)container;
-(id)titleForProfileHeaderView:(id)profileHeaderView;
-(id)profileModelForHeaderView:(id)headerView;
-(void)backButtonPressedInProfileHeaderView:(id)profileHeaderView;
-(BOOL)shouldShowBackButtonForProfileHeaderView:(id)profileHeaderView;
-(unsigned)segmenIndexForProfileHeaderView:(id)profileHeaderView;
-(void)profileHeaderView:(id)view didSegmentSelected:(unsigned)selected;
-(id)segmentTitlesForProfileHeaderView:(id)profileHeaderView;
@end

@protocol VK_AnaliticServiceDelegate <NSObject>
-(void)onServiceWillSendData:(id)onService;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol VK_TableControllerConfiguration <NSObject>
-(void)applyToTableController:(id)tableController;
@end

@protocol NSLayoutManagerDelegate <NSObject>
@optional
-(void)layoutManager:(id)manager textContainer:(id)container didChangeGeometryFromSize:(CGSize)size;
-(void)layoutManager:(id)manager didCompleteLayoutForTextContainer:(id)textContainer atEnd:(BOOL)end;
-(void)layoutManagerDidInvalidateLayout:(id)layoutManager;
-(BOOL)layoutManager:(id)manager shouldSetLineFragmentRect:(inout CGRect*)rect lineFragmentUsedRect:(inout CGRect*)rect3 baselineOffset:(inout float*)offset inTextContainer:(id)textContainer forGlyphRange:(NSRange)glyphRange;
-(CGRect)layoutManager:(id)manager boundingBoxForControlGlyphAtIndex:(unsigned)index forTextContainer:(id)textContainer proposedLineFragment:(CGRect)fragment glyphPosition:(CGPoint)position characterIndex:(unsigned)index6;
-(BOOL)layoutManager:(id)manager shouldBreakLineByHyphenatingBeforeCharacterAtIndex:(unsigned)index;
-(BOOL)layoutManager:(id)manager shouldBreakLineByWordBeforeCharacterAtIndex:(unsigned)index;
-(int)layoutManager:(id)manager shouldUseAction:(int)action forControlCharacterAtIndex:(unsigned)index;
-(float)layoutManager:(id)manager paragraphSpacingAfterGlyphAtIndex:(unsigned)index withProposedLineFragmentRect:(CGRect)proposedLineFragmentRect;
-(float)layoutManager:(id)manager paragraphSpacingBeforeGlyphAtIndex:(unsigned)index withProposedLineFragmentRect:(CGRect)proposedLineFragmentRect;
-(float)layoutManager:(id)manager lineSpacingAfterGlyphAtIndex:(unsigned)index withProposedLineFragmentRect:(CGRect)proposedLineFragmentRect;
-(unsigned)layoutManager:(id)manager shouldGenerateGlyphs:(const unsigned short*)glyphs properties:(const int*)properties characterIndexes:(const unsigned*)indexes font:(id)font forGlyphRange:(NSRange)glyphRange;
@end

@protocol STKDataSourceDelegate <NSObject>
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
@end

@protocol CCHLinkTextViewDelegate <NSObject>
@optional
-(void)linkTextView:(id)view didLongPressLinkWithValue:(id)value;
-(void)linkTextView:(id)view didTapLinkWithValue:(id)value;
@end

@protocol VK_MiniPlayerViewDelegate <NSObject>
@optional
-(void)miniPlayerViewOpenBigPlayerTouched:(id)touched;
@end

@protocol NSURLSessionDelegate <NSObject>
@optional
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
@end

@protocol NSURLConnectionDelegate <NSObject>
@optional
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
@end

@protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
@optional
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
@end

@protocol VK_Observer <NSObject>
-(void)onError:(id)error;
-(void)onSuccess:(id)success;
@end

@protocol NSCoding
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@protocol VK_FavoritesManagerCachedOperationItem <NSObject, NSCoding>
-(void)performOperation:(id)operation;
@end

@protocol VK_RequestDelegate <NSObject>
-(void)requestCompleted:(id)completed;
-(void)requestStarted:(id)started;
@end

@protocol VK_TableControllerSwitcherDelegate <NSObject>
@optional
-(void)tableControllerSwitcher:(id)switcher didSwitchToTableController:(id)tableController;
-(void)tableControllerSwitcher:(id)switcher willSwitchFromTableController:(id)tableController;
@end

@protocol VK_DisplayBridgeTriggering <NSObject>
-(void)displayBridgeRefresh;
@end

@protocol DDLogFormatter <NSObject>
-(id)formatLogMessage:(id)message;
@optional
-(void)willRemoveFromLogger:(id)logger;
-(void)didAddToLogger:(id)logger;
@end

@protocol UIAppearanceContainer <NSObject>
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)navigationControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)navigationControllerSupportedInterfaceOrientations:(id)orientations;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol VK_CellProxyConfiguration <NSObject>
-(void)applyToCellProxy:(id)cellProxy;
@end

@protocol PlayerDelegate <NSObject>
-(void)player:(id)player didFinishPlaying:(id)playing successfully:(BOOL)successfully;
-(void)player:(id)player error:(id)error;
-(void)player:(id)player track:(id)track playingChanged:(BOOL)changed;
-(void)player:(id)player didStartPlaying:(id)playing;
@end

@protocol VK_TracksManagerDelegate <NSObject>
-(void)favoritesTracksStateSavingFailed;
-(void)favoritesTracksDownloadProgressChanged:(id)changed;
-(void)favoritesTracksDownloadStatusChanged:(id)changed;
-(void)favoritesTracksChanged;
@end

@protocol VK_NibNameProtocol <NSObject>
+(id)nibName;
@end

@protocol NSSecureCoding <NSCoding>
+(BOOL)supportsSecureCoding;
@end

@protocol AFURLRequestSerialization <NSObject, NSSecureCoding, NSCopying>
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
@end

@protocol AFMultipartFormData
-(void)throttleBandwidthWithPacketSize:(unsigned)packetSize delay:(double)delay;
-(void)appendPartWithHeaders:(id)headers body:(id)body;
-(void)appendPartWithFormData:(id)formData name:(id)name;
-(void)appendPartWithFileData:(id)fileData name:(id)name fileName:(id)name3 mimeType:(id)type;
-(void)appendPartWithInputStream:(id)inputStream name:(id)name fileName:(id)name3 length:(long long)length mimeType:(id)type;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name fileName:(id)name3 mimeType:(id)type error:(id*)error;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name error:(id*)error;
@end

@protocol NSStreamDelegate <NSObject>
@optional
-(void)stream:(id)stream handleEvent:(unsigned)event;
@end

@protocol AFURLResponseSerialization <NSObject, NSSecureCoding, NSCopying>
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>
@optional
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)URLSession:(id)session task:(id)task needNewBodyStream:(id)stream;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
@end

@protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>
@optional
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didBecomeStreamTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didBecomeDownloadTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
@end

@protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
@optional
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
@end

@protocol AFImageCache <NSObject>
-(void)cacheImage:(id)image forRequest:(id)request;
-(id)cachedImageForRequest:(id)request;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol MFMessageComposeViewControllerDelegate <NSObject>
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@protocol NSCacheDelegate <NSObject>
@optional
-(void)cache:(id)cache willEvictObject:(id)object;
@end

@protocol BKURLConnectionInformalDelegate <NSObject>
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
@end

@protocol UIActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol UIImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
@end

@protocol UIPopoverControllerDelegate <NSObject>
@optional
-(void)popoverController:(id)controller willRepositionPopoverToRect:(inout CGRect*)rect inView:(inout id*)view;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
@end

@protocol BFAppLinkReturnToRefererViewDelegate <NSObject>
-(void)returnToRefererViewDidTapInsideLink:(id)returnToRefererView link:(id)link;
-(void)returnToRefererViewDidTapInsideCloseButton:(id)returnToRefererView;
@end

@protocol BFAppLinkResolving <NSObject>
-(id)appLinkFromURLInBackground:(id)background;
@end

@protocol DDLogger <NSObject>
@optional
@property(readonly, assign, nonatomic) NSString* loggerName;
@property(readonly, assign, nonatomic) dispatch_queue_s* loggerQueue;
@required
@property(retain, nonatomic) id<DDLogFormatter> logFormatter;
-(void)logMessage:(id)message;
@optional
-(void)flush;
-(void)willRemoveLogger;
-(void)didAddLogger;
@end

@protocol DDLogFileManager <NSObject>
@property(assign) unsigned long long logFilesDiskQuota;
@property(assign) unsigned maximumNumberOfLogFiles;
-(id)createNewLogFile;
-(id)sortedLogFileInfos;
-(id)sortedLogFileNames;
-(id)sortedLogFilePaths;
-(id)unsortedLogFileInfos;
-(id)unsortedLogFileNames;
-(id)unsortedLogFilePaths;
-(id)logsDirectory;
@optional
-(void)didRollAndArchiveLogFile:(id)file;
-(void)didArchiveLogFile:(id)file;
@end

@protocol EKManagedMappingProtocol
+(id)objectMapping;
@end

@protocol FlurryPulseCBDataSenderDelegate <NSObject>
-(id)dataForSending:(id)sending;
@end

@protocol IFlurryHttpAsyncTask <NSObject>
@property(retain, nonatomic) NSString* tag;
+(id)urlWithProtocol:(id)protocol host:(id)host port:(int)port path:(id)path query:(id)query;
+(id)stringToQueryDictionary:(id)queryDictionary;
+(id)queryDictionaryToString:(id)string;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields timeoutInterval:(int)interval useCachePolicy:(unsigned)policy delegate:(id)delegate startImmediately:(BOOL)immediately;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields delegate:(id)delegate startImmediately:(BOOL)immediately;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields delegate:(id)delegate;
+(id)post:(id)post body:(id)body headerFields:(id)fields delegate:(id)delegate;
+(id)post:(id)post body:(id)body delegate:(id)delegate;
+(id)get:(id)get headerFields:(id)fields delegate:(id)delegate;
+(id)get:(id)get delegate:(id)delegate;
-(void)startInRunLoop:(id)runLoop;
@end

@protocol FlurryHttpAsyncTaskDelegate <NSObject>
-(void)requestSuccessful:(id)successful withResponse:(id)response;
-(void)requestDidCancel:(id)request withResponse:(id)response;
-(void)requestDidFail:(id)request withResponse:(id)response;
@end

@protocol FlurryDataSenderDelegate <NSObject>
-(id)dataForSending:(id)sending;
@end

@protocol FlurryWatchConnectivityDelegate <NSObject>
@optional
-(BOOL)isFlurryUserInfo:(id)info;
-(BOOL)didReceiveUserInfo:(id)info;
@end

@protocol IFlurrySession <NSObject>
@property(assign, nonatomic) long long totalPauseIntervalMillis;
@property(retain, nonatomic) NSMutableArray* eventLog;
@property(retain, nonatomic) NSMutableDictionary* eventCounts;
@property(readonly, assign, nonatomic) NSDate* age;
@property(readonly, assign, nonatomic) int gender;
@property(retain, nonatomic) NSDate* endTime;
@property(assign, nonatomic) int pageViewCount;
@property(copy, nonatomic) NSString* appVersion;
@property(readonly, assign, nonatomic) float accuracy;
@property(readonly, assign, nonatomic) double longitude;
@property(readonly, assign, nonatomic) double latitude;
@property(retain, nonatomic) NSData* crashReportData;
@property(assign) BOOL crashed;
@property(readonly, assign) NSString* apiKey;
@property(readonly, assign) NSDate* pauseTime;
@property(readonly, assign) NSDate* startTime;
+(void)disableTransferOfFlurryInfo;
+(void)disableWatchConnectivity;
-(id)installationIDForSessionReport;
-(void)removeInstallationIDFromKeychain;
-(BOOL)flurryUserInfo:(id)info;
-(BOOL)isFlurryUserInfo:(id)info;
-(void)sendSessionsToServerForCreateSession;
-(void)endSession;
-(void)endSessionAsync;
-(void)resumeSession;
-(void)markSessionAsResuming;
-(void)pauseSession;
-(void)recordError:(id)error message:(id)message exceptionString:(id)string errorType:(int)type liveReport:(id)report;
-(void)recordError:(id)error message:(id)message error:(id)error3 liveReport:(id)report;
-(void)recordError:(id)error message:(id)message exception:(id)exception liveReport:(id)report;
-(void)endTimedEvent:(id)event withParameters:(id)parameters;
-(void)recordTransaction:(id)transaction statusCallback:(id)callback;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed transaction:(id)transaction;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed;
-(int)recordEvent:(id)event withParameters:(id)parameters;
-(id)initialTimestamp;
-(void)setAgeInYears:(int)years;
-(void)setGenderAsString:(id)string;
-(void)maybeIncrementPageView;
-(void)setCrashReportingEnabled:(BOOL)enabled;
-(void)setSessionReportsOnPauseEnabled:(BOOL)enabled;
-(void)setSessionReportsOnCloseEnabled:(BOOL)enabled;
-(void)setUserID:(id)anId;
-(void)setEventLoggingEnabled:(BOOL)enabled;
-(void)setLatitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(float)accuracy verticalAccuracy:(float)accuracy4;
@end

@protocol SKRequestDelegate <NSObject>
@optional
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
@end

@protocol SKProductsRequestDelegate <SKRequestDelegate>
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

@protocol FlurryPLCrashReportFormatter
-(id)formatReport:(id)report error:(id*)error;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol SKPaymentTransactionObserver <NSObject>
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
@optional
-(void)paymentQueue:(id)queue updatedDownloads:(id)downloads;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueue:(id)queue removedTransactions:(id)transactions;
@end

@protocol SDWebImageOperation <NSObject>
-(void)cancel;
@end

@protocol TLYShyChild <NSObject>
-(void)offsetCenterBy:(CGPoint)by;
@end

@protocol TLYShyParent <NSObject>
-(float)calculateTotalHeightRecursively;
-(float)maxYRelativeToView:(id)view;
@end

@protocol VKApiObject <NSObject>
+(id)createWithArray:(id)array;
+(id)createWithDictionary:(id)dictionary;
@end

@protocol SFSafariViewControllerDelegate <NSObject>
@optional
-(void)safariViewController:(id)controller didCompleteInitialLoad:(BOOL)load;
-(void)safariViewControllerDidFinish:(id)safariViewController;
-(id)safariViewController:(id)controller activityItemsForURL:(id)url title:(id)title;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)textAttachment inRange:(NSRange)range;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
@end

@protocol UICollectionViewDelegateFlowLayout <UICollectionViewDelegate>
@optional
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(int)section;
-(float)collectionView:(id)view layout:(id)layout minimumInteritemSpacingForSectionAtIndex:(int)index;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(UIEdgeInsets)collectionView:(id)view layout:(id)layout insetForSectionAtIndex:(int)index;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
@end

@protocol UIViewControllerTransitioningDelegate <NSObject>
@optional
-(id)presentationControllerForPresentedViewController:(id)presentedViewController presentingViewController:(id)controller sourceViewController:(id)controller3;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
@end

@protocol FABKit <NSObject>
+(id)kitDisplayVersion;
+(id)bundleIdentifier;
@optional
+(void)initializeIfNeeded;
+(id)kitBuildVersion;
@end

@protocol CLSCrashReportingControllerDelegate <NSObject>
-(id)settingsForCrashReportingController:(id)crashReportingController;
-(BOOL)isFirstInstallForCrashReportingController:(id)crashReportingController;
-(id)installIDForCrashReportingController:(id)crashReportingController;
-(id)APIKeyForCrashReportingController:(id)crashReportingController;
-(BOOL)reportingController:(id)controller ensureDeliveryOfUnixSignal:(int)unixSignal;
-(void)reportingController:(id)controller internalDidDetectReportForLastExecution:(id)internal;
-(void)reportingController:(id)controller didDetectReportForLastExecution:(id)lastExecution completionHandler:(id)handler;
-(BOOL)reportingControllerMustInformDelegateOfReports:(id)reports;
-(BOOL)reportingControllerCanUseBackgroundSessions:(id)sessions;
-(void)detectedCrash;
-(BOOL)shouldInstallCrashCallback;
@end

@protocol CLSBetaControllerDelegate <NSObject>
-(id)settingsForBetaController:(id)betaController;
-(id)APIKeyForBetaController:(id)betaController;
@end

@protocol WKScriptMessageHandler <NSObject>
-(void)userContentController:(id)controller didReceiveScriptMessage:(id)message;
@end

@protocol CLSNetworkClientDelegate <NSObject>
-(BOOL)networkClientCanUseBackgroundSessions:(id)sessions;
@optional
-(void)networkClient:(id)client didFinishUploadWithPath:(id)path error:(id)error;
@end

@protocol CLSReportsControllerDelegate <NSObject>
-(id)bundleIdentifierForReportsController:(id)reportsController;
-(id)APIKeyForReportsController:(id)reportsController;
-(id)settingsForReportsController:(id)reportsController;
-(void)reportsControllerDidCompleteAllSubmissions:(id)reportsController;
-(void)reportsController:(id)controller didCompletePackageSubmission:(id)submission error:(id)error;
@end

@protocol CLSCrashReport <NSObject>
@property(readonly, copy, nonatomic) NSString* OSBuildVersion;
@property(readonly, copy, nonatomic) NSString* OSVersion;
@property(readonly, copy, nonatomic) NSDate* crashedOnDate;
@property(readonly, copy, nonatomic) NSString* bundleShortVersionString;
@property(readonly, copy, nonatomic) NSString* bundleVersion;
@property(readonly, copy, nonatomic) NSDictionary* customKeys;
@property(readonly, copy, nonatomic) NSString* identifier;
@end

@protocol ANSMetadataSerializable <NSObject>
-(id)dictionaryRepresentationWithStartTime:(unsigned long long)startTime;
-(id)eventName;
@end

@protocol ANSUploaderDelegate <NSObject>
-(void)uploader:(id)uploader completedRequest:(id)request withResponse:(id)response uniqueName:(id)name error:(id)error completionHandler:(id)handler;
-(void)uploader:(id)uploader didFinishUploadWithUniqueName:(id)uniqueName error:(id)error;
-(id)uploader:(id)uploader filePathForUniqueName:(id)uniqueName;
@optional
-(void)uploader:(id)uploader session:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
@end

@protocol FABDownloadAndSaveSettingsOperationDelegate <NSObject>
-(void)operation:(id)operation didDownloadAndSaveSettingsWithError:(id)error;
@end

@protocol FABOnboardingOperationDelegate <NSObject>
-(void)onboardingOperation:(id)operation didCompleteAppCreationWithError:(id)error;
-(void)onboardingOperation:(id)operation didCompleteAppUpdateWithError:(id)error;
@end

@protocol CLSURLSessionTaskDelegate <NSObject>
-(void)task:(id)task didCompleteWithError:(id)error;
-(id)task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request;
@end

@protocol CLSURLSessionDataDelegate <CLSURLSessionTaskDelegate>
-(void)task:(id)task didReceiveData:(id)data;
-(void)task:(id)task didReceiveResponse:(id)response;
@end

@protocol CLSURLSessionDownloadDelegate <CLSURLSessionDataDelegate>
-(void)downloadTask:(id)task didFinishDownloadingToURL:(id)url;
@end

@protocol __ARCLiteIndexedSubscripting__
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

@protocol __ARCLiteKeyedSubscripting__
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
@end

__attribute__((visibility("hidden")))
@interface VK_ResponseModelSerializer : AFHTTPResponseSerializer {
	EKObjectMapping* _modelMapping;
}
@property(retain, nonatomic) EKObjectMapping* modelMapping;
+(id)serializerWithModelMapping:(id)modelMapping;
-(void).cxx_destruct;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)initWithModelMapping:(id)modelMapping;
@end

__attribute__((visibility("hidden")))
@interface VK_ImagesTiles : XXUnknownSuperclass {
	UIView* _contentView;
	NSMutableArray* _cachedImageViews;
	NSMutableArray* _imageViews;
	NSArray* _viewsConfigurations;
	NSArray* _imagesUrls;
	CGSize _estimatedViewSize;
}
@property(retain, nonatomic) NSArray* imagesUrls;
@property(retain, nonatomic) NSArray* viewsConfigurations;
@property(retain, nonatomic) NSMutableArray* imageViews;
@property(retain, nonatomic) NSMutableArray* cachedImageViews;
@property(assign, nonatomic) CGSize estimatedViewSize;
@property(assign, nonatomic) __weak UIView* contentView;
-(void).cxx_destruct;
-(id)configurationFor9Images;
-(id)configurationFor8Images;
-(id)configurationFor7Images;
-(id)configurationFor6Images;
-(id)configurationFor5Images;
-(id)configurationFor4Images;
-(id)configurationFor3Images;
-(id)configurationFor2Images;
-(id)configurationFor1Image;
-(id)imagesRectsForConfiguration:(id)configuration;
-(id)imagesRectsForConfiguration:(id)configuration withWorkingRect:(CGRect)workingRect;
-(void)setupCachedImageViews;
-(void)updateImagesViewsForImagesCount:(unsigned)imagesCount;
-(void)resetImages;
-(void)setup;
-(void)showWithImagesURLs:(id)imagesURLs;
-(void)showWithPhotos:(id)photos;
-(id)initWithContentView:(id)contentView andEstimatedSize:(CGSize)size;
@end

__attribute__((visibility("hidden")))
@interface VK_InAppPurchasesManager : XXUnknownSuperclass {
	NSMutableDictionary* _storeProductsById;
}
@property(retain, nonatomic) NSMutableDictionary* storeProductsById;
+(id)shared;
-(void).cxx_destruct;
-(void)retreiveReceiptWithCompletionBlock:(id)completionBlock;
-(id)retreiveReceipt;
-(void)updateProducts:(id)products;
-(id)getStoreProductById:(id)anId;
-(void)updateStoreProductsForTariffs:(id)tariffs withCompletion:(id)completion;
-(void)restoreTariffWithCompletionBlock:(id)completionBlock;
-(void)purchaseTariff:(id)tariff withCompletionBlock:(id)completionBlock;
-(void)setupInAppPurchasesManager;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsLoadingCellProxy : VK_SimpleSpaceCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsLoadingCellViewModel : VK_SimpleSpaceCellViewModel {
}
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsLoadingCell : VK_SimpleSpaceCell {
	UIActivityIndicatorView* _activityIndicatorView;
}
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicatorView;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_PlusPixelLayoutConstraint : XXUnknownSuperclass {
}
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface CachedHTTPDataSourceStorage : XXUnknownSuperclass {
	NSURL* _directoryUrl;
}
@property(retain, nonatomic) NSURL* directoryUrl;
+(id)shared;
-(void).cxx_destruct;
-(void)configure;
-(id)createFileWithSize:(long long)size;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ArtworkPathManager : XXUnknownSuperclass {
	NSMutableArray* _sizes;
	CGSize _lockScreenSize;
}
@property(assign) CGSize lockScreenSize;
@property(retain) NSMutableArray* sizes;
+(id)getPath:(id)path withWidth:(float)width andHeight:(float)height isBlurred:(BOOL)blurred noScale:(BOOL)scale;
+(id)getPath:(id)path withWidth:(float)width andHeight:(float)height isBlurred:(BOOL)blurred;
+(id)getPath:(id)path withWidth:(float)width andHeight:(float)height;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)registerSize:(CGSize)size;
-(id)init;
-(CGSize)lockScreenImageSize;
-(void)registerLockScreenSize:(CGSize)size;
-(id)getSizes;
@end

__attribute__((visibility("hidden")))
@interface ImageManager : XXUnknownSuperclass {
	SDWebImageDownloader* _imageDownloader;
	NSFileManager* _fileManager;
	NSString* _cachePath;
	NSObject<OS_dispatch_queue>* _ioQueue;
}
@property(retain) NSObject<OS_dispatch_queue>* ioQueue;
@property(retain) NSString* cachePath;
@property(retain) NSFileManager* fileManager;
@property(retain) SDWebImageDownloader* imageDownloader;
-(void).cxx_destruct;
-(id)imageFilePathForUrl:(id)url;
-(void)doAsyncWithImages:(id)images someAction:(id)action;
-(void)deleteImages:(id)images;
-(void)downloadImages:(id)images;
-(id)initWithUserId:(id)userId;
@end

__attribute__((visibility("hidden")))
@interface VK_TabItemInfo : XXUnknownSuperclass {
	NSString* _title;
	UIImage* _normalImage;
	UIImage* _selectedImage;
	unsigned _controllerType;
	unsigned _itemType;
}
@property(assign, nonatomic) unsigned itemType;
@property(assign, nonatomic) unsigned controllerType;
@property(retain, nonatomic) UIImage* selectedImage;
@property(retain, nonatomic) UIImage* normalImage;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_TabController : XXUnknownSuperclass <VK_StatusBarAlertViewDelegate, UITabBarControllerDelegate> {
	BOOL _showStatusBarAlertView;
	VK_StatusBarAlertView* _statusBarAlertView;
	VK_NotificationObserver* _notificationObserver;
	NSArray* _tabsData;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) UIViewController* topViewController;
@property(readonly, assign, nonatomic) VK_BaseViewController* currentBaseViewController;
@property(readonly, assign, nonatomic) VK_StatusBarAlertView* statusBarAlertView;
@property(retain, nonatomic) NSArray* tabsData;
@property(retain, nonatomic) VK_NotificationObserver* notificationObserver;
-(void).cxx_destruct;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
-(id)visibleViewControllerFrom:(id)from;
-(BOOL)shouldShowStatusBar;
-(BOOL)needToShowStatusBarAlertInCurrentViewController;
-(void)statusBarAlertView:(id)view needShow:(BOOL)show;
-(void)updateStatusBar;
-(void)updateStatusBarAlert;
-(void)setStatusBarHidden:(BOOL)hidden;
-(id)infoForCellWithType:(unsigned)type;
-(void)initStatusBarAlertView;
-(void)initTabsInfo;
-(id)internalSelectItemWithInfo:(id)info;
-(void)setup;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)awakeFromNib;
-(id)profileSlideNavigationController;
-(id)searchSlideNavigationController;
-(id)feedSlideNavigationController;
-(void)reloadTabs;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)viewDidLoad;
-(id)baseViewControllerOfTabWithType:(unsigned)type;
-(void)switchToTabWithType:(unsigned)type;
-(id)selectItemWithType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchPopularRequestsView : XXUnknownSuperclass {
	id<VK_SearchPopularRequestsViewDelegate> _delegate;
	NSArray* _popularRequests;
	NSArray* _requestsButtons;
	UIActivityIndicatorView* _activityIndicator;
	UIView* _requestsView;
	unsigned _state;
}
@property(assign, nonatomic) __weak id<VK_SearchPopularRequestsViewDelegate> delegate;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) __weak UIView* requestsView;
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) NSArray* requestsButtons;
@property(retain, nonatomic) NSArray* popularRequests;
-(void).cxx_destruct;
-(void)onRequestButtonPressed:(id)pressed;
-(void)onUpdatePopularRequests:(id)requests;
-(void)updateData;
-(void)updateDataIfNeeded;
-(void)setupSearchPopularRequestsView;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_AuthorizationCache : XXUnknownSuperclass {
	VK_ProfileInfoModel* _userInfo;
	NSString* _passKey;
}
@property(retain, nonatomic) NSString* passKey;
@property(retain, nonatomic) VK_ProfileInfoModel* userInfo;
-(void).cxx_destruct;
-(void)removeData;
-(void)loadData;
-(void)saveData;
@end

__attribute__((visibility("hidden")))
@interface VK_TableActiveFooter : XXUnknownSuperclass {
	UITableView* _tableView;
	unsigned _verticalAlign;
	float _topOffset;
	UIActivityIndicatorView* _activityIndicatorView;
	float _estimatedContentHeight;
	float _minimalContentHeight;
	NSLayoutConstraint* _activeIndicatorTopConstraint;
}
@property(assign, nonatomic) float topOffset;
@property(assign, nonatomic) unsigned verticalAlign;
@property(readonly, assign) BOOL isAnimating;
@property(assign, nonatomic) __weak UITableView* tableView;
@property(retain, nonatomic) NSLayoutConstraint* activeIndicatorTopConstraint;
@property(assign, nonatomic) float minimalContentHeight;
@property(assign, nonatomic) float estimatedContentHeight;
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicatorView;
-(void).cxx_destruct;
-(void)updateHeight;
-(void)configure;
-(void)stopAnimationWithUpdate:(BOOL)update;
-(void)startAnimationWithUpdate:(BOOL)update;
-(void)updateWithEstimatedContentHeight:(float)estimatedContentHeight andMinimalContentHeight:(float)height;
-(void)removeFromTableView;
-(void)addToTableView:(id)tableView;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TableCellProxy : XXUnknownSuperclass {
	id<VK_CellProxyConfiguration> _internalConfiguration;
	id _onSelectBlock;
	NSString* _cellId;
}
@property(readonly, assign, nonatomic) Class viewModelClass;
@property(readonly, assign, nonatomic) Class cellClass;
@property(copy, nonatomic) id onSelectBlock;
@property(retain, nonatomic) NSString* cellId;
-(void).cxx_destruct;
-(id)createViewModelWithCellItem:(id)cellItem;
-(id)createNewCell;
-(void)setConfiguration:(id)configuration;
@end

__attribute__((visibility("hidden")))
@interface VK_TableViewCellBase : XXUnknownSuperclass {
	UIView* _separatorView;
	unsigned _customSeparatorStyle;
	BOOL _isSelectable;
	BOOL _opened;
	VK_TableCellProxy* _proxy;
	VK_TableViewCellViewModel* _viewModel;
	id _data;
	id _receiptData;
	id<VK_TableViewCellBaseCellDelegate> _delegate;
	UIColor* _customSeparatorColor;
	UIView* _customSelectectionView;
	float _minViewRightConstraint;
	float _maxViewRightConstraint;
	NSString* _reuseId;
}
@property(assign, nonatomic) __weak UIView* customSelectectionView;
@property(readonly, assign, nonatomic) BOOL supportCellReordering;
@property(retain, nonatomic) UIColor* customSeparatorColor;
@property(assign, nonatomic) unsigned customSeparatorStyle;
@property(assign, nonatomic, getter=isOpened) BOOL opened;
@property(assign, nonatomic) __weak id<VK_TableViewCellBaseCellDelegate> delegate;
@property(readonly, assign, nonatomic) id receiptData;
@property(readonly, assign, nonatomic) id data;
@property(assign, nonatomic) BOOL isSelectable;
@property(readonly, assign, nonatomic) VK_TableViewCellViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_TableCellProxy* proxy;
@property(readonly, assign, nonatomic) __weak UIView* customSeparatorView;
@property(retain, nonatomic) NSString* reuseId;
@property(readonly, assign, nonatomic) float maxViewRightConstraint;
@property(readonly, assign, nonatomic) float minViewRightConstraint;
+(BOOL)internalCanHaveSeparator;
+(id)internalNibName;
+(id)createCellWithReuseId:(id)reuseId;
+(id)createCellFromNib:(id)nib;
+(void)initialize;
-(void).cxx_destruct;
-(void)cancelSwipeRecognizing;
-(void)resetSlideIfNeeded;
-(void)updateSeparatorFrame;
-(float)internalPartialSeparatorLeadingSpace;
-(BOOL)isHaveSeparator;
-(void)setup;
-(void)cellPressed;
-(void)layoutSubviews;
-(BOOL)internalNeedResetAfterDisappearing;
-(void)internalCellPressed;
-(void)internalReset;
-(void)internalUpdateProxy;
-(void)internalUpdateData;
-(void)internalSetup;
-(void)reset;
-(void)swipeClose;
-(void)swipeOpen;
-(void)prepareForReuse;
-(void)didUnhighlighted;
-(void)didHighlighted;
-(void)didSelected;
-(void)willCellAppear;
-(void)didCellDisappear;
-(id)reuseIdentifier;
-(void)updateWithItem:(id)item;
-(id)initWithFrame:(CGRect)frame;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_UserVKFriendsManager : VK_SubscriptionsBaseManager {
}
+(id)currentManager;
-(id)internalGetProfilesFromResponse:(id)response;
-(id)internalCreateRequest;
-(id)profilesUpdatingFailedNotification;
-(id)profilesChangedNotification;
-(id)internalProfilesKey;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffsViewController : VK_BaseTableViewController {
	BOOL _isStoreProductsDataLoaded;
	UIView* _noTariffsView;
	CoreTextLabel* _noTariffsTextView;
	NSLayoutConstraint* _noTariffsTextViewHeightConstraint;
}
@property(assign, nonatomic) __weak NSLayoutConstraint* noTariffsTextViewHeightConstraint;
@property(assign, nonatomic) __weak CoreTextLabel* noTariffsTextView;
@property(assign, nonatomic) __weak UIView* noTariffsView;
@property(assign, nonatomic) BOOL isStoreProductsDataLoaded;
-(void).cxx_destruct;
-(unsigned short)internalAnaliticScreen;
-(void)onTariffsStateUpdated;
-(void)onTariffUnsubscribe:(id)unsubscribe;
-(void)beginTurnOnTariff:(id)tariff;
-(void)onTariffSelected:(id)selected;
-(void)configureDataAllocator:(id)allocator;
-(id)internalCreateTableControllerConfiguration;
-(id)internalTitle;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)storeProductsDataUpdatedWithResult:(BOOL)result;
-(void)updateStoreProductsDataIfNeeded;
-(void)prepareNoTariffsViewWithText:(id)text;
-(void)reloadData;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksProviderBase : VK_DataListProvider <VK_DataWithTracksProvider> {
	BOOL _needUpdateTracksUniqueId;
	NSString* _uniqueTrackIdPrefix;
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL needUpdateTracksUniqueId;
@property(retain, nonatomic) NSString* uniqueTrackIdPrefix;
+(id)defaultTrackListProviderForTracks:(id)tracks fromIndex:(unsigned)index;
-(void).cxx_destruct;
-(id)updateTracksUniqueIds:(id)ids;
-(id)internalPrepareCustomData:(id)data;
-(id)internalPrepareNewData:(id)data;
-(id)createTrackListProviderFromTrack:(id)track;
-(id)copyWithZone:(NSZone*)zone;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_MinusPixelLayoutConstraint : XXUnknownSuperclass {
}
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_NavigationHelper : XXUnknownSuperclass {
}
+(id)shared;
-(BOOL)isAlbumAlreadyOpened:(id)opened;
-(BOOL)isArtistAlreadyOpened:(id)opened;
-(BOOL)isScreenTypeAlreadyOpened:(Class)opened;
-(id)createSearchWithQuery:(id)query andQueryType:(int)type;
-(void)openSearchByArtistWithQuery:(id)query;
-(void)openSearchWithQuery:(id)query andQueryType:(int)type;
-(BOOL)isScreenAlreadyOpenedWithPredicate:(id)predicate;
-(void)openExportSubscriptions;
-(void)openShareFriendsWithEntryId:(id)entryId andMyProfileFlag:(BOOL)flag;
-(void)openShareFriendsWithShareType:(unsigned)shareType trackModel:(id)model;
-(void)openEqualizer;
-(void)openAbout;
-(void)openTariffsIfNeeded;
-(void)openSettingsIfNeeded;
-(void)openSettings;
-(void)openTariffs;
-(void)openRecommendations:(id)recommendations;
-(void)openSubscriptionsForUserWithBaseProfileInfo:(id)baseProfileInfo;
-(void)openNewFriends:(id)friends;
-(void)openNote:(id)note;
-(void)openAlbum:(id)album;
-(void)openArtist:(id)artist;
-(void)openProfile:(id)profile;
@end

__attribute__((visibility("hidden")))
@interface VK_NavigationController : XXUnknownSuperclass <UIGestureRecognizerDelegate, UINavigationBarDelegate> {
	NSMutableArray* _delegates;
	VK_NavigationControllerDelegate* _currentNavigationControllerDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VK_NavigationControllerDelegate* currentNavigationControllerDelegate;
-(void).cxx_destruct;
-(void)_cancelInteractiveTransition:(float)transition transitionContext:(id)context;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)configureLightStyle;
-(void)popDelegate;
-(void)updateCurrentDelegate:(id)delegate;
-(void)pushDelegate:(id)delegate;
-(id)popToRootViewControllerAnimated:(BOOL)rootViewControllerAnimated;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated withDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)resetDelegates;
-(id)delegates;
@end

__attribute__((visibility("hidden")))
@interface VK_ApiClient : XXUnknownSuperclass {
	VK_RequestManager* _requestManager;
}
@property(retain, nonatomic) VK_RequestManager* requestManager;
+(id)shared;
-(void).cxx_destruct;
-(void)setup;
-(void)configurateAuthorizedApiRequest:(id)request;
-(void)configurateApiRequest:(id)request;
-(void)configurateRequest:(id)request;
-(id)requestAddBookmarkWithId:(id)anId;
-(id)requestRemoveBookmarkWithId:(id)anId;
-(id)requestBookmarks;
-(id)requestSearchAutocompletionWithQuery:(id)query;
-(id)requestHideEntry:(id)entry;
-(id)requestSimilarTracksForTrack:(id)track;
-(id)requestStatisticSendData:(id)data forPassKey:(id)passKey;
-(id)requestStatisticRegisterDevice;
-(id)requestDialogsText;
-(id)requestSecureKey;
-(id)requestSetOptions:(id)options;
-(id)requestRemoveTariff:(id)tariff;
-(id)requestAddTariff:(id)tariff;
-(id)requestAddTariff:(id)tariff withStoreId:(id)storeId andReceipt:(id)receipt;
-(id)requestTariffs;
-(id)requestRateAppEventWithName:(id)name;
-(id)requestSendInvitationStatus:(id)status blankUrl:(id)url;
-(id)requestSendInvitation:(id)invitation;
-(id)requestSetStatus:(id)status;
-(id)requestShareEntry:(id)entry comment:(id)comment targetId:(id)anId;
-(id)requestAppShare:(id)share comment:(id)comment;
-(id)requestSubscriptionRemove:(id)remove;
-(id)requestSubscriptionAdd:(id)add;
-(id)requestShareToVK:(id)vk message:(id)message targetId:(id)anId;
-(id)requestTrackLyrics:(unsigned)lyrics;
-(id)requestVKTracksData:(id)data;
-(id)requestAlbumInfo:(id)info withShuffleEnabled:(BOOL)shuffleEnabled;
-(id)requestArtistInfo:(id)info;
-(id)requestSearchPopular;
-(id)requestGroupsSearch;
-(id)requestUsersSearch;
-(id)requestUserAudioSearch;
-(id)requestAudioSearch;
-(id)requestCommonSearch;
-(id)requestExportSubscriptionsForUserId:(id)userId;
-(id)requestSubscriptionsForUserId:(id)userId withSequenceNumber:(id)sequenceNumber;
-(id)requestFollowersForUserId:(id)userId withSequenceNumber:(id)sequenceNumber;
-(id)requestUserAudioRemoveTracks:(id)tracks;
-(id)requestUserAudioAddTracks:(id)tracks;
-(id)requestUserAudioForUserId:(id)userId withShuffleEnabled:(BOOL)shuffleEnabled;
-(id)requestMoveFavoriteTrack:(id)track afterTrack:(id)track2;
-(id)requestFavoritesClearAllTracks;
-(id)requestRemoveFavoriteTracks:(id)tracks;
-(id)requestAddFavoriteTracks:(id)tracks;
-(id)requestUserFavoritesForUserId:(id)userId withShuffleEnabled:(BOOL)shuffleEnabled;
-(id)requestUserNotesForUserId:(id)userId;
-(id)requestProfileWithUserId:(id)userId;
-(id)requestFeed;
-(id)requetsAuthTokenForUserId:(id)userId accessToken:(id)token;
-(id)requestAuthStartWithRedirect:(BOOL)redirect;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ShuffleGenerator : XXUnknownSuperclass {
	int _currentCycle;
	unsigned _seed;
	unsigned _initialIndex;
	unsigned _count;
	unsigned _shuffleInitial;
	TRShuffle* _currentShuffle;
}
-(void).cxx_destruct;
-(void)updateWithRealIndicesDifference:(id)realIndicesDifference;
-(unsigned)getRealIndex:(unsigned)index;
-(void)previousCycle;
-(void)nextCycle;
-(void)resetWithCount:(unsigned)count initialIndex:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface TRShuffle : XXUnknownSuperclass {
	NSDictionary* _shuffleDictionary;
}
+(id)getShuffle:(unsigned)shuffle firstIndex:(unsigned)index withSeed:(unsigned)seed;
-(void).cxx_destruct;
-(id)compressShuffleDictionary:(id)dictionary;
-(unsigned)updateWithRealIndicesDifference:(id)realIndicesDifference;
-(id)getVirtualIndex:(unsigned)index;
-(id)getRealIndex:(unsigned)index;
-(id)initWith:(unsigned)with firstIndex:(unsigned)index withSeed:(unsigned)seed;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchViewController : VK_BaseTableViewController <VK_TableControllerDelegate> {
	NSString* _queryString;
	int _queryType;
	UIView* _noResultView;
	UILabel* _searchNoResultTextLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int queryType;
@property(retain, nonatomic) NSString* queryString;
@property(assign, nonatomic) __weak UILabel* searchNoResultTextLabel;
@property(assign, nonatomic) __weak UIView* noResultView;
-(void).cxx_destruct;
-(void)prepareDataProvider:(id)provider;
-(id)createUsersTableControllerConfigurationWithDataProvider:(id)dataProvider;
-(id)createTracksTableControllerConfigurationWithDataProvider:(id)dataProvider;
-(id)createUsersTableControllerConfiguration;
-(id)createGroupsTableControllerConfiguration;
-(id)createGlobalAudioTableControllerConfigurationByPerformer:(BOOL)performer;
-(id)createMyAudioTableControllerConfiguration;
-(void)updateNoResultView;
-(void)hideAllMessages;
-(void)dataProviderErrorReceived:(id)received error:(id)error;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderDidFetchingStarted:(id)dataProvider;
-(id)internalTitle;
-(id)internalCreateTableControllerConfiguration;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleImageCellProxy : VK_SimpleSpaceCellProxy {
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleImageCellViewModel : VK_SimpleSpaceCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleImageCell : VK_SimpleSpaceCell {
	UIImageView* _spaceImageView;
}
@property(readonly, assign, nonatomic) VK_SimpleImageCellProxy* proxy;
@property(assign, nonatomic) __weak UIImageView* spaceImageView;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(void)createViews;
-(void)layoutSubviews;
-(void)internalUpdateProxy;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_PageNotFoundView : XXUnknownSuperclass {
}
-(void)addToView:(id)view;
-(void)awakeFromNib;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsHeaderCellProxy : VK_TableCellProxy {
	NSString* _text;
	float _textExtraHeight;
}
@property(assign, nonatomic) float textExtraHeight;
@property(retain, nonatomic) NSString* text;
+(void)initialize;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsHeaderCellViewModel : VK_TableViewCellViewModel {
	float _settingsTextHeight;
}
@property(assign, nonatomic) float settingsTextHeight;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsHeaderCell : VK_TableViewCellBase {
	VK_BaseLabel* _nameLabel;
}
@property(assign, nonatomic) __weak VK_BaseLabel* nameLabel;
@property(readonly, assign, nonatomic) VK_SettingsHeaderCellProxy* proxy;
+(BOOL)internalCanHaveSeparator;
+(id)internalNibName;
-(void).cxx_destruct;
-(void)configureNameLabel;
-(void)internalUpdateData;
@end

__attribute__((visibility("hidden")))
@interface VK_AuthorizationHandler : XXUnknownSuperclass <VK_DataAuthorizationHandler> {
	BOOL _inProcess;
	BOOL _needHideAuthVCAfterCompletion;
	id _completeBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL needHideAuthVCAfterCompletion;
@property(readonly, assign) VK_LoaderViewController* authLoaderViewController;
@property(copy, nonatomic) id completeBlock;
@property(assign, nonatomic) BOOL inProcess;
+(id)shared;
-(void).cxx_destruct;
-(void)startVKAuthorization;
-(void)completeWithUserId:(id)userId andAccessToken:(id)token;
-(void)updatePassKey;
-(void)setup;
-(void)authorizationCompletedWithUserId:(id)userId andAccessToken:(id)token;
-(void)startLoginWithCompletion:(id)completion;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_InlineSearchConfiguration : XXUnknownSuperclass {
	int _searchMilisecondsDelay;
	NSString* _searchPlaceholderText;
	id<VK_TableControllerConfiguration> _tableControllerConfiguration;
	id<VK_InlineSearchDataProvider> _dataProvider;
}
@property(retain, nonatomic) id<VK_InlineSearchDataProvider> dataProvider;
@property(retain, nonatomic) id<VK_TableControllerConfiguration> tableControllerConfiguration;
@property(copy, nonatomic) NSString* searchPlaceholderText;
@property(assign, nonatomic) int searchMilisecondsDelay;
+(id)usersSearchConfigurationWithDataProvider:(id)dataProvider showRightButton:(BOOL)button onSelectBlock:(id)block;
+(id)musicSearchConfigurationWithDataProvider:(id)dataProvider;
+(id)exportSubscriptionsSearchConfiguration;
+(id)friendsSearchConfigurationOnSelectBlock:(id)block showRightButton:(BOOL)button type:(unsigned)type;
+(id)audioSearchConfigurationWithMyAudioFlag:(BOOL)myAudioFlag;
+(id)favoriteSearchConfiguration;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumInfoModel : VK_ModelWithAlbumCoverBase <EKMappingProtocol> {
	NSString* _albumId;
	NSString* _title;
	unsigned _releaseYear;
	NSString* _artistName;
	NSString* _artistId;
	NSArray* _genres;
	NSArray* _tracks;
}
@property(retain, nonatomic) NSArray* tracks;
@property(retain, nonatomic) NSArray* genres;
@property(retain, nonatomic) NSString* artistId;
@property(retain, nonatomic) NSString* artistName;
@property(assign, nonatomic) unsigned releaseYear;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* albumId;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumModel : XXUnknownSuperclass {
	NSString* _albumId;
	VK_AlbumInfoModel* _info;
}
@property(retain, nonatomic) VK_AlbumInfoModel* info;
@property(readonly, assign, nonatomic) NSString* albumId;
-(void).cxx_destruct;
-(void)updateAlbumInfoWithCompletion:(id)completion;
-(id)createTracksProvider;
-(id)initWithAlbumId:(id)albumId;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedAlbumCollectionViewCell : XXUnknownSuperclass {
	NSCache* _coversCache;
	UIImageView* _albumImageView;
	UILabel* _titleLabel;
	UILabel* _artistLabel;
}
@property(retain, nonatomic) NSCache* coversCache;
@property(retain, nonatomic) UILabel* artistLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIImageView* albumImageView;
+(id)reuseIdentifier;
-(void).cxx_destruct;
-(void)onCellDidEndShowing;
-(void)setConfigurationWithAlbum:(id)album;
-(void)createViews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchUserQueriesTitleCellProxy : VK_TableCellProxy {
	id _onClearButtonPressed;
}
@property(copy, nonatomic) id onClearButtonPressed;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchUserQueriesTitleCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchUserQueriesTitleCell : VK_TableViewCellBase {
	UILabel* _titleLabel;
	UIButton* _clearButton;
}
@property(assign, nonatomic) __weak UIButton* clearButton;
@property(assign, nonatomic) __weak UILabel* titleLabel;
@property(readonly, assign, nonatomic) VK_SearchUserQueriesTitleCellProxy* proxy;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)onClearButtonPressed;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_RecommendationTracksViewController : VK_BaseTableViewController {
	VK_FeedRecommendationBlockModel* _blockModel;
	VK_TracksProviderBase* _dataProvider;
}
@property(retain, nonatomic) VK_FeedRecommendationBlockModel* blockModel;
@property(retain, nonatomic) VK_TracksProviderBase* dataProvider;
-(void).cxx_destruct;
-(id)internalCreateTableControllerConfiguration;
-(unsigned short)internalAnaliticScreen;
-(void)internalSetup;
-(id)internalTitle;
@end

__attribute__((visibility("hidden")))
@interface VK_CryptService : XXUnknownSuperclass {
}
+(id)sharedService;
-(BOOL)transformBuffer:(char*)buffer bufferLegth:(unsigned)legth startPosition:(long long)position key:(id)key;
-(void)xorTransform:(char*)transform bufferLength:(unsigned)length startPosition:(long long)position andKey:(id)key;
-(BOOL)xorTransform:(id)transform withKey:(id)key;
-(id)decrypt3DES:(id)des withKey:(id)key;
-(id)encrypt3DES:(id)des withKey:(id)key;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface CachedHTTPDataSourceSandboxOperation : XXUnknownSuperclass {
	BOOL _isWaiting;
	BOOL _isExtracted;
	BOOL _stopRunLoop;
	NSString* _identifier;
	NSTimer* _sandboxTimer;
	STKDataSource<STKAsyncLoadingDataSource>* _dataSource;
}
@property(retain, nonatomic) NSString* identifier;
@property(retain, nonatomic) STKDataSource<STKAsyncLoadingDataSource>* dataSource;
@property(retain, nonatomic) NSTimer* sandboxTimer;
@property(assign, nonatomic) BOOL stopRunLoop;
@property(assign, nonatomic) BOOL isExtracted;
@property(assign, nonatomic) BOOL isWaiting;
-(void).cxx_destruct;
-(void)finishRunLoop;
-(void)processRunLoop;
-(void)keepAliveTimeout:(id)timeout;
-(void)configureWithDataSource:(id)dataSource andIdentifier:(id)identifier;
-(id)extractDataSource;
-(void)start;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(id)initWithDataSource:(id)dataSource andIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VK_SignStatusView : XXUnknownSuperclass {
}
-(void)hideSign;
-(void)showSign;
-(id)signImageViewWithFrame:(CGRect)frame;
-(id)initWithRealFrame;
@end

__attribute__((visibility("hidden")))
@interface VK_TableViewCellGestureRecognizer : XXUnknownSuperclass {
	VK_TableViewCellBase* _cell;
}
@property(assign, nonatomic) __weak VK_TableViewCellBase* cell;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ResourcesManager : XXUnknownSuperclass {
	UIImage* _repostIconImage;
	UIImage* _feedNotePostAvatarPlaceholder;
	UIImage* _feedNoteRepostAvatarPlaceholder;
	UIImage* _userAvatarPlaceholder;
	UIImage* _feedNoteMoreActionsImage;
	UIImage* _tabBarShadowImage;
	UIImage* _albumSmallImage;
	UIImage* _albumMediumImage;
	UIImage* _albumLargeImage;
	UIImage* _userShowDetailsButtonImage;
	UIImage* _splashCellImage;
}
@property(retain, nonatomic) UIImage* tabBarShadowImage;
@property(retain, nonatomic) UIImage* splashCellImage;
@property(retain, nonatomic) UIImage* feedNoteMoreActionsImage;
@property(retain, nonatomic) UIImage* userShowDetailsButtonImage;
@property(retain, nonatomic) UIImage* userAvatarPlaceholder;
@property(retain, nonatomic) UIImage* feedNoteRepostAvatarPlaceholder;
@property(retain, nonatomic) UIImage* feedNotePostAvatarPlaceholder;
@property(retain, nonatomic) UIImage* repostIconImage;
@property(retain, nonatomic) UIImage* albumLargeImage;
@property(retain, nonatomic) UIImage* albumMediumImage;
@property(retain, nonatomic) UIImage* albumSmallImage;
+(void)initialize;
+(id)shared;
-(void).cxx_destruct;
-(id)authorizationBackgroundUrl;
-(void)checkCachedImageWithUrl:(id)url andCompletion:(id)completion;
-(void)setTrackCoverImageWithUrl:(id)url andCompletion:(id)completion;
-(void)showAlbumCoverInImageView:(id)imageView withModel:(id)model size:(unsigned)size andCompletion:(id)completion;
-(id)albumCoverUrlWithModel:(id)model andSize:(unsigned)size;
-(id)albumCoverPlaceholderImageWithSize:(unsigned)size;
-(void)setup;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_InlineSearchAnimationManager : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	BOOL _scrollToTopToRestore;
	unsigned _direction;
	VK_SearchView* _searchView;
	id<VK_InlineSearchParent> _searchViewParentViewController;
	UIView* _searchViewInitialContainer;
	NSArray* _searchViewInitialConstraints;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VK_InlineSearchParent> searchViewParentViewController;
@property(retain, nonatomic) VK_SearchView* searchView;
@property(assign, nonatomic) unsigned direction;
@property(assign, nonatomic) BOOL scrollToTopToRestore;
@property(retain, nonatomic) NSArray* searchViewInitialConstraints;
@property(assign, nonatomic) __weak UIView* searchViewInitialContainer;
-(void).cxx_destruct;
-(void)cleanup;
-(void)moveSearchViewToInitialContainer;
-(void)moveSearchViewToInlineSearchViewController:(id)inlineSearchViewController;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(void)restoreSearchViewIfNeeded;
@end

__attribute__((visibility("hidden")))
@interface VK_TableController : XXUnknownSuperclass <VK_TableViewCellBaseCellDelegate, VK_TableControllerCellReorderingManagerDelegate, VK_DataProviderDelegate, UITableViewDelegate, UITableViewDataSource> {
	VK_TableActiveFooter* _tableFooter;
	id<VK_TableControllerConfiguration> _internalConfiguration;
	BOOL _automaticUpdateContentInset;
	BOOL _isReorderingEnabled;
	BOOL _canShowLoader;
	BOOL _enableDataUpdating;
	BOOL _isAllocating;
	UIRefreshControl* _refreshControl;
	unsigned _fetchingDataCount;
	id<VK_TableControllerDelegate> _delegate;
	unsigned _distanceToBottomForUpdating;
	id<VK_DataProvider> _dataProvider;
	id<VK_TableViewDataAllocator> _dataAllocator;
	UITableView* _tableView;
	VK_TableControllerCellReorderingManager* _cellReorderingManager;
	float _minimalContentHeight;
	NSMutableArray* _sectionsItems;
	VK_TableViewCellBase* _currentSwipedCell;
	float _estimatedContentHeight;
	NSMutableDictionary* _cachedCells;
	NSMutableArray* _cellsHeights;
	VK_TableViewCellItem* _lastReoderingSourceCellItem;
	VK_TableViewCellItem* _lastReoderingDestinationCellItem;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSArray* actualSectionsItems;
@property(assign, nonatomic) BOOL enableDataUpdating;
@property(assign, nonatomic) float minimalContentHeight;
@property(assign, nonatomic) BOOL canShowLoader;
@property(assign, nonatomic) BOOL isReorderingEnabled;
@property(retain, nonatomic) VK_TableControllerCellReorderingManager* cellReorderingManager;
@property(readonly, assign, nonatomic) VK_TableActiveFooter* tableFooter;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) id<VK_TableViewDataAllocator> dataAllocator;
@property(retain, nonatomic) id<VK_DataProvider> dataProvider;
@property(assign, nonatomic) unsigned distanceToBottomForUpdating;
@property(assign, nonatomic) __weak id<VK_TableControllerDelegate> delegate;
@property(assign, nonatomic) unsigned fetchingDataCount;
@property(assign, nonatomic) __weak UIRefreshControl* refreshControl;
@property(assign, nonatomic) BOOL automaticUpdateContentInset;
@property(retain, nonatomic) VK_TableViewCellItem* lastReoderingDestinationCellItem;
@property(retain, nonatomic) VK_TableViewCellItem* lastReoderingSourceCellItem;
@property(assign, nonatomic) BOOL isAllocating;
@property(retain, nonatomic) NSMutableArray* cellsHeights;
@property(retain, nonatomic) NSMutableDictionary* cachedCells;
@property(assign, nonatomic) float estimatedContentHeight;
@property(retain, nonatomic) VK_TableViewCellBase* currentSwipedCell;
@property(retain, nonatomic) NSMutableArray* sectionsItems;
-(void).cxx_destruct;
-(void)tableControllerCellReorderingManager:(id)manager willMoveCellFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableControllerCellReorderingManager:(id)manager didFinishReorderingFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)tableControllerCellReorderingManager:(id)manager shouldStartReorderingAtIndexPath:(id)indexPath;
-(id)lastNotEmptyCellItemInSectionItem:(id)sectionItem;
-(id)firstNotEmptyCellItemInSectionItem:(id)sectionItem;
-(void)tableControllerCellReorderingManager:(id)manager didStartReorderingAtIndexPath:(id)indexPath;
-(void)delegateNotificateDidReorderFromCellItem:(id)delegateNotificate atIndexPath:(id)indexPath toCellItem:(id)cellItem atIndexPath:(id)indexPath4;
-(void)onWillResetCurrentTableView;
-(void)onDidSetNewTableView;
-(void)stopActivityIndicator;
-(void)startActivityIndicator;
-(void)allocateCellsWithCompletion:(id)completion;
-(void)didDataUpdated;
-(void)fetchMoreData:(BOOL)data withParams:(id)params;
-(void)fetchMoreData:(BOOL)data;
-(BOOL)iReadyToFetching;
-(void)fetchMoreDataIfNeeded;
-(id)cachedCellForProxy:(id)proxy;
-(id)createCellForProxy:(id)proxy;
-(id)dequeueReusableCellForProxy:(id)proxy;
-(void)configurateCell:(id)cell withCellItem:(id)cellItem;
-(BOOL)isNeedDataUpdate;
-(id)cellItemForIndexPath:(id)indexPath;
-(id)sectionForIndex:(int)index;
-(unsigned)cellsCountInSection:(unsigned)section;
-(unsigned)sectionsCount;
-(void)setup_VK_TableController;
-(void)updateFooterIfNeeded;
-(void)removeSectionsWithIndcies:(id)indcies withCompletion:(id)completion;
-(void)removeSectionWithIndex:(unsigned)index withCompletion:(id)completion;
-(void)removeCell:(id)cell withCompletion:(id)completion;
-(void)closeCellsIfNeeded;
-(void)updateTableViewContentInset;
-(void)updateTableViewContentInsetIfNeeded;
-(void)reloadTable;
-(void)reallocateData;
-(void)refreshData;
-(void)reloadData;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dataProviderDidFetchStatusChanged:(id)dataProvider;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderDidFetchingStarted:(id)dataProvider;
-(void)tableCellTapped:(id)tapped;
-(void)tableCellDidFinishSwiping:(id)tableCell;
-(void)tableCellDidStartSwiping:(id)tableCell;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didUnhighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didHighlightRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)addCachedCellsForProxy:(id)proxy;
-(void)setConfiguration:(id)configuration;
-(void)cleanupTableView;
-(void)dealloc;
-(id)init;
-(void)clearTable;
-(void)setDataProviderWithReloadingIfNeeded:(id)reloadingIfNeeded;
@end

__attribute__((visibility("hidden")))
@interface VK_EqualizerViewController : VK_BaseTableViewController <VK_EqualizerSliderDelegate> {
	VK_EqualizerView* _equlizerView;
	NSLayoutConstraint* _equalizerViewHeightConstraint;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak NSLayoutConstraint* equalizerViewHeightConstraint;
@property(assign, nonatomic) __weak VK_EqualizerView* equlizerView;
-(void).cxx_destruct;
-(void)slidersDidChangeValues:(id)sliders;
-(void)configureDataAllocator:(id)allocator;
-(unsigned short)internalAnaliticScreen;
-(id)internalCreateTableControllerConfiguration;
-(id)internalTitle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_PlayerActionsView : VK_NibView <AudioPlayerDelegate> {
	id _broadcastingChangedStateBlock;
	id _loopChangedStateBlock;
	id _shuffleChangedStateBlock;
	id _recommendationsTapBlock;
	VK_Button* _broadcastButton;
	VK_Button* _shuffleButton;
	VK_Button* _loopButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id recommendationsTapBlock;
@property(copy, nonatomic) id shuffleChangedStateBlock;
@property(copy, nonatomic) id loopChangedStateBlock;
@property(copy, nonatomic) id broadcastingChangedStateBlock;
@property(assign, nonatomic) __weak VK_Button* loopButton;
@property(assign, nonatomic) __weak VK_Button* shuffleButton;
@property(assign, nonatomic) __weak VK_Button* broadcastButton;
-(void).cxx_destruct;
-(void)recommendationsButtonPressed:(id)pressed;
-(void)loopButtonPressed:(id)pressed;
-(void)shuffleButtonPressed:(id)pressed;
-(void)broadcastButtonPressed:(id)pressed;
-(void)updateLoopButtonState;
-(void)updateShuffleButtonState;
-(void)updateBroadcastButtonState;
-(void)internalConfigureView;
-(id)internalNibName;
-(void)dealloc;
-(void)updateState;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackListViewController : VK_AudioPlayerModalViewController {
	BOOL _needToMoveToPlayingTrack;
}
@property(assign, nonatomic) BOOL needToMoveToPlayingTrack;
-(void)moveToPlayingTrack;
-(void)tableControllerCellItemsAllocated:(id)allocated;
-(void)internalCloseModalViewController;
-(id)internalCreateTableControllerConfiguration;
-(unsigned short)internalAnaliticScreen;
-(id)internalTitle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioPlayerModalViewController : VK_BaseTableViewController {
	id _data;
}
@property(retain, nonatomic) id data;
-(void).cxx_destruct;
-(void)statusBarTouched;
-(void)closeModalViewController;
-(void)internalConfigureNavigationBarButtons;
-(void)internalCloseModalViewController;
-(UIEdgeInsets)internalAdditionalTableContentInset;
-(void)internalConfigureTitleLabel:(id)label;
-(void)prepareNavigationBarButtons;
-(void)internalSetup;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface VK_InlineSearchViewController : VK_BaseTableViewController <UIGestureRecognizerDelegate> {
	BOOL _needToHandleFocus;
	UIView* _containerView;
	VK_InlineSearchConfiguration* _configuration;
	UIView* _navigationBarContainerView;
	VK_Button* _cancelButtonView;
	UIView* _fadeView;
	UIView* _noResultsView;
	VK_SearchView* _searchView;
	NSLayoutConstraint* _fakeNavigationBarShadowViewHeightConstraint;
	NSLayoutConstraint* _noResultsViewCenterYConstraint;
	NSArray* _searchViewOriginalConstraints;
	NSArray* _searchViewNavigationBarConstraints;
	unsigned _state;
	BFCancellationTokenSource* _searchCancellationTokenSource;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VK_InlineSearchConfiguration* configuration;
@property(assign, nonatomic) BOOL needToHandleFocus;
@property(retain, nonatomic) BFCancellationTokenSource* searchCancellationTokenSource;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSArray* searchViewNavigationBarConstraints;
@property(retain, nonatomic) NSArray* searchViewOriginalConstraints;
@property(assign, nonatomic) __weak NSLayoutConstraint* noResultsViewCenterYConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* fakeNavigationBarShadowViewHeightConstraint;
@property(assign, nonatomic) __weak VK_SearchView* searchView;
@property(assign, nonatomic) __weak UIView* noResultsView;
@property(assign, nonatomic) __weak UIView* fadeView;
@property(assign, nonatomic) __weak VK_Button* cancelButtonView;
@property(assign, nonatomic) __weak UIView* navigationBarContainerView;
@property(assign, nonatomic) __weak UIView* containerView;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderDidFetchingStarted:(id)dataProvider;
-(void)actualizeState;
-(void)cancelButtonPressed:(id)pressed;
-(void)searchWithText:(id)text;
-(void)searchTextChanged:(id)changed;
-(void)dismiss;
-(void)configureStateAnimated:(BOOL)animated;
-(void)configureViews;
-(void)configureForCurrentScreenSize;
-(id)internalCreateTableControllerConfiguration;
-(void)internalSetup;
-(void)moveSearchViewWithPositionFlag:(BOOL)positionFlag;
-(void)addSearchView:(id)view withFrame:(CGRect)frame;
-(void)viewDidLayoutSubviews;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_QueriesVariantsDataAllocator : XXUnknownSuperclass <VK_TableViewDataAllocator> {
	BOOL _isUserHistory;
	VK_SearchUserQueriesTitleCellProxy* _searchUserQueriesTitleCellProxy;
	VK_SearchQueryVariantCellProxy* _searchVariantCellProxy;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VK_SearchQueryVariantCellProxy* searchVariantCellProxy;
@property(readonly, assign, nonatomic) VK_SearchUserQueriesTitleCellProxy* searchUserQueriesTitleCellProxy;
@property(assign, nonatomic) BOOL isUserHistory;
-(void).cxx_destruct;
-(id)cellItemForUserHistoryTitle;
-(id)cellItemForQueryVariant:(id)queryVariant;
-(id)allocateCellsWithData:(id)data;
-(void)setupVK_QueriesVariantsDataAllocator;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumTracksProvider : VK_ShuffleableTracksProvider {
	NSString* _albumId;
	NSArray* _customTracks;
}
@property(retain, nonatomic) NSArray* customTracks;
@property(readonly, assign, nonatomic) NSString* albumId;
-(void).cxx_destruct;
-(id)createTrackListProviderFromTrack:(id)track;
-(id)prepareTracksData:(id)data;
-(id)internalPrepareCustomData:(id)data;
-(id)internalUpdateDataAfterMerge:(id)merge;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreatePagedRequestWithShuffleEnabled:(BOOL)shuffleEnabled;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithAlbumId:(id)albumId;
@end

__attribute__((visibility("hidden")))
@interface VK_TimeManager : VK_BaseManager {
	BOOL _isValidTime;
	NSTimer* _timerForTimeValidation;
	double _lastServerTime;
	double _lastValidTime;
	double _lastServerAbsoluteTime;
}
@property(readonly, assign, nonatomic) double absoluteTime;
@property(readonly, assign, nonatomic) double actualTime;
@property(readonly, assign, nonatomic) BOOL isValidTime;
@property(readonly, assign, nonatomic) double serverTime;
@property(readonly, assign, nonatomic) double localTime;
@property(retain, nonatomic) NSTimer* timerForTimeValidation;
@property(assign, nonatomic) double lastServerAbsoluteTime;
@property(assign, nonatomic) double lastValidTime;
@property(assign, nonatomic) double lastServerTime;
+(id)shared;
-(void).cxx_destruct;
-(void)setIsValidTime:(BOOL)time;
-(void)onValidateTimeOffline;
-(void)onValidateTimeOnline;
-(void)saveData;
-(void)loadData;
-(void)setupServerTime:(double)time;
-(void)startOnlineValidation;
-(void)startOfflineValidation;
-(void)resetTimer;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_LogAssertionHangler : XXUnknownSuperclass {
}
-(void)handleFailureInFunction:(id)function file:(id)file lineNumber:(int)number description:(id)description;
-(void)handleFailureInMethod:(SEL)method object:(id)object file:(id)file lineNumber:(int)number description:(id)description;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedMonthNewsCellProxy : VK_TableCellProxy {
	id _openAlbumActionsBlock;
}
@property(copy, nonatomic) id openAlbumActionsBlock;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedMonthNewsCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedMonthNewsCell : VK_TableViewCellBase <UICollectionViewDelegate, UICollectionViewDataSource> {
	UICollectionView* _collectionView;
	NSArray* _albumsData;
	NSCache* _coversCache;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSCache* coversCache;
@property(readonly, assign, nonatomic) VK_FeedMonthNewsBlockModel* data;
@property(retain, nonatomic) NSArray* albumsData;
@property(retain, nonatomic) UICollectionView* collectionView;
@property(readonly, assign, nonatomic) VK_FeedMonthNewsCellProxy* proxy;
-(void).cxx_destruct;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(void)createViews;
-(void)internalUpdateProxy;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileModel : XXUnknownSuperclass {
	VK_ProfileInfoModel* _info;
	NSString* _userId;
}
@property(readonly, assign, nonatomic) NSString* userId;
@property(retain, nonatomic) VK_ProfileInfoModel* info;
-(void).cxx_destruct;
-(id)createExportSubscriptionsDataProviderWithType:(unsigned)type;
-(id)createSubscriptionsDataProviderWithType:(unsigned)type;
-(id)createNotesDataProvider;
-(id)createFavoritesDataProvider;
-(id)createAudioDataProvider;
-(void)updateProfileInfoWithCompletion:(id)completion;
-(id)initWithUserId:(id)userId;
-(id)initWithUserId:(id)userId andProfileInfoModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackFileManager : XXUnknownSuperclass {
	NSFileManager* _fileManager;
	NSString* _databasePath;
}
-(void).cxx_destruct;
-(BOOL)deleteAllTracks:(id*)tracks;
-(id)relativeTrackPath:(id)path;
-(id)absoluteTrackPath:(id)path;
-(id)trackFilePath:(id)path;
-(BOOL)writeTrackFileData:(id)data data:(id)data2;
-(void)deleteTrackFile:(id)file;
-(BOOL)readTrackFileData:(id)data data:(id*)data2 error:(id*)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoriteInlineSearchDataProvider : VK_LocalInlineSearchDataProvider <VK_DataWithTracksProvider> {
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)internalSearchPredicateWithQuery:(id)query;
-(id)internalSearchableItems;
-(id)createTrackListProviderFromTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_BarAnimationLayer : XXUnknownSuperclass {
	BOOL _needToStartAnimation;
	float _barCornerRadius;
	double _animationDuration;
	double _animationTimeOffset;
}
@property(assign, nonatomic) BOOL needToStartAnimation;
@property(assign, nonatomic) float barCornerRadius;
@property(assign, nonatomic) double animationTimeOffset;
@property(assign, nonatomic) double animationDuration;
-(void)interruptAnimationWithKey:(id)key;
-(void)addRestoreAnimation;
-(void)addBarAnimation;
-(void)stopAnimation;
-(void)startAnimation;
-(id)defaultPath;
@end

__attribute__((visibility("hidden")))
@interface VK_WaveAnimationView : XXUnknownSuperclass {
	NSArray* _bars;
	CALayer* _transformLayer;
	BOOL _animationInited;
	BOOL _animating;
	UIColor* _color;
	float _barCornerRadius;
}
@property(assign, nonatomic) float barCornerRadius;
@property(retain, nonatomic) UIColor* color;
@property(readonly, assign, nonatomic, getter=isAnimating) BOOL animating;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)initAnimationIfNeeded;
-(id)barAnimationLayerWithFrame:(CGRect)frame animationDuration:(double)duration animationTimeOffset:(double)offset;
-(void)resetAnimation;
-(void)stopAnimation;
-(void)startAnimation;
-(id)initWithFrame:(CGRect)frame;
-(void)awakeFromNib;
-(void)setup;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackListProviderOptions : XXUnknownSuperclass {
	BOOL _shuffleEnabled;
	BOOL _loopEnabled;
}
@property(readonly, assign, nonatomic) BOOL loopEnabled;
@property(readonly, assign, nonatomic) BOOL shuffleEnabled;
+(id)optionsWithDictionary:(id)dictionary;
+(id)defaultOptions;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedTableControllerConfiguration : VK_TableControllerBaseConfiguration {
	id<VK_FeedDataProvider> _feedDataProvider;
	id _prepareDataAllocatorBlock;
}
@property(copy, nonatomic) id prepareDataAllocatorBlock;
@property(retain, nonatomic) id<VK_FeedDataProvider> feedDataProvider;
-(void).cxx_destruct;
-(void)trackShowAllButtonPressed:(int)pressed;
-(void)prepareMonthNewsCells:(id)cells;
-(void)prepareNewReleaseCells:(id)cells;
-(void)prepareNewFriendsCells:(id)cells;
-(void)prepareRecommendationCells:(id)cells;
-(void)createFeedTrackListProviderForTrackCellConfiguration:(id)trackCellConfiguration;
-(void)preparePostCells:(id)cells;
-(void)applyToTableController:(id)tableController;
-(id)internalDataProvider;
-(id)internalTableViewDataAllocator;
@end

__attribute__((visibility("hidden")))
@interface VK_ShuffleableTrackListProvider : VK_SimpleTrackListProvider <VK_ShuffleableTrackListProvider> {
	BOOL _shuffled;
}
@property(readonly, assign, nonatomic) id tracksFilter;
@property(readonly, assign, nonatomic) VK_TrackListProviderOptions* options;
@property(readonly, assign, nonatomic) NSArray* tracks;
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL shuffled;
-(void)internalUnshuffleFromTrack:(id)track;
-(void)internalShuffleFromTrack:(id)track;
-(id)internalOptions;
-(void)internalSetup;
-(void)unshuffleFromTrack:(id)track;
-(void)shuffleFromTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_EqualizerDataAllocator : VK_SimpleTableViewDataAllocator {
	id _onEqualizerChangedBlock;
	id _onEqualizerModTapBlock;
}
@property(copy, nonatomic) id onEqualizerModTapBlock;
@property(copy, nonatomic) id onEqualizerChangedBlock;
-(void).cxx_destruct;
-(id)spaceCellItem;
-(id)createEqualizerSection;
-(UIEdgeInsets)tableInsets;
-(id)allocateCellsWithData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchTitleCellProxy : VK_SimpleTitleCellProxy {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchTitleCell : VK_SimpleTitleCell {
	UIImageView* _arrowIcon;
}
@property(assign, nonatomic) __weak UIImageView* arrowIcon;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfilesProviderBase : VK_DataProvider {
	NSString* _userId;
}
@property(readonly, assign, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(BOOL)isAllDataLoaded;
-(id)data;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithUserId:(id)userId;
@end

__attribute__((visibility("hidden")))
@interface VK_UserOwnerProviderBase : VK_ProfilesProviderBase {
	unsigned _subscriptionsType;
}
@property(assign, nonatomic) unsigned subscriptionsType;
@property(readonly, assign, nonatomic) VK_SubscriptionsBaseManager* manager;
-(void)updateDataIfNeeded;
-(void)profilesUpdatingDidFailed:(id)profilesUpdating;
-(void)updateProfilesWithLoadingFlag:(BOOL)loadingFlag;
-(void)profilesDidUpdated;
-(void)internalSetup;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VK_UserSubscriptionsProvider : VK_UserOwnerProviderBase {
}
-(id)manager;
@end

__attribute__((visibility("hidden")))
@interface VK_UserExportSubscriptionsProvider : VK_UserOwnerProviderBase {
}
-(id)manager;
@end

__attribute__((visibility("hidden")))
@interface VK_TableControllerCellReorderingManager : XXUnknownSuperclass {
	BOOL _isReorderingEnabled;
	id<VK_TableControllerCellReorderingManagerDelegate> _delegate;
	UITableView* _tableView;
	NSSet* _unreorderableRows;
	NSSet* _invisibleRows;
	UILongPressGestureRecognizer* _longPressGestureRecognizer;
	NSIndexPath* _startCellIndexPath;
	NSIndexPath* _movingCellIndexPath;
	VK_TableViewCellBase* _movingCell;
	UIView* _movingView;
	UIView* _cellContentView;
	NSNumber* _lastTouchLocation;
	VK_TableReorderingManagerScrollParameters _scrollParameters;
}
@property(assign, nonatomic) VK_TableReorderingManagerScrollParameters scrollParameters;
@property(assign, nonatomic) BOOL isReorderingEnabled;
@property(retain, nonatomic) NSSet* invisibleRows;
@property(retain, nonatomic) NSSet* unreorderableRows;
@property(assign, nonatomic) __weak UITableView* tableView;
@property(assign, nonatomic) __weak id<VK_TableControllerCellReorderingManagerDelegate> delegate;
@property(retain, nonatomic) NSNumber* lastTouchLocation;
@property(assign, nonatomic) __weak UIView* cellContentView;
@property(assign, nonatomic) __weak UIView* movingView;
@property(assign, nonatomic) __weak VK_TableViewCellBase* movingCell;
@property(retain, nonatomic) NSIndexPath* movingCellIndexPath;
@property(retain, nonatomic) NSIndexPath* startCellIndexPath;
@property(retain, nonatomic) UILongPressGestureRecognizer* longPressGestureRecognizer;
-(void).cxx_destruct;
-(void)longPressGestureRecognized:(id)recognized;
-(void)finishCellMoving;
-(void)adjustContentOffsetIfNeededWithTouchLocation:(CGPoint)touchLocation;
-(void)moveCellToTouchLocation:(CGPoint)touchLocation;
-(void)startCellMovingAtTouchLocation:(CGPoint)touchLocation;
-(void)setAlpha:(float)alpha ofRows:(id)rows animated:(BOOL)animated;
-(BOOL)canMoveCellToIndexPath:(id)indexPath;
-(BOOL)canReorderCellAtIndexPath:(id)indexPath;
-(void)restoreCellAfterMoving:(id)moving;
-(id)movingViewFromCell:(id)cell;
-(void)reload;
-(void)setup;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_RegistrationHandler : XXUnknownSuperclass <VK_RegistrationViewControllerDelegate> {
	id _registrationCompletionBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id registrationCompletionBlock;
+(id)shared;
-(void).cxx_destruct;
-(void)completeRegistrationWithRegisteredFlag:(BOOL)registeredFlag;
-(void)registrationViewControllerRegistrationFinished:(id)finished;
-(void)registrationViewControllerRegistrationCanceled:(id)canceled;
-(void)openRegistrationWithCompletionBlock:(id)completionBlock;
@end

__attribute__((visibility("hidden")))
@interface VK_PlayerProgressSlider : XXUnknownSuperclass {
	id<VK_PlayerProgressSliderDelegate> _trdelegate;
}
@property(assign, nonatomic) __weak id<VK_PlayerProgressSliderDelegate> trdelegate;
-(void).cxx_destruct;
-(void)cancelSlide;
-(void)cancelTrackingWithEvent:(id)event;
-(void)endTrackingWithTouch:(id)touch withEvent:(id)event;
-(BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
-(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_ContainerView : VK_NibViewBase {
	NSString* _contentViewClass;
}
@property(retain, nonatomic) NSString* contentViewClass;
-(void).cxx_destruct;
-(id)internalLoadContentView;
@end

__attribute__((visibility("hidden")))
@interface VK_DataModel : XXUnknownSuperclass {
	VK_ProfileInfoModel* _userInfo;
	NSString* _passKey;
	NSString* _userId;
	VK_TempUserData* _temp;
	VK_FavoritesManager* _favoritesManager;
	VK_TariffsManager* _tariffsManager;
	VK_SubscriptionsManager* _subscriptionsManager;
	VK_UserSettingsManager* _settings;
	VK_MyAudioManager* _myAudioManager;
	VK_TracksSDKInfoManager* _tracksSDKInfoManager;
	VK_UserVKFriendsManager* _userVKFriendsManager;
	VK_UserSubscriptionsManager* _userSubscriptionsManager;
	VK_BookmarksManager* _bookmarksManager;
	NSMutableDictionary* _profiles;
	NSMutableDictionary* _artists;
	NSMutableDictionary* _albums;
	NSTimer* _userTimer;
}
@property(readonly, assign, nonatomic) BOOL isNewUser;
@property(readonly, assign, nonatomic) VK_BookmarksManager* bookmarksManager;
@property(readonly, assign, nonatomic) VK_UserSubscriptionsManager* userSubscriptionsManager;
@property(readonly, assign, nonatomic) VK_UserVKFriendsManager* userVKFriendsManager;
@property(readonly, assign, nonatomic) VK_TracksSDKInfoManager* tracksSDKInfoManager;
@property(readonly, assign, nonatomic) VK_MyAudioManager* myAudioManager;
@property(readonly, assign, nonatomic) VK_UserSettingsManager* settings;
@property(readonly, assign, nonatomic) VK_SubscriptionsManager* subscriptionsManager;
@property(readonly, assign, nonatomic) VK_TariffsManager* tariffsManager;
@property(readonly, assign, nonatomic) VK_FavoritesManager* favoritesManager;
@property(readonly, assign, nonatomic) VK_TempUserData* temp;
@property(readonly, assign, nonatomic) NSString* userId;
@property(retain, nonatomic) NSString* passKey;
@property(retain, nonatomic) VK_ProfileInfoModel* userInfo;
@property(readonly, assign, nonatomic) VK_ProfileModel* myProfileModel;
@property(retain, nonatomic) NSTimer* userTimer;
@property(retain, nonatomic) NSMutableDictionary* albums;
@property(retain, nonatomic) NSMutableDictionary* artists;
@property(retain, nonatomic) NSMutableDictionary* profiles;
+(BOOL)isMyProfileOrNilUserId:(id)anId;
+(BOOL)isMyProfileUserId:(id)anId;
+(id)currentModel;
-(void).cxx_destruct;
-(void)onUserTimerFire;
-(void)setup;
-(id)createFeedDataProvider;
-(id)myProfile;
-(id)albumWithId:(id)anId;
-(id)artistWithId:(id)anId;
-(id)profileForUserId:(id)userId;
-(void)reset;
-(id)initWithUserId:(id)userId;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedDataProviderBase : VK_DataListProvider <VK_FeedDataProvider> {
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalUniqueTracksIdPrefix;
-(void)updateTracksIdInBlock:(id)block;
-(id)internalPrepareNewData:(id)data;
-(id)createTrackListProviderFromTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedDataProvider : VK_FeedDataProviderBase {
	unsigned _newItems;
}
@property(assign, nonatomic) unsigned newItems;
-(id)filtereBlocksWithBlock:(id)block;
-(BOOL)internalNeedRewriteRef;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalUniqueTracksIdPrefix;
-(id)internalCreatePagedRequest;
-(void)internalReset;
-(void)removeBlocksOfUserWithId:(id)anId;
-(void)removeBlockWithId:(id)anId;
-(id)actualData;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedTrackListProvider : VK_SimpleTrackListProvider {
	unsigned _prevTracksCount;
	unsigned _needTracksCount;
}
@property(assign, nonatomic) unsigned needTracksCount;
@property(assign, nonatomic) unsigned prevTracksCount;
-(id)internalTracksFromData:(id)data;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderWillFetchingComplete:(id)dataProvider withSuccessful:(BOOL)successful;
-(void)internalUpdateFetchingParamsIfNeeded:(id)needed;
-(void)internalPrepareToFetching:(id)fetching;
-(id)initWithTracksProvider:(id)tracksProvider andStartTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_NoteLink : XXUnknownSuperclass {
	NSString* _userId;
	NSString* _name;
	NSRange _range;
}
@property(readonly, assign, nonatomic) NSRange range;
@property(readonly, assign, nonatomic) NSString* name;
@property(readonly, assign, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)initWithUserId:(id)userId name:(id)name range:(NSRange)range;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTrackCellProxy : VK_TrackCellBaseProxy {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTrackCell : VK_TrackCellBase <AudioPlayerDelegate> {
	VK_BluredImageView* _trackImage;
	UIView* _trackImageDisableView;
	VK_WaveAnimationView* _waveAnimationView;
	UIView* _waveFadeView;
	UILabel* _artistAlbumLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UILabel* artistAlbumLabel;
@property(assign, nonatomic) __weak UIView* waveFadeView;
@property(assign, nonatomic) __weak VK_WaveAnimationView* waveAnimationView;
@property(assign, nonatomic) __weak UIView* trackImageDisableView;
@property(assign, nonatomic) __weak VK_BluredImageView* trackImage;
@property(readonly, assign, nonatomic) VK_SimpleTrackCellProxy* proxy;
+(void)initialize;
-(void).cxx_destruct;
-(void)internalUpdatePlayingAudioState:(BOOL)state;
-(void)internalReset;
-(void)internalDidUpdatedDisablingState:(BOOL)internal;
-(void)internalUpdateData;
-(void)layoutSubviews;
-(void)internalCreateAdditionalViewsInContainer:(id)container;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsBaseActionCellProxy : VK_TableCellProxy {
	int _cellType;
}
@property(assign, nonatomic) int cellType;
+(float)estimatedHeight;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsBaseActionCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsBaseActionCell : VK_TableViewCellBase {
	int _cellStyle;
	VK_BaseLabel* _nameLabel;
	UILabel* _stateLabel;
	UIImageView* _arrowImageView;
	UIImageView* _checkmarkImageView;
	NSLayoutConstraint* _nameLabelTrailingConstraint;
	NSLayoutConstraint* _nameLabelArrowImageViewConstraint;
}
@property(assign, nonatomic) __weak NSLayoutConstraint* nameLabelArrowImageViewConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* nameLabelTrailingConstraint;
@property(assign, nonatomic) __weak UIImageView* checkmarkImageView;
@property(assign, nonatomic) __weak UIImageView* arrowImageView;
@property(assign, nonatomic) __weak UILabel* stateLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* nameLabel;
@property(assign, nonatomic) int cellStyle;
@property(readonly, assign, nonatomic) VK_SettingsBaseActionCellProxy* proxy;
+(BOOL)internalCanHaveSeparator;
+(id)internalNibName;
-(void).cxx_destruct;
-(void)configureTitle:(id)title;
-(void)configureSelected:(BOOL)selected;
-(void)configureNameLabel;
-(void)configureCellStyle;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteShortTextCellProxy : VK_TableCellProxy {
	BOOL _isPostText;
	id _onTextContentTapBlock;
}
@property(assign, nonatomic) BOOL isPostText;
@property(copy, nonatomic) id onTextContentTapBlock;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteShortTextCellViewModel : VK_TableViewCellViewModel {
	UIFont* _textFont;
	NSString* _textWithReplacedLinks;
	NSString* _clippedText;
	float _textHeight;
	NSAttributedString* _attributedText;
}
@property(retain, nonatomic) NSAttributedString* attributedText;
@property(assign, nonatomic) float textHeight;
@property(retain, nonatomic) NSString* clippedText;
@property(retain, nonatomic) NSString* textWithReplacedLinks;
@property(retain, nonatomic) UIFont* textFont;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteShortTextCell : VK_TableViewCellBase {
	UIView* _postView;
	UILabel* _postLabel;
	UIButton* _postShowAllButton;
}
@property(assign, nonatomic) __weak UIButton* postShowAllButton;
@property(assign, nonatomic) __weak UILabel* postLabel;
@property(assign, nonatomic) __weak UIView* postView;
@property(readonly, assign, nonatomic) VK_FeedViewNoteShortTextCellViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_FeedViewNoteShortTextCellProxy* proxy;
@property(readonly, assign, nonatomic) VK_FeedNoteBlockModel* data;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(void)createViews;
-(void)layoutSubviews;
-(void)internalUpdateData;
-(void)internalCellPressed;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTableViewDataAllocator : XXUnknownSuperclass <VK_TableViewDataAllocator> {
	BOOL _isTariffLoading;
	id _onDownloadByWifiSettingChangedBlock;
	id _onDontSleepWhileDownloadingSettingChangedBlock;
	id _onConfirmRemoveChangedBlock;
	id _onLogoutTapBlock;
	id _onTariffsTapBlock;
	id _onRestorePurchasesTapBlock;
	id _onClearFavoritesTapBlock;
	id _onEqualizerTapBlock;
	id _onAboutTapBlock;
	id _onFeedbackTapBlock;
	id _onShareApplicationTapBlock;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id onShareApplicationTapBlock;
@property(copy, nonatomic) id onFeedbackTapBlock;
@property(copy, nonatomic) id onAboutTapBlock;
@property(copy, nonatomic) id onEqualizerTapBlock;
@property(copy, nonatomic) id onClearFavoritesTapBlock;
@property(copy, nonatomic) id onRestorePurchasesTapBlock;
@property(copy, nonatomic) id onTariffsTapBlock;
@property(copy, nonatomic) id onLogoutTapBlock;
@property(copy, nonatomic) id onConfirmRemoveChangedBlock;
@property(copy, nonatomic) id onDontSleepWhileDownloadingSettingChangedBlock;
@property(copy, nonatomic) id onDownloadByWifiSettingChangedBlock;
@property(assign, nonatomic) BOOL isTariffLoading;
@property(readonly, assign, nonatomic) VK_TariffsOptionsModel* tariffsOptions;
-(void).cxx_destruct;
-(id)createInformationSection;
-(id)createApplicationSection;
-(void)addAvailableMultipleTariffSectionCellsItems:(id)items;
-(void)addClearFavoritesCellItem:(id)item;
-(void)addUserTariffSectionCellsItems:(id)items;
-(id)tariffRestorePurchasesCellItem;
-(void)addTariffRestorePurchasesCellItemIfNeeded:(id)needed;
-(id)tariffOtherCellItem;
-(id)settingLoadingCellItemWithHeight:(float)height;
-(id)createTariffSection;
-(id)createLogoutSection;
-(id)defaultSpaceCellItem;
-(id)spaceCellItemWithHeight:(float)height andSeparatorStyle:(unsigned)style;
-(void)setup;
-(id)allocateCellsWithData:(id)data;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SegmentControl : XXUnknownSuperclass {
	id _action;
	NSArray* _segmentTitles;
}
@property(retain, nonatomic) NSArray* segmentTitles;
@property(copy, nonatomic) id action;
-(void).cxx_destruct;
-(void)action:(id)action;
-(void)setupDefaultActions;
-(void)setupDefaultAppearance;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_AppDelegate : XXUnknownSuperclass <UIApplicationDelegate> {
	UIWindow* _window;
	VK_Log* _log;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIWindow* window;
@property(retain, nonatomic) VK_Log* log;
-(void).cxx_destruct;
-(void)notifyStatusBarTouched;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)registerUserNotification;
-(void)application:(id)application didRegisterUserNotificationSettings:(id)settings;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)initLog;
-(void)setupAppearance;
-(void)setupSingletones;
-(void)setup;
-(id)applicationDocumentsDirectory;
-(void)remoteControlReceivedWithEvent:(id)event;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface VK_App : XXUnknownSuperclass {
	NSString* _bundleName;
	NSString* _shortBundleVersion;
	NSString* _bundleVersion;
	NSString* _apiBasePattern;
	NSString* _apiBaseURL;
	NSString* _resourcesBaseURL;
}
@property(retain, nonatomic) NSString* bundleName;
@property(retain, nonatomic) NSString* resourcesBaseURL;
@property(retain, nonatomic) NSString* apiBaseURL;
@property(retain, nonatomic) NSString* apiBasePattern;
@property(retain, nonatomic) NSString* bundleVersion;
@property(retain, nonatomic) NSString* shortBundleVersion;
+(void)initialize;
+(id)shared;
-(void).cxx_destruct;
-(unsigned)apiType;
-(id)stringIdentifierForVendor;
-(id)version;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksSDKInfoManager : VK_BaseManager <VK_NetworkReachabilitySubscriber> {
	NSMutableDictionary* _tracksInfoDictionary;
	NSString* _tracksInfoNetworkKey;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* tracksInfoNetworkKey;
@property(retain, nonatomic) NSMutableDictionary* tracksInfoDictionary;
+(id)currentManager;
-(void).cxx_destruct;
-(void)networkReachability:(id)reachability networkStatusChanged:(int)changed;
-(id)keyForTrack:(id)track;
-(id)updateTrackInfoForTracks:(id)tracks withFinalizeBlock:(id)finalizeBlock;
-(void)updateTrackInfo:(id)info forTrack:(id)track;
-(id)trackInfoForTrack:(id)track;
-(void)dealloc;
-(id)init;
-(id)updateTrackInfoForTracksIfNeeded:(id)tracksIfNeeded withFinalizeBlock:(id)finalizeBlock;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseTableViewController : VK_BaseViewController <UIGestureRecognizerDelegate, VK_TableControllerDelegate, VK_DataProviderDelegate> {
	UIRefreshControl* _refreshControl;
	VK_TableController* _tableController;
	UITableView* _tableView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL needToCreateTableView;
@property(readonly, assign, nonatomic) VK_TableController* tableController;
@property(readonly, assign, nonatomic) BOOL pullToRefreshEnabled;
@property(assign, nonatomic) __weak UITableView* tableView;
-(void).cxx_destruct;
-(void)refreshTableContoller;
-(void)refreshControlStart;
-(void)miniPlayerUpdateStateNotification;
-(id)createTableView;
-(void)createTableViewIfNeeded;
-(void)addRefreshControl;
-(void)resetRefreshControl;
-(void)setCustomTableController:(id)controller;
-(id)createTableController;
-(void)tableControllerCellItemsAllocated:(id)allocated;
-(UIEdgeInsets)tableControllerGetTableViewContentInset:(id)inset;
-(void)dataProviderErrorReceived:(id)received error:(id)error;
-(void)dataProviderWillFetchingComplete:(id)dataProvider withSuccessful:(BOOL)successful;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderDidFetchingStarted:(id)dataProvider;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(void)tableViewDidScrollToTop:(id)tableView;
-(void)tableViewDidFinishScrollAnimation:(id)tableView;
-(void)tableViewDidEndDecelerating:(id)tableView;
-(void)tableViewWillBeginDecelerating:(id)tableView;
-(void)tableViewDidEndDragging:(id)tableView willDecelerate:(BOOL)decelerate;
-(void)tableViewWillEndDragging:(id)tableView;
-(void)tableViewWillBeginDragging:(id)tableView;
-(void)tableViewDidScroll:(id)tableView;
-(float)internalDefaultMinimalContentHeight;
-(void)internalUpdateTableController;
-(void)internalUpdateTableViewParams;
-(Class)internalTableViewClass;
-(UIEdgeInsets)internalAdditionalTableContentInset;
-(void)internalPrepareTableController:(id)controller;
-(void)internalRefreshTableConbtroller;
-(id)internalCreateTableControllerConfiguration;
-(void)internalSetup;
-(void)dealloc;
-(void)updateTableController;
-(void)reloadData;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)reloadTableController;
-(id)openNoteShareActionsWithLocation:(CGPoint)location block:(id)block userModel:(id)model hideBlock:(id)block4 andCompletionBlock:(id)block5;
-(id)openNoteShareActionsWithLocation:(CGPoint)location block:(id)block andUserModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VK_AppHandler : XXUnknownSuperclass {
	BOOL _isAppLoaded;
}
@property(readonly, assign, nonatomic) BOOL isAppLoaded;
+(id)shared;
-(void)launchWithSubscriptionsLoading;
-(void)onUserLogout;
-(void)onLoadingFailed;
-(void)onLoadingCompletedWithAutologin:(BOOL)autologin;
-(void)relogin;
-(void)login;
-(void)reachabilityConfigurationCompleted;
-(void)startLoading;
-(void)didAppLaunching;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SubscriptionsBaseManager : VK_BaseManager {
	NSArray* _users;
	VK_Request* _request;
}
@property(readonly, assign, nonatomic) NSString* profilesUpdatingFailedNotification;
@property(readonly, assign, nonatomic) NSString* profilesChangedNotification;
@property(retain, nonatomic) VK_Request* request;
@property(retain, nonatomic) NSArray* users;
-(void).cxx_destruct;
-(id)internalGetProfilesFromResponse:(id)response;
-(id)internalCreateRequest;
-(id)internalProfilesKey;
-(void)removeFriendsData;
-(void)onFriendsUpdatingFailed:(id)failed;
-(void)onFriendsDidChanged;
-(void)updateUsersList:(id)list;
-(void)loadUsersIfNeeded;
-(void)setupUsersData;
-(void)internalNeedLoadUserData;
-(void)internalWillUserDataUnload;
-(void)updateSubscribedState:(BOOL)state forUserWithId:(id)anId;
-(id)getSubscriptionsWithType:(unsigned)type andLoadingFlag:(BOOL)flag;
-(id)getSubscriptionsWithType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface VK_BookmarksManager : VK_BaseManager {
	NSMutableSet* _processedBookmarks;
}
@property(retain, nonatomic) NSMutableSet* processedBookmarks;
+(id)currentManager;
-(void).cxx_destruct;
-(void)updateBookmarkStatus:(BOOL)status forBookmarkBlock:(id)bookmarkBlock;
-(BOOL)addBookmarkToProcessedIfNeeded:(id)processedIfNeeded;
-(void)addOperation:(BOOL)operation forBookmarkBlock:(id)bookmarkBlock;
-(void)removeBookmark:(id)bookmark;
-(void)addBookmark:(id)bookmark;
-(void)setupBookmarksManager;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffsManager : VK_BaseManager <VK_TariffsReceiptProcessingScheduler> {
	VK_TariffsOptionsModel* _tarrifsInfo;
	VK_TariffsReceiptProcessingScheduler* _tariffsReceiptsProcessingShceduler;
	NSMutableSet* _currentProcessesIds;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VK_TariffsOptionsModel* tariffsInfo;
@property(readonly, assign, nonatomic) VK_TariffModel* currentTariff;
@property(readonly, assign, nonatomic) BOOL isTariffsRestoringInProcess;
@property(readonly, assign, nonatomic) BOOL isSomeTariffInProcess;
@property(retain, nonatomic) NSMutableSet* currentProcessesIds;
@property(retain, nonatomic) VK_TariffsReceiptProcessingScheduler* tariffsReceiptsProcessingShceduler;
+(void)initialize;
+(id)currentManager;
-(void).cxx_destruct;
-(void)openItunesManageSubscriptionsPage;
-(void)tariffsReceiptProcessingSchedulerDidReceiptProcessedInBackground;
-(BOOL)tariffsEquals:(id)equals secondTarifs:(id)tarifs;
-(void)internalWillUserDataUnload;
-(void)internalDidUserDataLoaded;
-(void)setTariffsInfo:(id)info;
-(void)prepareTariffsActionRequest:(id)request withCompletion:(id)completion;
-(void)addStoreTariffWithModel:(id)model andCompletionBlock:(id)block;
-(void)addDefaultTariffWithModel:(id)model andCompletionBlock:(id)block;
-(void)intrernalRestoreTariffWithCompletionBlock:(id)completionBlock;
-(void)restoreTariffWithCompletionBlock:(id)completionBlock;
-(void)internalRemoveTariffWithModel:(id)model withCompletionBlock:(id)completionBlock;
-(id)removingProcessIDWithTariff:(id)tariff;
-(void)removeTariffWithModel:(id)model withCompletionBlock:(id)completionBlock;
-(BOOL)isTariffRemovingInProcess:(id)process;
-(BOOL)isTariffPurchasingInProcess:(id)process;
-(id)purchasingProcessIDWithTariff:(id)tariff;
-(void)internalAddTariffWithModel:(id)model withCompletionBlock:(id)completionBlock;
-(void)addTariffWithModel:(id)model withCompletionBlock:(id)completionBlock;
-(void)updateTariffsWithCompletion:(id)completion;
-(void)setupTariffsManager;
-(id)init;
-(void)addDefaultTariff;
-(id)updateTariffsTask;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchViewController : VK_BaseTableViewController <UITextFieldDelegate, VK_TableControllerDelegate, VK_SearchPopularRequestsViewDelegate> {
	BOOL _isKeyboardShowing;
	VK_TextField* _searchTextField;
	int _searchState;
	NSLayoutConstraint* _searchPlaceHolderLeftInsetConstraint;
	UILabel* _searchPlaceholderTextLabel;
	UIImageView* _searchPlaceholderIcon;
	NSLayoutConstraint* _searchTextFieldRightInsetConstraint;
	UIView* _searchClearButtonContainer;
	UIView* _searchPlaceHolderView;
	UIView* _noResultView;
	NSLayoutConstraint* _topShadowHeightConstraint;
	UILabel* _searchNoResultTextLabel;
	VK_ContainerView* _popularRequestsContainer;
	VK_Button* _cancelButton;
	float _keyboardHeight;
	UIView* _contentView;
	VK_CommonSearchRequest* _currentSearchRequest;
	VK_CommonSearchModel* _searchResult;
	NSString* _preloadedQuery;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* preloadedQuery;
@property(retain, nonatomic) VK_CommonSearchModel* searchResult;
@property(retain, nonatomic) VK_CommonSearchRequest* currentSearchRequest;
@property(assign, nonatomic) __weak UIView* contentView;
@property(assign, nonatomic) float keyboardHeight;
@property(assign, nonatomic) BOOL isKeyboardShowing;
@property(readonly, assign, nonatomic) NSString* queryValue;
@property(assign, nonatomic) __weak VK_Button* cancelButton;
@property(readonly, assign, nonatomic) VK_SearchPopularRequestsView* popularRequestsView;
@property(assign, nonatomic) __weak VK_ContainerView* popularRequestsContainer;
@property(assign, nonatomic) __weak UILabel* searchNoResultTextLabel;
@property(assign, nonatomic) __weak NSLayoutConstraint* topShadowHeightConstraint;
@property(assign, nonatomic) __weak UIView* noResultView;
@property(assign, nonatomic) __weak UIView* searchPlaceHolderView;
@property(assign, nonatomic) __weak UIView* searchClearButtonContainer;
@property(assign, nonatomic) __weak NSLayoutConstraint* searchTextFieldRightInsetConstraint;
@property(assign, nonatomic) __weak UIImageView* searchPlaceholderIcon;
@property(assign, nonatomic) __weak UILabel* searchPlaceholderTextLabel;
@property(assign, nonatomic) __weak NSLayoutConstraint* searchPlaceHolderLeftInsetConstraint;
@property(assign, nonatomic) int searchState;
@property(assign, nonatomic) __weak VK_TextField* searchTextField;
-(void).cxx_destruct;
-(void)popularRequestView:(id)view didRequestSelected:(id)selected;
-(UIEdgeInsets)tableControllerGetTableViewContentInset:(id)inset;
-(void)updateKeyboardState:(BOOL)state;
-(void)onKeyboardWillHideNotification:(id)onKeyboard;
-(void)onKeyboardWillShowNotification:(id)onKeyboard;
-(id)createSearchTableControllerConfiguration;
-(void)resetTableViewState;
-(void)showNoResultView;
-(void)hideAllMessages;
-(void)hideMessageAndRetry;
-(void)internalShowUnknownErrorMessage;
-(void)internalShowNoInternetMessage;
-(void)clearUserQueries;
-(void)saveUserQuery:(id)query;
-(void)searchSuccessedWithResponse:(id)response;
-(void)searchReset;
-(void)searchBegin;
-(void)searchTextChanged;
-(void)cancelBtnPressed:(id)pressed;
-(void)searchCleanBtnPressed:(id)pressed;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)updateSearchClearButton;
-(void)updateSearchClearButtonAnimated;
-(void)updateSearchAnimation:(BOOL)animation;
-(void)setSearchState:(int)state animated:(BOOL)animated;
-(void)searchBeginWithQuery:(id)query;
-(id)createSearchVariantsTableControllerConfiguration;
-(void)openExternalSearchForModel:(id)model;
-(id)createSearchTableControllerConfigurationWithQuery;
-(void)internalPrepareTableController:(id)controller;
-(id)internalCreateTableControllerConfiguration;
-(void)dealloc;
-(void)reloadData;
-(void)searchOnPreloadedQueryIfNeeded;
-(void)updateContentIfNeeded;
-(void)networkReachabilityDidChanged;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)searchWithQuery:(id)query;
-(void)viewDidLoad;
-(id)internalContentView;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_BarButtonsFactory : XXUnknownSuperclass {
}
+(void)initialize;
-(id)createCloseBtn;
-(id)createPeopleBtn;
-(id)createPlusBtn;
-(id)createBackBtn;
-(id)createBarButtonWithInfo:(id)info;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTableViewDataAllocator : XXUnknownSuperclass <VK_TableViewDataAllocator> {
	BOOL _needLastCellSeparator;
	VK_TableCellProxy* _defaultCellProxy;
	unsigned _cellsSeparatorStyle;
	unsigned _shadowsType;
	NSMutableDictionary* _dataKeysCellsMap;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL needLastCellSeparator;
@property(assign, nonatomic) unsigned shadowsType;
@property(assign, nonatomic) unsigned cellsSeparatorStyle;
@property(retain, nonatomic) VK_TableCellProxy* defaultCellProxy;
@property(retain, nonatomic) NSMutableDictionary* dataKeysCellsMap;
-(void).cxx_destruct;
-(void)prepareSection:(id)section;
-(void)setup;
-(id)internalTopCellItems;
-(void)internalSetup;
-(id)allocateCellsWithData:(id)data;
-(void)registerCellProxy:(id)proxy forDataKey:(id)dataKey;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTitleCellProxy : VK_TableCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTitleCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTitleCell : VK_TableViewCellBase {
	UILabel* _titleLabel;
}
@property(assign, nonatomic) __weak UILabel* titleLabel;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)internalCreateTitleLabel;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_RecommendationsViewController : VK_AudioPlayerModalViewController {
	UIView* _noResultsView;
}
@property(assign, nonatomic) __weak UIView* noResultsView;
@property(readonly, assign, nonatomic) VK_TrackModel* trackModel;
-(void).cxx_destruct;
-(id)internalCreateTableControllerConfiguration;
-(id)internalTitle;
@end

__attribute__((visibility("hidden")))
@interface VK_VersionControl : XXUnknownSuperclass {
}
+(void)onUpdate_2_0_version;
+(void)onVersionUpdating:(id)updating;
+(void)checkVersion;
+(void)setCurrentVersion:(id)version;
+(id)currentVersion;
+(BOOL)version:(id)version lessOrEqualThen:(id)then;
+(int)compareVersion:(id)version withOtherVersion:(id)otherVersion;
@end

__attribute__((visibility("hidden")))
@interface VK_VCFactoryImpl : XXUnknownSuperclass <VK_VCFactoryImplProtocol> {
	NSDictionary* _controllersStoryboardIds;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDictionary* controllersStoryboardIds;
+(id)cachedStoryBoard;
-(void).cxx_destruct;
-(void)setup;
-(id)createControllerWithType:(unsigned)type;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksManager : XXUnknownSuperclass {
	BOOL _enableTracksDownloading;
	BOOL _downloading;
	id<VK_TracksManagerDelegate> _delegate;
	NSString* _contentEncryptionKey;
	VK_CryptService* _cryptService;
	VK_TrackFileManager* _trackFileManager;
	ImageManager* _trackCoversManager;
	VK_TrackDownloader* _downloader;
	VK_CoreDataModel* _dataModel;
	VK_TrackTable* _trackTable;
	VK_TrackModel* _currentTrack;
	VK_NotificationObserver* _notificationObserver;
	id<VK_Disposable> _trackInfoDisposable;
	NSMutableArray* _internalFavoriteTracks;
	NSMutableDictionary* _internalFavoriteIdsTracks;
	NSTimer* _dontSleepIdleTimer;
	NSString* _userId;
}
@property(assign, nonatomic) BOOL enableTracksDownloading;
@property(retain, nonatomic) NSString* contentEncryptionKey;
@property(assign, nonatomic) __weak id<VK_TracksManagerDelegate> delegate;
@property(readonly, assign, nonatomic) NSMutableArray* favoriteTracks;
@property(retain, nonatomic) NSString* userId;
@property(assign, nonatomic) BOOL downloading;
@property(retain, nonatomic) NSTimer* dontSleepIdleTimer;
@property(retain, nonatomic) NSMutableDictionary* internalFavoriteIdsTracks;
@property(retain, nonatomic) NSMutableArray* internalFavoriteTracks;
@property(retain, nonatomic) id<VK_Disposable> trackInfoDisposable;
@property(retain, nonatomic) VK_NotificationObserver* notificationObserver;
@property(retain, nonatomic) VK_TrackModel* currentTrack;
@property(retain, nonatomic) VK_TrackTable* trackTable;
@property(retain, nonatomic) VK_CoreDataModel* dataModel;
@property(retain, nonatomic) VK_TrackDownloader* downloader;
@property(retain, nonatomic) ImageManager* trackCoversManager;
@property(retain, nonatomic) VK_TrackFileManager* trackFileManager;
@property(retain, nonatomic) VK_CryptService* cryptService;
+(BOOL)unsafeIsCanDownloadTrack:(id)track;
-(void).cxx_destruct;
-(BOOL)networkStatusIsValid;
-(BOOL)downloadShouldBeStarted;
-(void)resetDownloading;
-(void)handleDownloadingError:(id)error;
-(void)downloadOnlyByWifiFailed;
-(void)lowMemoryForTracksDownloading;
-(void)updateOnlyDownloadingTracksStatus:(unsigned)status;
-(void)updateDownloadingStatus:(unsigned)status forTrack:(id)track withSaving:(BOOL)saving;
-(void)updateTrackDownloadingState:(id)state forTrack:(id)track withSaving:(BOOL)saving;
-(void)stopDownloading;
-(void)loadLyricsForCurrentTrack;
-(void)loadLyricsForTrack:(id)track withCompletion:(id)completion;
-(void)handleGetMusicUrl:(id)url error:(id)error;
-(void)startDownloading;
-(void)saveTrackData:(id)data data:(id)data2 withCompletion:(id)completion;
-(id)savedTrackData:(id)data;
-(void)deleteTrack:(id)track;
-(void)addTrackIfNeeded:(id)needed withNumber:(unsigned)number;
-(void)syncFavoritesTracks:(id)tracks;
-(void)stopDownloadFavoriteTracks:(id)tracks;
-(void)downloadFavoriteTracks:(id)tracks;
-(BOOL)isCanDownloadTrack:(id)track;
-(BOOL)isCanDownloadFavoriteTrack:(id)track;
-(id)trackModelForId:(id)anId;
-(id)favoriteTrackForTrack:(id)track;
-(void)loadFavoriteTracks;
-(void)reset;
-(void)updateDontSleepWhileDownloadingStatus;
-(void)startDownloadingIfNeeded;
-(id)trackFileDataSource:(id)source;
-(void)handleDownloadFinished:(id)finished success:(BOOL)success;
-(void)stopped:(id)stopped;
-(void)finished:(id)finished;
-(void)progress:(id)progress;
-(void)started:(id)started;
-(void)onTracksStateSavingFailed;
-(void)updateTrackMyAudioState:(BOOL)state forNotification:(id)notification;
-(void)trackRemovedFromMyAudioNotification:(id)myAudioNotification;
-(void)trackAddedToMyAudioNotification:(id)myAudioNotification;
-(void)onApplicationDidBecomeActive;
-(void)onApplicationWillResignActive;
-(void)downloadByWifiStatusChanged;
-(void)downloadingTracksURLsDidChanged;
-(void)dealloc;
-(void)setup_VK_TracksManager;
-(id)initWithUserId:(id)userId;
@end

__attribute__((visibility("hidden")))
@interface VK_MyAudioManager : VK_BaseManager {
}
+(id)currentManager;
-(void)postNotification:(id)notification withTrack:(id)track;
-(void)removeFromMyAudio:(id)myAudio;
-(void)addToMyAudio:(id)myAudio;
@end

__attribute__((visibility("hidden")))
@interface VK_ExportSubscriptionsViewController : VK_SubscriptionsViewControllerBase {
	VK_InlineSearchConfiguration* _inlineSearchConfiguration;
}
@property(readonly, assign, nonatomic) __weak VK_UserExportSubscriptionsInlineSearchDataProvider* userExportSubscriptionsInlineSearchDataProvider;
@property(retain, nonatomic) VK_InlineSearchConfiguration* inlineSearchConfiguration;
-(void).cxx_destruct;
-(id)dataProviderWithExportSubscriptionsType:(unsigned)exportSubscriptionsType;
-(id)internalNoItemsTitleForSegment:(int)segment;
-(void)internalWillSegmentChanging:(int)internal;
-(unsigned short)internalAnaliticScreen;
-(id)internalCreateTableControllerConfiguration;
-(id)internalTitle;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNewReleaseCellProxy : VK_TableCellProxy {
	id _onAlbumTapBlock;
	id _onArtistTapBlock;
}
@property(copy, nonatomic) id onArtistTapBlock;
@property(copy, nonatomic) id onAlbumTapBlock;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNewReleaseCellViewModel : VK_TableViewCellViewModel {
	NSAttributedString* _yearGenresString;
	unsigned _albumNameNumberOfLines;
	CGSize _albumNameSize;
}
@property(assign, nonatomic) unsigned albumNameNumberOfLines;
@property(assign, nonatomic) CGSize albumNameSize;
@property(retain, nonatomic) NSAttributedString* yearGenresString;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNewReleaseCell : VK_TableViewCellBase {
	VK_Button* _coverBtn;
	VK_Button* _albumNameBtn;
	VK_Button* _artistNameBtn;
	UILabel* _yearGenresLabel;
	VK_ImageManagerOperation* _coverImageLoadingOperation;
}
@property(retain, nonatomic) VK_ImageManagerOperation* coverImageLoadingOperation;
@property(assign, nonatomic) __weak UILabel* yearGenresLabel;
@property(assign, nonatomic) __weak VK_Button* artistNameBtn;
@property(assign, nonatomic) __weak VK_Button* albumNameBtn;
@property(assign, nonatomic) __weak VK_Button* coverBtn;
@property(readonly, assign, nonatomic) VK_FeedViewNewReleaseCellViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_FeedViewNewReleaseCellProxy* proxy;
@property(readonly, assign, nonatomic) VK_FeedNewReleaseBlockModel* data;
-(void).cxx_destruct;
-(void)cancelLoadingCoverImage;
-(void)updateCoverImage:(id)image withCacheFlag:(BOOL)cacheFlag;
-(void)loadCoverImage;
-(void)createViews;
-(void)artistNamePressed:(id)pressed;
-(void)onAlbumPressed;
-(void)albumNamePressed:(id)pressed;
-(void)coverBtnPressed:(id)pressed;
-(void)internalReset;
-(void)internalUpdateData;
-(void)layoutSubviews;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffModel : XXUnknownSuperclass <EKMappingProtocol> {
	NSString* _tariffId;
	NSString* _typeName;
	unsigned _musicLimit;
	NSString* _overview;
	NSString* _title;
	NSString* _storeId;
	NSString* _period;
	double _endTime;
}
@property(readonly, assign, nonatomic) BOOL isDefaultTariff;
@property(retain, nonatomic) NSString* period;
@property(retain, nonatomic) NSString* storeId;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* overview;
@property(assign, nonatomic) double endTime;
@property(assign, nonatomic) unsigned musicLimit;
@property(retain, nonatomic) NSString* typeName;
@property(retain, nonatomic) NSString* tariffId;
@property(readonly, assign, nonatomic) BOOL isPurchasingInProcess;
@property(readonly, assign, nonatomic) SKProduct* storeProduct;
+(id)objectMapping;
-(void).cxx_destruct;
-(id)substituteTariffParametersInText:(id)text withCurrentTariff:(id)currentTariff;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffsOptionsModel : XXUnknownSuperclass <EKMappingProtocol> {
	NSArray* _userTariffs;
	NSArray* _availableTariffs;
	unsigned _usedLimit;
	NSString* _notice;
	NSString* _otherPlatformNotice;
	VK_TariffModel* _currentTariff;
}
@property(retain, nonatomic) VK_TariffModel* currentTariff;
@property(retain, nonatomic) NSString* otherPlatformNotice;
@property(retain, nonatomic) NSString* notice;
@property(assign, nonatomic) unsigned usedLimit;
@property(retain, nonatomic) NSArray* availableTariffs;
@property(retain, nonatomic) NSArray* userTariffs;
@property(readonly, assign, nonatomic) BOOL onlyDefaultTariffAvailable;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_RegistrationViewController : VK_BaseWebViewController {
	id<VK_RegistrationViewControllerDelegate> _delegate;
	NSArray* _registrationCompletionPatterns;
	NSArray* _registrationNotCompletionPatterns;
}
@property(assign, nonatomic) __weak id<VK_RegistrationViewControllerDelegate> delegate;
@property(retain, nonatomic) NSArray* registrationNotCompletionPatterns;
@property(retain, nonatomic) NSArray* registrationCompletionPatterns;
-(void).cxx_destruct;
-(void)finishRegistration;
-(BOOL)internalShouldStartLoadUrl:(id)internal;
-(void)internalCancelWebAction;
-(void)internalStartWebAction;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfilesInlineSearchDataProvider : VK_LocalInlineSearchDataProvider {
}
-(id)internalSearchPredicateWithQuery:(id)query;
@end

__attribute__((visibility("hidden")))
@interface VK_EqualizerView : XXUnknownSuperclass {
	id<VK_EqualizerSliderDelegate> _delegate;
	float _currentSliderSpace;
	float _currentSliderHeight;
	NSMutableArray* _slidersArray;
	CAShapeLayer* _lineLayer;
	NSTimer* _lineTimer;
	int _timerCurrentCount;
	NSMutableArray* _previousSliderValues;
	NSMutableArray* _slidersNewValues;
}
@property(assign, nonatomic) __weak id<VK_EqualizerSliderDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* slidersNewValues;
@property(retain, nonatomic) NSMutableArray* previousSliderValues;
@property(assign, nonatomic) int timerCurrentCount;
@property(retain, nonatomic) NSTimer* lineTimer;
@property(retain, nonatomic) CAShapeLayer* lineLayer;
@property(retain, nonatomic) NSMutableArray* slidersArray;
@property(assign, nonatomic) float currentSliderHeight;
@property(assign, nonatomic) float currentSliderSpace;
-(void).cxx_destruct;
-(void)drawCurveWithAnimation:(BOOL)animation;
-(void)changeSliderValue:(id)value;
-(void)timerTicked:(id)ticked;
-(void)setNewHz:(id)hz;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_ArtistTracksProvider : VK_TracksProviderBase {
	NSString* _artistId;
}
@property(readonly, assign, nonatomic) NSString* artistId;
-(void).cxx_destruct;
-(id)createTrackListProviderFromTrack:(id)track;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreatePagedRequest;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithArtistId:(id)artistId;
@end

__attribute__((visibility("hidden")))
@interface VK_CoreDataModel : XXUnknownSuperclass {
	NSManagedObjectContext* _managedObjectContext;
	NSManagedObjectModel* _managedObjectModel;
	NSPersistentStore* _store;
	NSString* _userId;
	NSPersistentStoreCoordinator* _persistentStoreCoordinator;
}
@property(readonly, assign, nonatomic) NSPersistentStore* store;
@property(readonly, assign, nonatomic) NSManagedObjectModel* managedObjectModel;
@property(readonly, assign, nonatomic) NSManagedObjectContext* managedObjectContext;
@property(retain, nonatomic) NSPersistentStoreCoordinator* persistentStoreCoordinator;
@property(retain, nonatomic) NSString* userId;
+(void)removeAllData:(id)data;
+(id)statisticModel;
+(id)analyticModel;
+(id)databasesDirectory;
+(id)sharedObjectModel;
-(void).cxx_destruct;
-(void)dealloc;
-(void)save;
-(void)deleteRecord:(id)record;
-(void)deleteEntities:(id)entities withPredicate:(id)predicate;
-(void)deleteEntities:(id)entities;
-(id)countEntities:(id)entities withPredicate:(id)predicate;
-(id)countEntities:(id)entities;
-(id)fetchEntities:(id)entities withPredicate:(id)predicate withFetchLimit:(unsigned)fetchLimit;
-(id)fetchEntities:(id)entities withPredicate:(id)predicate;
-(id)fetchEntities:(id)entities;
-(id)createEntity:(id)entity;
-(id)getByManagedId:(id)anId;
-(void)saveContext;
-(id)removeCurrentStore;
-(void)addPersistentStoreWithURL:(id)url;
-(void)setCoreDataForUser:(id)user;
-(id)initWithUserId:(id)userId;
-(id)initModelFor:(id)aFor;
-(id)initStatistics;
-(id)initAnalytics;
@end

__attribute__((visibility("hidden")))
@interface VK_FetchResult : XXUnknownSuperclass {
	NSArray* _objects;
	NSError* _error;
}
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSArray* objects;
+(id)resultWithObjects:(id)objects error:(id)error;
-(void).cxx_destruct;
-(id)initWithObjects:(id)objects error:(id)error;
@end

__attribute__((visibility("hidden")))
@interface VK_CountResult : XXUnknownSuperclass {
	unsigned _count;
	NSError* _error;
}
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) unsigned count;
+(id)resultWithCount:(unsigned)count error:(id)error;
-(void).cxx_destruct;
-(id)initWithCount:(unsigned)count error:(id)error;
@end

__attribute__((visibility("hidden")))
@interface VK_Analitic : XXUnknownSuperclass {
}
+(unsigned short)feedBlockAsAnaliticBlock:(int)block;
+(void)trackAudioID:(unsigned long long)anId ownerId:(unsigned long long)anId2 umaProductId:(unsigned)anId3 commercModel:(id)model timeStart:(double)start timeEnd:(double)end useType:(unsigned short)type;
+(void)trackAction:(unsigned short)action withScreen:(unsigned short)screen withBlock:(unsigned short)block;
+(void)trackAction:(unsigned short)action withBlock:(unsigned short)block;
+(void)trackAction:(unsigned short)action;
+(void)trackScreen:(unsigned short)screen;
+(void)trackScreenAsCurrent:(unsigned short)current;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface VK_TableViewDataItem : XXUnknownSuperclass {
	NSString* _dataKey;
	id _data;
}
@property(retain, nonatomic) id data;
@property(retain, nonatomic) NSString* dataKey;
+(id)dataItemWithDataKey:(id)dataKey andData:(id)data;
-(void).cxx_destruct;
-(id)initWithDataKey:(id)dataKey andData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleButtonCellProxy : VK_TableCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleButtonCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleButtonCell : VK_TableViewCellBase {
	UIView* _backView;
	UILabel* _titleLabel;
}
@property(assign, nonatomic) __weak UILabel* titleLabel;
@property(assign, nonatomic) __weak UIView* backView;
+(float)estimatedHeight;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)createViews;
-(id)internalTitleFont;
-(id)internalButtonTitle;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_StatusBarAlertView : XXUnknownSuperclass {
	id<VK_StatusBarAlertViewDelegate> _delegate;
	NSTimer* _timer;
	UILabel* _textLabel;
	VK_StatusBarAlert* _currentAlert;
}
@property(assign, nonatomic) __weak id<VK_StatusBarAlertViewDelegate> delegate;
@property(retain, nonatomic) VK_StatusBarAlert* currentAlert;
@property(assign, nonatomic) __weak UILabel* textLabel;
@property(retain, nonatomic) NSTimer* timer;
-(void).cxx_destruct;
-(void)statusBarAlertTapped;
-(void)setup_VK_StatusBarAlertView;
-(void)needShow:(BOOL)show;
-(void)resetCurrentAlert;
-(void)hideCurrentAlert;
-(void)showCurrentAlert;
-(BOOL)haveAlertWithId:(id)anId;
-(BOOL)shouldHideAlert:(id)alert;
-(BOOL)shouldShowAlert:(id)alert;
-(void)hideAnyAlert;
-(void)hideAnyAlertWithId:(id)anId;
-(void)hideAlert:(id)alert;
-(void)showAlert:(id)alert;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_StatusBarAlert : XXUnknownSuperclass {
	NSString* _uniqueId;
	NSString* _text;
	unsigned _priority;
	double _time;
}
@property(assign, nonatomic) double time;
@property(assign, nonatomic) unsigned priority;
@property(retain, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) NSString* uniqueId;
+(id)alertWithId:(id)anId;
+(id)alert;
+(void)hideAnyAlertWithId:(id)anId;
+(id)statusBarAlertView;
+(void)handleUnknownTariffOperationError:(id)error;
+(void)showUnknownError;
+(BOOL)validateNetworkConnection;
+(void)showNoConnectionStatusBarAlertIfNeeded;
+(void)showUnknownTrackDownloadingStatusBarAlert;
+(void)showTrackDownloadingStatusBarAlertWithError:(id)error;
+(void)showNoConnectionStatusBarAlert;
+(void)showStatusBarAlertWithText:(id)text;
+(void)showStatusBarAlertWithText:(id)text andId:(id)anId;
-(void).cxx_destruct;
-(id)init;
-(id)initWithId:(id)anId;
-(void)hide;
-(void)show;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonProfileViewController : VK_BaseProfileViewController <VK_NetworkErrorListener> {
	NSArray* _supportedTabs;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VK_ProfileModel* profileModel;
@property(readonly, assign, nonatomic) unsigned profileTab;
@property(readonly, assign, nonatomic) BOOL isMyProfile;
@property(retain, nonatomic) NSArray* supportedTabs;
-(void).cxx_destruct;
-(void)internalAskPermissionToRemoveActionWithConfirmButton:(id)confirmButton andConfirmationBlock:(id)block;
-(void)removeMyAudioTrackCell:(id)cell;
-(void)networkErrorWithRequest:(id)request;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(id)internalSupportedTabs;
-(void)profileHeaderView:(id)view didSegmentSelected:(unsigned)selected;
-(id)favoritesShuffleCellProxy;
-(id)notesTableControllerConfiguration;
-(id)audioTableControllerConfiguration;
-(void)internalShowMessage:(id)message image:(id)image actionText:(id)text lock:(BOOL)lock andActionBlock:(id)block;
-(void)internalShowEmptyContentMessage;
-(id)internalCreateTableControllerConfiguration;
-(void)internalSetup;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileViewController : VK_CommonProfileViewController {
	BOOL _loadingProfileInfo;
	VK_UserBaseInfoModel* _preloadedProfileInfoModel;
	VK_UserBaseInfoModel* _loadedProfileInfo;
}
@property(retain, nonatomic) VK_UserBaseInfoModel* preloadedProfileInfoModel;
@property(retain, nonatomic) VK_UserBaseInfoModel* loadedProfileInfo;
@property(assign, nonatomic) BOOL loadingProfileInfo;
-(void).cxx_destruct;
-(void)dataProviderErrorReceived:(id)received error:(id)error;
-(id)profileBaseInfoModel;
-(void)internalShowEmptyContentMessage;
-(id)segmentTitlesForProfileHeaderView:(id)profileHeaderView;
-(id)internalSupportedTabs;
-(id)titleForProfileHeaderView:(id)profileHeaderView;
-(id)internalCreateTableControllerConfiguration;
-(void)profileHeaderView:(id)view didSegmentSelected:(unsigned)selected;
-(void)reloadData;
-(BOOL)pullToRefreshEnabled;
-(void)profileInfoUpdateIfNeeded;
-(void)loadProfileDataIfNeeded;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTitleCellProxy : VK_TableCellProxy {
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTitleCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTitleCell : VK_TableViewCellBase {
	UILabel* _titleLabel;
}
@property(assign, nonatomic) __weak UILabel* titleLabel;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)internalUpdateProxy;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface StreamingKitAdapter : XXUnknownSuperclass <STKAudioPlayerDelegate, PlayerProtocol> {
	VK_NotificationObserver* _routeObserver;
	STKAudioPlayer* _audioPlayer;
	id<PlayerDelegate> _delegate;
	VK_TrackModel* _lastTrack;
	STKDataSource* _lastDataSource;
}
@property(readonly, assign, nonatomic) double currentTime;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) id currentItem;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<PlayerDelegate> delegate;
@property(retain, nonatomic) STKAudioPlayer* audioPlayer;
@property(retain, nonatomic) STKDataSource* lastDataSource;
@property(retain, nonatomic) VK_TrackModel* lastTrack;
-(void).cxx_destruct;
-(void)handleRouteChange:(id)change;
-(void)createStreamingKitPlayer;
-(void)delegateErrorNotification:(int)notification;
-(void)audioPlayer:(id)player unexpectedError:(int)error;
-(void)audioPlayer:(id)player didFinishPlayingQueueItemId:(id)anId withReason:(int)reason andProgress:(double)progress andDuration:(double)duration;
-(void)audioPlayer:(id)player stateChanged:(int)changed previousState:(int)state;
-(void)audioPlayer:(id)player didFinishBufferingSourceWithQueueItemId:(id)queueItemId;
-(void)audioPlayer:(id)player didStartPlayingQueueItemId:(id)anId;
-(id)restoreDataSourceForTrack:(id)track;
-(void)storeDataSource:(id)source forTrack:(id)track;
-(void)playDataSource:(id)source forTrack:(id)track;
-(void)playTrack:(id)track withUrl:(id)url andOperationQueue:(id)queue;
-(id)prefetchOperationForTrack:(id)track withUrl:(id)url andOperationQueue:(id)queue;
-(id)cachedDataSourceForUrl:(id)url andOperationQueue:(id)queue;
-(id)cryptoDataSourceForTrack:(id)track;
-(BOOL)isPlayingState:(int)state;
-(BOOL)isPlaying;
-(void)seekToTime:(double)time;
-(void)resume;
-(void)reset;
-(void)stop;
-(BOOL)getPaused;
-(void)pause;
-(void)play;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SDKHelper : XXUnknownSuperclass <VKSdkDelegate, VKSdkUIDelegate> {
	BOOL _authInProcess;
	VK_CaptchaManager* _captchaManager;
	id _authCompletionBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VK_CaptchaManager* captchaManager;
@property(readonly, assign, nonatomic) BOOL isLogined;
@property(readonly, assign, nonatomic) NSString* accessToken;
@property(readonly, assign, nonatomic) NSString* userId;
@property(copy, nonatomic) id authCompletionBlock;
@property(assign, nonatomic) BOOL authInProcess;
+(id)shared;
-(void).cxx_destruct;
-(void)vkSdkUserAuthorizationFailed;
-(void)vkSdkAccessAuthorizationFinishedWithResult:(id)result;
-(void)vkSdkShouldPresentViewController:(id)vkSdk;
-(void)vkSdkNeedCaptchaEnter:(id)enter;
-(void)authCompletion;
-(void)setupSDKHelper;
-(void)processOpenURL:(id)url fromApplication:(id)application;
-(void)authorizeWithCompletion:(id)completion;
-(void)resetAuthorizationInfo;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_Appearance : XXUnknownSuperclass {
	UIColor* _colorBase;
	UIColor* _colorBaseGray;
	UIColor* _colorLightGray;
	UIColor* _colorBaseRed;
	UIColor* _colorImagePlaceholder;
	UIColor* _colorAdditionalText;
	UIColor* _colorLightText;
	UIColor* _colorCellSeparatorColor;
	UIColor* _colorDarkText;
	UIColor* _colorBottomShadow;
	UIColor* _colorSelectedBackground;
	UIColor* _colorMiniPlayerShadow;
	UIColor* _colorGrayBlurTint;
	UIColor* _colorLightNavigationBar;
	UIColor* _colorActivityIndicator;
	float _onePixelInPoints;
	NSMutableDictionary* _fonts;
}
@property(readonly, assign, nonatomic) UIColor* colorActivityIndicator;
@property(readonly, assign, nonatomic) UIColor* colorLightNavigationBar;
@property(readonly, assign, nonatomic) UIColor* colorGrayBlurTint;
@property(readonly, assign, nonatomic) UIColor* colorMiniPlayerShadow;
@property(readonly, assign, nonatomic) UIColor* colorSelectedBackground;
@property(readonly, assign, nonatomic) UIColor* colorBottomShadow;
@property(readonly, assign, nonatomic) UIColor* colorDarkText;
@property(readonly, assign, nonatomic) UIColor* colorCellSeparatorColor;
@property(readonly, assign, nonatomic) UIColor* colorLightText;
@property(readonly, assign, nonatomic) UIColor* colorAdditionalText;
@property(readonly, assign, nonatomic) UIColor* colorImagePlaceholder;
@property(readonly, assign, nonatomic) UIColor* colorBaseRed;
@property(readonly, assign, nonatomic) UIColor* colorLightGray;
@property(readonly, assign, nonatomic) UIColor* colorBaseGray;
@property(readonly, assign, nonatomic) UIColor* colorBase;
@property(assign, nonatomic) float onePixelInPoints;
@property(retain, nonatomic) NSMutableDictionary* fonts;
+(id)shared;
-(void).cxx_destruct;
-(unsigned)closestFontWeightFromName:(id)name;
-(id)systemFontNameWithWeight:(unsigned)weight;
-(id)helveticaNeueFontNameWithWeight:(unsigned)weight;
-(id)peopleBarButtonWithTarget:(id)target andSelector:(SEL)selector;
-(id)dotAttributedStringWithColor:(id)color;
-(id)fontWithName:(id)name andSize:(float)size;
-(id)onlyHelveticaNeueFontOfSize:(float)size weight:(unsigned)weight;
-(id)onlySystemNeueFontOfSize:(float)size weight:(unsigned)weight;
-(id)fontOfSize:(float)size weight:(unsigned)weight;
-(id)fontClosestToFont:(id)font;
-(id)rightNavigationBarButtonWithTitle:(id)title margin:(float)margin target:(id)target andSelector:(SEL)selector;
-(void)updateStatusBarStyle:(int)style animated:(BOOL)animated;
-(int)currentStatusBarStyle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LNPopupItem : XXUnknownSuperclass {
	NSString* _title;
	NSString* _subtitle;
	NSArray* _leftBarButtonItems;
	NSArray* _rightBarButtonItems;
	id<_LNPopupItemDelegate> _itemDelegate;
	UIViewController* _containerController;
}
@property(copy, nonatomic) NSArray* rightBarButtonItems;
@property(copy, nonatomic) NSArray* leftBarButtonItems;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic, getter=_containerController, setter=_setContainerController:) __weak UIViewController* containerController;
@property(assign, nonatomic, getter=_itemDelegate, setter=_setItemDelegate:) __weak id<_LNPopupItemDelegate> itemDelegate;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SwipeButton : XXUnknownSuperclass {
	unsigned _position;
	int _type;
}
@property(assign, nonatomic) unsigned position;
@property(assign, nonatomic) int type;
+(id)swipeButtonWithType:(int)type;
-(void)setContentAlpha:(float)alpha;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setImage:(id)image;
-(void)setTitleColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewTopShadowCellProxy : VK_FeedViewShadowCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
-(float)height;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewTopShadowCellViewModel : VK_FeedViewShadowCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewTopShadowCell : VK_FeedViewShadowCell {
}
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_LoaderViewController : VK_BaseViewController {
	unsigned _mode;
	UIActivityIndicatorView* _activityIndicator;
	BOOL _animateSplash;
	id _authorizationCompletion;
	UIActivityIndicatorView* _loaderActivityIndicator;
	UIView* _authView;
	VK_BaseButton* _registrationButton;
	VK_Button* _loginButton;
	UIImageView* _backgroundImageView;
	VK_SplashView* _splashView;
}
@property(copy, nonatomic) id authorizationCompletion;
@property(assign, nonatomic) BOOL animateSplash;
@property(assign, nonatomic) unsigned mode;
@property(assign, nonatomic) __weak VK_SplashView* splashView;
@property(assign, nonatomic) __weak UIImageView* backgroundImageView;
@property(assign, nonatomic) __weak VK_Button* loginButton;
@property(assign, nonatomic) __weak VK_BaseButton* registrationButton;
@property(assign, nonatomic) __weak UIView* authView;
@property(assign, nonatomic) __weak UIActivityIndicatorView* loaderActivityIndicator;
@property(readonly, assign, nonatomic) BOOL isUserHaveVKAuth;
-(void).cxx_destruct;
-(void)updateMode;
-(void)startAuthorization;
-(void)registrationPressed:(id)pressed;
-(void)loginPressed:(id)pressed;
-(void)internalSetup;
-(void)configureForCurrentScreenSize;
-(void)hideSplash:(BOOL)splash;
-(void)showSplash:(BOOL)splash;
-(BOOL)shouldShowStatusBarAlert;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)startAuthorizationWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VK_EqualizerSlider : XXUnknownSuperclass {
	CGPoint _thumbOffset;
}
@property(assign, nonatomic) CGPoint thumbOffset;
-(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
@end

__attribute__((visibility("hidden")))
@interface VK_ModelWithAlbumCoverBase : XXUnknownSuperclass <VK_ModelWithAlbumCover> {
	NSString* _coverFlagUrl;
}
@property(readonly, assign, nonatomic) NSString* coverLargeUrl;
@property(readonly, assign, nonatomic) NSString* coverMediumUrl;
@property(readonly, assign, nonatomic) NSString* coverSmallUrl;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* coverFlagUrl;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackModel : VK_ModelWithAlbumCoverBase <EKMappingProtocol> {
	BOOL _isCachingAvailable;
	BOOL _isInMyAudio;
	BOOL _isUnpublished;
	BOOL _isNoURL;
	BOOL _isReadyToDownloading;
	BOOL _isRealyDownloaded;
	NSString* _title;
	unsigned _vkTrackId;
	unsigned _vkOwnerId;
	NSString* _runtimeUniqueId;
	unsigned _duration;
	NSString* _durationString;
	NSString* _artist;
	NSString* _artistId;
	NSString* _albumId;
	unsigned _albumTrackNumber;
	NSString* _albumName;
	unsigned _umaReleaseId;
	NSString* _trackId;
	NSString* _favoriteId;
	VK_FavoriteTrackInfo* _info;
	NSNumber* _offset;
	unsigned _state;
	unsigned _lyricsId;
	NSString* _lyricsText;
}
@property(readonly, assign, nonatomic) BOOL isRealyDownloaded;
@property(readonly, assign, nonatomic) BOOL isReadyToDownloading;
@property(readonly, assign, nonatomic) BOOL isNoURL;
@property(readonly, assign, nonatomic) BOOL isUnpublished;
@property(retain, nonatomic) NSString* lyricsText;
@property(assign, nonatomic) unsigned lyricsId;
@property(assign, nonatomic) BOOL isInMyAudio;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSNumber* offset;
@property(retain, nonatomic) VK_FavoriteTrackInfo* info;
@property(assign, nonatomic) BOOL isCachingAvailable;
@property(retain, nonatomic) NSString* favoriteId;
@property(retain, nonatomic) NSString* trackId;
@property(assign, nonatomic) unsigned umaReleaseId;
@property(retain, nonatomic) NSString* albumName;
@property(assign, nonatomic) unsigned albumTrackNumber;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) NSString* artistId;
@property(retain, nonatomic) NSString* artist;
@property(retain, nonatomic) NSString* durationString;
@property(assign, nonatomic) unsigned duration;
@property(retain, nonatomic) NSString* runtimeUniqueId;
@property(assign, nonatomic) unsigned vkOwnerId;
@property(assign, nonatomic) unsigned vkTrackId;
@property(retain, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) BOOL isAvailbaleForShuffle;
@property(readonly, assign, nonatomic) unsigned long long estimatedFileSize;
@property(readonly, assign, nonatomic) BOOL canBeSavedOnDisk;
@property(readonly, assign, nonatomic) BOOL isInTrackList;
@property(readonly, assign, nonatomic) VK_TrackModel* trackState;
@property(readonly, assign, nonatomic) VK_TrackModel* favoriteTrack;
+(id)objectMapping;
+(void)updateRuntimeUniqueIdForTracks:(id)tracks withPrefix:(id)prefix;
-(void).cxx_destruct;
-(BOOL)isRealyDownloaded;
-(BOOL)isReadyToDownloading;
-(BOOL)isNoURL;
-(void)showActionSheetWithArtistDidOpenAction:(id)showActionSheetWithArtist andAlbumDidOpenAction:(id)andAlbum;
-(id)artistAlbumAttributedStringWithFontSize:(float)fontSize;
-(BOOL)isFavoriteTrack;
-(void)saveToTable:(id)table withContextSaving:(BOOL)contextSaving;
-(void)saveToTable:(id)table;
-(void)createPreparedToFavoriteInfo;
-(void)createFavoriteInfo;
-(void)createDefaultInfo;
-(void)resetInfo;
-(void)unregisterInObserverIfNeeded;
-(void)registerInObserverIfNeeded;
-(void)setTrackId:(id)anId;
-(void)dealloc;
-(BOOL)isUnpublished;
@end

__attribute__((visibility("hidden")))
@interface VK_InlineSearchableNavigationControllerDelegate : VK_NavigationControllerDelegate {
	VK_InlineSearchAnimationManager* _inlineSearchAnimationManager;
}
@property(assign, nonatomic) __weak VK_InlineSearchAnimationManager* inlineSearchAnimationManager;
-(void).cxx_destruct;
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(void)configureWithAnimationManager:(id)animationManager;
-(id)initWithAnimationManager:(id)animationManager;
@end

__attribute__((visibility("hidden")))
@interface VK_TempUserData : XXUnknownSuperclass {
	BOOL _firstAuthorization;
	NSString* _userId;
	NSUserDefaults* _defaults;
	NSMutableDictionary* _values;
}
@property(assign, nonatomic) BOOL favoritesNeedShowSyncCompletionAlert;
@property(retain, nonatomic) NSArray* userSearchQueries;
@property(retain, nonatomic) NSDictionary* settings;
@property(readonly, assign, nonatomic) BOOL firstAuthorization;
@property(assign, nonatomic) double usingTime;
@property(retain, nonatomic) VK_TariffsOptionsModel* userTariffInfo;
@property(retain, nonatomic) NSArray* favoritesCachedOperationsItems;
@property(assign, nonatomic) BOOL favoritesNeedSync;
@property(assign, nonatomic) unsigned subscriptionsStatus;
@property(retain, nonatomic) NSString* subscriptionsSecureKey;
@property(assign, nonatomic) unsigned lastFavoritesSubscriptionsSeqNumber;
@property(retain, nonatomic) NSNumber* lastFavoritesSeqNumber;
@property(readonly, assign, nonatomic) NSString* tempDataKey;
@property(retain, nonatomic) NSMutableDictionary* values;
@property(retain, nonatomic) NSUserDefaults* defaults;
@property(retain, nonatomic) NSString* userId;
+(id)currentUserData;
-(void).cxx_destruct;
-(void)syncValues;
-(void)registerDefaultsValues;
-(void)setup;
-(void)clearData;
-(id)createSubscriptionsSecureKeyChainQuary;
-(id)initWithUserId:(id)userId;
@end

__attribute__((visibility("hidden")))
@interface VK_AsyncTask : XXUnknownSuperclass {
	int _priority;
	id _asyncBlock;
	BFTask* _task;
	BFCancellationTokenSource* _cancellationTokenSource;
}
@property(retain, nonatomic) BFCancellationTokenSource* cancellationTokenSource;
@property(retain, nonatomic) BFTask* task;
@property(copy, nonatomic) id asyncBlock;
@property(assign, nonatomic) int priority;
-(void).cxx_destruct;
-(id)createTask;
-(void)configureWithPriority:(int)priority andAsyncBlock:(id)block;
-(void)cancel;
-(void)executeWithCompletionBlock:(id)completionBlock;
-(id)initWithPriority:(int)priority andAsyncBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface VK_NewFriendsViewController : VK_BaseTableViewController {
	NSString* _navBarTitle;
	VK_PagedRequestDataProvider* _dataProvider;
}
@property(retain, nonatomic) NSString* navBarTitle;
@property(retain, nonatomic) VK_PagedRequestDataProvider* dataProvider;
-(void).cxx_destruct;
-(id)internalCreateTableControllerConfiguration;
-(unsigned short)internalAnaliticScreen;
-(id)internalTitle;
-(void)internalSetup;
-(void)setNewFriendsData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface VK_ShuffleableTracksProvider : VK_TracksProviderBase <VK_DataWithTracksShuffleableProvider> {
	BOOL _shuffled;
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL shuffled;
-(void)reloadWithOffset:(unsigned)offset;
-(id)internalCreatePagedRequestWithShuffleEnabled:(BOOL)shuffleEnabled;
-(id)internalCreatePagedRequest;
-(void)internalDidDataChanged;
-(void)unshuffleFromTrack:(id)track;
-(void)shuffleFromTrack:(id)track;
-(id)createTrackListProviderFromTrack:(id)track;
-(id)copyWithZone:(NSZone*)zone;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_ShuffleCellProxy : VK_TableCellProxy {
	BOOL _enabled;
	id<VK_ShuffleCellProxyDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<VK_ShuffleCellProxyDelegate> delegate;
@property(assign, nonatomic) BOOL enabled;
-(void).cxx_destruct;
-(id)init;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesShuffleCellProxy : VK_ShuffleCellProxy {
}
-(void)updateEnabledState;
-(void)setupFavoriteShuffleCellProxy;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_ShuffleCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_ShuffleCell : VK_TableViewCellBase <VK_ShuffleCellProxyDelegate> {
	UILabel* _shuffleTitle;
	UILabel* _shuffleTitleLabel;
	UIImageView* _shuffleIconView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UIImageView* shuffleIconView;
@property(assign, nonatomic) __weak UILabel* shuffleTitleLabel;
@property(readonly, assign, nonatomic) VK_ShuffleCellProxy* proxy;
@property(assign, nonatomic) __weak UILabel* shuffleTitle;
+(id)internalNibName;
-(void).cxx_destruct;
-(void)onEnabledStateDidUpdated;
-(void)updateEnabledState;
-(BOOL)isSelectable;
-(void)internalUpdateProxy;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_ValidationViewController : VK_BaseWebViewController {
	id<VK_ValidationViewControllerDelegate> _delegate;
	NSString* _redirectUrl;
}
@property(copy, nonatomic) NSString* redirectUrl;
@property(assign, nonatomic) __weak id<VK_ValidationViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)finishValidationWithAccessToken:(id)accessToken;
-(id)extractAccessTokenFromUrl:(id)url;
-(BOOL)internalShouldStartLoadUrl:(id)internal;
-(void)internalCancelWebAction;
-(void)internalStartWebAction;
@end

__attribute__((visibility("hidden")))
@interface VK_UserExportSubscriptionsInlineSearchDataProvider : VK_ProfilesInlineSearchDataProvider {
	unsigned _subscriptionsType;
}
@property(assign, nonatomic) unsigned subscriptionsType;
-(id)internalSearchableItems;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleDisposable : XXUnknownSuperclass <VK_Disposable> {
	BOOL _isDisposed;
	id _disposeBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL isDisposed;
@property(copy, nonatomic) id disposeBlock;
-(void).cxx_destruct;
-(void)dispose;
-(id)initWithDsiposeBlock:(id)dsiposeBlock;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NonDisposable : XXUnknownSuperclass <VK_Disposable> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)shared;
-(void)dispose;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioPlayerViewController : VK_BaseViewController <AudioPlayerDelegate, VK_PlayerProgressSliderDelegate> {
	BOOL _trackSliding;
	UIView* _controlsContainerView;
	VK_PlayerCoverView* _playerCoverView;
	VK_PlayerActionsView* _playerActionsView;
	VK_PlayerProgressSlider* _progressSlider;
	UIImageView* _coverFlippedImageView;
	VK_BaseLabel* _elapsedTimeLabel;
	VK_BaseLabel* _totalTimeLabel;
	VK_MarqueeLabel* _titleLabel;
	VK_MarqueeLabel* _artistAlbumLabel;
	VK_Button* _pauseButton;
	VK_Button* _playButton;
	VK_Button* _nextButton;
	VK_Button* _previousButton;
	MPVolumeView* _volumeView;
	VK_TrackStateView* _trackStateView;
	VK_BlurView* _coverFlippedImageBlurView;
	VK_TrackModel* _currentTrack;
	NSTimer* _tempProgressUpdatingTimer;
	int _statusBarStyleToRestore;
	NSLayoutConstraint* _coverContainerViewBaseRatioConstraint;
	NSLayoutConstraint* _coverContainerViewCompressRatioConstraint;
	NSLayoutConstraint* _elapsedTimeLabelLeadingConstraint;
	NSLayoutConstraint* _totalTimeLabelTrailingConstraint;
	NSLayoutConstraint* _informationViewTopConstraint;
	NSLayoutConstraint* _artistAlbumLabelTopConstraint;
	NSLayoutConstraint* _controlsViewCenterYConstraint;
	NSLayoutConstraint* _volumeViewBottomConstraint;
	NSLayoutConstraint* _playerActionsViewBottomConstraint;
	VK_AudioPlayerHintView* _hintView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VK_AudioPlayerHintView* hintView;
@property(assign, nonatomic) __weak NSLayoutConstraint* playerActionsViewBottomConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* volumeViewBottomConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* controlsViewCenterYConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* artistAlbumLabelTopConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* informationViewTopConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* totalTimeLabelTrailingConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* elapsedTimeLabelLeadingConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* coverContainerViewCompressRatioConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* coverContainerViewBaseRatioConstraint;
@property(assign, nonatomic) int statusBarStyleToRestore;
@property(assign, nonatomic) BOOL trackSliding;
@property(retain, nonatomic) NSTimer* tempProgressUpdatingTimer;
@property(retain, nonatomic) VK_TrackModel* currentTrack;
@property(assign, nonatomic) __weak VK_BlurView* coverFlippedImageBlurView;
@property(retain, nonatomic) VK_TrackStateView* trackStateView;
@property(assign, nonatomic) __weak MPVolumeView* volumeView;
@property(assign, nonatomic) __weak VK_Button* previousButton;
@property(assign, nonatomic) __weak VK_Button* nextButton;
@property(assign, nonatomic) __weak VK_Button* playButton;
@property(assign, nonatomic) __weak VK_Button* pauseButton;
@property(assign, nonatomic) __weak VK_MarqueeLabel* artistAlbumLabel;
@property(assign, nonatomic) __weak VK_MarqueeLabel* titleLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* totalTimeLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* elapsedTimeLabel;
@property(assign, nonatomic) __weak UIImageView* coverFlippedImageView;
@property(assign, nonatomic) __weak VK_PlayerProgressSlider* progressSlider;
@property(assign, nonatomic) __weak VK_PlayerActionsView* playerActionsView;
@property(assign, nonatomic) __weak VK_PlayerCoverView* playerCoverView;
@property(assign, nonatomic) __weak UIView* controlsContainerView;
-(void).cxx_destruct;
-(void)progressSliderValueChanged:(id)changed;
-(void)resetTempProgressUpdatingTimer;
-(void)startTempProgressUpdatingTimer;
-(void)sliderCancelSlide:(id)slide;
-(void)sliderEndSlide:(id)slide;
-(BOOL)sliderShouldBeginSlide:(id)slider;
-(void)audioPlayer:(id)player trackListDidChanged:(id)trackList;
-(void)audioPlayer:(id)player didCurrentTrackChanged:(id)changed;
-(void)audioPlayer:(id)player didStateChanged:(unsigned)changed;
-(void)audioPlayer:(id)player progressChanged:(double)changed forPlayingTrack:(id)playingTrack;
-(void)tracklistButtonPressed:(id)pressed;
-(void)previousButtonPressed:(id)pressed;
-(void)nextButtonPressed:(id)pressed;
-(void)pauseButtonPressed:(id)pressed;
-(void)playButtonPressed:(id)pressed;
-(void)presentModalViewControllerWithType:(unsigned)type andData:(id)data;
-(void)hideAudioPlayer;
-(void)updateTrackSliding:(BOOL)sliding;
-(void)updateBlurs;
-(void)updatePlayingTrackCoverImage:(id)image;
-(void)updatePlayingTrackCover;
-(void)updatePlayingTrack;
-(void)updateButtonsState;
-(void)updateProgressState;
-(void)updateControlsState;
-(void)configuretrackStateView;
-(void)configureCoverFlippedImageViews;
-(void)updateBroadcastingHint;
-(void)updateLoopHint;
-(void)showShuffleHint;
-(void)updateShuffleHint;
-(void)configurePlayerActionsView;
-(void)configurePlayerCoverView;
-(void)configureForCurrentScreenSize;
-(unsigned short)internalAnaliticScreen;
-(void)internalSetup;
-(id)viewForPopupInteractionGestureRecognizer;
-(void)dismissWithCompletion:(id)completion;
-(void)dismiss;
-(BOOL)prefersStatusBarHidden;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_PixelPerfectLayoutConstraint : XXUnknownSuperclass {
	BOOL _haveIOS7Constant;
	float _perfectConstant;
	float _iOS7Constant;
}
@property(assign, nonatomic) float iOS7Constant;
@property(assign, nonatomic) float perfectConstant;
+(void)initialize;
-(void)setup;
-(id)awakeAfterUsingCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SimilarTracksProvider : VK_PagedRequestDataProvider <VK_DataWithTracksProvider> {
	VK_TrackModel* _trackModel;
	id _onDataChangedBlock;
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id onDataChangedBlock;
@property(retain, nonatomic) VK_TrackModel* trackModel;
-(void).cxx_destruct;
-(id)createTrackListProviderFromTrack:(id)track;
-(BOOL)internalAllDataLoaded;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalPrepareNewData:(id)data;
-(id)internalCreatePagedRequest;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_LocalInlineSearchDataProvider : VK_DataListProvider <VK_InlineSearchDataProvider> {
	NSString* _query;
}
@property(readonly, assign, nonatomic) BOOL isEmpty;
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* query;
-(void).cxx_destruct;
-(void)search;
-(id)internalSearchPredicateWithQuery:(id)query;
-(id)internalSearchableItems;
-(void)internalSetup;
-(void)clear;
-(void)updateWithQuery:(id)query;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleUserCellProxy : VK_UserBaseCellProxy {
}
+(id)defaultProxy;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleUserCell : VK_UserBaseCell {
}
-(void)internalLayoutRightView:(id)view;
-(id)internalCreateRightView;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchInfoModelBase : XXUnknownSuperclass <VK_DataCheckable, EKMappingProtocol> {
	BOOL _isHaveData;
}
@property(assign, nonatomic) BOOL isHaveData;
@property(readonly, assign, nonatomic) BOOL isEmpty;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)objectMapping;
@end

__attribute__((visibility("hidden")))
@interface VK_UsersSearchInfoModel : VK_SearchInfoModelBase {
	NSArray* _friends;
	NSArray* _other;
}
@property(retain, nonatomic) NSArray* other;
@property(retain, nonatomic) NSArray* friends;
+(id)objectMapping;
-(void).cxx_destruct;
-(BOOL)isHaveData;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioSearchInfoModel : VK_SearchInfoModelBase {
	NSArray* _user;
	NSArray* _global;
}
@property(retain, nonatomic) NSArray* global;
@property(retain, nonatomic) NSArray* user;
+(id)objectMapping;
-(void).cxx_destruct;
-(BOOL)isHaveData;
@end

__attribute__((visibility("hidden")))
@interface VK_GroupsSearchInfoModel : VK_SearchInfoModelBase {
	NSArray* _subscribed;
	NSArray* _other;
}
@property(retain, nonatomic) NSArray* other;
@property(retain, nonatomic) NSArray* subscribed;
+(id)objectMapping;
-(void).cxx_destruct;
-(BOOL)isHaveData;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNotePostHeaderCellProxy : VK_TableCellProxy {
	id _onHeaderTapBlock;
	id _openMoreActionsBlock;
	id _shouldShowMoreButtonBlock;
}
@property(copy, nonatomic) id shouldShowMoreButtonBlock;
@property(copy, nonatomic) id openMoreActionsBlock;
@property(copy, nonatomic) id onHeaderTapBlock;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNotePostHeaderCellViewModel : VK_TableViewCellViewModel {
	NSString* _timeString;
}
@property(retain, nonatomic) NSString* timeString;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNotePostHeaderCell : VK_TableViewCellBase <VK_UpdateTimerSubscriber> {
	UIView* _postHeaderView;
	UIImageView* _avatarView;
	UILabel* _nameLabel;
	UILabel* _timeLabel;
	VK_Button* _moreButton;
	UIImageView* _pinImageView;
	UIImageView* _bookmarkImageView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UIImageView* bookmarkImageView;
@property(assign, nonatomic) __weak UIImageView* pinImageView;
@property(assign, nonatomic) __weak VK_Button* moreButton;
@property(assign, nonatomic) __weak UILabel* timeLabel;
@property(assign, nonatomic) __weak UILabel* nameLabel;
@property(assign, nonatomic) __weak UIImageView* avatarView;
@property(assign, nonatomic) __weak UIView* postHeaderView;
@property(readonly, assign, nonatomic) VK_FeedViewNotePostHeaderCellViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_FeedViewNotePostHeaderCellProxy* proxy;
@property(readonly, assign, nonatomic) VK_FeedNoteBlockModel* data;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(void)updateTimerFired;
-(void)updateBookmarkStatus;
-(void)onBookmarkStatusUpdateNotification:(id)notification;
-(void)openMoreActions;
-(void)configureViewsFrames;
-(void)createViews;
-(void)layoutSubviews;
-(void)internalReset;
-(void)internalUpdateData;
-(void)internalCellPressed;
-(void)dealloc;
-(void)internalSetup;
-(void)didCellDisappear;
-(void)willCellAppear;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffsReceiptProcessingScheduler : XXUnknownSuperclass {
	id<VK_TariffsReceiptProcessingScheduler> _delegate;
	NSString* _userId;
	NSMutableDictionary* _processedReceipts;
	NSTimer* _schedulingTimer;
}
@property(assign, nonatomic) __weak id<VK_TariffsReceiptProcessingScheduler> delegate;
@property(retain, nonatomic) NSTimer* schedulingTimer;
@property(retain, nonatomic) NSMutableDictionary* processedReceipts;
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(BOOL)isValidStatusForReceiptProcessing;
-(void)processReceiptString:(id)string withStoreId:(id)storeId withCompletion:(id)completion;
-(void)tryToProcessTariffsInBackground;
-(id)userSavedTariffsReceiptsKey;
-(void)loadProcessedReceipts;
-(void)saveProcessedReceipts;
-(void)addReceiptString:(id)string forStoreId:(id)storeId withCompletion:(id)completion;
-(void)addReceiptsByStoreIds:(id)ids withCompletion:(id)completion;
-(void)addNotificationForBackgroundTariffsProcessing:(id)backgroundTariffsProcessing;
-(void)setupTariffsReceiptProcessingSchedulerWithUserId:(id)userId;
-(void)dealloc;
-(void)reset;
-(id)initWithUserId:(id)userId;
@end

__attribute__((visibility("hidden")))
@interface VK_ArtistInfoModel : VK_ProfileBaseInfoModel {
	unsigned _folowersCount;
	unsigned _tracksCount;
	NSArray* _genres;
	NSArray* _popularTracks;
}
@property(retain, nonatomic) NSArray* popularTracks;
@property(retain, nonatomic) NSArray* genres;
@property(assign, nonatomic) unsigned tracksCount;
@property(assign, nonatomic) unsigned folowersCount;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ArtistModel : XXUnknownSuperclass {
	NSString* _artistId;
	VK_ArtistInfoModel* _info;
}
@property(retain, nonatomic) VK_ArtistInfoModel* info;
@property(readonly, assign, nonatomic) NSString* artistId;
-(void).cxx_destruct;
-(void)updateArtistInfoWithCompletion:(id)completion;
-(id)createTracksProvider;
-(id)initWithArtistId:(id)artistId;
@end

__attribute__((visibility("hidden")))
@interface _LNPopupTransitionCoordinator : XXUnknownSuperclass <UIViewControllerTransitionCoordinator> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)notifyWhenInteractionEndsUsingBlock:(id)block;
-(BOOL)animateAlongsideTransitionInView:(id)view animation:(id)animation completion:(id)completion;
-(BOOL)animateAlongsideTransition:(id)transition completion:(id)completion;
-(CGAffineTransform)targetTransform;
-(id)containerView;
-(id)viewForKey:(id)key;
-(id)viewControllerForKey:(id)key;
-(int)completionCurve;
-(float)completionVelocity;
-(float)percentComplete;
-(BOOL)isInterruptible;
-(double)transitionDuration;
-(BOOL)isCancelled;
-(BOOL)isInteractive;
-(BOOL)initiallyInteractive;
-(int)presentationStyle;
-(BOOL)isAnimated;
@end

__attribute__((visibility("hidden")))
@interface LNPopupContentView : XXUnknownSuperclass {
	UIPanGestureRecognizer* _popupInteractionGestureRecognizer;
	LNPopupCloseButton* _popupCloseButton;
}
@property(retain, nonatomic) LNPopupCloseButton* popupCloseButton;
@property(retain, nonatomic) UIPanGestureRecognizer* popupInteractionGestureRecognizer;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame popupBarStyle:(int)style;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LNPopupController : XXUnknownSuperclass <_LNPopupItemDelegate> {
	UIViewController* _containerController;
	LNPopupItem* _currentPopupItem;
	UIViewController* _currentContentController;
	BOOL _dismissalOverride;
	CGRect _cachedDefaultFrame;
	CGRect _cachedOpenPopupFrame;
	float _tresholdToPassForStatusBarUpdate;
	float _statusBarTresholdDir;
	float _statusBarTresholdStartDir;
	float _bottomBarOffset;
	UIView* _bottomBar;
	LNPopupBar* _popupBar;
	LNPopupContentView* _popupContentView;
	unsigned _popupControllerState;
	unsigned _popupControllerTargetState;
	UILongPressGestureRecognizer* _popupBarLongPressGestureRecognizer;
	LNPopupControllerLongPressGestureDelegate* _popupBarLongPressGestureRecognizerDelegate;
	UITapGestureRecognizer* _popupBarTapGestureRecognizer;
	UIViewController* _effectiveStatusBarUpdateController;
	CGPoint _lastPopupBarLocation;
	double _lastSeenMovement;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UIViewController* effectiveStatusBarUpdateController;
@property(assign, nonatomic) double lastSeenMovement;
@property(assign, nonatomic) CGPoint lastPopupBarLocation;
@property(retain, nonatomic) UITapGestureRecognizer* popupBarTapGestureRecognizer;
@property(retain, nonatomic) LNPopupControllerLongPressGestureDelegate* popupBarLongPressGestureRecognizerDelegate;
@property(retain, nonatomic) UILongPressGestureRecognizer* popupBarLongPressGestureRecognizer;
@property(assign, nonatomic) unsigned popupControllerTargetState;
@property(assign, nonatomic) unsigned popupControllerState;
@property(retain, nonatomic) LNPopupContentView* popupContentView;
@property(retain, nonatomic) LNPopupBar* popupBar;
@property(assign, nonatomic) __weak UIView* bottomBar;
-(void).cxx_destruct;
-(void)_applicationWillEnterForeground;
-(void)_applicationDidEnterBackground;
-(void)dismissPopupBarAnimated:(BOOL)animated completion:(id)completion;
-(void)closePopupAnimated:(BOOL)animated completion:(id)completion;
-(void)openPopupAnimated:(BOOL)animated completion:(id)completion;
-(void)presentPopupBarAnimated:(BOOL)animated openPopup:(BOOL)popup completion:(id)completion;
-(void)_movePopupBarAndContentToBottomBarSuperview;
-(void)_configurePopupBarFromBottomBar;
-(void)_reconfigureContent;
-(void)_popupItem:(id)item didChangeValueForKey:(id)key;
-(void)_reconfigure_rightBarButtonItems;
-(void)_reconfigure_leftBarButtonItems;
-(void)_reconfigureBarItems;
-(void)_reconfigure_subtitle;
-(void)_reconfigure_title;
-(void)_closePopupContent;
-(int)positionForBar:(id)bar;
-(void)_popupBarPresentationByUserPanGestureHandler:(id)handler;
-(void)_popupBarTapGestureRecognized:(id)recognized;
-(void)_popupBarLongPressGestureRecognized:(id)recognized;
-(void)_transitionToState:(unsigned)state animated:(BOOL)animated completion:(id)completion userOriginatedTransition:(BOOL)transition;
-(void)_setContentToState:(unsigned)state;
-(float)_percentFromPopupBarForBottomBarDisplacement;
-(float)_percentFromPopupBar;
-(void)_repositionPopupContent;
-(CGRect)_frameForClosedPopupBar;
-(CGRect)_frameForOpenPopupBar;
-(id)initWithContainerViewController:(id)containerViewController;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewController : VK_BaseTableViewController <VK_TableControllerDelegate, TLYShyNavBarManagerDelegate> {
	BOOL _needToHandleShyNavigationBarBasedOnStatusBar;
	VK_FeedDataProvider* _updatedFeedDataProvider;
	VK_FeedTableControllerConfiguration* _tableControllerConfiguration;
	VK_NewMessagesView* _newMessagesView;
	VK_FeedActionsView* _feedActionsView;
	VK_NotificationObserver* _notificationObserver;
	CGPoint _lastContentOffset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL needToShowNewMessagesView;
@property(assign, nonatomic) CGPoint lastContentOffset;
@property(assign, nonatomic) BOOL needToHandleShyNavigationBarBasedOnStatusBar;
@property(retain, nonatomic) VK_NotificationObserver* notificationObserver;
@property(assign, nonatomic) __weak VK_FeedActionsView* feedActionsView;
@property(assign, nonatomic) __weak VK_NewMessagesView* newMessagesView;
@property(assign, nonatomic) __weak VK_FeedTableControllerConfiguration* tableControllerConfiguration;
@property(retain, nonatomic) VK_FeedDataProvider* updatedFeedDataProvider;
@property(readonly, assign, nonatomic) VK_FeedDataProvider* feedDataProvider;
-(void).cxx_destruct;
-(void)statusBarTouched;
-(void)shyNavBarManagerDidFinishContracting:(id)shyNavBarManager;
-(void)tableViewDidScrollToTop:(id)tableView;
-(void)tableViewDidScroll:(id)tableView;
-(void)tableControllerRefreshingFinished:(id)finished;
-(void)tableViewDidFinishScrollAnimation:(id)tableView;
-(id)sectionIndeciesForBlocksWithConditionBlock:(id)conditionBlock;
-(void)openMoreActionsWithLocation:(CGPoint)location block:(id)block andUserModel:(id)model;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(void)showUpdatedDataProvider;
-(void)prepareUpdatedDataProviderWithReload:(BOOL)reload;
-(void)showNewMessagesViewIfNeeded;
-(void)settingsButtonPressed;
-(void)peopleButtonPressed;
-(void)internalStatusBarVisibilityChanged;
-(void)internalUpdateTableController;
-(void)addCachedCells:(id)cells withCount:(unsigned)count forTableController:(id)tableController;
-(void)internalPrepareTableController:(id)controller;
-(unsigned short)internalAnaliticScreen;
-(id)internalCreateTableControllerConfiguration;
-(id)internalTitle;
-(void)prepareNavigationBarButtons;
-(void)internalSetup;
-(BOOL)pullToRefreshEnabled;
-(void)refreshTableContoller;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareFriendsViewController : VK_BaseTableViewController <VK_InlineSearchParent> {
	BOOL _isMyProfile;
	BOOL _needToHandleContentOffset;
	VK_ProfileBaseInfoModel* _profileBaseInfoModel;
	unsigned _shareType;
	VK_TrackModel* _trackModel;
	NSString* _entryId;
	VK_InlineSearchAnimationManager* _inlineSearchAnimationManager;
	VK_InlineSearchableNavigationControllerDelegate* _navigationControllerDelegate;
	VK_InlineSearchConfiguration* _friendsInlineSearchConfiguration;
	VK_InlineSearchViewController* _inlineSearchViewController;
	UIActivityIndicatorView* _activityIndicatorView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL isMyProfile;
@property(copy, nonatomic) NSString* entryId;
@property(retain, nonatomic) VK_TrackModel* trackModel;
@property(assign, nonatomic) unsigned shareType;
@property(retain, nonatomic) VK_ProfileBaseInfoModel* profileBaseInfoModel;
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicatorView;
@property(readonly, assign, nonatomic) float searchHiddenOffset;
@property(assign, nonatomic) BOOL needToHandleContentOffset;
@property(assign, nonatomic) __weak VK_InlineSearchViewController* inlineSearchViewController;
@property(retain, nonatomic) VK_InlineSearchConfiguration* friendsInlineSearchConfiguration;
@property(retain, nonatomic) VK_InlineSearchableNavigationControllerDelegate* navigationControllerDelegate;
@property(retain, nonatomic) VK_InlineSearchAnimationManager* inlineSearchAnimationManager;
-(void).cxx_destruct;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(void)dataProviderErrorReceived:(id)received error:(id)error;
-(void)presentInlineSearchViewControllerWithSearchView:(id)searchView andConfiguration:(id)configuration;
-(void)showSearchViewContainer;
-(void)hideSearchViewContainer;
-(void)tableControllerCellItemsAllocated:(id)allocated;
-(void)openShareViewWithEntryId:(id)entryId userModel:(id)model onMyPage:(BOOL)page;
-(void)openShareViewWithTrackModel:(id)trackModel cellData:(id)data onMyPage:(BOOL)page;
-(void)shareMessageWithTrackModel:(id)trackModel cellData:(id)data onMyPage:(BOOL)page;
-(float)internalDefaultMinimalContentHeight;
-(id)internalCreateTableControllerConfiguration;
-(id)internalTitle;
-(void)internalSetup;
-(void)internalCloseModalViewController;
-(void)closeModalViewController;
-(void)internalConfigureTitleLabel:(id)label;
-(void)configureNavigationBar;
-(void)configureActivityIndicator;
-(void)setCustomTableController:(id)controller;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_NotificationObserver : XXUnknownSuperclass {
	id _observer;
	NSNotificationCenter* _notificationCenter;
	NSMutableSet* _notifications;
	NSMutableDictionary* _selectors;
}
@property(retain, nonatomic) NSMutableDictionary* selectors;
@property(retain, nonatomic) NSMutableSet* notifications;
@property(retain, nonatomic) NSNotificationCenter* notificationCenter;
@property(assign, nonatomic) __weak id observer;
+(id)notificationObserverWith:(id)with;
-(void).cxx_destruct;
-(void)dealloc;
-(void)dispose;
-(void)postNotification:(id)notification;
-(void)handler:(id)handler;
-(void)stopObserveAllNotifications;
-(void)stopObserve:(id)observe object:(id)object;
-(void)stopObserve:(id)observe;
-(void)observe:(id)observe withSelector:(SEL)selector andObject:(id)object;
-(void)observe:(id)observe withSelector:(SEL)selector;
-(void)removeAllNotifcations;
-(id)initWithObserver:(id)observer andNotificationCenter:(id)center;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackModelObserver : XXUnknownSuperclass {
}
+(void)trackUpdatedFavoriteStatus:(id)status;
+(void)unregisterTrack:(id)track;
+(void)registerTrack:(id)track;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface VK_DateHelper : XXUnknownSuperclass {
	NSDateFormatter* _onlyTimeFormatter;
	NSDateFormatter* _onlyDateFormatter;
	NSDateFormatter* _onlyDateFullFormatter;
	NSDateFormatter* _dateFullFormatter;
	NSLocale* _locale;
}
@property(retain, nonatomic) NSLocale* locale;
+(id)shared;
-(void).cxx_destruct;
-(void)setup;
-(id)dateFullFormatter;
-(id)onlyDateFullFormatter;
-(id)onlyDayFormatter;
-(id)onlyTimeFormatter;
-(double)beginOfCurrentYear;
-(long)beginOfYesterday;
-(double)beginOfCurrentDay;
-(id)stringDateFromTimeInterval:(double)timeInterval;
-(id)formatTime:(double)time;
-(id)stringFromSeconds:(double)seconds withFormat:(unsigned)format;
-(id)stringFromSeconds:(double)seconds;
-(id)stringWithVKFormattedPastDateInterval:(double)vkformattedPastDateInterval;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileMessageView : XXUnknownSuperclass {
	VK_BaseLabel* _messageLabel;
	VK_Button* _actionButton;
	NSLayoutConstraint* _messageLabelBottomMaxConstraint;
	UIImageView* _lockView;
	NSLayoutConstraint* _containerVerticalCenterConstraint;
	id _actionBlock;
}
@property(copy, nonatomic) id actionBlock;
@property(assign, nonatomic) __weak NSLayoutConstraint* containerVerticalCenterConstraint;
@property(assign, nonatomic) __weak UIImageView* lockView;
@property(assign, nonatomic) __weak NSLayoutConstraint* messageLabelBottomMaxConstraint;
@property(assign, nonatomic) __weak VK_Button* actionButton;
@property(assign, nonatomic) __weak VK_BaseLabel* messageLabel;
-(void).cxx_destruct;
-(void)actionButtonPressed:(id)pressed;
-(void)configure;
-(void)hideMessage;
-(void)setVerticalOffset:(float)offset;
-(void)showMessageWithText:(id)text image:(id)image actionText:(id)text3 andActionBlock:(id)block;
-(void)awakeFromNib;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_NetworkErrorHandler : XXUnknownSuperclass <VK_RequestErrorHandler> {
	NSMutableSet* _listeners;
	NSSet* _ignoringErrorsCodes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSSet* ignoringErrorsCodes;
@property(retain, nonatomic) NSMutableSet* listeners;
+(id)shared;
-(void).cxx_destruct;
-(void)notificateListenersOnRequestStarted:(id)started;
-(void)notificateListenersOnRequestFinished:(id)finished;
-(void)notificateListenersOnRequestFailed:(id)failed;
-(void)setup;
-(void)unsubscribe:(id)unsubscribe;
-(void)subscribe:(id)subscribe;
-(void)handleRequestStarted:(id)started;
-(void)handleRequestFinished:(id)finished;
-(BOOL)handleRequestError:(id)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_CircleChart : XXUnknownSuperclass {
	UIColor* _backgroundShadowColor;
	UIColor* _strokeColor;
	NSNumber* _total;
	NSNumber* _current;
	NSNumber* _lineWidth;
	CAShapeLayer* _circle;
	CAShapeLayer* _circleBackground;
	double _duration;
}
@property(retain, nonatomic) CAShapeLayer* circleBackground;
@property(retain, nonatomic) CAShapeLayer* circle;
@property(assign, nonatomic) double duration;
@property(retain, nonatomic) NSNumber* lineWidth;
@property(retain, nonatomic) NSNumber* current;
@property(retain, nonatomic) NSNumber* total;
@property(retain, nonatomic) UIColor* strokeColor;
@property(retain, nonatomic) UIColor* backgroundShadowColor;
-(void).cxx_destruct;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)resetByCurrent:(unsigned)current;
-(void)updateChartByCurrent:(id)current byTotal:(id)total;
-(void)updateChartByCurrent:(id)current;
-(void)growChartByAmount:(id)amount;
-(void)strokeChart;
-(id)initWithFrame:(CGRect)frame total:(id)total clockwise:(BOOL)clockwise andRadius:(float)radius andStartAngle:(id)angle;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumHeaderView : XXUnknownSuperclass {
	UIImageView* _coverImageView;
	VK_BaseLabel* _artistNameLabel;
	VK_BaseLabel* _albumNameLabel;
	VK_BaseLabel* _infoLabel;
	NSLayoutConstraint* _topShadowHeightConstraint;
}
@property(readonly, assign, nonatomic) float albumNameLabelYPosition;
@property(assign, nonatomic) __weak NSLayoutConstraint* topShadowHeightConstraint;
@property(assign, nonatomic) __weak VK_BaseLabel* infoLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* albumNameLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* artistNameLabel;
@property(assign, nonatomic) __weak UIImageView* coverImageView;
-(void).cxx_destruct;
-(id)infoStringFromModel:(id)model;
-(void)updateBoundsWithWidth:(float)width;
-(void)configureWithAlbumInfoModel:(id)albumInfoModel;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_UserBaseCellProxy : VK_TableCellProxy {
	BOOL _isRightButtonHidden;
}
@property(assign, nonatomic) BOOL isRightButtonHidden;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_UserBaseCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_UserBaseCell : VK_TableViewCellBase {
	UIImageView* _avatarImageView;
	UILabel* _userNameLabel;
	UIView* _rightView;
	UIImageView* _verifiedMark;
}
@property(readonly, assign, nonatomic) VK_UserBaseInfoModel* profileData;
@property(assign, nonatomic) __weak UIImageView* verifiedMark;
@property(assign, nonatomic) __weak UIView* rightView;
@property(assign, nonatomic) __weak UILabel* userNameLabel;
@property(assign, nonatomic) __weak UIImageView* avatarImageView;
@property(readonly, assign, nonatomic) VK_UserBaseCellProxy* proxy;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(float)internalPartialSeparatorLeadingSpace;
-(void)layoutSubviews;
-(void)internalLayoutRightView:(id)view;
-(id)internalCreateRightView;
-(void)createViews;
-(void)internalReset;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_UserSubscriptionsManager : VK_SubscriptionsBaseManager {
}
+(id)currentManager;
-(id)internalGetProfilesFromResponse:(id)response;
-(id)internalCreateRequest;
-(id)profilesUpdatingFailedNotification;
-(id)profilesChangedNotification;
-(id)internalProfilesKey;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareView : XXUnknownSuperclass {
	id _onSendTapBlock;
	NSString* _shareText;
	UIView* _shareView;
	UIImageView* _sharedImageView;
	UITextView* _sharedTextView;
}
@property(readonly, copy, nonatomic) NSString* enteredText;
@property(copy, nonatomic) NSString* shareText;
@property(copy, nonatomic) id onSendTapBlock;
@property(retain, nonatomic) UITextView* sharedTextView;
@property(retain, nonatomic) UIImageView* sharedImageView;
@property(retain, nonatomic) UIView* shareView;
-(void).cxx_destruct;
-(void)updateShareViewWithKeyboardHeight:(float)keyboardHeight andAnimationDuration:(double)duration;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillChangeFrame:(id)keyboard;
-(void)removeKeyboardObservers;
-(void)addKeyboardObservers;
-(void)internalDismissWithCompletion:(id)completion;
-(void)hide;
-(void)show;
-(void)send:(id)send;
-(void)cancel:(id)cancel;
-(void)setShareImage:(id)image;
-(void)configureWithImage:(id)image text:(id)text;
-(void)dealloc;
-(id)initWithType:(unsigned)type andImage:(id)image andText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface VK_ValidationManager : XXUnknownSuperclass <VK_ValidationViewControllerDelegate> {
	BOOL _needToUpdatePasskey;
	NSString* _accessToken;
	NSString* _passkey;
	NSMutableArray* _completionBlocks;
	VK_AuthTokenRequest* _authTokenRequest;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VK_AuthTokenRequest* authTokenRequest;
@property(copy, nonatomic) NSString* passkey;
@property(copy, nonatomic) NSString* accessToken;
@property(assign, nonatomic) BOOL needToUpdatePasskey;
@property(retain, nonatomic) NSMutableArray* completionBlocks;
+(id)shared;
-(void).cxx_destruct;
-(void)notifySubscribersWithCancellationFlag:(BOOL)cancellationFlag;
-(void)updatePasskey;
-(void)handleAccessToken:(id)token withCancellationFlag:(BOOL)cancellationFlag;
-(id)extractUrlFromResponse:(id)response;
-(void)validationViewController:(id)controller validationFinishedWithAccessToken:(id)accessToken;
-(void)validationViewControllerValidationCanceled:(id)canceled;
-(void)validateWithResponse:(id)response passkeyUpdate:(BOOL)update andCompletionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface VK_BluredImageView : XXUnknownSuperclass {
	BOOL _blurEnabled;
	float _blurRadius;
	UIImage* _originalImage;
	UIImage* _cachedBluredImage;
}
@property(assign, nonatomic) float blurRadius;
@property(assign, nonatomic) BOOL blurEnabled;
@property(retain, nonatomic) UIImage* cachedBluredImage;
@property(retain, nonatomic) UIImage* originalImage;
-(void).cxx_destruct;
-(id)bluredImage;
-(void)updateImageState;
-(id)image;
-(void)setImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface _LNWeakRef : XXUnknownSuperclass {
	id _object;
}
@property(assign, nonatomic) __weak id object;
+(id)refWithObject:(id)object;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackTable : VK_DataTable {
}
+(id)notDownloadedPredicate;
-(unsigned)countByImage:(id)image;
-(id)getTracksByAlbum:(id)album;
-(id)getNotDownloaded;
-(id)firstNotDownloaded;
-(id)getByManagedId:(id)anId;
-(id)initWithModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewShadowCellProxy : VK_TableCellProxy {
}
@property(readonly, assign, nonatomic) float height;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewShadowCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewShadowCell : VK_TableViewCellBase {
	UIImageView* _shadowImageView;
}
@property(assign, nonatomic) __weak UIImageView* shadowImageView;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(void)createViews;
-(id)internalImage;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_TableViewSectionItem : XXUnknownSuperclass {
	NSMutableArray* _cellsItems;
	id _data;
}
@property(readonly, assign, nonatomic) id data;
@property(readonly, assign, nonatomic) NSMutableArray* cellsItems;
+(id)sectionWithCellsItems:(id)cellsItems;
+(id)sectionWithCellsItems:(id)cellsItems andData:(id)data;
-(void).cxx_destruct;
-(id)init;
-(id)initWithCellsItems:(id)cellsItems;
-(id)initWithCellsItems:(id)cellsItems andData:(id)data;
-(void)addBottomShadow;
-(void)addTopShadow;
-(void)addShadows:(unsigned)shadows;
-(void)addAllShadows;
@end

__attribute__((visibility("hidden")))
@interface CachedHTTPDataSource : STKDataSource <STKAsyncLoadingDataSource> {
	BOOL _dataSupportsSeek;
	BOOL _needData;
	BOOL _isSeeking;
	BOOL _isRegistered;
	id _loadingStartedBlock;
	id _loadingProgressBlock;
	id _loadingFinishedBlock;
	id _loadingErrorBlock;
	NSURL* _url;
	NSThread* _baseThread;
	NSOperationQueue* _operationQueue;
	CachedHTTPDataSourceLoadingOperation* _loadingOperation;
	unsigned long _dataAudioFileTypeHint;
	CachedHTTPDataSourceFile* _cacheFile;
	NSNumber* _reloadingSeekOffset;
	long long _dataLength;
	long long _dataSeekOffset;
}
@property(readonly, assign, nonatomic) __weak NSOperationQueue* loadingOperationQueue;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSNumber* reloadingSeekOffset;
@property(assign, nonatomic) BOOL isRegistered;
@property(assign, nonatomic) BOOL isSeeking;
@property(assign, nonatomic) BOOL needData;
@property(retain, nonatomic) CachedHTTPDataSourceFile* cacheFile;
@property(assign, nonatomic) unsigned long dataAudioFileTypeHint;
@property(assign, nonatomic) BOOL dataSupportsSeek;
@property(assign, nonatomic) long long dataSeekOffset;
@property(assign, nonatomic) long long dataLength;
@property(assign, nonatomic) __weak CachedHTTPDataSourceLoadingOperation* loadingOperation;
@property(assign, nonatomic) __weak NSOperationQueue* operationQueue;
@property(retain, nonatomic) NSThread* baseThread;
@property(retain, nonatomic) NSURL* url;
@property(copy, nonatomic) id loadingErrorBlock;
@property(copy, nonatomic) id loadingFinishedBlock;
@property(copy, nonatomic) id loadingProgressBlock;
@property(copy, nonatomic) id loadingStartedBlock;
-(void).cxx_destruct;
-(void)notifyDelegateErrorOccured;
-(void)notifyDelegateEof;
-(void)notifyDelegateDataAvailable;
-(void)dataSourceLoadingError;
-(void)dataSourceLoadingFinished;
-(void)dataSourceLoadingProgress:(id)progress;
-(void)dataSourceLoadingStarted:(id)started;
-(void)reloadDataWithSeekOffset:(long long)seekOffset andContinuation:(BOOL)continuation;
-(void)safelyPerformSelectorOnBaseThread:(SEL)thread withObject:(id)object waitUntilDone:(BOOL)done;
-(void)configureWithURL:(id)url andOperationQueue:(id)queue;
-(BOOL)supportsSeek;
-(unsigned long)audioFileTypeHint;
-(BOOL)hasBytesAvailable;
-(void)close;
-(void)unregisterForEvents;
-(BOOL)registerForEvents:(id)events;
-(long long)position;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
-(long long)length;
-(void)resumeLoadingIfNeeded;
-(void)pauseLoadingIfNeeded;
-(void)dealloc;
-(id)initWithURL:(id)url andOperationQueue:(id)queue;
@end

__attribute__((visibility("hidden")))
@interface VK_SubscriptionsManager : VK_BaseManager {
	BOOL _scheduleUpdatingEnabled;
	BOOL _isScheduleReloading;
	NSString* _contentEncryptionKey;
	unsigned _internalStatus;
	double _tariffEndPeriod;
	double _tariffServerTime;
}
@property(readonly, assign, nonatomic) unsigned internalStatus;
@property(readonly, assign, nonatomic) unsigned status;
@property(assign, nonatomic) BOOL scheduleUpdatingEnabled;
@property(readonly, assign, nonatomic) NSString* contentEncryptionKey;
@property(readonly, assign, nonatomic) BOOL isValidTime;
@property(assign, nonatomic) BOOL isScheduleReloading;
@property(readonly, assign, nonatomic) BOOL isHaveSecureKey;
@property(assign, nonatomic) double tariffServerTime;
@property(assign, nonatomic) double tariffEndPeriod;
+(id)currentManager;
-(void).cxx_destruct;
-(void)resetData;
-(id)secureKeyRequestTask;
-(BOOL)validateSecureKey:(id)key;
-(void)setNewSecureKey:(id)key;
-(void)loadSecureKey;
-(void)networkStatusDidChanged;
-(void)onTariffDidChanged;
-(void)onStatusChangedNotificate;
-(void)timeValidationStatusDidChanged;
-(void)internalWillUserDataUnload;
-(void)internalNeedLoadUserData;
-(void)setInternalStatus:(unsigned)status withSaving:(BOOL)saving;
-(void)setInternalStatus:(unsigned)status;
-(BOOL)validate;
-(void)scheduleSubscriptionsChanging;
-(void)internalLoadNewSecureKeyWithCompletion:(id)completion;
-(void)showSubscriptionsMessageWithNewStatus:(unsigned)newStatus andPrevStatus:(unsigned)status;
-(void)onSubscriptionsChangingFailed;
-(void)scheduleReloadSubscriptions;
-(void)reloadSubscriptionsWithCompletion:(id)completion;
-(void)dealloc;
-(id)init;
-(id)reloadSubscriptionsTask;
@end

__attribute__((visibility("hidden")))
@interface VK_VCFactory : XXUnknownSuperclass {
	id<VK_VCFactoryImplProtocol> _impl;
}
@property(retain, nonatomic) id<VK_VCFactoryImplProtocol> impl;
+(id)shared;
-(void).cxx_destruct;
-(id)createControllerWithType:(unsigned)type;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackRecord : VK_DataRecord {
}
@property(retain, nonatomic) NSString* lyricsText;
@property(retain, nonatomic) NSNumber* lyricsId;
@property(retain, nonatomic) NSNumber* downloadingError;
@property(retain, nonatomic) NSNumber* state;
@property(retain, nonatomic) NSNumber* isCachingAvailable;
@property(retain, nonatomic) NSString* trackId;
@property(retain, nonatomic) NSNumber* ownerId;
@property(retain, nonatomic) NSString* trackTitle;
@property(retain, nonatomic) NSString* trackFilePath;
@property(retain, nonatomic) NSNumber* number;
@property(retain, nonatomic) NSNumber* duration;
@property(assign, nonatomic) BOOL isInMyAudio;
@property(retain, nonatomic) NSNumber* downloadingStatus;
@property(retain, nonatomic) NSString* albumTitle;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) NSString* artistTitle;
@property(retain, nonatomic) NSString* artistId;
@property(retain, nonatomic) NSString* coverUrl;
-(void)fillData:(id)data;
-(id)toTrack;
@end

__attribute__((visibility("hidden")))
@interface VK_DataRecord : XXUnknownSuperclass {
}
@property(retain, nonatomic) NSNumber* id;
@end

__attribute__((visibility("hidden")))
@interface VK_NetworkReachability : XXUnknownSuperclass {
	int _networkStatus;
	int _mobileConnectionType;
	id _finishConfigurationCompleteBlock;
	NSMutableSet* _subscribers;
	CTTelephonyNetworkInfo* _telephonyNetworkInfo;
}
@property(copy, nonatomic) id finishConfigurationCompleteBlock;
@property(readonly, assign, nonatomic) NSString* networkKey;
@property(readonly, assign, nonatomic) int mobileConnectionType;
@property(readonly, assign, nonatomic) int networkStatus;
@property(readonly, assign, nonatomic) BOOL isNetworkReachable;
@property(retain, nonatomic) CTTelephonyNetworkInfo* telephonyNetworkInfo;
@property(retain, nonatomic) NSMutableSet* subscribers;
+(id)shared;
+(void)initialize;
-(void).cxx_destruct;
-(id)networkKeyForMobile;
-(id)networkKeyForWiFi;
-(void)onChangingMobileConnectionType;
-(void)setup;
-(int)vkStatusFromAFNetworkingStatus:(int)afnetworkingStatus;
-(void)statusChangedSubscribersNotificate;
-(void)reachableChangedSubscribersNotificate;
-(void)reachabiltyAFNetowrkingStatusChanged:(int)changed;
-(void)unsubscribe:(id)unsubscribe;
-(void)subscribe:(id)subscribe;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TextField : XXUnknownSuperclass {
	float _textInsetLeft;
	float _textInsetRight;
	float _textInsetTop;
	float _textInsetBottom;
	float _cursorWidth;
	float _cursorHeight;
}
@property(assign, nonatomic) float cursorHeight;
@property(assign, nonatomic) float cursorWidth;
@property(assign, nonatomic) float textInsetBottom;
@property(assign, nonatomic) float textInsetTop;
@property(assign, nonatomic) float textInsetRight;
@property(assign, nonatomic) float textInsetLeft;
-(CGRect)internalTextRectForBounds:(CGRect)bounds;
-(void)setupVK_TextField;
-(CGRect)caretRectForPosition:(id)position;
-(CGRect)editingRectForBounds:(CGRect)bounds;
-(CGRect)textRectForBounds:(CGRect)bounds;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackCellBaseProxy : VK_TableCellProxy {
	int _moreActionsTypes;
	int _swipeButtonsTypes;
	id _trackAddToMyAudioBlock;
	id _trackAddToFavoriteBlock;
	id _trackRemoveButtonPressedBlock;
	id _trackDownloadingStartBlock;
	id _trackDownloadingCancelBlock;
	unsigned _trackStateBehavior;
}
@property(assign, nonatomic) unsigned trackStateBehavior;
@property(copy, nonatomic) id trackDownloadingCancelBlock;
@property(copy, nonatomic) id trackDownloadingStartBlock;
@property(copy, nonatomic) id trackRemoveButtonPressedBlock;
@property(copy, nonatomic) id trackAddToFavoriteBlock;
@property(copy, nonatomic) id trackAddToMyAudioBlock;
@property(assign, nonatomic) int swipeButtonsTypes;
@property(assign, nonatomic) int moreActionsTypes;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackCellBaseViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackCellBase : VK_TableViewCellBase <AudioPlayerDelegate> {
	UIView* _swipeSeparatorView;
	NSArray* _swipeButtons;
	BOOL _isActive;
	BOOL _isPanOpening;
	BOOL _panRecognizerAdded;
	BOOL _disablingState;
	UILabel* _durationLabel;
	UILabel* _titleLabel;
	float _prevPanXPos;
	UIPanGestureRecognizer* _panRecognizer;
	NSDictionary* _cachedSwipeButtons;
	UIView* _swipeableView;
	UIView* _activeBackgroundView;
	VK_TrackStateView* _trackStateView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UILabel* titleLabel;
@property(assign, nonatomic) __weak UILabel* durationLabel;
@property(readonly, assign, nonatomic) VK_TrackModel* data;
@property(assign, nonatomic) BOOL disablingState;
@property(retain, nonatomic) VK_TrackStateView* trackStateView;
@property(readonly, assign, nonatomic) float swipeableViewRightMargin;
@property(readonly, assign, nonatomic) __weak UIView* cellContentView;
@property(assign, nonatomic) __weak UIView* activeBackgroundView;
@property(assign, nonatomic) __weak UIView* swipeableView;
@property(retain, nonatomic) NSArray* swipeButtons;
@property(retain, nonatomic) NSDictionary* cachedSwipeButtons;
@property(assign, nonatomic) BOOL panRecognizerAdded;
@property(retain, nonatomic) UIPanGestureRecognizer* panRecognizer;
@property(readonly, assign, nonatomic) VK_TrackCellBaseViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_TrackCellBaseProxy* proxy;
@property(assign, nonatomic) BOOL isPanOpening;
@property(assign, nonatomic) float prevPanXPos;
@property(assign, nonatomic) BOOL isActive;
+(BOOL)internalCanHaveSeparator;
+(void)initialize;
-(void).cxx_destruct;
-(void)swipeMenuShow:(BOOL)show animated:(BOOL)animated;
-(void)swipeClose;
-(void)swipeOpen;
-(void)internalUpdatePlayingAudioState:(BOOL)state;
-(void)updatePlayingAudioState:(BOOL)state;
-(void)updatePlayingAudioStateIfNeeded;
-(void)chooseAudioState;
-(void)updateActiveState;
-(BOOL)supportCellReordering;
-(void)moreActionsBtnPressed;
-(void)audioPlayer:(id)player didStateChanged:(unsigned)changed;
-(void)audioPlayer:(id)player didCurrentTrackChanged:(id)changed;
-(void)updateMenuState:(BOOL)state animated:(BOOL)animated withCompletion:(id)completion;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)checkVelocityOf:(id)of;
-(float)maxViewRightConstraint;
-(float)minViewRightConstraint;
-(void)panGestureFinished:(id)finished;
-(void)updateButtonsWithNewPosition:(float)newPosition;
-(void)panGestureChanged:(id)changed;
-(void)panGestureBegun:(id)begun;
-(void)cancelSwipeRecognizing;
-(void)panThisCell:(id)cell;
-(void)resetSlideIfNeeded;
-(void)setSwipeableViewRightMargin:(float)margin;
-(void)removeSlideBehavior;
-(void)addSlideBehaviorIfNeeded;
-(void)internalDidUpdatedDisablingState:(BOOL)internal;
-(void)updateDisablingState:(BOOL)state;
-(void)setCustomSeparatorStyle:(unsigned)style;
-(void)internalUpdateData;
-(void)updateSwipeSeparatorFrame;
-(void)layoutSubviews;
-(void)removeSlideButtons;
-(void)configurateSwipeButtons;
-(void)createSwipeButtonsIfNeeded;
-(void)createTrackStateViewInContainer:(id)container;
-(void)internalCreateAdditionalViewsInContainer:(id)container;
-(void)createViews;
-(void)internalSetup;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseProfileViewController : VK_BaseTableViewController <VK_ProfileHeaderViewDelegate> {
	unsigned _selectedSegmentIndex;
	VK_ProfileHeaderView* _profileHeaderView;
	VK_TableControllerSwitcher* _tableControllerSwitcher;
	UIView* _contentView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) __weak VK_ProfileHeaderView* profileHeaderView;
@property(readonly, assign, nonatomic) unsigned selectedSegmentIndex;
@property(readonly, assign, nonatomic) VK_UserBaseInfoModel* profileBaseInfoModel;
@property(assign, nonatomic) __weak UIView* contentView;
@property(retain, nonatomic) VK_TableControllerSwitcher* tableControllerSwitcher;
-(void).cxx_destruct;
-(void)backButtonPressedInProfileHeaderView:(id)profileHeaderView;
-(id)profileModelForHeaderView:(id)headerView;
-(id)titleForProfileHeaderView:(id)profileHeaderView;
-(unsigned)segmenIndexForProfileHeaderView:(id)profileHeaderView;
-(BOOL)shouldShowBackButtonForProfileHeaderView:(id)profileHeaderView;
-(void)profileHeaderView:(id)view updateNavBarContainer:(id)container;
-(void)profileHeaderView:(id)view didSegmentSelected:(unsigned)selected;
-(id)segmentTitlesForProfileHeaderView:(id)profileHeaderView;
-(BOOL)pullToRefreshEnabled;
-(id)internalContentView;
-(BOOL)showNavigationBar;
-(void)viewDidLoad;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_NoteTableControllerConfiguration : VK_TableControllerBaseConfiguration {
	VK_FeedNoteBlockModel* _note;
	id _prepareDataAllocatorBlock;
	VK_FeedDataProviderBase* _dataProiver;
}
@property(copy, nonatomic) id prepareDataAllocatorBlock;
@property(retain, nonatomic) VK_FeedNoteBlockModel* note;
@property(retain, nonatomic) VK_FeedDataProviderBase* dataProiver;
-(void).cxx_destruct;
-(id)convertUrlToVkFormat:(id)vkFormat;
-(void)setup;
-(id)internalDataProvider;
-(id)internalTableViewDataAllocator;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AnaliticManager : VK_BaseManager <VK_AnaliticServiceDelegate> {
	VK_AnaliticService* _currentService;
	NSMutableArray* _eventsWithoutSerivce;
	NSMutableArray* _audiosWithoutService;
	NSString* _UID;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* UID;
@property(retain, nonatomic) NSMutableArray* audiosWithoutService;
@property(retain, nonatomic) NSMutableArray* eventsWithoutSerivce;
@property(retain, nonatomic) VK_AnaliticService* currentService;
+(id)shared;
-(void).cxx_destruct;
-(void)onServiceWillSendData:(id)onService;
-(void)updateServiceData:(id)data;
-(id)registerNewServiceIfNeeded:(id)needed;
-(void)internalWillUserDataUnload;
-(void)onUpdateCurrentServiceAutosendIterval;
-(void)trackEventsWithoutServiceToCurrent;
-(void)internalDidUserDataLoaded;
-(void)updateUIDIfNeeded;
-(void)loadUID;
-(void)trackAudio:(id)audio;
-(void)trackEvent:(id)event;
-(void)prepareService:(id)service;
-(void)VK_AnaliticManagerSetup;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseWebViewController : VK_BaseViewController <UIWebViewDelegate> {
	UIWebView* _webView;
	UIActivityIndicatorView* _activityIndicatorView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UIWebView* webView;
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicatorView;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidFinishLoad:(id)webView;
-(void)configureNavigationBar;
-(void)configureViews;
-(BOOL)internalShouldStartLoadUrl:(id)internal;
-(void)internalFinishedLoading;
-(void)internalLoadUrl:(id)url;
-(void)internalCancelWebAction;
-(void)internalStartWebAction;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareFriendsTableViewDataAllocator : VK_UsersTableViewDataAllocator {
	unsigned _shareType;
}
@property(assign, nonatomic) unsigned shareType;
-(id)smallHeaderCellItem;
-(id)shareCellItem;
-(id)internalTopCellItems;
@end

__attribute__((visibility("hidden")))
@interface VK_UsersTableControllerConfiguration : VK_TableControllerBaseConfiguration {
	BOOL _isRightButtonHidden;
	BOOL _isFriendConfiguration;
	id<VK_DataProvider> _dataProvider;
	unsigned _shadowsType;
	id _onSearchStartBlock;
	NSString* _searchPlaceholderText;
	VK_UserBaseCellProxy* _customUserProxy;
	id _onSelectBlock;
	id _onWriteOnPageBlock;
}
@property(copy, nonatomic) id onWriteOnPageBlock;
@property(copy, nonatomic) id onSelectBlock;
@property(retain, nonatomic) VK_UserBaseCellProxy* customUserProxy;
@property(assign, nonatomic) BOOL isFriendConfiguration;
@property(assign, nonatomic) BOOL isRightButtonHidden;
@property(copy, nonatomic) NSString* searchPlaceholderText;
@property(copy, nonatomic) id onSearchStartBlock;
@property(assign, nonatomic) unsigned shadowsType;
@property(retain, nonatomic) id<VK_DataProvider> dataProvider;
-(void).cxx_destruct;
-(id)internalDataProvider;
-(id)internalTableViewDataAllocator;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TableControllerBaseConfiguration : XXUnknownSuperclass <VK_TableControllerConfiguration> {
	VK_TableController* _tableController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) __weak VK_TableController* tableController;
-(void).cxx_destruct;
-(id)internalDataProvider;
-(id)internalTableViewDataAllocator;
-(void)applyToTableController:(id)tableController;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTableControllerConfiguration : VK_TableControllerBaseConfiguration {
	id<VK_DataProvider> _customDataProvider;
	id<VK_TableViewDataAllocator> _customTableViewDataAllocator;
}
@property(retain, nonatomic) id<VK_TableViewDataAllocator> customTableViewDataAllocator;
@property(retain, nonatomic) id<VK_DataProvider> customDataProvider;
-(void).cxx_destruct;
-(id)internalDataProvider;
-(id)internalTableViewDataAllocator;
@end

__attribute__((visibility("hidden")))
@interface VK_DataTable : XXUnknownSuperclass {
	NSString* _entityName;
	VK_CoreDataModel* _dataModel;
}
@property(readonly, assign, nonatomic) VK_CoreDataModel* dataModel;
@property(readonly, assign, nonatomic) NSString* entityName;
-(void).cxx_destruct;
-(void)deleteRecord:(id)record;
-(unsigned)count;
-(void)deleteById:(unsigned)anId;
-(void)clear;
-(BOOL)containsById:(unsigned)anId;
-(id)getRecordById:(unsigned)anId;
-(id)createRecord;
-(id)getItems;
-(id)initWithModel:(id)model andEntityName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface VK_CCHLinkTextView : CCHLinkTextView <NSLayoutManagerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)internalLinkTextViewSetup;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_PlayerCoverView : VK_NibView {
	BOOL _needShowLyrics;
	id _closeBlock;
	VK_TrackModel* _currentTrack;
	UIImageView* _coverImageView;
	UIImageView* _coverBlurImageView;
	UIView* _coverBlurImageTintView;
	VK_BlurView* _lyricsBlurView;
	VK_BaseTextView* _lyricsTextView;
	VK_SDKLyricsRequest* _lyricsRequest;
	VK_AsyncTask* _blurringTask;
	NSLayoutConstraint* _coverImageViewHeightConstraint;
	NSLayoutConstraint* _coverImageViewEqualHeightConstraint;
	NSLayoutConstraint* _coverImageViewCenterYConstraint;
	UIView* _lyricsBtnView;
}
@property(copy, nonatomic) id closeBlock;
@property(assign, nonatomic) __weak UIView* lyricsBtnView;
@property(assign, nonatomic) BOOL needShowLyrics;
@property(assign, nonatomic) __weak NSLayoutConstraint* coverImageViewCenterYConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* coverImageViewEqualHeightConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* coverImageViewHeightConstraint;
@property(retain, nonatomic) VK_AsyncTask* blurringTask;
@property(retain, nonatomic) VK_SDKLyricsRequest* lyricsRequest;
@property(assign, nonatomic) __weak VK_BaseTextView* lyricsTextView;
@property(assign, nonatomic) __weak VK_BlurView* lyricsBlurView;
@property(assign, nonatomic) __weak UIView* coverBlurImageTintView;
@property(assign, nonatomic) __weak UIImageView* coverBlurImageView;
@property(assign, nonatomic) __weak UIImageView* coverImageView;
@property(retain, nonatomic) VK_TrackModel* currentTrack;
-(void).cxx_destruct;
-(void)moreButtonPressed:(id)pressed;
-(void)lyricsButtonPressed:(id)pressed;
-(void)closeButtonPressed:(id)pressed;
-(void)switchLyrics;
-(void)hideLyricsAnimated:(BOOL)animated;
-(void)hideLyricsAnimated:(BOOL)animated withCompletion:(id)completion;
-(void)updateLyricsState:(id)state animated:(BOOL)animated withCompletion:(id)completion;
-(void)updateLyricsState:(id)state animated:(BOOL)animated;
-(void)showLyricsAnimated:(BOOL)animated;
-(void)updateLyricsViews:(id)views;
-(void)resetLyrics;
-(void)configureLyricsViews;
-(void)configureCoverBlurImageViewsWithImage:(id)image;
-(void)configureForCurrentScreenSize;
-(void)internalConfigureView;
-(id)internalNibName;
-(void)updateStateWithCoverImage:(id)coverImage;
-(void)updateLyricsButtonStateAnimated:(BOOL)animated;
-(void)updateStateWithTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface CachedHTTPDataSourceLoadingOperation : VK_Operation <STKDataSourceDelegate> {
	BOOL _isContinuation;
	BOOL _stopRunLoop;
	id _dataSourceStartedBlock;
	id _dataSourceProgressBlock;
	id _dataSourceFinishedBlock;
	id _dataSourceErrorBlock;
	NSTimer* _keepAliveTimer;
	char* _readBuffer;
	STKAutoRecoveringHTTPDataSource* _httpDataSource;
	NSNumber* _dataLength;
	long long _seekOffset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL isContinuation;
@property(copy, nonatomic) id dataSourceErrorBlock;
@property(copy, nonatomic) id dataSourceFinishedBlock;
@property(copy, nonatomic) id dataSourceProgressBlock;
@property(copy, nonatomic) id dataSourceStartedBlock;
@property(retain, nonatomic) NSNumber* dataLength;
@property(retain, nonatomic) STKAutoRecoveringHTTPDataSource* httpDataSource;
@property(assign, nonatomic) char* readBuffer;
@property(assign, nonatomic) long long seekOffset;
@property(assign) BOOL stopRunLoop;
@property(retain, nonatomic) NSTimer* keepAliveTimer;
-(void).cxx_destruct;
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
-(void)cancel;
-(BOOL)finishOperationIfNeeded;
-(void)setFinishedState;
-(void)finishOperation;
-(void)finishHTTPDataSource;
-(void)finishRunLoop;
-(void)keepAliveTimeout:(id)timeout;
-(void)configureWithUrl:(id)url andSeekOffset:(long long)offset;
-(void)start;
-(id)initWithUrl:(id)url andSeekOffset:(long long)offset;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteFullTextCellProxy : VK_TableCellProxy {
	BOOL _isPostText;
	id _onLinkTapBlock;
	id _onNoteLinkProfileTapBlock;
}
@property(assign, nonatomic) BOOL isPostText;
@property(copy, nonatomic) id onNoteLinkProfileTapBlock;
@property(copy, nonatomic) id onLinkTapBlock;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteFullTextCellViewModel : VK_TableViewCellViewModel {
	UIFont* _textFont;
	NSString* _textWithReplacedLinks;
	NSArray* _textNoteLinks;
	float _textHeight;
	NSAttributedString* _attributedText;
}
@property(retain, nonatomic) NSAttributedString* attributedText;
@property(assign, nonatomic) float textHeight;
@property(retain, nonatomic) NSArray* textNoteLinks;
@property(retain, nonatomic) NSString* textWithReplacedLinks;
@property(retain, nonatomic) UIFont* textFont;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteFullTextCell : VK_TableViewCellBase <CCHLinkTextViewDelegate> {
	UIView* _postView;
	VK_CCHLinkTextView* _postTextView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VK_CCHLinkTextView* postTextView;
@property(assign, nonatomic) __weak UIView* postView;
@property(readonly, assign, nonatomic) VK_FeedViewNoteFullTextCellViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_FeedViewNoteFullTextCellProxy* proxy;
@property(readonly, assign, nonatomic) VK_FeedNoteBlockModel* data;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(void)linkTextView:(id)view didTapLinkWithValue:(id)value;
-(void)createViews;
-(void)layoutSubviews;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_UserFavoritesProvider : VK_ShuffleableTracksProvider {
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreatePagedRequestWithShuffleEnabled:(BOOL)shuffleEnabled;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesProvider : VK_TracksProviderBase {
}
-(id)createTrackListProviderFromTrack:(id)track;
-(void)onFavoritesUpdated;
-(void)dealloc;
-(void)internalSetup;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_MiniPlayerPopupController : VK_MiniPlayerController <VK_MiniPlayerViewDelegate> {
	VK_MiniPlayer* _miniPlayer;
	VK_AudioPlayerViewController* _audioPlayerViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VK_AudioPlayerViewController* audioPlayerViewController;
@property(retain, nonatomic) VK_MiniPlayer* miniPlayer;
-(void).cxx_destruct;
-(void)miniPlayerViewOpenBigPlayerTouched:(id)touched;
-(void)configurePopupBar:(id)bar andPopupContentView:(id)view;
-(void)internalMiniPlayerVisibilityChanged:(BOOL)changed;
-(void)internalConfigureWithTabBarController:(id)tabBarController;
-(id)bigPlayerViewController;
-(void)openAudioPlayerViewControllerWithCompletion:(id)completion;
-(void)dismissAudioPlayerViewControllerIfNeededWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VK_EqualizerModel : XXUnknownSuperclass {
	BOOL _state;
	NSString* _title;
}
@property(assign, nonatomic) BOOL state;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_EqualizerMod : XXUnknownSuperclass {
	NSArray* _hzValues;
	NSString* _styleTitle;
	NSNumber* _identifier;
}
@property(retain, nonatomic) NSNumber* identifier;
@property(copy, nonatomic) NSString* styleTitle;
@property(retain, nonatomic) NSArray* hzValues;
-(void).cxx_destruct;
-(id)initWithHzValues:(id)hzValues andStypeTitle:(id)title andIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VK_EqualizerMods : XXUnknownSuperclass {
}
+(id)electronicValues;
+(id)hiphopValues;
+(id)pianoValues;
+(id)vocalValues;
+(id)bassMoreValues;
+(id)bassLessValues;
+(id)danceValues;
+(id)rockValues;
+(id)rythmValues;
+(id)speachValues;
+(id)popValues;
+(id)smallValues;
+(id)smallDinamicsValues;
+(id)loungeValues;
+(id)latinValues;
+(id)classicValues;
+(id)jazzValues;
+(id)loudValues;
+(id)deepValues;
+(id)highValues;
+(id)acousticValues;
+(id)normalValues;
+(id)bandFrequencies;
+(id)listOfValues;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchCellProxy : VK_TableCellProxy {
	NSString* _searchPlaceholderText;
	id _searchStartBlock;
}
@property(copy, nonatomic) id searchStartBlock;
@property(copy, nonatomic) NSString* searchPlaceholderText;
+(float)estimatedHeight;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchCell : VK_TableViewCellBase {
	VK_SearchView* _searchView;
}
@property(assign, nonatomic) __weak VK_SearchView* searchView;
@property(readonly, assign, nonatomic) VK_SearchCellProxy* proxy;
+(id)internalNibName;
-(void).cxx_destruct;
-(void)internalUpdateProxy;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedTableViewDataAllocator : XXUnknownSuperclass <VK_TableViewDataAllocator> {
	BOOL _isShortView;
	VK_FeedViewNotePostHeaderCellProxy* _notePostHeaderCellProxy;
	VK_FeedViewNoteShortTextCellProxy* _noteShortTextCellProxy;
	VK_FeedViewNoteFullTextCellProxy* _noteFullTextCellProxy;
	VK_FeedViewNoteShortTextCellProxy* _noteShortRepostTextCellProxy;
	VK_FeedViewNoteFullTextCellProxy* _noteFullRepostTextCellProxy;
	VK_FeedViewNoteRepostHeaderCellProxy* _noteRepostHeaderCellProxy;
	VK_FeedViewNoteImagesCellProxy* _noteImagesCellProxy;
	VK_SimpleTrackCellProxy* _noteTrackCellProxy;
	VK_SimpleButtonCellProxy* _noteShowAllCellProxy;
	VK_SimpleTitleCellProxy* _recommendationsHeaderCellProxy;
	VK_SimpleButtonCellProxy* _recommendationShowAllCellProxy;
	VK_SimpleTrackCellProxy* _recommendationTrackCellProxy;
	VK_SimpleTitleCellProxy* _friendsHeaderCellProxy;
	VK_SimpleButtonCellProxy* _friendsShowAllCellProxy;
	VK_SimpleUserCellProxy* _friendsUserCellProxy;
	VK_SimpleNumberedCellProxy* _albumReleaseTrackCellProxy;
	VK_SimpleTitleCellProxy* _albumReleaseHeaderCellProxy;
	VK_FeedViewNewReleaseCellProxy* _albumReleaseCellProxy;
	VK_ShuffleCellProxy* _albumReleaseShuffleCellProxy;
	VK_SimpleButtonCellProxy* _albumReleaseShowAllCellProxy;
	VK_FeedMonthNewsCellProxy* _monthNewsCellProxy;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VK_FeedMonthNewsCellProxy* monthNewsCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleButtonCellProxy* albumReleaseShowAllCellProxy;
@property(readonly, assign, nonatomic) VK_ShuffleCellProxy* albumReleaseShuffleCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNewReleaseCellProxy* albumReleaseCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleTitleCellProxy* albumReleaseHeaderCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleNumberedCellProxy* albumReleaseTrackCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleUserCellProxy* friendsUserCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleButtonCellProxy* friendsShowAllCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleTitleCellProxy* friendsHeaderCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleTrackCellProxy* recommendationTrackCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleButtonCellProxy* recommendationShowAllCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleTitleCellProxy* recommendationsHeaderCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleButtonCellProxy* noteShowAllCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleTrackCellProxy* noteTrackCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNoteImagesCellProxy* noteImagesCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNoteRepostHeaderCellProxy* noteRepostHeaderCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNoteFullTextCellProxy* noteFullRepostTextCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNoteShortTextCellProxy* noteShortRepostTextCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNoteFullTextCellProxy* noteFullTextCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNoteShortTextCellProxy* noteShortTextCellProxy;
@property(readonly, assign, nonatomic) VK_FeedViewNotePostHeaderCellProxy* notePostHeaderCellProxy;
@property(assign, nonatomic) BOOL isShortView;
-(void).cxx_destruct;
-(id)createMonthNewsSectionCellItemsFromModel:(id)model;
-(id)createNewFriendsSectionCellItemsFromModel:(id)model;
-(id)createNewReleaseCellItemsSectionFromModel:(id)model;
-(id)createRecommendationCellItemsSectionFromModel:(id)model;
-(id)createNoteSectionCellItemsFromModel:(id)model;
-(void)addTracksCellsItemsForTracks:(id)tracks toCellsItems:(id)cellsItems withActualCount:(int)actualCount proxy:(id)proxy andPostModel:(id)model;
-(id)spaceTableCellItemWithHeight:(float)height;
-(void)addSectionsSeparatorsIfNeeded:(id)needed;
-(void)prepareSection:(id)section withSeparatorsHandling:(BOOL)separatorsHandling andShadows:(unsigned)shadows;
-(id)getSectionFromDataItem:(id)dataItem andSectionIndex:(unsigned)index;
-(void)setup;
-(id)allocateCellsWithData:(id)data;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTariffLimitsCellProxy : VK_TableCellProxy {
}
+(float)estimatedBaseHeight;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTariffLimitsCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTariffLimitsCell : VK_TableViewCellBase {
	UILabel* _timeLeftLabel;
	UILabel* _usedTimeLabel;
	UILabel* _availableTimeLabel;
}
@property(assign, nonatomic) __weak UILabel* availableTimeLabel;
@property(assign, nonatomic) __weak UILabel* usedTimeLabel;
@property(assign, nonatomic) __weak UILabel* timeLeftLabel;
@property(readonly, assign, nonatomic) VK_TariffsOptionsModel* data;
@property(readonly, assign, nonatomic) VK_SettingsTariffLimitsCellProxy* proxy;
+(BOOL)internalCanHaveSeparator;
+(id)internalNibName;
-(void).cxx_destruct;
-(void)internalUpdateData;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchBaseModel : XXUnknownSuperclass <EKMappingProtocol> {
	NSArray* _items;
}
@property(retain, nonatomic) NSArray* items;
+(Class)internalItemClass;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchUsersModel : VK_CommonSearchBaseModel {
}
+(Class)internalItemClass;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchTracksModel : VK_CommonSearchBaseModel <VK_TrackListProviderFactory> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(Class)internalItemClass;
-(id)createTrackListProviderFromTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchModel : XXUnknownSuperclass <EKMappingProtocol> {
	VK_CommonSearchUsersModel* _groups;
	VK_CommonSearchUsersModel* _users;
	VK_CommonSearchTracksModel* _globalMusic;
	VK_CommonSearchTracksModel* _userMusic;
}
@property(readonly, assign, nonatomic) BOOL isEmpty;
@property(retain, nonatomic) VK_CommonSearchTracksModel* userMusic;
@property(retain, nonatomic) VK_CommonSearchTracksModel* globalMusic;
@property(retain, nonatomic) VK_CommonSearchUsersModel* users;
@property(retain, nonatomic) VK_CommonSearchUsersModel* groups;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_Button : VK_BaseButton {
	float _normalAlpha;
	float _highlightedAlpha;
	float _disabledAlpha;
	UIColor* _normalBackgroundColor;
	UIColor* _highlightedBackgroundColor;
	UIColor* _disabledBackgroundColor;
}
@property(retain, nonatomic) UIColor* disabledBackgroundColor;
@property(retain, nonatomic) UIColor* highlightedBackgroundColor;
@property(retain, nonatomic) UIColor* normalBackgroundColor;
@property(assign, nonatomic) float disabledAlpha;
@property(assign, nonatomic) float highlightedAlpha;
@property(assign, nonatomic) float normalAlpha;
-(void).cxx_destruct;
-(void)updateState;
-(void)resetTitleShadowColor;
-(void)internalButtonSetup;
-(void)setImage:(id)image;
-(void)setBackgroundImage:(id)image;
-(void)setTitleFont:(id)font;
-(void)setTitleColor:(id)color;
-(void)setTitle:(id)title;
-(void)setEnabled:(BOOL)enabled;
-(void)setHighlighted:(BOOL)highlighted;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleNumberedCellProxy : VK_TrackCellBaseProxy {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleNumberedCell : VK_TrackCellBase {
	UILabel* _trackNumberLabel;
}
@property(assign, nonatomic) __weak UILabel* trackNumberLabel;
@property(readonly, assign, nonatomic) VK_SimpleNumberedCellProxy* proxy;
-(void).cxx_destruct;
-(void)internalUpdateData;
-(void)layoutSubviews;
-(void)internalCreateAdditionalViewsInContainer:(id)container;
@end

__attribute__((visibility("hidden")))
@interface VK_Window : XXUnknownSuperclass <AudioPlayerDelegate> {
	VK_LoaderViewController* _loader;
	VK_TabController* _tabbar;
	VK_MiniPlayerController* _miniPlayerController;
	CGSize _statusBarSize;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) UIViewController* controllerForPresentation;
@property(readonly, assign, nonatomic) BOOL isMiniPlayerVisible;
@property(readonly, assign, nonatomic) CGSize statusBarSize;
@property(retain, nonatomic) VK_MiniPlayerController* miniPlayerController;
@property(retain, nonatomic) VK_LoaderViewController* loader;
@property(retain, nonatomic) VK_TabController* tabbar;
+(id)shared;
-(void).cxx_destruct;
-(void)audioPlayer:(id)player didCurrentTrackChanged:(id)changed;
-(void)scrollToTopWithForcedFlag:(BOOL)forcedFlag;
-(void)hideAudioPlayerIfNeededdWithCompletion:(id)completion;
-(void)hideAudioPlayerIfNeeded;
-(void)showAudioPlayerWithCompletion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)closePlayerAndPresentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)showMiniPlayer:(BOOL)player;
-(void)initAudioPlayer;
-(void)initTabController;
-(void)setup;
-(void)hideLoader:(BOOL)loader withCompletion:(id)completion;
-(void)showLoader:(BOOL)loader withCompletion:(id)completion;
-(void)showAuthLoader:(BOOL)loader;
-(void)popController;
-(void)popControllerWithAnimation:(BOOL)animation;
-(void)pushController:(id)controller;
-(void)pushController:(id)controller withAnimation:(BOOL)animation;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackDownloader : XXUnknownSuperclass <NSURLSessionDelegate> {
	NSURLSession* _session;
	NSOperationQueue* _operationQueue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)delegateQueue;
-(void).cxx_destruct;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(id)operationWithTask:(id)task;
-(void)cancelAllDownloads:(BOOL)downloads;
-(void)downloadTrack:(id)track downloadedData:(id)data trackURL:(id)url;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackDownloadOperation : VK_Operation <NSURLConnectionDelegate, NSURLConnectionDataDelegate> {
	NSString* _trackId;
	NSMutableData* _data;
	NSString* _url;
	long long _length;
	unsigned _lastReportedProgress;
	NSURLSessionTask* _task;
	VK_TrackDownloader* _downloader;
	NSURLSession* _session;
	NSError* _statusCodeError;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSError* statusCodeError;
@property(retain, nonatomic) NSURLSessionTask* task;
@property(assign, nonatomic) __weak NSURLSession* session;
@property(assign, nonatomic) __weak VK_TrackDownloader* downloader;
-(void).cxx_destruct;
-(void)dealloc;
-(unsigned)getDownloadProgress;
-(id)fullNotificationArgs:(id)args;
-(void)postStoppedNotification:(BOOL)notification error:(id)error;
-(void)postStoppedNotification:(id)notification;
-(void)taskDidReceiveData:(id)task;
-(void)taskDidReceiveResponse:(id)task;
-(void)taskDidCompleteWithError:(id)task;
-(BOOL)isConcurrent;
-(void)start;
-(id)initWithId:(id)anId existingData:(id)data trackURL:(id)url downloader:(id)downloader andSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VK_BarButton : XXUnknownSuperclass {
	int _type;
	id _target;
	SEL _action;
	CGPoint _iPhone3xOffset;
	CGPoint _offset;
}
@property(assign, nonatomic) CGPoint offset;
@property(assign, nonatomic) CGPoint iPhone3xOffset;
@property(readonly, assign, nonatomic) CGPoint currentOffset;
@property(assign, nonatomic) SEL action;
@property(assign, nonatomic) __weak id target;
@property(assign, nonatomic) int type;
+(id)buttonWithType:(int)type target:(id)target andAction:(SEL)action;
-(void).cxx_destruct;
-(id)initWithType:(int)type target:(id)target andAction:(SEL)action;
@end

__attribute__((visibility("hidden")))
@interface VK_AuthorizationModel : XXUnknownSuperclass <EKMappingProtocol> {
	NSString* _passKey;
	VK_ProfileInfoModel* _userInfo;
	NSString* _accessToken;
}
@property(retain, nonatomic) NSString* accessToken;
@property(retain, nonatomic) VK_ProfileInfoModel* userInfo;
@property(retain, nonatomic) NSString* passKey;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SDKRequest : VK_Request {
	VKRequest* _currentRequest;
}
@property(retain, nonatomic) VKRequest* currentRequest;
-(void).cxx_destruct;
-(void)internalRequestStopped;
-(id)internalParseJson:(id)json withError:(id*)error;
-(id)internalCreateSDKRequest;
-(void)internalCancel;
-(void)internalExecuteRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface VK_UserNotesProvider : VK_FeedDataProviderBase {
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(BOOL)internalNeedRewriteRef;
-(id)internalUniqueTracksIdPrefix;
-(id)internalCreatePagedRequest;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_NeedSyncCellProxy : VK_TableCellProxy {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_NeedSyncCell : VK_TableViewCellBase {
	UILabel* _titleLabel;
	UIImageView* _syncIcon;
	UIView* _selectionView;
}
@property(assign, nonatomic) __weak UIView* selectionView;
@property(assign, nonatomic) __weak UIImageView* syncIcon;
@property(assign, nonatomic) __weak UILabel* titleLabel;
+(float)estimatedHeight;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface _VK_TracksTableViewDataAllocator : VK_SimpleTableViewDataAllocator {
}
@property(readonly, assign, nonatomic) VK_ShuffleCellProxy* shuffleCellProxy;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksTableViewDataAllocator : _VK_TracksTableViewDataAllocator {
	VK_ShuffleCellProxy* _shuffleCellProxy;
}
-(void).cxx_destruct;
-(id)shuffleCellItem;
-(id)internalTopCellItems;
-(id)shuffleCellProxy;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_AnaliticAudio : XXUnknownSuperclass {
	unsigned short _useType;
	unsigned _umaProductId;
	NSString* _commercModel;
	unsigned long long _vkontakteAudioId;
	unsigned long long _vkontakteOwnerId;
	double _timestampStart;
	double _timestampEnd;
}
@property(assign, nonatomic) unsigned short useType;
@property(assign, nonatomic) double timestampEnd;
@property(assign, nonatomic) double timestampStart;
@property(retain, nonatomic) NSString* commercModel;
@property(assign, nonatomic) unsigned umaProductId;
@property(assign, nonatomic) unsigned long long vkontakteOwnerId;
@property(assign, nonatomic) unsigned long long vkontakteAudioId;
+(id)audioWithID:(unsigned long long)anId ownerId:(unsigned long long)anId2 umaProductId:(unsigned)anId3 commercModel:(id)model timeStart:(double)start timeEnd:(double)end useType:(unsigned short)type;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SubscribeUserView : XXUnknownSuperclass {
	VK_ProfileBaseInfoModel* _profileData;
	VK_Button* _button;
}
@property(retain, nonatomic) VK_ProfileBaseInfoModel* profileData;
@property(assign, nonatomic) __weak VK_Button* button;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)updateSubscribtionStatusForProfileData:(id)profileData;
-(void)onSubscibeBtnPressed;
-(void)setupSubscribeUserView;
-(id)init;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseManager : XXUnknownSuperclass {
}
-(void)internalWillUserDataUnload;
-(void)internalDidUserDataLoaded;
-(void)internalNeedLoadUserData;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_Operation : XXUnknownSuperclass {
	BOOL _internalExecuting;
	BOOL _internalFinished;
}
@property(assign, nonatomic) BOOL internalFinished;
@property(assign, nonatomic) BOOL internalExecuting;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioInlineSearchDataProvider : VK_PagedRequestDataProvider <VK_InlineSearchDataProvider, VK_DataWithTracksProvider> {
	BOOL _isMyAudio;
	NSString* _query;
}
@property(readonly, assign, nonatomic) BOOL isEmpty;
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL isMyAudio;
@property(copy, nonatomic) NSString* query;
-(void).cxx_destruct;
-(id)model;
-(BOOL)internalAllDataLoaded;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalPrepareNewData:(id)data;
-(id)internalCreatePagedRequest;
-(void)internalSetup;
-(id)createTrackListProviderFromTrack:(id)track;
-(void)clear;
-(void)updateWithQuery:(id)query;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_ImageLoadingOperation : XXUnknownSuperclass {
	BOOL _refreshCache;
	BOOL _memoryOnlyCache;
}
@property(assign, nonatomic) BOOL memoryOnlyCache;
@property(assign, nonatomic) BOOL refreshCache;
-(void)cancel;
-(void)loadImageWithId:(id)anId withCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VK_NetworkImageLoadingOperation : VK_ImageLoadingOperation {
	id<SDWebImageOperation> _sdWebImageOperation;
}
@property(retain, nonatomic) id<SDWebImageOperation> sdWebImageOperation;
-(void).cxx_destruct;
-(void)cancel;
-(void)loadImageWithId:(id)anId withCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VK_LocalImageLoadingOperation : VK_ImageLoadingOperation {
}
-(void)cancel;
-(void)loadImageWithId:(id)anId withCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VK_RequestBase : VK_Request <NSURLConnectionDelegate> {
	BOOL _cacheWriteEnabled;
	BOOL _cacheReadEnabled;
	AFHTTPRequestOperation* _requestOperation;
	BFCancellationTokenSource* _cacheLoadingOperationCancellation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL cacheReadEnabled;
@property(assign, nonatomic) BOOL cacheWriteEnabled;
@property(readonly, assign, nonatomic) BOOL needToReadCache;
@property(readonly, assign, nonatomic) BOOL needToWriteCache;
@property(retain, nonatomic) BFCancellationTokenSource* cacheLoadingOperationCancellation;
@property(retain, nonatomic) AFHTTPRequestOperation* requestOperation;
+(void)initialize;
-(void).cxx_destruct;
-(void)processCaptchaForResponse:(id)response withCompletion:(id)completion;
-(void)processValidationForResponse:(id)response error:(id)error isCache:(BOOL)cache withCompletion:(id)completion;
-(void)handleApiResponse:(id)response error:(id)error isCache:(BOOL)cache withCompletion:(id)completion;
-(id)buildRequestParams;
-(id)createRequest;
-(void)tryGetCacheAvailableWithResponseSerializer:(id)responseSerializer andCompletion:(id)completion;
-(void)repeatRequestWithCompletion:(id)completion;
-(void)beginRequest:(id)request withCache:(BOOL)cache andCompletion:(id)completion;
-(void)internalRequestStopped;
-(void)internalRequestCompleted;
-(BOOL)internalCachingSupported;
-(void)internalSetup;
-(id)internalRequestMethod;
-(id)internalCreateResponseSerializer;
-(id)internalCreateRequestSerializer;
-(id)internalBuildRequestAbsoluteUrl;
-(void)internalInitRequestParams:(id)params;
-(void)internalPrepareRequest:(id)request;
-(void)internalCancel;
-(void)internalCaptureEnteredWithSig:(id)sig andKey:(id)key;
-(void)internalValidationSucceedWithAccessToken:(id)accessToken andPasskey:(id)passkey;
-(BOOL)internalCaptchaSupported;
-(BOOL)internalUpdatePasskeyDuringValidation;
-(void)startRequestWithCaching:(BOOL)caching andCompletionBlock:(id)block;
-(void)internalExecuteRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface VK_LocalShuffleableTrackListProvider : VK_ShuffleableTrackListProvider {
	ShuffleGenerator* _shuffleGenerator;
	NSArray* _shuffledTracks;
}
@property(retain, nonatomic) NSArray* shuffledTracks;
@property(retain, nonatomic) ShuffleGenerator* shuffleGenerator;
-(void).cxx_destruct;
-(void)generateShuffledTracks;
-(void)reshuffleTracks;
-(void)internalPreviousLoop;
-(void)internalNextLoop;
-(void)internalUnshuffleFromTrack:(id)track;
-(void)internalShuffleFromTrack:(id)track;
-(void)internalSetup;
-(id)reloadTracksProviderAndMoveCurrentTrack:(id)track withCurrentTrackBlock:(id)currentTrackBlock andIterationMoveBlock:(id)block;
-(id)previousTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(id)nextTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(id)indexForTrack:(id)track;
-(id)tracks;
-(void)internalReloadTracksProvider;
@end

__attribute__((visibility("hidden")))
@interface VK_NoteViewController : VK_BaseTableViewController {
	VK_FeedNoteBlockModel* _note;
}
@property(retain, nonatomic) VK_FeedNoteBlockModel* note;
-(void).cxx_destruct;
-(id)internalCreateTableControllerConfiguration;
-(unsigned short)internalAnaliticScreen;
-(id)internalTitle;
-(void)setPostData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileDeclensionsModel : XXUnknownSuperclass <EKMappingProtocol> {
	NSString* _nominativeName;
	NSString* _genitiveName;
	NSString* _accusativeName;
}
@property(retain, nonatomic) NSString* accusativeName;
@property(retain, nonatomic) NSString* genitiveName;
@property(retain, nonatomic) NSString* nominativeName;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileBaseInfoModel : XXUnknownSuperclass <EKMappingProtocol> {
	BOOL _iFollow;
	BOOL _isUpdatingSubscriptionStatusInProcess;
	NSString* _avatar;
	NSString* _smallAvatar;
	NSString* _name;
	NSString* _profileLink;
	NSString* _userId;
	unsigned _gender;
	VK_ProfileDeclensionsModel* _declensions;
}
@property(retain, nonatomic) VK_ProfileDeclensionsModel* declensions;
@property(readonly, assign, nonatomic) BOOL isMyProfile;
@property(assign, nonatomic) unsigned gender;
@property(assign, nonatomic) BOOL iFollow;
@property(retain, nonatomic) NSString* userId;
@property(retain, nonatomic) NSString* profileLink;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* smallAvatar;
@property(retain, nonatomic) NSString* avatar;
@property(assign, nonatomic) BOOL isUpdatingSubscriptionStatusInProcess;
+(id)objectMapping;
-(void).cxx_destruct;
-(id)formattedGenitiveNameStringWithBaseKey:(id)baseKey andMyProfileKey:(id)key;
-(void)unsubscribeWithCompletion:(id)completion;
-(void)subscribeWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VK_UserBaseInfoModel : VK_ProfileBaseInfoModel {
	BOOL _isGroup;
	BOOL _isVerified;
	BOOL _showInvite;
	NSString* _inviteText;
	NSString* _inviteButton;
}
@property(assign, nonatomic) BOOL showInvite;
@property(retain, nonatomic) NSString* inviteButton;
@property(retain, nonatomic) NSString* inviteText;
@property(assign, nonatomic) BOOL isVerified;
@property(assign, nonatomic) BOOL isGroup;
+(id)objectMapping;
-(void).cxx_destruct;
-(id)userVKId;
-(void)openProfilePage;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileOptionsModel : XXUnknownSuperclass <EKMappingProtocol> {
	BOOL _isMusicVisible;
}
@property(assign, nonatomic) BOOL isMusicVisible;
+(id)objectMapping;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileInfoModel : VK_UserBaseInfoModel {
	BOOL _isRegistered;
	unsigned _followersCount;
	unsigned _subscriptionsCount;
	unsigned _audioCount;
	NSString* _groupDescription;
	VK_ProfileOptionsModel* _options;
}
@property(retain, nonatomic) VK_ProfileOptionsModel* options;
@property(retain, nonatomic) NSString* groupDescription;
@property(assign, nonatomic) BOOL isRegistered;
@property(assign, nonatomic) unsigned audioCount;
@property(assign, nonatomic) unsigned subscriptionsCount;
@property(assign, nonatomic) unsigned followersCount;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_NewMessagesView : XXUnknownSuperclass {
	id _onTapBlock;
	UILabel* _label;
	CALayer* _maskLayer;
	id _animationLock;
}
@property(copy, nonatomic) id onTapBlock;
@property(assign, nonatomic) __weak id animationLock;
@property(retain, nonatomic) CALayer* maskLayer;
@property(assign, nonatomic) __weak UILabel* label;
-(void).cxx_destruct;
-(void)viewTapped;
-(void)hide;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)show;
-(id)fadeAnimation:(BOOL)animation;
-(id)bounceInAnimation;
-(void)addTapRegionRecognizer;
-(void)setupAppearance;
-(id)newMessageLabel;
-(void)configure;
-(void)addToView:(id)view withTopView:(id)topView;
-(id)initWithRealFrame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AnonymousObserver : XXUnknownSuperclass <VK_Observer> {
	id _observerBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id observerBlock;
-(void).cxx_destruct;
-(void)onFinishWithResult:(id)result andError:(id)error;
-(void)onSuccess:(id)success;
-(void)onError:(id)error;
-(id)init;
-(id)initWithObserverBlock:(id)observerBlock;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesManagerRemovingOperationItem : XXUnknownSuperclass <VK_FavoritesManagerCachedOperationItem> {
	NSString* _trackId;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* trackId;
-(void).cxx_destruct;
-(void)performOperation:(id)operation;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesManagerMovingOperationItem : XXUnknownSuperclass <VK_FavoritesManagerCachedOperationItem> {
	NSString* _movingTrackId;
	NSString* _afterTrackId;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* afterTrackId;
@property(retain, nonatomic) NSString* movingTrackId;
-(void).cxx_destruct;
-(void)performOperation:(id)operation;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesManagerClearAllTracksOperationItem : XXUnknownSuperclass <VK_FavoritesManagerCachedOperationItem> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)performOperation:(id)operation;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesManagerOperation : VK_Operation <VK_RequestDelegate> {
	id _operationCompletionBlock;
	id _operationFailedBlock;
	id _validationBlock;
	VK_FavoriteActionContent* _result;
	NSError* _error;
	VK_Request* _request;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) VK_FavoriteActionContent* result;
@property(copy, nonatomic) id validationBlock;
@property(copy, nonatomic) id operationFailedBlock;
@property(copy, nonatomic) id operationCompletionBlock;
@property(retain, nonatomic) VK_Request* request;
-(void).cxx_destruct;
-(void)resetRequest;
-(void)internalRequestCompleted:(id)completed;
-(id)internalCreateRequest;
-(void)requestCompleted:(id)completed;
-(void)requestStarted:(id)started;
-(void)dealloc;
-(BOOL)isAsynchronous;
-(void)cancel;
-(void)perfromFailedBlock;
-(void)onOperationStartFailed;
-(void)start;
@end

__attribute__((visibility("hidden")))
@interface VK_AddFavoriteTrackOperation : VK_FavoritesManagerOperation {
	NSString* _trackId;
}
@property(retain, nonatomic) NSString* trackId;
-(void).cxx_destruct;
-(id)internalCreateRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_RemoveFavoriteTrackOperation : VK_FavoritesManagerOperation {
	NSString* _tracksId;
}
@property(retain, nonatomic) NSString* tracksId;
-(void).cxx_destruct;
-(id)internalCreateRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_MoveFavoriteTracksOperation : VK_FavoritesManagerOperation {
	NSString* _movedTrackId;
	NSString* _afterTrackId;
}
@property(retain, nonatomic) NSString* afterTrackId;
@property(retain, nonatomic) NSString* movedTrackId;
-(void).cxx_destruct;
-(id)internalCreateRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesTracksOperation : VK_FavoritesManagerOperation {
	NSString* _userId;
	unsigned _count;
}
@property(assign, nonatomic) unsigned count;
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)internalCreateRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_ClearAllFavoritesTracksOperation : VK_FavoritesManagerOperation {
}
-(id)internalCreateRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackSDKInfo : XXUnknownSuperclass <EKMappingProtocol> {
	NSString* _url;
	NSString* _lyricsText;
	unsigned _trackId;
}
@property(assign, nonatomic) unsigned trackId;
@property(readonly, assign, nonatomic) BOOL isNoURL;
@property(retain, nonatomic) NSString* lyricsText;
@property(retain, nonatomic) NSString* url;
+(id)objectMapping;
+(id)emptyWithTrackId:(unsigned)trackId;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ImageManager : XXUnknownSuperclass {
}
+(id)createNetworkImageLoadingOperation:(id)operation withParams:(id)params;
+(id)createLocalImageLoadingOperation:(id)operation withParams:(id)params;
+(void)prefetchImageFromURLString:(id)urlstring;
+(id)imageFromCache:(id)cache;
+(void)storeImageToCache:(id)cache forKey:(id)key;
+(id)loadImageWithId:(id)anId type:(unsigned)type withParams:(id)params andCompletionBlock:(id)block;
+(id)loadLocalImage:(id)image withParams:(id)params andCompletionBlock:(id)block;
+(id)loadImageFromUrl:(id)url withParams:(id)params andCompletionBlock:(id)block;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface VK_ImageManagerOperation : XXUnknownSuperclass {
	BOOL _isExecuting;
	BOOL _isCancelled;
	BOOL _isCache;
	UIImage* _image;
	NSError* _error;
	id _completionBlock;
	id _onLoadingStartBlock;
	id _placeholderBlock;
	NSString* _imageId;
	unsigned _imageType;
	NSDictionary* _params;
	NSOperation* _loadingFromCacheOperation;
	VK_ImageLoadingOperation* _imageLoadingOperation;
}
@property(copy, nonatomic) id placeholderBlock;
@property(copy, nonatomic) id onLoadingStartBlock;
@property(copy, nonatomic) id completionBlock;
@property(readonly, assign, nonatomic) BOOL isCache;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) UIImage* image;
@property(readonly, assign, nonatomic) BOOL isCancelled;
@property(readonly, assign, nonatomic) BOOL isExecuting;
@property(retain, nonatomic) VK_ImageLoadingOperation* imageLoadingOperation;
@property(retain, nonatomic) NSOperation* loadingFromCacheOperation;
@property(readonly, assign, nonatomic) NSDictionary* params;
@property(readonly, assign, nonatomic) unsigned imageType;
@property(readonly, assign, nonatomic) NSString* imageId;
+(void)transformImage:(id)image withParams:(id)params andCompletionBlock:(id)block;
+(id)keyForCacheFromImageId:(id)imageId andParams:(id)params;
-(void).cxx_destruct;
-(void)cancel;
-(void)onCompletionWithImage:(id)image error:(id)error andCacheFlag:(BOOL)flag;
-(void)fetchImageFromCacheWithCompletion:(id)completion;
-(void)execute;
-(id)initWithImageId:(id)imageId type:(unsigned)type andParams:(id)params;
@end

__attribute__((visibility("hidden")))
@interface VK_SubscriptionsViewController : VK_SubscriptionsViewControllerBase {
	VK_ProfileBaseInfoModel* _profileBaseInfoModel;
}
@property(retain, nonatomic) VK_ProfileBaseInfoModel* profileBaseInfoModel;
-(void).cxx_destruct;
-(id)internalDataProviderForSegmentType:(int)segmentType;
-(void)plusButtonPressed;
-(void)prepareNavigationBarButtons;
-(void)internalWillSegmentChanging:(int)internal;
-(unsigned short)internalAnaliticScreen;
-(id)internalNoItemsTitleForSegment:(int)segment;
-(id)internalTitle;
-(void)internalSetup;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedBaseBlockModel : XXUnknownSuperclass <EKMappingProtocol> {
	BOOL _isRemoved;
	int _type;
	NSString* _blockId;
}
@property(assign, nonatomic) BOOL isRemoved;
@property(retain, nonatomic) NSString* blockId;
@property(assign, nonatomic) int type;
@property(readonly, assign, nonatomic) BOOL isPostRepost;
+(id)objectMapping;
+(id)createBlockModelFromDictionary:(id)dictionary;
-(void).cxx_destruct;
-(id)init;
-(id)asMonthNewsModel;
-(id)asNewReleaseBlockModel;
-(id)asRecommendationBlock;
-(id)asNewFriends;
-(id)asNote;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedBlockModelWithTrackList : VK_FeedBaseBlockModel <VK_TrackListProviderFactory> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)internalTracks;
-(id)createTrackListProviderFromTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedNoteBlockModel : VK_FeedBlockModelWithTrackList {
	BOOL _pinned;
	BOOL _isBookmarked;
	BOOL _bookmarkable;
	NSString* _text;
	NSString* _originalText;
	unsigned _timestamp;
	unsigned _originalTimestamp;
	VK_UserBaseInfoModel* _author;
	NSArray* _tracks;
	NSArray* _photos;
	VK_UserBaseInfoModel* _originalAuthor;
}
@property(assign, nonatomic) BOOL bookmarkable;
@property(assign, nonatomic) BOOL isBookmarked;
@property(assign, nonatomic) BOOL pinned;
@property(retain, nonatomic) VK_UserBaseInfoModel* originalAuthor;
@property(retain, nonatomic) NSArray* photos;
@property(retain, nonatomic) NSArray* tracks;
@property(retain, nonatomic) VK_UserBaseInfoModel* author;
@property(assign, nonatomic) unsigned originalTimestamp;
@property(assign, nonatomic) unsigned timestamp;
@property(retain, nonatomic) NSString* originalText;
@property(retain, nonatomic) NSString* text;
+(id)objectMapping;
-(void).cxx_destruct;
-(id)internalTracks;
@end

__attribute__((visibility("hidden")))
@interface VK_PhotosModel : XXUnknownSuperclass <EKMappingProtocol> {
	NSString* _photo;
	NSString* _large_photo;
	NSNumber* _width;
	NSNumber* _height;
}
@property(retain, nonatomic) NSNumber* height;
@property(retain, nonatomic) NSNumber* width;
@property(retain, nonatomic) NSString* large_photo;
@property(retain, nonatomic) NSString* photo;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedNewFriendsBlockModel : VK_FeedBaseBlockModel {
	NSString* _title;
	NSArray* _friends;
}
@property(retain, nonatomic) NSArray* friends;
@property(retain, nonatomic) NSString* title;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedRecommendationBlockModel : VK_FeedBlockModelWithTrackList {
	NSString* _title;
	NSArray* _tracks;
}
@property(retain, nonatomic) NSArray* tracks;
@property(retain, nonatomic) NSString* title;
+(id)objectMapping;
-(void).cxx_destruct;
-(id)internalTracks;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedNewReleaseBlockModel : VK_FeedBlockModelWithTrackList {
	NSString* _title;
	VK_AlbumInfoModel* _album;
}
@property(retain, nonatomic) VK_AlbumInfoModel* album;
@property(retain, nonatomic) NSString* title;
+(id)objectMapping;
-(void).cxx_destruct;
-(id)internalTracks;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedMonthNewsBlockModel : VK_FeedBaseBlockModel {
	NSString* _title;
	NSArray* _albums;
}
@property(retain, nonatomic) NSArray* albums;
@property(retain, nonatomic) NSString* title;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LNPopupCloseButton : XXUnknownSuperclass {
	UIVisualEffectView* _effectView;
	UIView* _highlightView;
}
@property(readonly, assign, nonatomic) UIVisualEffectView* backgroundView;
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(void)_setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)_didTouchCancel;
-(void)_didTouchUp;
-(void)_didTouchDragEnter;
-(void)_didTouchDragExit;
-(void)_didTouchDown;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface __MarqueeLabel : XXUnknownSuperclass {
	BOOL _labelize;
	BOOL _holdScrolling;
	BOOL _tapToScroll;
	BOOL _isPaused;
	unsigned _animationCurve;
	unsigned _marqueeType;
	float _scrollDuration;
	float _rate;
	float _leadingBuffer;
	float _trailingBuffer;
	float _fadeLength;
	float _animationDelay;
	UILabel* _subLabel;
	UITapGestureRecognizer* _tapRecognizer;
	float _awayOffset;
	NSArray* _gradientColors;
	double _animationDuration;
	CGRect _homeLabelFrame;
}
@property(readonly, assign, nonatomic) BOOL awayFromHome;
@property(assign, nonatomic) float animationDelay;
@property(assign, nonatomic) float fadeLength;
@property(assign, nonatomic) float continuousMarqueeExtraBuffer;
@property(assign, nonatomic) float trailingBuffer;
@property(assign, nonatomic) float leadingBuffer;
@property(assign, nonatomic) float rate;
@property(assign, nonatomic) float scrollDuration;
@property(assign, nonatomic) unsigned marqueeType;
@property(assign, nonatomic) BOOL tapToScroll;
@property(assign, nonatomic) BOOL holdScrolling;
@property(assign, nonatomic) BOOL labelize;
@property(assign, nonatomic) unsigned animationCurve;
@property(retain, nonatomic) NSArray* gradientColors;
@property(assign, nonatomic) BOOL isPaused;
@property(assign, nonatomic) float awayOffset;
@property(assign, nonatomic) CGRect homeLabelFrame;
@property(assign, nonatomic) __weak UITapGestureRecognizer* tapRecognizer;
@property(readonly, assign, nonatomic) BOOL labelShouldScroll;
@property(assign, nonatomic) double animationDuration;
@property(retain, nonatomic) UILabel* subLabel;
+(Class)layerClass;
+(void)notifyController:(id)controller withMessage:(id)message;
+(void)controllerLabelsShouldAnimate:(id)controllerLabels;
+(void)controllerLabelsShouldLabelize:(id)controllerLabels;
+(void)controllerViewAppearing:(id)appearing;
+(void)controllerViewDidAppear:(id)controllerView;
+(void)controllerViewWillAppear:(id)controllerView;
+(void)restartLabelsOfController:(id)controller;
-(void).cxx_destruct;
-(void)dealloc;
-(void)setMinimumScaleFactor:(float)factor;
-(void)setAdjustsLetterSpacingToFitWidth:(BOOL)fitWidth;
-(CGSize)intrinsicContentSize;
-(void)setBaselineAdjustment:(int)adjustment;
-(int)baselineAdjustment;
-(void)setMinimumFontSize:(float)size;
-(void)setAdjustsFontSizeToFitWidth:(BOOL)fitWidth;
-(void)setNumberOfLines:(int)lines;
-(void)setEnabled:(BOOL)enabled;
-(BOOL)isEnabled;
-(void)setHighlighted:(BOOL)highlighted;
-(BOOL)isHighlighted;
-(void)setHighlightedTextColor:(id)color;
-(id)highlightedTextColor;
-(void)setShadowOffset:(CGSize)offset;
-(CGSize)shadowOffset;
-(void)setShadowColor:(id)color;
-(id)shadowColor;
-(void)setBackgroundColor:(id)color;
-(id)backgroundColor;
-(void)setTextColor:(id)color;
-(id)textColor;
-(void)setFont:(id)font;
-(id)font;
-(void)setAttributedText:(id)text;
-(id)attributedText;
-(void)setText:(id)text;
-(id)text;
-(id)viewForBaselineLayout;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(void)labelReturnedToHome:(BOOL)home;
-(void)labelWillBeginScroll;
-(void)triggerScrollStart;
-(void)labelWasTapped:(id)tapped;
-(void)unpauseLabel;
-(void)pauseLabel;
-(void)shutdownLabel;
-(void)resetLabel;
-(void)restartLabel;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(id)timingFunctionForAnimationOptions:(unsigned)animationOptions;
-(id)keyFrameAnimationForProperty:(id)property values:(id)values interval:(double)interval delay:(double)delay;
-(id)keyFrameAnimationForGradientFadeLength:(float)gradientFadeLength interval:(double)interval delay:(double)delay;
-(void)removeGradientMask;
-(void)applyGradientMaskForFadeLength:(float)fadeLength animated:(BOOL)animated;
-(void)scrollContinuousWithInterval:(double)interval after:(double)after;
-(void)scrollAwayWithInterval:(double)interval delayAmount:(double)amount;
-(void)scrollAwayWithInterval:(double)interval delay:(BOOL)delay;
-(void)scrollAwayWithInterval:(double)interval;
-(void)returnLabelToOriginImmediately;
-(void)beginScrollWithDelay:(BOOL)delay;
-(void)beginScroll;
-(BOOL)labelReadyForScroll;
-(CGSize)sizeThatFits:(CGSize)fits;
-(CGSize)subLabelSize;
-(void)updateSublabelAndBeginScroll:(BOOL)scroll;
-(void)updateSublabel;
-(void)didMoveToWindow;
-(void)willMoveToWindow:(id)window;
-(void)layoutSubviews;
-(void)didMoveToSuperview;
-(void)minimizeLabelFrameWithMaximumSize:(CGSize)maximumSize adjustHeight:(BOOL)height;
-(void)observedViewControllerChange:(id)change;
-(void)setupLabel;
-(void)forwardPropertiesToSubLabel;
-(void)drawLayer:(id)layer inContext:(CGContextRef)context;
-(id)repliLayer;
-(void)awakeFromNib;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame rate:(float)rate andFadeLength:(float)length;
-(id)initWithFrame:(CGRect)frame duration:(double)duration andFadeLength:(float)length;
-(id)initWithFrame:(CGRect)frame;
-(void)labelsShouldAnimate:(id)labels;
-(void)labelsShouldLabelize:(id)labels;
-(void)viewControllerShouldRestart:(id)viewController;
@end

__attribute__((visibility("hidden")))
@interface VK_SubscriptionsViewControllerBase : VK_BaseTableViewController <VK_InlineSearchParent, VK_TableControllerSwitcherDelegate> {
	BOOL _needToHandleContentOffset;
	int _currentSegmentType;
	VK_SegmentControl* _segmentControl;
	UIView* _topBarView;
	UIView* _contentView;
	UIActivityIndicatorView* _activityIndicatorView;
	NSDictionary* _segmentNames;
	UIImage* _noResultImage;
	NSString* _noResultString;
	NSArray* _supportedSegmentsTypes;
	VK_TableControllerSwitcher* _tableControllerSwitcher;
	VK_InlineSearchAnimationManager* _inlineSearchAnimationManager;
	VK_InlineSearchableNavigationControllerDelegate* _navigationControllerDelegate;
	VK_InlineSearchConfiguration* _friendsInlineSearchConfiguration;
	VK_InlineSearchConfiguration* _groupsInlineSearchConfiguration;
	VK_InlineSearchViewController* _inlineSearchViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int currentSegmentType;
@property(assign, nonatomic) __weak VK_InlineSearchViewController* inlineSearchViewController;
@property(retain, nonatomic) VK_InlineSearchConfiguration* groupsInlineSearchConfiguration;
@property(retain, nonatomic) VK_InlineSearchConfiguration* friendsInlineSearchConfiguration;
@property(retain, nonatomic) VK_InlineSearchableNavigationControllerDelegate* navigationControllerDelegate;
@property(retain, nonatomic) VK_InlineSearchAnimationManager* inlineSearchAnimationManager;
@property(readonly, assign, nonatomic) float searchHiddenOffset;
@property(assign, nonatomic) BOOL needToHandleContentOffset;
@property(retain, nonatomic) VK_TableControllerSwitcher* tableControllerSwitcher;
@property(retain, nonatomic) NSArray* supportedSegmentsTypes;
@property(retain, nonatomic) NSString* noResultString;
@property(retain, nonatomic) UIImage* noResultImage;
@property(retain, nonatomic) NSDictionary* segmentNames;
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicatorView;
@property(assign, nonatomic) __weak UIView* contentView;
@property(assign, nonatomic) __weak UIView* topBarView;
@property(assign, nonatomic) __weak VK_SegmentControl* segmentControl;
-(void).cxx_destruct;
-(void)presentInlineSearchViewControllerWithSearchView:(id)searchView andConfiguration:(id)configuration;
-(void)hideSearchViewContainer;
-(void)showSearchViewContainer;
-(void)tableControllerCellItemsAllocated:(id)allocated;
-(id)friendsInlineSearchDataProvider;
-(void)showNoResultMessage;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(void)dataProviderErrorReceived:(id)received error:(id)error;
-(id)internalDataProviderForSegmentType:(int)segmentType;
-(int)segmentTypeForIndex:(unsigned)index;
-(void)internalWillSegmentChanging:(int)internal;
-(id)internalNoItemsTitleForSegment:(int)segment;
-(void)updateNoItemsView;
-(void)goToSegment:(int)segment;
-(void)addPixelSeparatorToTopBarView;
-(void)prepareSegmentController;
-(float)internalDefaultMinimalContentHeight;
-(id)internalCreateTableControllerConfiguration;
-(void)internalSetup;
-(id)internalContentView;
-(void)viewDidAppear:(BOOL)view;
-(void)setCustomTableController:(id)controller;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareTitleCellProxy : VK_TableCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareTitleCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareTitleCell : VK_TableViewCellBase {
}
-(void)createViews;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_MiniPlayer : XXUnknownSuperclass <AudioPlayerDelegate, UIGestureRecognizerDelegate> {
	AudioPlayer* _audioPlayer;
	id<VK_MiniPlayerViewDelegate> _delegate;
	UIImageView* _coverImage;
	VK_Button* _playButton;
	VK_Button* _pauseButton;
	VK_Button* _menuButton;
	VK_MarqueeLabel* _trackTitle;
	VK_MarqueeLabel* _artistTitle;
	UIView* _playerProgressView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VK_MiniPlayerViewDelegate> delegate;
@property(retain, nonatomic) UIView* playerProgressView;
@property(retain, nonatomic) VK_MarqueeLabel* artistTitle;
@property(retain, nonatomic) VK_MarqueeLabel* trackTitle;
@property(retain, nonatomic) VK_Button* menuButton;
@property(retain, nonatomic) VK_Button* pauseButton;
@property(retain, nonatomic) VK_Button* playButton;
@property(retain, nonatomic) UIImageView* coverImage;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(void)audioPlayer:(id)player progressChanged:(double)changed forPlayingTrack:(id)playingTrack;
-(void)audioPlayer:(id)player didStateChanged:(unsigned)changed;
-(void)audioPlayer:(id)player didCurrentTrackChanged:(id)changed;
-(void)swipeRight:(id)right;
-(void)swipeLeft:(id)left;
-(void)updateProgress;
-(void)updatePlayerState;
-(void)updateTrackInfo;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_AnaliticService : XXUnknownSuperclass {
	BOOL _haveSavedMusic;
	BOOL _isDataSending;
	BOOL _needSendDataNow;
	NSString* _serviceId;
	NSString* _passKey;
	NSString* _UID;
	NSString* _subscriptionStatus;
	unsigned _subscriptionMusicLimit;
	unsigned _subscriptionUsedMusicLimit;
	id<VK_AnaliticServiceDelegate> _delegate;
	NSMutableArray* _events;
	NSMutableArray* _audios;
	NSTimer* _autosaveTimer;
	NSTimer* _autosendTimer;
	double _autosaveTimeInterval;
	double _autosendTimeInterval;
}
@property(assign, nonatomic) __weak id<VK_AnaliticServiceDelegate> delegate;
@property(assign, nonatomic) double autosendTimeInterval;
@property(assign, nonatomic) double autosaveTimeInterval;
@property(assign, nonatomic) BOOL haveSavedMusic;
@property(assign, nonatomic) unsigned subscriptionUsedMusicLimit;
@property(assign, nonatomic) unsigned subscriptionMusicLimit;
@property(retain, nonatomic) NSString* subscriptionStatus;
@property(retain, nonatomic) NSString* UID;
@property(retain, nonatomic) NSString* passKey;
@property(readonly, assign, nonatomic) NSString* serviceId;
@property(retain, nonatomic) NSTimer* autosendTimer;
@property(retain, nonatomic) NSTimer* autosaveTimer;
@property(assign, nonatomic) BOOL needSendDataNow;
@property(assign, nonatomic) BOOL isDataSending;
@property(readonly, assign, nonatomic) BOOL shouldSendData;
@property(retain, nonatomic) NSMutableArray* audios;
@property(retain, nonatomic) NSMutableArray* events;
+(id)serviceDataKeyForId:(id)anId;
+(id)allRegisteredServices;
+(id)registerServiceWithId:(id)anId;
+(void)initialize;
-(void).cxx_destruct;
-(void)loadData;
-(void)saveData;
-(id)stringFromBool:(BOOL)aBool;
-(id)dataFromString:(id)string;
-(unsigned long long)readUInt64FromData:(id)data withMovingOffset:(unsigned*)movingOffset;
-(unsigned)readUInt32FromData:(id)data withMovingOffset:(unsigned*)movingOffset;
-(unsigned short)readUInt16FromData:(id)data withMovingOffset:(unsigned*)movingOffset;
-(void)appendUInt64Value:(unsigned long long)value toData:(id)data;
-(void)appendUInt32Value:(unsigned)value toData:(id)data;
-(void)appendUInt16Value:(unsigned short)value toData:(id)data;
-(id)audiosFromData:(id)data;
-(id)eventsFromData:(id)data;
-(id)dataFromAudios;
-(id)dataFromEvents;
-(void)appendAudiosToData:(id)data;
-(void)appendEventsToData:(id)data;
-(void)appendVarsToData:(id)data;
-(void)appendHeaderToData:(id)data;
-(id)serializeData;
-(void)sendData;
-(void)sendDataIfNeeded;
-(void)startAutosendTimerIfNeeded;
-(void)startAutosaveTimerIfNeeded;
-(void)trackAudio:(id)audio;
-(void)trackEvent:(id)event;
-(void)dealloc;
-(void)setup_VK_AnaliticService;
-(id)initWithServiceId:(id)serviceId;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioProvider : VK_ShuffleableTracksProvider {
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)internalPrepareNewData:(id)data;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreatePagedRequestWithShuffleEnabled:(BOOL)shuffleEnabled;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LNPopupControllerLongPressGestureDelegate : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
@end

__attribute__((visibility("hidden")))
@interface VK_TableControllerSwitcher : XXUnknownSuperclass {
	BOOL _handleContentOffset;
	id<VK_TableControllerSwitcherDelegate> _delegate;
	float _defaultContentOffset;
	NSNumber* _unknownType;
	VK_BaseTableViewController* _tableViewController;
	NSMutableDictionary* _tableControllers;
	NSMutableDictionary* _tableControllersReorderingValues;
	NSMutableDictionary* _tableViewContentOffsets;
	NSMutableDictionary* _validationValues;
}
@property(assign, nonatomic) NSNumber* unknownType;
@property(assign, nonatomic) float defaultContentOffset;
@property(assign, nonatomic) BOOL handleContentOffset;
@property(assign, nonatomic) __weak id<VK_TableControllerSwitcherDelegate> delegate;
@property(retain, nonatomic) NSMutableDictionary* validationValues;
@property(retain, nonatomic) NSMutableDictionary* tableViewContentOffsets;
@property(retain, nonatomic) NSMutableDictionary* tableControllersReorderingValues;
@property(retain, nonatomic) NSMutableDictionary* tableControllers;
@property(assign, nonatomic) __weak VK_BaseTableViewController* tableViewController;
-(void).cxx_destruct;
-(void)delegateNotifyDidSwitchToTableController:(id)delegateNotify;
-(void)delegateNotifyWillSwitchFromTableController:(id)delegateNotify;
-(void)createTableController;
-(void)switchToTableController:(id)tableController withContentOffset:(CGPoint)contentOffset andReorderingEnabled:(BOOL)enabled;
-(void)configureWithTableViewController:(id)tableViewController;
-(void)reset;
-(void)switchFromTabWithType:(unsigned)type toTabWithType:(unsigned)type2 withValidationValue:(id)validationValue;
-(void)switchFromTabWithType:(unsigned)type toTabWithType:(unsigned)type2 withValidationValue:(id)validationValue andForcedReload:(BOOL)reload;
-(id)initWithTableViewController:(id)tableViewController;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioPlayerHintView : XXUnknownSuperclass {
	NSString* _currentHint;
	unsigned _state;
	UILabel* _hintLabel;
	NSTimer* _timer;
}
@property(retain, nonatomic) NSTimer* timer;
@property(assign, nonatomic) __weak UILabel* hintLabel;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSString* currentHint;
-(void).cxx_destruct;
-(void)resetHint;
-(void)resetTimer;
-(void)hideHintTimer;
-(void)startTimer;
-(void)internalHideHint;
-(void)hideHint;
-(void)internalChangeHint;
-(void)internalShowHint;
-(void)showHint:(id)hint;
-(void)setupAudioPlayerHintView;
-(void)awakeFromNib;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedActionsView : VK_NibView <UIGestureRecognizerDelegate> {
	BOOL _isOpened;
	id _hideBlock;
	id _shareBlock;
	id _bookmarkBlock;
	UIView* _overlayView;
	UIView* _boxContainerView;
	VK_TriangleView* _topTriangleView;
	VK_TriangleView* _bottomTriangleView;
	VK_Button* _hideButton;
	UIView* _hideBorderView;
	VK_Button* _shareButton;
	NSLayoutConstraint* _containerCenterYConstraint;
	NSLayoutConstraint* _topTriangleViewHeightConstraint;
	NSLayoutConstraint* _bottomTriangleViewHeightConstraint;
	NSLayoutConstraint* _hideButtonBorderHeightConstraint;
	VK_FeedNoteBlockModel* _block;
	id _completionBlock;
	CGPoint _location;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id bookmarkBlock;
@property(copy, nonatomic) id shareBlock;
@property(copy, nonatomic) id hideBlock;
@property(copy, nonatomic) id completionBlock;
@property(assign, nonatomic) BOOL isOpened;
@property(retain, nonatomic) VK_FeedNoteBlockModel* block;
@property(assign, nonatomic) CGPoint location;
@property(assign, nonatomic) __weak NSLayoutConstraint* hideButtonBorderHeightConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* bottomTriangleViewHeightConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* topTriangleViewHeightConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* containerCenterYConstraint;
@property(assign, nonatomic) __weak VK_Button* shareButton;
@property(assign, nonatomic) __weak UIView* hideBorderView;
@property(assign, nonatomic) __weak VK_Button* hideButton;
@property(assign, nonatomic) __weak VK_TriangleView* bottomTriangleView;
@property(assign, nonatomic) __weak VK_TriangleView* topTriangleView;
@property(assign, nonatomic) __weak UIView* boxContainerView;
@property(assign, nonatomic) __weak UIView* overlayView;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)bookmarkButtonPressed:(id)pressed;
-(void)shareButtonPressed:(id)pressed;
-(void)hideButtonPressed:(id)pressed;
-(void)hide;
-(void)configureWithLocation:(CGPoint)location block:(id)block andSupportedActions:(unsigned)actions;
-(void)internalConfigureView;
-(id)internalNibName;
-(void)showInView:(id)view withCompletionBlock:(id)completionBlock;
-(id)initWithLocation:(CGPoint)location block:(id)block andSupportedActions:(unsigned)actions;
@end

__attribute__((visibility("hidden")))
@interface VK_MiniPlayerController : XXUnknownSuperclass {
	BOOL _isVisible;
	UITabBarController* _tabBarController;
	VK_AudioPlayerViewController* _bigPlayerViewController;
}
@property(readonly, assign, nonatomic) __weak VK_AudioPlayerViewController* bigPlayerViewController;
@property(readonly, assign, nonatomic) __weak UITabBarController* tabBarController;
@property(assign, nonatomic) BOOL isVisible;
-(void).cxx_destruct;
-(void)changeMiniPlayerVisibility:(BOOL)visibility;
-(id)internalCreateAudioPlayerViewController;
-(void)internalMiniPlayerVisibilityChanged:(BOOL)changed;
-(void)internalConfigureWithTabBarController:(id)tabBarController;
-(void)dismissAudioPlayerViewControllerIfNeededWithCompletion:(id)completion;
-(void)dismissAudioPlayerViewControllerIfNeeded;
-(void)openAudioPlayerViewControllerWithCompletion:(id)completion;
-(void)openAudioPlayerViewController;
-(void)hide;
-(void)show;
-(id)initWithTabBarController:(id)tabBarController;
@end

__attribute__((visibility("hidden")))
@interface VK_MarqueeLabel : __MarqueeLabel {
}
-(void)internalMarqueeLabelSetup;
-(void)setLabelize:(BOOL)labelize;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsViewController : VK_BaseTableViewController {
	BOOL _isDataFetcthing;
	BOOL _needToReloadDataAfterTracksChange;
	NSDateFormatter* _dateFormatter;
	VK_NotificationObserver* _notificationObserver;
}
@property(retain, nonatomic) VK_NotificationObserver* notificationObserver;
@property(retain, nonatomic) NSDateFormatter* dateFormatter;
@property(assign, nonatomic) BOOL needToReloadDataAfterTracksChange;
@property(assign, nonatomic) BOOL isDataFetcthing;
-(void).cxx_destruct;
-(void)favoriteTracksChanged;
-(void)onTariffsStateChanged;
-(void)removeAllTracks;
-(void)shareApplication;
-(void)sendFeedback;
-(void)onTraiffsRestoringPressed;
-(void)askPermissionToLogout;
-(void)configureDataAllocator:(id)allocator;
-(unsigned short)internalAnaliticScreen;
-(id)internalCreateTableControllerConfiguration;
-(id)internalTitle;
-(void)internalSetup;
-(void)reloadData;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_DisplayBridge : XXUnknownSuperclass {
	CFSetRef _subscribedViews;
	CADisplayLink* _displayLink;
}
@property(readonly, assign, nonatomic) CFSetRef subscribedViews;
@property(readonly, assign, nonatomic) CADisplayLink* displayLink;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)refresh;
-(void)dealloc;
-(void)handleDisplayLink:(id)link;
-(void)removeSubscribedObject:(id)object;
-(void)addSubscribedObject:(id)object;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_ImageViewerViewController : VK_BaseViewController <UIScrollViewDelegate> {
	BOOL _isDismissing;
	NSArray* _imagesUrls;
	NSMutableArray* _imageViews;
	unsigned _curImageNumber;
	UIScrollView* _outerScrollView;
	UIScrollView* _innerScrollView;
	UIView* _headerView;
	VK_BaseLabel* _titleLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VK_BaseLabel* titleLabel;
@property(assign, nonatomic) __weak UIView* headerView;
@property(assign, nonatomic) __weak UIScrollView* innerScrollView;
@property(assign, nonatomic) __weak UIScrollView* outerScrollView;
@property(assign, nonatomic) BOOL isDismissing;
@property(assign, nonatomic) unsigned curImageNumber;
@property(retain, nonatomic) NSMutableArray* imageViews;
@property(retain, nonatomic) NSArray* imagesUrls;
-(void).cxx_destruct;
-(void)prepareScrollViews;
-(void)updateImageNumber;
-(void)updateInnerScrollOffset;
-(void)dismissImageViewer;
-(void)closeBtnPressed:(id)pressed;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)currentImageView;
-(void)viewDidLoad;
-(void)internalSetup;
-(BOOL)shouldShowStatusBarAlert;
-(void)showWithImagesUrls:(id)imagesUrls andIndex:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface VK_FriendsInlineSearchDataProvider : VK_ProfilesInlineSearchDataProvider {
	unsigned _friendsType;
}
@property(assign, nonatomic) unsigned friendsType;
-(id)internalSearchableItems;
@end

__attribute__((visibility("hidden")))
@interface VK_BlurView : XXUnknownSuperclass <VK_DisplayBridgeTriggering> {
	BOOL _isDynamic;
	BOOL _isRenderingAsync;
	BOOL _appIsActive;
	BOOL _inProcess;
	UIView* _sourceView;
	float _blurScaleFactor;
	float _tintColorAlpha;
	float _blurRadius;
	unsigned _maxFPS;
	int _renderingPriority;
	UIView* _colorView;
	CGContextRef _effectInContext;
	CGContextRef _effectOutContext;
	unsigned _precalculatedBlurKernel;
	double _prevUpdatingTime;
	CGSize _cachedBufferSize;
	vImage_Buffer _effectInBuffer;
	vImage_Buffer _effectOutBuffer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int renderingPriority;
@property(assign, nonatomic) BOOL isRenderingAsync;
@property(assign, nonatomic) unsigned maxFPS;
@property(assign, nonatomic) BOOL isDynamic;
@property(assign, nonatomic) float blurRadius;
@property(assign, nonatomic) float tintColorAlpha;
@property(assign, nonatomic) float blurScaleFactor;
@property(assign, nonatomic) __weak UIView* sourceView;
@property(assign, nonatomic) BOOL inProcess;
@property(readonly, assign, nonatomic) unsigned precalculatedBlurKernel;
@property(readonly, assign, nonatomic) vImage_Buffer effectOutBuffer;
@property(readonly, assign, nonatomic) vImage_Buffer effectInBuffer;
@property(readonly, assign, nonatomic) CGContextRef effectOutContext;
@property(readonly, assign, nonatomic) CGContextRef effectInContext;
@property(readonly, assign, nonatomic) CGSize scaledSize;
@property(readonly, assign, nonatomic) CGSize cachedBufferSize;
@property(assign, nonatomic) double prevUpdatingTime;
@property(assign, nonatomic) BOOL appIsActive;
@property(assign, nonatomic) __weak UIView* colorView;
-(void).cxx_destruct;
-(void)updateBlurState;
-(void)endUpdating;
-(void)startUpdating;
-(void)appDidResignActive;
-(void)appDidBecomeActive;
-(void)createColorView;
-(void)setup_VK_BlurView;
-(void)displayBridgeRefresh;
-(BOOL)shouldStartBlurUpdating;
-(void)setHidden:(BOOL)hidden;
-(void)didMoveToWindow;
-(void)didMoveToSuperview;
-(void)setTintColor:(id)color;
-(void)dealloc;
-(void)updatePrecalculatedBlurKernel;
-(void)recreateImageBuffers;
-(void)blurUpdate;
-(void)adjustImageBuffersAndLayerFromFrame:(CGRect)frame;
-(void)setCenter:(CGPoint)center;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_SmallHeaderCellProxy : VK_TableCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SmallHeaderCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SmallHeaderCell : VK_TableViewCellBase {
}
-(void)createViews;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_AnaliticEvent : XXUnknownSuperclass {
	unsigned short _screen;
	unsigned short _block;
	unsigned short _action;
	double _eventTime;
}
@property(assign, nonatomic) double eventTime;
@property(assign, nonatomic) unsigned short action;
@property(assign, nonatomic) unsigned short block;
@property(assign, nonatomic) unsigned short screen;
+(id)eventWithAction:(unsigned short)action screen:(unsigned short)screen block:(unsigned short)block time:(double)time;
+(id)eventWithAction:(unsigned short)action screen:(unsigned short)screen block:(unsigned short)block;
+(id)eventWithAction:(unsigned short)action screen:(unsigned short)screen;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VK_ArtistViewController : VK_BaseViewController {
	NSString* _artistId;
}
@property(retain, nonatomic) NSString* artistId;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseLabel : XXUnknownSuperclass {
}
-(void)layoutSubviews;
-(void)internalLabelSetup;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewBottomShadowCellProxy : VK_FeedViewShadowCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
-(float)height;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewBottomShadowCellViewModel : VK_FeedViewShadowCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewBottomShadowCell : VK_FeedViewShadowCell {
}
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleTrackListProvider : VK_DataProvider <VK_TrackListProvider, VK_DataProviderDelegate> {
	NSArray* _tracks;
	BOOL _needReloadTracksProvider;
	id<VK_DataWithTracksProvider> _tracksProvider;
	VK_TrackModel* _startTrack;
	NSDictionary* _trackIdsToIndexes;
	VK_TrackListProviderOptions* _options;
	id<VK_DataWithTracksProvider> _originalTracksProvider;
}
@property(readonly, assign, nonatomic) id tracksFilter;
@property(readonly, assign, nonatomic) NSArray* tracks;
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) id<VK_DataWithTracksProvider> tracksProvider;
@property(assign, nonatomic) BOOL needReloadTracksProvider;
@property(assign, nonatomic) __weak id<VK_DataWithTracksProvider> originalTracksProvider;
@property(retain, nonatomic) VK_TrackListProviderOptions* options;
@property(retain, nonatomic) NSDictionary* trackIdsToIndexes;
@property(retain, nonatomic) VK_TrackModel* startTrack;
-(void).cxx_destruct;
-(id)filterTracksWithStartTrack:(id)startTrack;
-(void)setTracksProvider:(id)provider;
-(void)internalDidDataChanged;
-(BOOL)internalStartFromTrack;
-(void)internalPreviousLoop;
-(void)internalNextLoop;
-(id)internalOptions;
-(void)internalUpdateFetchingParamsIfNeeded:(id)needed;
-(void)internalPrepareToFetching:(id)fetching;
-(void)internalReloadTracksProvider;
-(void)internalInitTracksProvider;
-(id)internalTracksFilter;
-(id)internalTracksFromData:(id)data;
-(void)reset;
-(void)cancelFetching;
-(void)fetchData:(id)data;
-(void)dataProviderDidFetchStatusChanged:(id)dataProvider;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderWillFetchingComplete:(id)dataProvider withSuccessful:(BOOL)successful;
-(void)dataProviderDidFetchingStarted:(id)dataProvider;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(void)fetchMoreTracksIfNeededFromTrack:(id)track;
-(id)createTrackListProviderFromTrack:(id)track;
-(id)previousTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(id)nextTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(BOOL)canPlayTrack:(id)track;
-(id)trackAtIndex:(unsigned)index;
-(id)indexForTrack:(id)track;
-(void)dealloc;
-(void)needToReloadTracksProvider;
-(void)reloadTracksProviderIfNeeded;
-(void)reloadTracksProvider;
-(id)initWithTracksProvider:(id)tracksProvider andStartTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface LockScreenPlayer : XXUnknownSuperclass <AudioPlayerDelegate> {
	VK_TrackModel* _currentTrack;
	UIImage* _currentArtworkImage;
	MPMediaItemArtwork* _currentArtwork;
	AudioPlayer* _audioPlayer;
	NSTimer* _updatingTimer;
	BOOL _needToPlayAfterInterruptEnded;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL needToPlayAfterInterruptEnded;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)audioSessionInterruption:(id)interruption;
-(void)audioSessionRouteChange:(id)change;
-(void)updateArtworkForTrack:(id)track;
-(void)setArtowkWithImage:(id)image;
-(void)updateInfo;
-(void)audioPlayer:(id)player didStateChanged:(unsigned)changed;
-(void)audioPlayer:(id)player didCurrentTrackChanged:(id)changed;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_LogFormatter : XXUnknownSuperclass <DDLogFormatter> {
	int _loggerCount;
	NSDateFormatter* _threadUnsafeDateFormatter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDateFormatter* threadUnsafeDateFormatter;
@property(assign, nonatomic) int loggerCount;
-(void).cxx_destruct;
-(void)willRemoveFromLogger:(id)logger;
-(void)didAddToLogger:(id)logger;
-(id)formatLogMessage:(id)message;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_Request : XXUnknownSuperclass {
	BOOL _isExecuting;
	BOOL _isCache;
	id _completeBlock;
	id _data;
	NSError* _error;
	VK_RequestManager* _manager;
	NSMutableSet* _delegates;
}
@property(retain, nonatomic) VK_RequestManager* manager;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) id data;
@property(copy, nonatomic) id completeBlock;
@property(readonly, assign, nonatomic) BOOL silentRequest;
@property(readonly, assign, nonatomic) BOOL isCache;
@property(readonly, assign, nonatomic) BOOL isExecuting;
@property(retain, nonatomic) NSMutableSet* delegates;
-(void).cxx_destruct;
-(void)onRequestStopped;
-(void)onRequestCompletedWithResponse:(id)response error:(id)error andCacheFlag:(BOOL)flag;
-(void)resetData;
-(void)setup;
-(id)internalPrepareResponse:(id)response error:(id*)error cached:(BOOL)cached;
-(void)internalRequestCompleted;
-(void)internalRequestStopped;
-(void)internalCancel;
-(void)internalExecuteRequest:(id)request;
-(void)internalValidateParams;
-(void)internalSetup;
-(void)notificateDelegateOnComplete;
-(void)notificateDelegateOnStart;
-(void)unsubscribe:(id)unsubscribe;
-(void)subscribe:(id)subscribe;
-(void)cancel;
-(void)execute;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LNPopupBar : XXUnknownSuperclass <UIAppearanceContainer> {
	BOOL _delaysBarButtonItemLayout;
	UIView* _titlesView;
	__MarqueeLabel* _titleLabel;
	__MarqueeLabel* _subtitleLabel;
	BOOL _needsLabelsLayout;
	UIColor* _userTintColor;
	UIColor* _userBackgroundColor;
	int _userBarStyle;
	UIColor* _userBarTintColor;
	LNPopupItem* _popupItem;
	NSArray* _leftBarButtonItems;
	NSArray* _rightBarButtonItems;
	NSDictionary* _titleTextAttributes;
	NSDictionary* _subtitleTextAttributes;
	UIToolbar* _backgroundView;
	int _systemBarStyle;
	UIColor* _systemTintColor;
	UIColor* _systemBarTintColor;
	UIColor* _systemBackgroundColor;
	NSString* _title;
	NSString* _subtitle;
	UIToolbar* _toolbar;
	UIView* _highlightView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIToolbar* backgroundView;
@property(copy, nonatomic) NSDictionary* subtitleTextAttributes;
@property(copy, nonatomic) NSDictionary* titleTextAttributes;
@property(retain, nonatomic) UIImage* shadowImage;
@property(retain, nonatomic) UIImage* backgroundImage;
@property(retain, nonatomic) UIColor* barTintColor;
@property(assign, nonatomic) int barStyle;
@property(assign, nonatomic, getter=isTranslucent) BOOL translucent;
@property(copy, nonatomic) NSArray* rightBarButtonItems;
@property(copy, nonatomic) NSArray* leftBarButtonItems;
@property(retain, nonatomic) UIView* highlightView;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) __weak LNPopupItem* popupItem;
@property(retain, nonatomic) UIColor* systemBackgroundColor;
@property(retain, nonatomic) UIColor* systemBarTintColor;
@property(retain, nonatomic) UIColor* systemTintColor;
@property(assign, nonatomic) int systemBarStyle;
-(void).cxx_destruct;
-(void)_removeAnimationFromBarItems;
-(void)_layoutBarButtonItems;
-(void)_delayBarButtonLayout;
-(void)_setTitleViewMarqueesPaused:(BOOL)paused;
-(void)_setTitleLableFontsAccordingToBarStyleAndTint;
-(void)_setNeedsTitleLayout;
-(void)_layoutTitles;
-(id)_newMarqueeLabel;
-(void)setBackgroundColor:(id)color;
-(id)backgroundColor;
-(void)setTintColor:(id)color;
-(id)tintColor;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)setHighlighted:(BOOL)highlighted;
@end

__attribute__((visibility("hidden")))
@interface VK_SDKLyricsRequest : VK_SDKRequest {
	unsigned _lyricsId;
}
@property(readonly, assign, nonatomic) VK_SDKLyricsResponse* response;
@property(assign, nonatomic) unsigned lyricsId;
-(id)internalParseJson:(id)json withError:(id*)error;
-(id)internalCreateSDKRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_SDKLyricsResponse : XXUnknownSuperclass <EKMappingProtocol> {
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SDKSearchAutocompletionResponse : XXUnknownSuperclass <EKMappingProtocol> {
	NSArray* _items;
}
@property(retain, nonatomic) NSArray* items;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SDKSearchAutocompletionRequest : VK_SDKRequest {
	NSString* _query;
}
@property(readonly, assign, nonatomic) VK_SDKSearchAutocompletionResponse* response;
@property(retain, nonatomic) NSString* query;
-(void).cxx_destruct;
-(id)internalParseJson:(id)json withError:(id*)error;
-(id)internalCreateSDKRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_ImageURLBuilder : XXUnknownSuperclass {
}
+(id)buildImageURL:(id)url withSize:(unsigned)size;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface VK_UIDeviceHardware : XXUnknownSuperclass {
}
+(BOOL)isLowPerformanceDevice;
+(BOOL)isPushNotificationsAvailable;
+(id)iOSVersion;
+(id)deviceId;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseViewController : XXUnknownSuperclass {
	BOOL _showNavigationBar;
	BOOL _showStatusBar;
	BOOL _useCustomNavBarButtons;
	BOOL _isDataLoaded;
	BOOL _isReloadedAfterNetworkReachable;
	NSArray* _leftBarButtons;
	NSArray* _rightBarButtons;
	VK_ProfileMessageView* _messageView;
	VK_BarButtonsFactory* _barBtnFactory;
}
@property(assign, nonatomic) __weak VK_ProfileMessageView* messageView;
@property(retain, nonatomic) NSArray* rightBarButtons;
@property(retain, nonatomic) NSArray* leftBarButtons;
@property(assign, nonatomic) BOOL useCustomNavBarButtons;
@property(assign, nonatomic) BOOL showStatusBar;
@property(assign, nonatomic) BOOL showNavigationBar;
@property(assign, nonatomic) BOOL isReloadedAfterNetworkReachable;
@property(assign, nonatomic) BOOL isDataLoaded;
@property(retain, nonatomic) VK_BarButtonsFactory* barBtnFactory;
-(void).cxx_destruct;
-(void)hideMessageAndReloadData;
-(void)internalShowUnknownErrorMessage;
-(void)internalShowUnknownErrorMessageWithActionBlock:(id)actionBlock;
-(void)internalShowNoInternetMessage;
-(void)internalShowNoInternetMessageWithActionBlock:(id)actionBlock;
-(void)internalHideMessage;
-(void)internalShowMessage:(id)message image:(id)image actionText:(id)text lock:(BOOL)lock andActionBlock:(id)block;
-(void)internalHandleNetworkError:(id)error andActionBlock:(id)block;
-(void)internalHandleNetworkError:(id)error;
-(BOOL)shouldShowStatusBarAlert;
-(id)internalContentView;
-(void)createInfoMessageView;
-(void)updateNavigationBarStateAnimated:(BOOL)animated;
-(void)updateTitle;
-(id)navBarTitleLabel;
-(id)createBarButtons:(id)buttons;
-(BOOL)isFirstControllerInStack;
-(void)prepareBarButtons;
-(void)setup;
-(void)backPressed;
-(id)internalTitle;
-(void)internalConfigureTitleLabel:(id)label;
-(void)internalStatusBarVisibilityChanged;
-(unsigned short)internalAnaliticScreen;
-(void)internalNetworkReachabilityChanged;
-(BOOL)shoulNavigationBarHaveFixedHeight;
-(BOOL)shouldNeedLayoutUpdateOnViewLoad;
-(void)internalSetup;
-(void)updateDataAfterOffline;
-(void)reloadData;
-(void)setTitle:(id)title;
-(void)trackScreen;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_BlocksShadows : XXUnknownSuperclass {
}
+(id)bottomShadowCellProxy;
+(id)topShadowCellProxy;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackStateView : XXUnknownSuperclass {
	VK_CircleChart* _progressView;
	BOOL _showProgressStartAnimation;
	VK_TrackModel* _track;
	unsigned _behaviorType;
	UIImage* _trackAddImage;
	UIImage* _trackSyncImage;
	UIImage* _trackDownloadImage;
	UIImage* _trackDownloadCancelImage;
	UIImage* _trackCheckImage;
	UIImage* _trackErrorImage;
	UIImage* _trackCachingDisabledImage;
	id _didUpdatedDisablingStateBlock;
	id _trackAddToMyAudioBlock;
	id _trackAddToFavoriteBlock;
	id _trackFavortieSyncBlock;
	id _favoriteCancelPressedBlock;
	VK_NotificationObserver* _notificationObserver;
	VK_Button* _actionButton;
}
@property(copy, nonatomic) id favoriteCancelPressedBlock;
@property(copy, nonatomic) id trackFavortieSyncBlock;
@property(copy, nonatomic) id trackAddToFavoriteBlock;
@property(copy, nonatomic) id trackAddToMyAudioBlock;
@property(copy, nonatomic) id didUpdatedDisablingStateBlock;
@property(retain, nonatomic) UIImage* trackCachingDisabledImage;
@property(retain, nonatomic) UIImage* trackErrorImage;
@property(retain, nonatomic) UIImage* trackCheckImage;
@property(retain, nonatomic) UIImage* trackDownloadCancelImage;
@property(retain, nonatomic) UIImage* trackDownloadImage;
@property(retain, nonatomic) UIImage* trackSyncImage;
@property(retain, nonatomic) UIImage* trackAddImage;
@property(assign, nonatomic) unsigned behaviorType;
@property(retain, nonatomic) VK_TrackModel* track;
@property(assign, nonatomic) __weak VK_Button* actionButton;
@property(assign, nonatomic) BOOL showProgressStartAnimation;
@property(retain, nonatomic) VK_NotificationObserver* notificationObserver;
-(void).cxx_destruct;
-(id)progressView;
-(void)updateDownloadingProgress:(unsigned)progress animated:(BOOL)animated;
-(void)showDownloadingCompletedAnimation;
-(void)showDownloadingStartAnimationIfNeeded;
-(void)updateTrackSDKInfoNotification:(id)notification;
-(void)updateDownloadStatusNotification:(id)notification;
-(void)updateDownloadingProgressNotification:(id)notification;
-(void)setImageForActionButton:(id)actionButton;
-(void)updateFavoriteStateNotification:(id)notification;
-(void)updateMyAudioeStateNotification:(id)notification;
-(void)updateActionState;
-(void)setupVK_TrackStateView;
-(void)layoutSubviews;
-(void)actionButtonPressed;
-(void)stopObservable;
-(void)startObserve;
-(void)reset;
-(void)awakeFromNib;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsBaseSwitchCellProxy : VK_TableCellProxy {
	int _cellType;
	id _onSettingChanged;
}
@property(copy, nonatomic) id onSettingChanged;
@property(assign, nonatomic) int cellType;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsBaseSwitchCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsBaseSwitchCell : VK_TableViewCellBase <VK_NetworkReachabilitySubscriber> {
	VK_BaseLabel* _nameLabel;
	UISwitch* _switchControl;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UISwitch* switchControl;
@property(assign, nonatomic) __weak VK_BaseLabel* nameLabel;
@property(readonly, assign, nonatomic) BOOL isNetworkOption;
@property(readonly, assign, nonatomic) BOOL defaultValue;
@property(readonly, assign, nonatomic) VK_SettingsBaseSwitchCellProxy* proxy;
+(BOOL)internalCanHaveSeparator;
+(id)internalNibName;
+(void)initialize;
-(void).cxx_destruct;
-(void)networkReachability:(id)reachability networkReachableChanged:(BOOL)changed;
-(void)settingChanged:(id)changed;
-(void)configureSwitchControlAvailability;
-(void)configureNameLabel;
-(void)internalUpdateData;
-(void)internalSetup;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VK_Observable : XXUnknownSuperclass {
}
-(id)subscribe:(id)subscribe;
-(id)subscribeOn:(id)on;
@end

__attribute__((visibility("hidden")))
@interface VK_PublishObservable : VK_Observable <VK_Observer> {
	NSMutableArray* _obsevers;
	unsigned _state;
	NSError* _error;
	id _result;
	id _finalizeBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id finalizeBlock;
@property(retain, nonatomic) id result;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSMutableArray* obsevers;
-(void).cxx_destruct;
-(void)onError:(id)error;
-(void)onSuccess:(id)success;
-(id)subscribe:(id)subscribe;
-(id)init;
-(id)initWithFinalizeBlock:(id)finalizeBlock;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleObservable : VK_Observable {
	id _subscribeBlock;
}
@property(copy, nonatomic) id subscribeBlock;
+(id)createWithSubscribeBlock:(id)subscribeBlock;
+(id)delay:(double)delay;
-(void).cxx_destruct;
-(id)subscribe:(id)subscribe;
@end

__attribute__((visibility("hidden")))
@interface VK_MyFavoritesTrackListProvider : VK_LocalShuffleableTrackListProvider {
}
-(id)internalTracksFilter;
-(BOOL)canPlayTrack:(id)track;
-(void)onFavoritesDidChanged;
-(void)dealloc;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchQueryVariantCellProxy : VK_TableCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchQueryVariantCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchQueryVariantCell : VK_TableViewCellBase {
	UILabel* _titleLabel;
}
@property(assign, nonatomic) __weak UILabel* titleLabel;
@property(readonly, assign, nonatomic) VK_SearchQueryVariantCellProxy* proxy;
@property(readonly, assign, nonatomic) NSString* data;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(float)internalPartialSeparatorLeadingSpace;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_MiniPlayerGestureRecognizer : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface VK_FavoriteTrackInfo : XXUnknownSuperclass {
	NSManagedObjectID* _dataTrackId;
	unsigned _downloadPercentage;
	unsigned _downloadingStatus;
	unsigned _state;
	unsigned _downloadingErrorReason;
	NSString* _trackFilePath;
}
@property(retain, nonatomic) NSString* trackFilePath;
@property(assign, nonatomic) unsigned downloadingErrorReason;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) unsigned downloadingStatus;
@property(assign, nonatomic) unsigned downloadPercentage;
@property(retain, nonatomic) NSManagedObjectID* dataTrackId;
@property(readonly, assign) BOOL isPreparedForDownloading;
@property(readonly, assign) BOOL isDownloaded;
@property(readonly, assign) BOOL isDownloadingFailed;
@property(readonly, assign) BOOL isDownloading;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_NavigationControllerDelegate : XXUnknownSuperclass <UINavigationControllerDelegate> {
	BOOL _interactivePopGestureRecognizerEnabled;
	BOOL _canPushNextViewController;
	id _onViewControllerDidShowBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id onViewControllerDidShowBlock;
@property(readonly, assign, nonatomic) BOOL canPushNextViewController;
@property(assign, nonatomic) BOOL interactivePopGestureRecognizerEnabled;
-(void).cxx_destruct;
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willPushViewController:(id)controller2 animated:(BOOL)animated;
-(void)configure;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumTableViewDataAllocator : XXUnknownSuperclass <VK_TableViewDataAllocator> {
	VK_ShuffleCellProxy* _shuffleCellProxy;
	VK_SimpleNumberedCellProxy* _trackCellProxy;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VK_SimpleNumberedCellProxy* trackCellProxy;
@property(readonly, assign, nonatomic) VK_ShuffleCellProxy* shuffleCellProxy;
-(void).cxx_destruct;
-(id)cellItemForTrack:(id)track;
-(id)allocateCellsWithData:(id)data;
-(void)setupAlbumTableViewDataAllocator;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_TrackCellProxyConfiguration : XXUnknownSuperclass <VK_CellProxyConfiguration> {
	BOOL _recreateTrackList;
	BOOL _trackListMode;
	unsigned _trackStateBehavior;
	id<VK_TrackListProviderFactory> _trackListDataFactory;
	id _createCustomTrackListProviderBlock;
	id _trackRemoveButtonPressedBlock;
	id _favoritesCancelDownloadingBlock;
	id _favoritesAddBlock;
	id _prepareBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id prepareBlock;
@property(assign, nonatomic) BOOL trackListMode;
@property(copy, nonatomic) id favoritesAddBlock;
@property(copy, nonatomic) id favoritesCancelDownloadingBlock;
@property(copy, nonatomic) id trackRemoveButtonPressedBlock;
@property(copy, nonatomic) id createCustomTrackListProviderBlock;
@property(assign, nonatomic) __weak id<VK_TrackListProviderFactory> trackListDataFactory;
@property(assign, nonatomic) unsigned trackStateBehavior;
@property(assign, nonatomic) BOOL recreateTrackList;
-(void).cxx_destruct;
-(void)playTrack:(id)track withTrackListProvider:(id)trackListProvider;
-(void)playOneTrack:(id)track;
-(void)playTrackFromTrackList:(id)trackList;
-(void)showAlertWithText:(id)text;
-(void)onCellPressed:(id)pressed;
-(void)setup;
-(void)applyToCellProxy:(id)cellProxy;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AudioPlayer : XXUnknownSuperclass <PlayerDelegate, VK_NetworkReachabilitySubscriber, VK_DataProviderDelegate> {
	NSMutableSet* _playerListeners;
	StreamingKitAdapter* _currentPlayer;
	NSTimer* _timer;
	int _lastProgress;
	BOOL _wasStatusSetted;
	unsigned _state;
	VK_TrackModel* _currentTrack;
	id<VK_TrackListProvider> _trackListProvider;
	id<VK_Disposable> _playingTrackInfoDisposable;
	id<VK_Disposable> _cachingTrackInfoDisposable;
	NSOperationQueue* _prefetchOperationQueue;
	NSOperationQueue* _loadingOperationQueue;
	CachedHTTPDataSourceSandboxOperation* _prefetchOperation;
	VK_Observable* _tracksInfoUpdatingObservable;
	id<VK_Disposable> _startPlayingDisposable;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VK_TrackListProvider> trackListProvider;
@property(readonly, assign, nonatomic) VK_TrackModel* currentTrack;
@property(readonly, assign, nonatomic) BOOL isNextTrackAvailable;
@property(readonly, assign, nonatomic) BOOL isPreviousTrackAvailable;
@property(readonly, assign, nonatomic) double progress;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) BOOL isPlaying;
@property(readonly, assign, nonatomic) BOOL isRealyPlaying;
@property(readonly, assign, nonatomic) unsigned state;
@property(retain, nonatomic) id<VK_Disposable> startPlayingDisposable;
@property(retain, nonatomic) VK_Observable* tracksInfoUpdatingObservable;
@property(assign, nonatomic) __weak CachedHTTPDataSourceSandboxOperation* prefetchOperation;
@property(retain, nonatomic) NSOperationQueue* loadingOperationQueue;
@property(retain, nonatomic) NSOperationQueue* prefetchOperationQueue;
@property(retain, nonatomic) id<VK_Disposable> cachingTrackInfoDisposable;
@property(retain, nonatomic) id<VK_Disposable> playingTrackInfoDisposable;
@property(readonly, assign) NSArray* tracks;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)commandCenterHandler;
-(void)commandCenterUpdate;
-(void)commandCenterRemoveHandlers;
-(void)commandCenterAddHandlers;
-(void)trackListDidChanged;
-(void)progressChanged:(double)changed forPlayingTrack:(id)playingTrack;
-(void)setState:(unsigned)state;
-(void)setCurrentTrack:(id)track;
-(void)player:(id)player didFinishPlaying:(id)playing successfully:(BOOL)successfully;
-(void)player:(id)player error:(id)error;
-(void)player:(id)player track:(id)track playingChanged:(BOOL)changed;
-(void)player:(id)player didStartPlaying:(id)playing;
-(void)setEqualizerFrequencies:(id)frequencies;
-(void)networkReachability:(id)reachability networkStatusChanged:(int)changed;
-(void)stopPlayingCurrentTrack;
-(void)stopPlaying;
-(void)stop;
-(void)reset;
-(id)moveToOtherTrackWithMovingBlock:(id)movingBlock;
-(BOOL)loopTracklist;
-(void)movePlayingTrackWithDirection:(unsigned)direction andForcedAction:(BOOL)action;
-(void)movePlayingTrackWithDirection:(unsigned)direction;
-(void)goForward;
-(void)goForwardWithForcedAction:(BOOL)forcedAction;
-(void)goBackward;
-(void)goBackwardWithForcedAction:(BOOL)forcedAction;
-(void)updateBroadcastState;
-(BOOL)broadcastEnabled;
-(void)updateShuffleState;
-(id)shuffleableTrackListProvider;
-(BOOL)shuffleEnabled;
-(void)updateLoopMode;
-(unsigned)loopMode;
-(void)seekToTime:(double)time;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(void)resetPrefetchOperation;
-(void)resetPreparingToPlaying;
-(void)unsafePlayTrackWithBlock:(id)block;
-(void)cacheNextTrack;
-(id)finishPrefetchOperationIfNeeded;
-(id)updateTrackInfoForTracks:(id)tracks;
-(void)prepareTrackInfoBeforePlaying:(id)playing withMovingDirection:(unsigned)movingDirection;
-(void)internalPlayTrack:(id)track withMovingDirection:(unsigned)movingDirection;
-(void)internalPlayTrackFromIndex:(unsigned)index withMovingDirection:(unsigned)movingDirection;
-(void)playTrackFromIndex:(unsigned)index;
-(void)setPlayingTrackStatusIfNeeded:(id)needed;
-(void)shuffleAndPlayWithTracklistProvider:(id)tracklistProvider;
-(void)playTracksFromIndex:(unsigned)index;
-(void)playTracksFromStart;
-(void)tick;
-(void)setupInitialEqualizer;
-(void)setupTimer;
-(void)unsubscribe:(id)unsubscribe;
-(void)subscribe:(id)subscribe;
-(BOOL)isTrackInPlayList:(id)playList;
-(void)setPaused:(BOOL)paused;
-(id)indexForTrack:(id)track;
-(void)playTrack:(id)track withMovingDirection:(unsigned)movingDirection;
-(void)playTrack:(id)track;
-(void)dealloc;
-(id)init;
-(void)openAndPlayWithShuffledTracklistProvider:(id)shuffledTracklistProvider;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteImagesCellProxy : VK_TableCellProxy {
}
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteImagesCellViewModel : VK_TableViewCellViewModel {
	NSArray* _photos;
}
@property(retain, nonatomic) NSArray* photos;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteImagesCell : VK_TableViewCellBase {
	VK_ImagesTiles* _imageTiles;
	UIView* _imagesView;
}
@property(assign, nonatomic) __weak UIView* imagesView;
@property(retain, nonatomic) VK_ImagesTiles* imageTiles;
@property(readonly, assign, nonatomic) VK_FeedViewNoteImagesCellProxy* proxy;
@property(readonly, assign, nonatomic) VK_FeedNoteBlockModel* data;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(id)viewModel;
-(void)createViews;
-(void)internalReset;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleSpaceCellProxy : VK_TableCellProxy {
	UIColor* _backgroundColor;
	float _height;
}
@property(assign, nonatomic) float height;
@property(retain, nonatomic) UIColor* backgroundColor;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleSpaceCellViewModel : VK_TableViewCellViewModel {
}
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SimpleSpaceCell : VK_TableViewCellBase {
}
@property(readonly, assign, nonatomic) VK_SimpleSpaceCellProxy* proxy;
-(void)internalUpdateProxy;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_URLCache : XXUnknownSuperclass {
}
-(void)storeCachedResponse:(id)response forRequest:(id)request;
-(id)cachedResponseForRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface VK_ApiResponse : XXUnknownSuperclass {
	int _statusCode;
	NSString* _errorMessage;
	NSString* _redirectUrl;
	NSString* _captchaUrl;
	NSString* _captchaSig;
	double _serverTime;
}
@property(retain, nonatomic) NSString* captchaSig;
@property(retain, nonatomic) NSString* captchaUrl;
@property(retain, nonatomic) NSString* redirectUrl;
@property(assign, nonatomic) double serverTime;
@property(retain, nonatomic) NSString* errorMessage;
@property(assign, nonatomic) int statusCode;
+(void)internalInitMapping:(id)mapping;
+(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsButton : VK_Button {
	VK_NotificationObserver* _notificationObserver;
	UIImageView* _alertImageView;
}
@property(assign, nonatomic) __weak UIImageView* alertImageView;
@property(retain, nonatomic) VK_NotificationObserver* notificationObserver;
-(void).cxx_destruct;
-(void)subscriptionStatusChanged;
-(void)configureSettingsButton;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_TriangleView : XXUnknownSuperclass {
	unsigned _type;
	UIImageView* _imageView;
}
@property(assign, nonatomic) unsigned type;
@property(assign, nonatomic) __weak UIImageView* imageView;
-(void).cxx_destruct;
-(void)configureTriangleView;
-(void)layoutSubviews;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_TableViewCellViewModel : XXUnknownSuperclass {
	float _estimatedHeight;
	UIColor* _backgroundColor;
}
@property(retain, nonatomic) UIColor* backgroundColor;
@property(assign, nonatomic) float estimatedHeight;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
-(float)estimatedHeightWithCellItem:(id)cellItem;
-(void)updateEstimatedHeightWithCellItem:(id)cellItem;
-(id)initWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchTableDataAllocator : XXUnknownSuperclass <VK_TableViewDataAllocator> {
	VK_SearchTitleCellProxy* _titleCellProxy;
	VK_SimpleTrackCellProxy* _trackCellProxy;
	VK_SimpleUserCellProxy* _userCellProxy;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VK_SimpleUserCellProxy* userCellProxy;
@property(readonly, assign, nonatomic) VK_SimpleTrackCellProxy* trackCellProxy;
@property(readonly, assign, nonatomic) VK_SearchTitleCellProxy* titleCellProxy;
-(void).cxx_destruct;
-(id)spaceCellItem;
-(id)blockWithTitle:(id)title baseProxy:(id)proxy andModel:(id)model;
-(id)usersBlockWithTitle:(id)title andModel:(id)model;
-(id)tracksBlockWithTitle:(id)title andModel:(id)model;
-(id)allocateCellsWithData:(id)data;
-(void)setupCommonSearchTableDataAllocator;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_MyProfileViewController : VK_CommonProfileViewController {
	BOOL _downloadedTracksIsLocked;
	VK_NotificationObserver* _notificationObserver;
}
@property(assign, nonatomic) BOOL downloadedTracksIsLocked;
@property(retain, nonatomic) VK_NotificationObserver* notificationObserver;
-(void).cxx_destruct;
-(void)tableController:(id)controller didReorderFromCellItem:(id)cellItem atIndexPath:(id)indexPath toCellItem:(id)cellItem4 atIndexPath:(id)indexPath5;
-(void)askPermissionToRemoveFavoriteTrack:(id)removeFavoriteTrack withConfirmationBlock:(id)confirmationBlock;
-(void)removeFromFavoritesTrackWithCell:(id)cell;
-(void)stopDownloadTrackWithCell:(id)cell;
-(void)tableController:(id)controller willStartReordering:(id)reordering;
-(id)favoritesTableControllerConfiguration;
-(void)settingsButtonPressed;
-(void)internalShowEmptyContentMessage;
-(void)updateFavoritesStateIfNeeded;
-(BOOL)isNeedShowSyncView;
-(void)validateFavoriteTracksStatusIfNeeded;
-(void)profileHeaderView:(id)view didSegmentSelected:(unsigned)selected;
-(void)profileHeaderView:(id)view updateNavBarContainer:(id)container;
-(id)titleForProfileHeaderView:(id)profileHeaderView;
-(id)segmentTitlesForProfileHeaderView:(id)profileHeaderView;
-(id)internalSupportedTabs;
-(BOOL)isMyProfile;
-(BOOL)pullToRefreshEnabled;
-(void)internalPrepareTableController:(id)controller;
-(id)internalCreateTableControllerConfiguration;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)profileBaseInfoModel;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffsTableViewDataAllocator : XXUnknownSuperclass <VK_TableViewDataAllocator> {
	id _onTariffUnsubscribedBlock;
	id _onTariffSelectedBlock;
	id _onManageTariffsBlock;
	VK_SimpleSpaceCellProxy* _spaceCellProxy;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableInsets;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id onManageTariffsBlock;
@property(copy, nonatomic) id onTariffSelectedBlock;
@property(copy, nonatomic) id onTariffUnsubscribedBlock;
@property(retain, nonatomic) VK_SimpleSpaceCellProxy* spaceCellProxy;
-(void).cxx_destruct;
-(id)createAvailableTariffsSection;
-(id)cancelDefaultTariffProcessCellItem;
-(id)createTitleCellItemWithText:(id)text;
-(id)createManageTariffsCellItem;
-(id)createCurrentTariffUnsubscribeCellItemWith:(id)with;
-(id)createCurrentTariffSection;
-(void)setup;
-(id)allocateCellsWithData:(id)data;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AuthTokenResponse : VK_ApiResponse {
	VK_AuthorizationModel* _data;
}
@property(retain, nonatomic) VK_AuthorizationModel* data;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksResponse : VK_ApiResponse {
	NSArray* _tracks;
}
@property(retain, nonatomic) NSArray* tracks;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileResponse : VK_ApiResponse {
	VK_ProfileInfoModel* _data;
}
@property(retain, nonatomic) VK_ProfileInfoModel* data;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedResponse : VK_ApiResponse {
	NSArray* _blocks;
	NSString* _ref;
	unsigned _newItems;
}
@property(assign, nonatomic) unsigned newItems;
@property(retain, nonatomic) NSString* ref;
@property(retain, nonatomic) NSArray* blocks;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchResponse : VK_ApiResponse {
	VK_CommonSearchModel* _searchResult;
}
@property(retain, nonatomic) VK_CommonSearchModel* searchResult;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_UsersSearchResponse : VK_ApiResponse {
	VK_UsersSearchInfoModel* _result;
}
@property(retain, nonatomic) VK_UsersSearchInfoModel* result;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_GroupsSearchResponse : VK_ApiResponse {
	VK_GroupsSearchInfoModel* _result;
}
@property(retain, nonatomic) VK_GroupsSearchInfoModel* result;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioSearchResponse : VK_ApiResponse {
	VK_AudioSearchInfoModel* _result;
}
@property(retain, nonatomic) VK_AudioSearchInfoModel* result;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioSearchResponse : VK_ApiResponse {
	NSArray* _tracks;
}
@property(retain, nonatomic) NSArray* tracks;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchPopularResponse : VK_ApiResponse {
	NSArray* _popularRequests;
}
@property(retain, nonatomic) NSArray* popularRequests;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ArtistResponse : VK_ApiResponse {
	VK_ArtistInfoModel* _data;
}
@property(retain, nonatomic) VK_ArtistInfoModel* data;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumResponse : VK_ApiResponse {
	VK_AlbumInfoModel* _data;
}
@property(retain, nonatomic) VK_AlbumInfoModel* data;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfilesResponse : VK_ApiResponse {
	NSArray* _profiles;
	NSString* _ref;
}
@property(retain, nonatomic) NSString* ref;
@property(retain, nonatomic) NSArray* profiles;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfilesSequenceResponse : VK_ProfilesResponse {
}
+(void)internalInitMapping:(id)mapping;
@end

__attribute__((visibility("hidden")))
@interface VK_VKFriendsResponse : VK_ApiResponse {
	NSArray* _friends;
}
@property(retain, nonatomic) NSArray* friends;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoriteActionContent : XXUnknownSuperclass <EKMappingProtocol> {
	NSArray* _tracks;
	unsigned _sequenceNumber;
	unsigned _subscriptionsSequenceNumber;
}
@property(assign, nonatomic) unsigned subscriptionsSequenceNumber;
@property(assign, nonatomic) unsigned sequenceNumber;
@property(retain, nonatomic) NSArray* tracks;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoriteActionResponse : VK_ApiResponse {
	VK_FavoriteActionContent* _data;
}
@property(retain, nonatomic) VK_FavoriteActionContent* data;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SendInvitationResponse : VK_ApiResponse {
	NSString* _inviteId;
	NSString* _redirectUri;
}
@property(retain, nonatomic) NSString* redirectUri;
@property(retain, nonatomic) NSString* inviteId;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffsResponse : VK_ApiResponse {
	NSArray* _data;
}
@property(retain, nonatomic) NSArray* data;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_SecureKeyResponse : VK_ApiResponse {
	NSString* _secureKey;
}
@property(retain, nonatomic) NSString* secureKey;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_DialogsTextResponse : VK_ApiResponse {
	NSDictionary* _dialogTextItems;
}
@property(retain, nonatomic) NSDictionary* dialogTextItems;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_AnaliticRegisterDeviceResponse : VK_ApiResponse {
	NSString* _UID;
}
@property(retain, nonatomic) NSString* UID;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksDataResponse : VK_ApiResponse {
	NSArray* _tracksData;
}
@property(retain, nonatomic) NSArray* tracksData;
+(void)internalInitMapping:(id)mapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_RequestsCacheManager : XXUnknownSuperclass {
	VK_URLCache* _urlCache;
}
@property(retain, nonatomic) VK_URLCache* urlCache;
+(id)shared;
-(void).cxx_destruct;
-(void)clearCache;
-(id)cachedResponseForRequestOperation:(id)requestOperation;
-(void)storeCacheForRequestOperation:(id)requestOperation;
-(void)disableNativeCachingForRequestOperation:(id)requestOperation;
-(id)modifiedRequest:(id)request;
-(id)queryFromQueryItems:(id)queryItems;
-(id)queryItemsFromQuery:(id)query;
-(id)modifiedCachedResponse:(id)response;
-(void)setup;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_NibViewBase : XXUnknownSuperclass {
	UIView* _contentView;
}
@property(readonly, assign, nonatomic) __weak UIView* contentView;
-(void).cxx_destruct;
-(void)loadViewFromNib;
-(void)internalConfigureView;
-(id)internalLoadContentView;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesManager : VK_BaseManager <VK_NetworkReachabilitySubscriber, VK_TracksManagerDelegate> {
	BOOL _forcedShowSyncCompletionAlert;
	BOOL _needSync;
	unsigned _syncingState;
	NSError* _lastSyncingError;
	NSString* _userId;
	NSDictionary* _favoritesTracksIds;
	NSMutableArray* _favoritesTracks;
	NSNumber* _sequenceNumber;
	unsigned _subscriptionsSequenceNumber;
	NSOperationQueue* _operationQueue;
	NSMutableArray* _cachedOperationItems;
	VK_TracksManager* _tracksManager;
	NSMutableDictionary* _tracksPreparedToFavorite;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSError* lastSyncingError;
@property(readonly, assign, nonatomic) unsigned syncingState;
@property(readonly, assign, nonatomic) BOOL needSync;
@property(assign, nonatomic) BOOL forcedShowSyncCompletionAlert;
@property(retain, nonatomic) NSMutableDictionary* tracksPreparedToFavorite;
@property(retain, nonatomic) VK_TracksManager* tracksManager;
@property(retain, nonatomic) NSMutableArray* cachedOperationItems;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(assign, nonatomic) unsigned subscriptionsSequenceNumber;
@property(retain, nonatomic) NSNumber* sequenceNumber;
@property(retain, nonatomic) NSMutableArray* favoritesTracks;
@property(retain, nonatomic) NSDictionary* favoritesTracksIds;
@property(retain, nonatomic) NSString* userId;
@property(readonly, assign, nonatomic) BOOL hasAnyReadyToDownloadingTrack;
@property(readonly, assign, nonatomic) BOOL hasDownloadedTracks;
+(void)initialize;
+(id)currentManager;
-(void).cxx_destruct;
-(void)favoritesTracksStateSavingFailed;
-(void)favoritesTracksDownloadStatusChanged:(id)changed;
-(void)favoritesTracksDownloadProgressChanged:(id)changed;
-(void)favoritesTracksChanged;
-(id)getFavoritesTracks;
-(void)internalFavoritesTracksChanged;
-(void)syncCurrentFavoritesTracks;
-(void)syncFavoritesTracks:(id)tracks;
-(BOOL)validateSyncStatus;
-(BOOL)validateOpeation:(unsigned)opeation withTrack:(id)track;
-(void)checkSubscriptionsStateByResponse:(id)response andError:(id)error;
-(void)forcedSync;
-(void)actionCompletedWithData:(id)data error:(id)error seqNumberInc:(unsigned)inc;
-(id)createFavoritesTracksOperationForTracksCount:(unsigned)tracksCount;
-(BOOL)isPreparedToFavorite:(id)favorite;
-(void)prepareTrack:(id)track toFavorite:(BOOL)favorite;
-(void)syncCompletedWithResponse:(id)response;
-(void)onUserViewsFavoritesTracks;
-(void)didCachedOperationsItemsUpdated;
-(void)setNeedShowSyncCompletionAlert:(BOOL)alert;
-(void)setNeedSync:(BOOL)sync;
-(void)setSyncingState:(unsigned)state;
-(void)setLastSyncingError:(id)error;
-(void)onFavoriteStateUpdate;
-(void)internalWillUserDataUnload;
-(void)internalDidUserDataLoaded;
-(void)updateDefaultSyncingState;
-(void)internalNeedLoadUserData;
-(id)trackModelForId:(id)anId;
-(void)clearAllTracks;
-(void)posNotification:(id)notification originalTrackId:(id)anId favoriteId:(id)anId3 externalParams:(id)params;
-(void)notificateTrackNeedUpdate:(id)update favoriteId:(id)anId;
-(void)loadLyricsForTrack:(id)track withCompletion:(id)completion;
-(id)trackStateForTrack:(id)track;
-(id)favoriteTrackForTrack:(id)track;
-(BOOL)isFavoriteTrack:(id)track;
-(void)didCachedOperationCompleted:(id)completed withSuccessful:(BOOL)successful;
-(BOOL)isWrongOperationByErrorCode:(int)code;
-(void)internalAddClearAllTracksOperation:(id)operation;
-(void)beginEditingOperation:(id)operation withOperationItem:(id)operationItem;
-(void)internalAddTrackMovingOperation:(id)operation;
-(void)internalAddTrackRemovingOperation:(id)operation;
-(void)restoreState;
-(void)networkReachability:(id)reachability networkReachableChanged:(BOOL)changed;
-(id)favoriteTrackFileDataSource:(id)source;
-(void)addNewCachedTrackOperation:(id)operation;
-(void)moveTrack:(id)track onPlaceOfTrack:(id)track2;
-(void)removeAllTracks;
-(void)removeTrack:(id)track;
-(void)internalAddTrack:(id)track;
-(void)addTrack:(id)track;
-(void)startValidateSyncStatusOperation;
-(void)validateStatus;
-(void)updateSyncingStateWithError:(id)error;
-(void)syncFavoritesWithCompletion:(id)completion;
-(void)downloadAllTracks;
-(void)stopDownloadFavoriteTrack:(id)track;
-(void)downloadFavoriteTrack:(id)track;
-(id)createDataProvider;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VK_NibView : VK_NibViewBase {
}
-(id)internalLoadContentView;
-(id)internalNibName;
@end

__attribute__((visibility("hidden")))
@interface VK_TableViewCellItem : XXUnknownSuperclass {
	VK_TableCellProxy* _proxy;
	VK_TableViewCellViewModel* _viewModel;
	id _cellData;
	id _receiptData;
	unsigned _customSeparatorStyle;
	UIColor* _customSeparatorColor;
}
@property(retain, nonatomic) UIColor* customSeparatorColor;
@property(assign, nonatomic) unsigned customSeparatorStyle;
@property(retain, nonatomic) id receiptData;
@property(retain, nonatomic) id cellData;
@property(retain, nonatomic) VK_TableViewCellViewModel* viewModel;
@property(retain, nonatomic) VK_TableCellProxy* proxy;
+(id)cellItemWithProxy:(id)proxy cellData:(id)data andInitializationBlock:(id)block;
+(id)cellItemWithProxy:(id)proxy cellData:(id)data andReceiptData:(id)data3;
+(id)cellItemWithProxy:(id)proxy andCellData:(id)data;
-(void).cxx_destruct;
-(id)initWithProxy:(id)proxy andCellData:(id)data;
-(id)initWithProxy:(id)proxy cellData:(id)data andReceiptData:(id)data3;
-(id)initWithProxy:(id)proxy cellData:(id)data receiptData:(id)data3 andInitializationBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseButton : XXUnknownSuperclass {
}
-(void)internalButtonSetup;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_RequestManager : XXUnknownSuperclass <VK_RequestDelegate> {
	id<VK_RequestErrorHandler> _errorHandler;
	NSMutableSet* _currentRequests;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VK_RequestErrorHandler> errorHandler;
@property(retain, nonatomic) NSMutableSet* currentRequests;
+(id)shared;
-(void).cxx_destruct;
-(BOOL)handleReuqestError:(id)error;
-(void)requestCompleted:(id)completed;
-(void)requestStarted:(id)started;
-(void)startReuest:(id)reuest;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_BookmarksViewController : VK_BaseTableViewController {
	BOOL _bookmarksLoadingInProcess;
}
@property(assign, nonatomic) BOOL bookmarksLoadingInProcess;
-(void)reloadBookmarks;
-(void)reloadData;
@end

__attribute__((visibility("hidden")))
@interface VK_UsersTableViewDataAllocator : VK_SimpleTableViewDataAllocator {
	BOOL _isRightButtonHidden;
	VK_SearchCellProxy* _searchCellProxy;
	NSString* _explanationText;
	id _onWriteOnPageBlock;
}
@property(copy, nonatomic) id onWriteOnPageBlock;
@property(assign, nonatomic) BOOL isRightButtonHidden;
@property(copy, nonatomic) NSString* explanationText;
@property(retain, nonatomic) VK_SearchCellProxy* searchCellProxy;
-(void).cxx_destruct;
-(id)explanationCellItem;
-(id)searchCellItem;
-(id)internalTopCellItems;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_Log : XXUnknownSuperclass {
	DDFileLogger* _fileLogger;
}
@property(retain, nonatomic) DDFileLogger* fileLogger;
-(void).cxx_destruct;
-(id)startMessage;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchView : VK_NibView <UITextFieldDelegate> {
	id _beginEditingBlock;
	id _textChangedBlock;
	id _searchPressedBlock;
	VK_TextField* _textField;
	VK_BaseLabel* _placeholderLabel;
	UIImageView* _iconImageView;
	UIView* _clearButtonContainerView;
	NSLayoutConstraint* _iconImageViewCenterXConstraint;
	NSLayoutConstraint* _iconImageViewLeadingConstraint;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id searchPressedBlock;
@property(copy, nonatomic) id textChangedBlock;
@property(copy, nonatomic) id beginEditingBlock;
@property(readonly, assign, nonatomic) BOOL isEmpty;
@property(assign, nonatomic) __weak NSLayoutConstraint* iconImageViewLeadingConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* iconImageViewCenterXConstraint;
@property(assign, nonatomic) __weak UIView* clearButtonContainerView;
@property(assign, nonatomic) __weak UIImageView* iconImageView;
@property(assign, nonatomic) __weak VK_BaseLabel* placeholderLabel;
@property(assign, nonatomic) __weak VK_TextField* textField;
-(void).cxx_destruct;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)clearButtonPressed;
-(void)textChanged;
-(void)configureClearButton:(BOOL)button;
-(void)internalConfigureView;
-(id)internalNibName;
-(void)configurePlaceholderText:(id)text;
-(void)configureFocus:(BOOL)focus;
-(void)configureEditing:(BOOL)editing;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VK_MyAudioProvider : VK_DataProvider <VK_DataProviderDelegate, VK_DataWithTracksShuffleableProvider> {
	VK_UserAudioProvider* _innerDataProvider;
	NSArray* _filteredTracks;
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* filteredTracks;
@property(retain, nonatomic) VK_UserAudioProvider* innerDataProvider;
-(void).cxx_destruct;
-(void)updateData;
-(void)cancelFetching;
-(void)resetData;
-(void)fetchData:(id)data;
-(id)copyWithZone:(NSZone*)zone;
-(void)dataProviderErrorReceived:(id)received error:(id)error;
-(void)dataProviderDidFetchStatusChanged:(id)dataProvider;
-(void)dataProviderWillFetchingComplete:(id)dataProvider withSuccessful:(BOOL)successful;
-(void)dataProviderDidFetchingEnded:(id)dataProvider;
-(void)dataProviderDidFetchingStarted:(id)dataProvider;
-(void)dataProviderDidDataChanged:(id)dataProvider;
-(id)createTrackListProviderFromTrack:(id)track;
-(void)unshuffleFromTrack:(id)track;
-(void)shuffleFromTrack:(id)track;
-(void)setupMyAudioProvider;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AuthorizedApiRequest : VK_ApiRequest {
	NSString* _passKey;
	NSString* _captchaSig;
	NSString* _captchaKey;
}
@property(retain, nonatomic) NSString* captchaKey;
@property(retain, nonatomic) NSString* captchaSig;
@property(retain, nonatomic) NSString* passKey;
-(void).cxx_destruct;
-(void)internalCaptureEnteredWithSig:(id)sig andKey:(id)key;
-(void)internalValidationSucceedWithAccessToken:(id)accessToken andPasskey:(id)passkey;
-(BOOL)internalCaptchaSupported;
-(BOOL)internalUpdatePasskeyDuringValidation;
-(void)internalInitRequestParams:(id)params;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_AuthStartRequest : VK_ApiRequest {
	BOOL _redirect;
	NSString* _partnerAuthKey;
}
@property(assign, nonatomic) BOOL redirect;
@property(retain, nonatomic) NSString* partnerAuthKey;
-(void).cxx_destruct;
-(BOOL)internalUpdatePasskeyDuringValidation;
-(BOOL)internalCachingSupported;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_AuthTokenRequest : VK_ApiRequest {
	NSString* _partnerAuthKey;
	NSString* _userId;
	NSString* _accessToken;
}
@property(readonly, assign, nonatomic) VK_AuthTokenResponse* response;
@property(retain, nonatomic) NSString* accessToken;
@property(retain, nonatomic) NSString* userId;
@property(retain, nonatomic) NSString* partnerAuthKey;
-(void).cxx_destruct;
-(void)internalValidationSucceedWithAccessToken:(id)accessToken andPasskey:(id)passkey;
-(BOOL)internalUpdatePasskeyDuringValidation;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_PagedRequestBase : VK_AuthorizedApiRequest {
	unsigned _count;
	unsigned _offset;
	NSString* _ref;
}
@property(retain, nonatomic) NSString* ref;
@property(assign, nonatomic) unsigned offset;
@property(assign, nonatomic) unsigned count;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileRequest : VK_AuthorizedApiRequest {
	NSString* _userId;
}
@property(readonly, assign, nonatomic) VK_ProfileResponse* response;
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedRequestBase : VK_PagedRequestBase {
}
@property(readonly, assign, nonatomic) VK_FeedResponse* response;
-(id)internalResponseModelMapping;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedRequest : VK_FeedRequestBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_UserNotesRequest : VK_FeedRequestBase {
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoriteRequestBase : VK_AuthorizedApiRequest {
}
@property(readonly, assign, nonatomic) VK_FavoriteActionResponse* response;
-(id)internalResponseModelMapping;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_UserFavoritesRequest : VK_PagedRequestBase {
	BOOL _shuffle;
	NSString* _userId;
}
@property(readonly, assign, nonatomic) VK_FavoriteActionResponse* response;
@property(assign, nonatomic) BOOL shuffle;
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoriteRequestWithTracksBase : VK_FavoriteRequestBase {
	NSArray* _tracksIds;
}
@property(retain, nonatomic) NSArray* tracksIds;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_AddFavoriteTrackRequest : VK_FavoriteRequestWithTracksBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_RemoveFavoriteTrackRequest : VK_FavoriteRequestWithTracksBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesClearAllTracksRequest : VK_FavoriteRequestBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_MoveFavoriteTrackRequest : VK_FavoriteRequestBase {
	NSString* _trackId;
	NSString* _afterId;
}
@property(retain, nonatomic) NSString* afterId;
@property(retain, nonatomic) NSString* trackId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioRequest : VK_PagedRequestBase {
	BOOL _shuffle;
	NSString* _userId;
}
@property(readonly, assign, nonatomic) VK_TracksResponse* response;
@property(assign, nonatomic) BOOL shuffle;
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioActionRequestBase : VK_AuthorizedApiRequest {
	NSArray* _tracksIds;
}
@property(retain, nonatomic) NSArray* tracksIds;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioAddRequest : VK_UserAudioActionRequestBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioRemoveRequest : VK_UserAudioActionRequestBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_UserProfilesSequenceRequest : VK_AuthorizedApiRequest {
	NSString* _userId;
	NSNumber* _sequenceNumber;
}
@property(retain, nonatomic) NSNumber* sequenceNumber;
@property(retain, nonatomic) NSString* userId;
@property(readonly, assign, nonatomic) VK_ProfilesSequenceResponse* response;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_UserFollowersRequest : VK_UserProfilesSequenceRequest {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_UserSubscriptionsRequest : VK_UserProfilesSequenceRequest {
	unsigned _type;
}
@property(assign, nonatomic) unsigned type;
-(BOOL)internalCachingSupported;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_UserExportSubscriptionsRequest : VK_PagedRequestBase {
	unsigned _type;
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
@property(assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic) VK_VKFriendsResponse* response;
-(void).cxx_destruct;
-(BOOL)internalCachingSupported;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchRequestBase : VK_PagedRequestBase {
	NSString* _query;
}
@property(retain, nonatomic) NSString* query;
-(void).cxx_destruct;
-(BOOL)internalCachingSupported;
-(void)internalInitRequestParams:(id)params;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_CommonSearchRequest : VK_SearchRequestBase {
}
@property(readonly, assign, nonatomic) VK_CommonSearchResponse* response;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioSearchRequest : VK_SearchRequestBase {
	BOOL _byPerformer;
}
@property(readonly, assign, nonatomic) VK_AudioSearchResponse* response;
@property(assign, nonatomic) BOOL byPerformer;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
-(void)internalInitRequestParams:(id)params;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioSearchRequest : VK_SearchRequestBase {
}
@property(readonly, assign, nonatomic) VK_UserAudioSearchResponse* response;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_GroupsSearchRequest : VK_SearchRequestBase {
}
@property(readonly, assign, nonatomic) VK_GroupsSearchResponse* response;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchPopularRequest : VK_AuthorizedApiRequest {
}
@property(readonly, assign, nonatomic) VK_SearchPopularResponse* response;
-(BOOL)internalCachingSupported;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_UsersSearchRequest : VK_SearchRequestBase {
}
@property(readonly, assign, nonatomic) VK_UsersSearchResponse* response;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_ArtistRequest : VK_PagedRequestBase {
	NSString* _artistId;
}
@property(readonly, assign, nonatomic) VK_ArtistResponse* response;
@property(retain, nonatomic) NSString* artistId;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumRequest : VK_PagedRequestBase {
	BOOL _shuffle;
	NSString* _albumId;
}
@property(readonly, assign, nonatomic) VK_AlbumResponse* response;
@property(assign, nonatomic) BOOL shuffle;
@property(retain, nonatomic) NSString* albumId;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_AppShareLinkRequest : VK_AuthorizedApiRequest {
	NSString* _targetId;
	NSString* _comment;
}
@property(retain, nonatomic) NSString* comment;
@property(retain, nonatomic) NSString* targetId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_SubscriptionAddRequest : VK_AuthorizedApiRequest {
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_SubscriptionRemoveRequest : VK_AuthorizedApiRequest {
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareToVKRequest : VK_AuthorizedApiRequest {
	NSString* _trackId;
	NSString* _message;
	NSString* _targetId;
}
@property(retain, nonatomic) NSString* targetId;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* trackId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(id)internalRequestMethod;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_SetStatusRequest : VK_AuthorizedApiRequest {
	NSString* _trackId;
}
@property(retain, nonatomic) NSString* trackId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_SendInvitationRequest : VK_AuthorizedApiRequest {
	NSString* _userId;
}
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(id)response;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_SendInvitationStatusRequest : VK_AuthorizedApiRequest {
	NSString* _inviteId;
	NSString* _blankUrl;
}
@property(retain, nonatomic) NSString* blankUrl;
@property(retain, nonatomic) NSString* inviteId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_RateAppEventRequest : VK_AuthorizedApiRequest {
	NSString* _name;
}
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(id)internalRequestMethod;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_TariffsRequest : VK_AuthorizedApiRequest {
}
@property(readonly, assign, nonatomic) VK_TariffsResponse* response;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_AddTariffRequest : VK_AuthorizedApiRequest {
	NSString* _tariffType;
	NSString* _storeId;
	NSString* _receipt;
}
@property(retain, nonatomic) NSString* receipt;
@property(retain, nonatomic) NSString* storeId;
@property(retain, nonatomic) NSString* tariffType;
-(void).cxx_destruct;
-(id)internalRequestMethod;
-(id)internalBuildRequestCommand;
-(void)internalInitRequestParams:(id)params;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_RemoveTariffRequest : VK_AuthorizedApiRequest {
	NSString* _tariffType;
}
@property(retain, nonatomic) NSString* tariffType;
-(void).cxx_destruct;
-(id)internalBuildRequestCommand;
-(void)internalInitRequestParams:(id)params;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_SetOptionsRequest : VK_AuthorizedApiRequest {
	NSNumber* _isMusicVisible;
}
@property(retain, nonatomic) NSNumber* isMusicVisible;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_SecureKeyRequest : VK_AuthorizedApiRequest {
}
@property(readonly, assign, nonatomic) VK_SecureKeyResponse* response;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_DialogsTextRequst : VK_ApiRequest {
}
@property(readonly, assign, nonatomic) VK_DialogsTextResponse* response;
-(id)internalResponseModelMapping;
-(id)internalBuildRequestCommand;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_StatisticRegisterDeviceRequest : VK_ApiRequest {
}
@property(readonly, assign, nonatomic) VK_AnaliticRegisterDeviceResponse* response;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_StatisticSendDataRequest : VK_ApiRequest {
	NSString* _passKey;
	NSData* _statisticData;
}
@property(retain, nonatomic) NSData* statisticData;
@property(retain, nonatomic) NSString* passKey;
-(void).cxx_destruct;
-(BOOL)silentRequest;
-(void)internalPrepareRequest:(id)request;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(id)internalRequestMethod;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_SimilarTracksRequest : VK_PagedRequestBase {
	NSString* _trackId;
}
@property(readonly, assign, nonatomic) VK_TracksResponse* response;
@property(retain, nonatomic) NSString* trackId;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedHideEntryRequest : VK_AuthorizedApiRequest {
	NSString* _entryId;
}
@property(retain, nonatomic) NSString* entryId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_ShareEntryRequest : VK_AuthorizedApiRequest {
	NSString* _entryId;
	NSString* _comment;
	NSString* _targetId;
}
@property(retain, nonatomic) NSString* targetId;
@property(retain, nonatomic) NSString* comment;
@property(retain, nonatomic) NSString* entryId;
-(void).cxx_destruct;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
-(id)internalRequestMethod;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface VK_BookmarksRequest : VK_FeedRequestBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_BookmarkActionRequestBase : VK_AuthorizedApiRequest {
	NSString* _postId;
}
@property(retain, nonatomic) NSString* postId;
-(void).cxx_destruct;
-(id)internalRequestMethod;
-(void)internalInitRequestParams:(id)params;
-(void)internalValidateParams;
@end

__attribute__((visibility("hidden")))
@interface VK_AddBookmarkRequest : VK_BookmarkActionRequestBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_RemoveBookmarkRequest : VK_BookmarkActionRequestBase {
}
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksDataRequest : VK_AuthorizedApiRequest {
	NSArray* _tracksIds;
}
@property(readonly, assign, nonatomic) VK_TracksDataResponse* response;
@property(retain, nonatomic) NSArray* tracksIds;
-(void).cxx_destruct;
-(id)internalResponseModelMapping;
-(BOOL)internalCachingSupported;
-(void)internalInitRequestParams:(id)params;
-(id)internalBuildRequestCommand;
@end

__attribute__((visibility("hidden")))
@interface VK_CaptchaManager : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	NSMutableOrderedSet* _captchaErrors;
	VKCaptchaViewController* _captchaViewController;
	VK_CaptchaHandlerError* _captchaHandlerError;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VK_CaptchaHandlerError* captchaHandlerError;
@property(assign, nonatomic) __weak VKCaptchaViewController* captchaViewController;
@property(retain, nonatomic) NSMutableOrderedSet* captchaErrors;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)showNextCaptchaIfNeeded;
-(void)dismissCaptchaController;
-(void)showCaptchaWithError:(id)error;
-(void)configure;
-(void)showCaptchaWithUrl:(id)url sig:(id)sig andCompletionBlock:(id)block;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_MiniPlayerStaticController : VK_MiniPlayerController <VK_MiniPlayerViewDelegate> {
	VK_MiniPlayer* _miniPlayer;
	UIView* _miniPlayerToolbarContainer;
	NSLayoutConstraint* _miniPlayerContainerBottomConstraint;
	VK_AudioPlayerViewController* _audioPlayerViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VK_AudioPlayerViewController* audioPlayerViewController;
@property(assign, nonatomic) __weak NSLayoutConstraint* miniPlayerContainerBottomConstraint;
@property(assign, nonatomic) __weak UIView* miniPlayerToolbarContainer;
@property(assign, nonatomic) __weak VK_MiniPlayer* miniPlayer;
-(void).cxx_destruct;
-(void)miniPlayerViewOpenBigPlayerTouched:(id)touched;
-(void)internalMiniPlayerVisibilityChanged:(BOOL)changed;
-(void)internalConfigureWithTabBarController:(id)tabBarController;
-(id)bigPlayerViewController;
-(void)openAudioPlayerViewControllerWithCompletion:(id)completion;
-(void)dismissAudioPlayerViewControllerIfNeededWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VK_ImageViewer : XXUnknownSuperclass {
}
+(id)shared;
-(void)showImagesUrls:(id)urls;
-(void)showImagesUrls:(id)urls withIndex:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface VK_FavoritesTableViewDataAllocator : _VK_TracksTableViewDataAllocator {
	VK_FavoritesShuffleCellProxy* _shuffleCellProxy;
	BOOL _needSync;
	VK_NeedSyncCellProxy* _needSyncCellProxy;
	VK_SimpleSpaceCellProxy* _topSpaceCellProxy;
}
@property(assign, nonatomic) BOOL needSync;
@property(readonly, assign, nonatomic) VK_NeedSyncCellProxy* needSyncCellProxy;
@property(retain, nonatomic) VK_SimpleSpaceCellProxy* topSpaceCellProxy;
-(void).cxx_destruct;
-(id)internalTopCellItems;
-(id)shuffleCellProxy;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_AboutViewController : VK_BaseViewController <UIScrollViewDelegate, UIWebViewDelegate> {
	UIWebView* _webView;
	NSSet* _networkErrorsCodes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSSet* networkErrorsCodes;
@property(assign, nonatomic) __weak UIWebView* webView;
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(BOOL)checkNetworkConnection;
-(BOOL)checkNetworkConnectionWithError:(id)error;
-(void)configureWebView;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(unsigned short)internalAnaliticScreen;
-(id)internalTitle;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)reloadData;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteRepostHeaderCellProxy : VK_TableCellProxy {
	id _onHeaderTapBlock;
}
@property(copy, nonatomic) id onHeaderTapBlock;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteRepostHeaderCellViewModel : VK_TableViewCellViewModel {
	NSString* _timeString;
}
@property(retain, nonatomic) NSString* timeString;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_FeedViewNoteRepostHeaderCell : VK_TableViewCellBase <VK_UpdateTimerSubscriber> {
	UIView* _repostHeaderView;
	UIImageView* _repostAvatarView;
	UIImageView* _repostIconView;
	UILabel* _nameLabel;
	UILabel* _timeLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UILabel* timeLabel;
@property(assign, nonatomic) __weak UILabel* nameLabel;
@property(assign, nonatomic) __weak UIImageView* repostIconView;
@property(assign, nonatomic) __weak UIImageView* repostAvatarView;
@property(assign, nonatomic) __weak UIView* repostHeaderView;
@property(readonly, assign, nonatomic) VK_FeedViewNoteRepostHeaderCellViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_FeedViewNoteRepostHeaderCellProxy* proxy;
@property(readonly, assign, nonatomic) VK_FeedNoteBlockModel* data;
+(BOOL)internalCanHaveSeparator;
-(void).cxx_destruct;
-(void)updateTimerFired;
-(void)configureViewsFrames;
-(void)createViews;
-(void)internalReset;
-(void)internalUpdateData;
-(void)internalCellPressed;
-(void)internalSetup;
-(void)willCellAppear;
-(void)didCellDisappear;
@end

__attribute__((visibility("hidden")))
@interface VK_TracksTableControllerConfiguration : VK_TableControllerBaseConfiguration {
	id<VK_DataWithTracksProvider> _tracksProvider;
	VK_TrackCellProxyConfiguration* _trackCellProxyConfiguration;
	id _onShuffleBlock;
	id _prepareTrackCellProxyBlock;
	id _prepareDataAllocatorBlock;
	_VK_TracksTableViewDataAllocator* _customTracksTableViewDataAllocator;
}
@property(retain, nonatomic) _VK_TracksTableViewDataAllocator* customTracksTableViewDataAllocator;
@property(copy, nonatomic) id prepareDataAllocatorBlock;
@property(copy, nonatomic) id prepareTrackCellProxyBlock;
@property(copy, nonatomic) id onShuffleBlock;
@property(retain, nonatomic) VK_TrackCellProxyConfiguration* trackCellProxyConfiguration;
@property(retain, nonatomic) id<VK_DataWithTracksProvider> tracksProvider;
-(void).cxx_destruct;
-(id)internalDataProvider;
-(id)internalTableViewDataAllocator;
-(void)setup_VK_TracksTableControllerConfiguration;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTariffOptionCellProxy : VK_TableCellProxy {
	int _cellType;
	id _onTariffSelected;
}
@property(copy, nonatomic) id onTariffSelected;
@property(assign, nonatomic) int cellType;
+(float)estimatedBaseHeight;
-(void).cxx_destruct;
-(Class)viewModelClass;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTariffOptionCellViewModel : VK_TableViewCellViewModel {
	UIFont* _hoursLabelFont;
	float _hoursLabelHeight;
}
@property(assign, nonatomic) float hoursLabelHeight;
@property(retain, nonatomic) UIFont* hoursLabelFont;
-(void).cxx_destruct;
-(float)internalEstimatedHeightWithCellItem:(id)cellItem;
-(void)internalSetupWithCellItem:(id)cellItem;
@end

__attribute__((visibility("hidden")))
@interface VK_SettingsTariffOptionCell : VK_TableViewCellBase {
	VK_BaseLabel* _nameLabel;
	VK_BaseLabel* _hoursLabel;
	UIView* _priceView;
	VK_BaseLabel* _priceLabel;
	VK_BaseLabel* _periodLabel;
	VK_Button* _priceButtonView;
	UIView* _overview;
	UIActivityIndicatorView* _activityIndicator;
}
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicator;
@property(assign, nonatomic) __weak UIView* overview;
@property(assign, nonatomic) __weak VK_Button* priceButtonView;
@property(assign, nonatomic) __weak VK_BaseLabel* periodLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* priceLabel;
@property(assign, nonatomic) __weak UIView* priceView;
@property(assign, nonatomic) __weak VK_BaseLabel* hoursLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* nameLabel;
@property(readonly, assign, nonatomic) VK_SettingsTariffOptionCellViewModel* viewModel;
@property(readonly, assign, nonatomic) VK_TariffModel* data;
@property(readonly, assign, nonatomic) VK_SettingsTariffOptionCellProxy* proxy;
+(BOOL)internalCanHaveSeparator;
+(id)internalNibName;
-(void).cxx_destruct;
-(id)localizedPriceForStoreProduct:(id)storeProduct;
-(void)tariffSelectButtonPressed:(id)pressed;
-(void)updateWithTariff:(id)tariff;
-(void)internalUpdateData;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_Data : XXUnknownSuperclass {
	VK_DataModel* _dataModel;
	VK_AuthorizationCache* _authCache;
	id<VK_DataAuthorizationHandler> _authorizationHandler;
}
@property(retain, nonatomic) id<VK_DataAuthorizationHandler> authorizationHandler;
@property(readonly, assign, nonatomic) BOOL isUserAuthorized;
@property(readonly, assign, nonatomic) VK_DataModel* dataModel;
@property(retain, nonatomic) VK_AuthorizationCache* authCache;
+(id)shared;
-(void).cxx_destruct;
-(void)updateProfileDataWithComplete:(id)complete;
-(void)tryToLoadAuthDataWithComplete:(id)complete;
-(void)createAuthorizationWithUserInfo:(id)userInfo passKey:(id)key newUser:(BOOL)user;
-(void)setup;
-(void)updateUserInfo:(id)info andPassKey:(id)key withCaching:(BOOL)caching;
-(void)createUserWithInfo:(id)info andPassKey:(id)key withCaching:(BOOL)caching;
-(void)logout;
-(void)loginWithCompletion:(id)completion;
-(void)tryLoginWithCompletion:(id)completion;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_ProfileHeaderView : XXUnknownSuperclass {
	id<VK_ProfileHeaderViewDelegate> _delegate;
	UILabel* _titleLabel;
	UISegmentedControl* _segmentControl;
	UIButton* _backButton;
	UIView* _navBarContainer;
	UIView* _extendedView;
	UIView* _extendedViewShadow;
	UIImageView* _avatarImageView;
	VK_BaseLabel* _nameLabel;
	VK_BaseLabel* _vkURLLabel;
	NSLayoutConstraint* _extendedViewHiddingConstraint;
	VK_UserBaseInfoModel* _currentProfileModel;
	VK_SubscribeUserView* _subscribeView;
	UIImageView* _verifiedMark;
}
@property(assign, nonatomic) __weak id<VK_ProfileHeaderViewDelegate> delegate;
@property(assign, nonatomic) __weak UIImageView* verifiedMark;
@property(assign, nonatomic) __weak VK_SubscribeUserView* subscribeView;
@property(retain, nonatomic) VK_UserBaseInfoModel* currentProfileModel;
@property(retain, nonatomic) NSLayoutConstraint* extendedViewHiddingConstraint;
@property(assign, nonatomic) __weak VK_BaseLabel* vkURLLabel;
@property(assign, nonatomic) __weak VK_BaseLabel* nameLabel;
@property(assign, nonatomic) __weak UIImageView* avatarImageView;
@property(assign, nonatomic) __weak UIView* extendedViewShadow;
@property(assign, nonatomic) __weak UIView* extendedView;
@property(assign, nonatomic) __weak UIView* navBarContainer;
@property(assign, nonatomic) __weak UIButton* backButton;
@property(assign, nonatomic) __weak UISegmentedControl* segmentControl;
@property(assign, nonatomic) __weak UILabel* titleLabel;
-(void).cxx_destruct;
-(void)backButtonPressed:(id)pressed;
-(void)segmentControllerValueChanged;
-(void)updateNavBar;
-(void)updateSegmentedControl;
-(void)forcedSelectSegment:(unsigned)segment;
-(void)showExtendedView:(BOOL)view;
-(void)updateExtendedViewContent:(id)content;
-(void)onProfileURLPressed:(id)pressed;
-(void)updateInfoView;
-(void)updateState;
-(void)setupProfileHeaderView;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface VK_DataProvider : XXUnknownSuperclass <VK_DataProvider, NSCopying> {
	BOOL _isFetching;
	BOOL _isAllDataLoaded;
	id _customData;
	id _data;
	NSMutableSet* _delegates;
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id customData;
@property(retain, nonatomic) NSMutableSet* delegates;
@property(assign, nonatomic) BOOL isAllDataLoaded;
@property(retain, nonatomic) id data;
+(void)fecthData:(id)data withDataCount:(unsigned)dataCount andOtherParams:(id)params;
-(void).cxx_destruct;
-(void)updateWithCustomData;
-(id)internalPrepareCustomData:(id)data;
-(void)internalErrorReceived:(id)received;
-(void)internalDidFetchStatusChanged;
-(void)internalWillFetchingComplete:(BOOL)internal;
-(void)internalDidFetchingEnded;
-(void)internalDidFetchingStarted;
-(void)internalDidDataChanged;
-(void)internalSetup;
-(void)setup;
-(void)removeDelegate:(id)delegate;
-(void)addDelegate:(id)delegate;
-(void)endFetching;
-(void)startFetching;
-(void)cancelFetching;
-(void)internalReset;
-(void)resetData;
-(void)fetchData:(id)data;
-(id)copyWithZone:(NSZone*)zone;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_RequestDataProvider : VK_DataProvider <VK_NetworkReachabilitySubscriber> {
	VK_Request* _currentRequest;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VK_Request* currentRequest;
-(void).cxx_destruct;
-(void)networkReachability:(id)reachability networkReachableChanged:(BOOL)changed;
-(void)internalSetup;
-(id)internalUpdateDataAfterMerge:(id)merge;
-(id)internalMergeData:(id)data withNewData:(id)newData;
-(id)internalCreateRequest;
-(id)internalGetDataFromRequest:(id)request;
-(void)cancelFetching;
-(void)completeFetchingIfNeeded;
-(void)fetchData:(id)data;
-(BOOL)isCanFetch;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VK_PagedRequestDataProvider : VK_DataProvider <VK_NetworkReachabilitySubscriber> {
	BOOL _cacheEnabled;
	BOOL _wasLastRequestSuccessful;
	NSNumber* _customOffset;
	unsigned _virtualOffset;
	NSString* _ref;
	VK_PagedRequestBase* _currentRequest;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL cacheEnabled;
@property(retain, nonatomic) NSNumber* customOffset;
@property(assign, nonatomic) BOOL wasLastRequestSuccessful;
@property(assign, nonatomic) __weak VK_PagedRequestBase* currentRequest;
@property(retain, nonatomic) NSString* ref;
@property(assign, nonatomic) unsigned virtualOffset;
-(void).cxx_destruct;
-(void)networkReachability:(id)reachability networkReachableChanged:(BOOL)changed;
-(void)internalSetup;
-(id)internalUpdateDataAfterMerge:(id)merge;
-(id)internalMergeData:(id)data withNewData:(id)newData andOffset:(unsigned)offset;
-(unsigned)internalDataCount:(id)count;
-(id)internalCreatePagedRequest;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(BOOL)internalNeedRewriteRef;
-(id)internalPrepareNewData:(id)data;
-(void)internalReset;
-(void)cancelFetching;
-(BOOL)internalAllDataLoaded;
-(void)fetchData:(id)data;
-(BOOL)isCanFetch;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_DataListProvider : VK_PagedRequestDataProvider {
}
-(id)internalMergeData:(id)data withNewData:(id)newData andOffset:(unsigned)offset;
-(unsigned)internalDataCount:(id)count;
-(id)dataItems;
@end

__attribute__((visibility("hidden")))
@interface VK_BaseTextView : XXUnknownSuperclass {
}
-(BOOL)canBecomeFirstResponder;
-(void)internalTextViewSetup;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface CryptoFileDataSource : STKLocalFileDataSource {
	NSString* _key;
	VK_CryptService* _cryptoService;
}
+(unsigned long)audioFileTypeHintFromFileExtension:(id)fileExtension;
-(void).cxx_destruct;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(id)initWithFilePath:(id)filePath encryptionKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface VK_ApiRequest : VK_RequestBase {
	NSString* _baseURL;
}
@property(retain, nonatomic) NSString* baseURL;
-(void).cxx_destruct;
-(id)internalPrepareResponse:(id)response error:(id*)error cached:(BOOL)cached;
-(id)internalCreateResponseSerializer;
-(id)internalCreateRequestSerializer;
-(id)internalResponseModelMapping;
-(id)internalRequestMethod;
-(id)internalBuildRequestCommand;
-(id)internalBuildRequestAbsoluteUrl;
-(void)internalValidateParams;
-(BOOL)internalCachingSupported;
@end

__attribute__((visibility("hidden")))
@interface _LNPopupBottomBarSupport : XXUnknownSuperclass {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface CachedHTTPDataSourceFile : XXUnknownSuperclass {
	NSString* _identifier;
	NSURL* _fileUrl;
	NSFileHandle* _fileHandler;
	long long _size;
	long long _readOffset;
	long long _writeOffset;
}
@property(retain, nonatomic) NSFileHandle* fileHandler;
@property(retain, nonatomic) NSURL* fileUrl;
@property(retain, nonatomic) NSString* identifier;
@property(assign, nonatomic) long long writeOffset;
@property(assign, nonatomic) long long readOffset;
@property(assign, nonatomic) long long size;
-(void).cxx_destruct;
-(void)configureWithSize:(long long)size andDirectoryUrl:(id)url;
-(void)remove;
-(void)seekToOffset:(long long)offset;
-(void)writeData:(id)data;
-(id)readDataWithSize:(long long)size;
-(id)initWithSize:(long long)size andDirectoryUrl:(id)url;
@end

__attribute__((visibility("hidden")))
@interface VK_AlbumViewController : VK_BaseTableViewController {
	NSString* _albumId;
	VK_AlbumModel* _albumModel;
	NSLayoutConstraint* _navBarShadowHeightConstraint;
	UIActivityIndicatorView* _activityIndicatorView;
	VK_AlbumHeaderView* _headerView;
	NSLayoutConstraint* _albumArtistTitleViewTopConstraint;
	UILabel* _titleAlbumNameLabel;
	UILabel* _titleArtistNameLabel;
	UIButton* _moreButton;
	UIView* _navBarView;
	unsigned _state;
	UIView* _contentView;
}
@property(retain, nonatomic) NSString* albumId;
@property(assign, nonatomic) __weak UIView* contentView;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) __weak UIView* navBarView;
@property(assign, nonatomic) __weak UIButton* moreButton;
@property(assign, nonatomic) __weak UILabel* titleArtistNameLabel;
@property(assign, nonatomic) __weak UILabel* titleAlbumNameLabel;
@property(assign, nonatomic) __weak NSLayoutConstraint* albumArtistTitleViewTopConstraint;
@property(assign, nonatomic) __weak VK_AlbumHeaderView* headerView;
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicatorView;
@property(assign, nonatomic) __weak NSLayoutConstraint* navBarShadowHeightConstraint;
@property(retain, nonatomic) VK_AlbumModel* albumModel;
-(void).cxx_destruct;
-(void)tableViewDidScroll:(id)tableView;
-(void)updateTitleState;
-(void)moreButtonPressed:(id)pressed;
-(void)backButtonPressed:(id)pressed;
-(void)showActionSheet;
-(void)shuffleBegin;
-(void)updateAlbumDataWithInfo:(id)info;
-(unsigned short)internalAnaliticScreen;
-(id)internalCreateTableControllerConfiguration;
-(id)internalContentView;
-(void)internalSetup;
-(void)setupHeaderView;
-(void)reloadData;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VK_UserSettingsManager : VK_BaseManager {
	NSMutableDictionary* _settingsDict;
}
@property(assign, nonatomic) unsigned loopMode;
@property(assign, nonatomic) BOOL broadcastEnabled;
@property(assign, nonatomic) BOOL shuffleEnabled;
@property(assign, nonatomic) BOOL confirmRemoveEnabled;
@property(assign, nonatomic) BOOL dontSleepWhileDownloading;
@property(retain, nonatomic) NSArray* equalizerValues;
@property(retain, nonatomic) NSNumber* equalizerMod;
@property(assign, nonatomic) BOOL equalizerEnabled;
@property(assign, nonatomic) BOOL downloadByWifi;
@property(retain, nonatomic) NSMutableDictionary* settingsDict;
+(id)currentSettings;
-(void).cxx_destruct;
-(void)setSetting:(id)setting withValue:(id)value;
-(id)getValueSetting:(id)setting;
-(void)setBoolSetting:(id)setting withValue:(BOOL)value;
-(BOOL)getBoolSetting:(id)setting;
-(void)internalNeedLoadUserData;
-(id)init;
-(void)registerDefaultsSettings;
@end

__attribute__((visibility("hidden")))
@interface VK_DashedLineView : XXUnknownSuperclass <UIAppearanceContainer> {
	int _direction;
	float _phase;
	NSArray* _lengthPattern;
	UIColor* _lineColor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIColor* lineColor;
@property(retain, nonatomic) NSArray* lengthPattern;
@property(assign, nonatomic) float phase;
@property(assign, nonatomic) int direction;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)commonInit;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VK_UpdateTimer : XXUnknownSuperclass {
	NSMutableArray* _subscribers;
	NSTimer* _timer;
}
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSMutableArray* subscribers;
+(id)shared;
-(void).cxx_destruct;
-(void)notifySubscribers;
-(void)configureUpdateTimer;
-(void)unsubscribe:(id)unsubscribe;
-(void)subscribe:(id)subscribe;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_SplashView : XXUnknownSuperclass {
	BOOL _isAnimating;
	UIView* _backgroundView;
	UIView* _navigationBarView;
	UIActivityIndicatorView* _activityIndicator;
}
@property(assign, nonatomic) BOOL isAnimating;
@property(assign, nonatomic) __weak UIActivityIndicatorView* activityIndicator;
@property(assign, nonatomic) __weak UIView* navigationBarView;
@property(assign, nonatomic) __weak UIView* backgroundView;
-(void).cxx_destruct;
-(void)finishAnimation;
-(void)startAnimation;
-(void)addToView:(id)view;
-(void)setup_VK_SplashView;
-(void)awakeFromNib;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_AlertDialogButton : XXUnknownSuperclass {
	NSString* _title;
	id _onPressedBlock;
}
@property(readonly, assign, nonatomic) id onPressedBlock;
@property(readonly, assign, nonatomic) NSString* title;
+(id)buttonWithTitle:(id)title andOnPressedBlock:(id)block;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title andOnPressedBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface VK_AlertDialog : XXUnknownSuperclass {
	BOOL _forcedShow;
	unsigned short _analiticScreenId;
	NSString* _uniqueId;
	NSString* _text;
	NSArray* _buttons;
}
@property(assign, nonatomic) BOOL forcedShow;
@property(retain, nonatomic) NSArray* buttons;
@property(assign, nonatomic) unsigned short analiticScreenId;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* uniqueId;
+(void)handleAlertButtonPressed:(id)pressed;
+(void)internalRemoveDialog:(id)dialog;
+(void)internalShowNextDialogIfNeeded;
+(void)internalClearAllDialogs;
+(void)initialize;
+(id)defaultAlertWithText:(id)text;
+(id)defaultAlertWithText:(id)text andCancelButtonTitle:(id)title;
+(void)showUnknownDownloadingOrPlayingError;
+(void)showAppleIdAlreadyUsedDialog;
+(void)showApplicationNeedToUpdateDialog;
+(void)showPlayingDisabledTrackDialog;
+(void)showEmptyTariffPlayingTrackDialog;
+(void)showFavoritesTracksStateSavingFailedDialog;
+(void)showDownloadingOnlyByWifiDialog;
+(void)showLowMemoryForTracksSavingDialog;
+(void)showInvalidTimeDialog;
+(void)showTariffLimitOverflowDialog;
+(void)showTariffChangedDialog;
+(void)showLikelyTariffChangedDialog;
+(void)showTariffEndedDialog;
+(void)showLikelyTariffEndedDialog;
+(void)showFavoritesSyncCompletedDialog;
+(void)showTariffsEmptyDialog;
-(void).cxx_destruct;
-(void)onButtonPressed:(unsigned)pressed;
-(void)show;
-(void)showWithDialogTextItemType:(unsigned)dialogTextItemType andTapBlocks:(id)blocks;
-(void)showWithDialogTextItemType:(unsigned)dialogTextItemType andTapBlock:(id)block;
-(void)showWithDialogTextItemType:(unsigned)dialogTextItemType;
-(void)showWithRedirectToTariffScreenAndDialogTextItemType:(unsigned)tariffScreenAndDialogTextItemType;
-(void)addButtonWithTitle:(id)title;
-(void)addButtonWithTitle:(id)title andBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchDataProvider : VK_DataListProvider {
	NSString* _query;
}
@property(retain, nonatomic) NSString* query;
-(void).cxx_destruct;
-(id)internalCreateSearchRequest;
-(id)internalCreatePagedRequest;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VK_AudioSearchBaseDataProvider : VK_SearchDataProvider <VK_DataWithTracksProvider> {
}
@property(readonly, assign, nonatomic) BOOL isCanFetch;
@property(readonly, assign, nonatomic) BOOL isFetching;
@property(readonly, assign, nonatomic) BOOL isAllDataLoaded;
@property(readonly, assign, nonatomic) id customData;
@property(readonly, assign, nonatomic) id actualData;
@property(readonly, assign, nonatomic) id data;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)internalUniqueIdTracksPrefix;
-(id)internalPrepareNewData:(id)data;
-(id)createTrackListProviderFromTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_GlobalAudioSearchDataProvider : VK_AudioSearchBaseDataProvider {
	BOOL _byPerformer;
}
@property(assign, nonatomic) BOOL byPerformer;
-(id)internalUniqueIdTracksPrefix;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreateSearchRequest;
-(id)copyWithZone:(NSZone*)zone;
-(void)internalSetup;
@end

__attribute__((visibility("hidden")))
@interface VK_UserAudioSearchDataProvider : VK_AudioSearchBaseDataProvider {
}
-(id)internalUniqueIdTracksPrefix;
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreateSearchRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_UsersSearchDataProvider : VK_SearchDataProvider {
}
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreateSearchRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_GroupsSearchDataProvider : VK_SearchDataProvider {
}
-(id)internalGetDataFromRequest:(id)request andRef:(id*)ref;
-(id)internalCreateSearchRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_SearchAutocompletionDataProvider : VK_RequestDataProvider {
	NSString* _query;
}
@property(retain, nonatomic) NSString* query;
-(void).cxx_destruct;
-(id)internalGetDataFromRequest:(id)request;
-(id)internalCreateRequest;
@end

__attribute__((visibility("hidden")))
@interface VK_RemoteShuffleableTrackListProvider : VK_ShuffleableTrackListProvider {
}
-(id)shuffleableTracksProvider;
-(void)internalPreviousLoop;
-(void)internalNextLoop;
-(void)internalUnshuffleFromTrack:(id)track;
-(void)internalShuffleFromTrack:(id)track;
-(id)previousTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(id)nextTrackFromTrack:(id)track withLoopMode:(BOOL)loopMode;
-(void)internalReloadTracksProvider;
-(id)initWithTracksProvider:(id)tracksProvider andStartTrack:(id)track;
@end

__attribute__((visibility("hidden")))
@interface VK_DialogsTextManager : XXUnknownSuperclass {
	BOOL _isTextUpdated;
	NSDictionary* _dialogsItems;
}
@property(retain, nonatomic) NSDictionary* dialogsItems;
@property(assign, nonatomic) BOOL isTextUpdated;
+(id)shared;
-(void).cxx_destruct;
-(id)dialogTextItemWithType:(unsigned)type;
-(void)didDialogsTextLoadedWithResponse:(id)response;
-(void)clearCachedTexts;
-(void)loadDialogsText;
-(void)onNetworkStateDidChanged;
-(void)updateDialogsTextIfNeeded;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VK_DialogTextItem : XXUnknownSuperclass <EKMappingProtocol> {
	NSString* _dialogText;
	NSArray* _dialogButtonsTitles;
}
@property(retain, nonatomic) NSArray* dialogButtonsTitles;
@property(retain, nonatomic) NSString* dialogText;
+(id)objectMapping;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VK_CaptchaHandlerError : VKError {
	id _captchaEnteredBlock;
}
@property(copy, nonatomic) id captchaEnteredBlock;
-(void).cxx_destruct;
-(void)answerCaptcha:(id)captcha;
@end

@interface PodsDummy_AFMacros : XXUnknownSuperclass {
}
@end

@interface AFHTTPRequestOperation : AFURLConnectionOperation {
	AFHTTPResponseSerializer<AFURLResponseSerialization>* _responseSerializer;
	id _responseObject;
	NSError* _responseSerializationError;
}
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(retain, nonatomic) NSError* responseSerializationError;
@property(retain, nonatomic) id responseObject;
@property(retain, nonatomic) NSHTTPURLResponse* response;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)pause;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(id)error;
-(id)initWithRequest:(id)request;
@end

@interface AFHTTPRequestOperationManager : XXUnknownSuperclass <NSSecureCoding, NSCopying> {
	BOOL _shouldUseCredentialStorage;
	NSURL* _baseURL;
	AFHTTPRequestSerializer<AFURLRequestSerialization>* _requestSerializer;
	AFHTTPResponseSerializer<AFURLResponseSerialization>* _responseSerializer;
	NSOperationQueue* _operationQueue;
	NSURLCredential* _credential;
	AFSecurityPolicy* _securityPolicy;
	AFNetworkReachabilityManager* _reachabilityManager;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
}
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(retain, nonatomic) AFNetworkReachabilityManager* reachabilityManager;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) NSURLCredential* credential;
@property(assign, nonatomic) BOOL shouldUseCredentialStorage;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer<AFURLRequestSerialization>* requestSerializer;
@property(retain, nonatomic) NSURL* baseURL;
+(BOOL)supportsSecureCoding;
+(id)manager;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)description;
-(id)DELETE:(id)aDelete parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PATCH:(id)patch parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PUT:(id)put parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters constructingBodyWithBlock:(id)block success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)HEAD:(id)head parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)GET:(id)get parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)HTTPRequestOperationWithRequest:(id)request success:(id)success failure:(id)failure;
-(id)HTTPRequestOperationWithHTTPMethod:(id)httpmethod URLString:(id)string parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)initWithBaseURL:(id)baseURL;
-(id)init;
@end

@interface AFHTTPSessionManager : AFURLSessionManager <NSSecureCoding, NSCopying> {
	NSURL* _baseURL;
	AFHTTPRequestSerializer<AFURLRequestSerialization>* _requestSerializer;
}
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer<AFURLRequestSerialization>* requestSerializer;
@property(retain, nonatomic) NSURL* baseURL;
+(BOOL)supportsSecureCoding;
+(id)manager;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)description;
-(id)dataTaskWithHTTPMethod:(id)httpmethod URLString:(id)string parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)DELETE:(id)aDelete parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PATCH:(id)patch parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PUT:(id)put parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters constructingBodyWithBlock:(id)block success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)HEAD:(id)head parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)GET:(id)get parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)initWithBaseURL:(id)baseURL sessionConfiguration:(id)configuration;
-(id)initWithSessionConfiguration:(id)sessionConfiguration;
-(id)initWithBaseURL:(id)baseURL;
-(id)init;
@end

@interface AFNetworkActivityIndicatorManager : XXUnknownSuperclass {
	BOOL _enabled;
	int _activityCount;
	NSTimer* _activityIndicatorVisibilityTimer;
}
@property(readonly, assign, nonatomic) BOOL isNetworkActivityIndicatorVisible;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, assign, nonatomic, getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible;
@property(retain, nonatomic) NSTimer* activityIndicatorVisibilityTimer;
@property(assign, nonatomic) int activityCount;
+(id)keyPathsForValuesAffectingIsNetworkActivityIndicatorVisible;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)networkRequestDidFinish:(id)networkRequest;
-(void)networkRequestDidStart:(id)networkRequest;
-(void)decrementActivityCount;
-(void)incrementActivityCount;
-(void)updateNetworkActivityIndicatorVisibility;
-(void)updateNetworkActivityIndicatorVisibilityDelayed;
-(void)dealloc;
-(id)init;
@end

@interface PodsDummy_AFNetworking : XXUnknownSuperclass {
}
@end

@interface AFNetworkReachabilityManager : XXUnknownSuperclass {
	int _networkReachabilityStatus;
	SCNetworkReachabilityRef _networkReachability;
	unsigned _networkReachabilityAssociation;
	id _networkReachabilityStatusBlock;
}
@property(readonly, assign, nonatomic, getter=isReachableViaWiFi) BOOL reachableViaWiFi;
@property(readonly, assign, nonatomic, getter=isReachableViaWWAN) BOOL reachableViaWWAN;
@property(readonly, assign, nonatomic, getter=isReachable) BOOL reachable;
@property(copy, nonatomic) id networkReachabilityStatusBlock;
@property(assign, nonatomic) int networkReachabilityStatus;
@property(assign, nonatomic) unsigned networkReachabilityAssociation;
@property(assign, nonatomic) SCNetworkReachabilityRef networkReachability;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)managerForAddress:(const void*)address;
+(id)managerForDomain:(id)domain;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)setReachabilityStatusChangeBlock:(id)block;
-(id)localizedNetworkReachabilityStatusString;
-(void)stopMonitoring;
-(void)startMonitoring;
-(void)dealloc;
-(id)initWithReachability:(SCNetworkReachabilityRef)reachability;
@end

@interface AFSecurityPolicy : XXUnknownSuperclass {
	BOOL _validatesCertificateChain;
	BOOL _allowInvalidCertificates;
	BOOL _validatesDomainName;
	unsigned _SSLPinningMode;
	NSArray* _pinnedCertificates;
	NSArray* _pinnedPublicKeys;
}
@property(assign, nonatomic) BOOL validatesDomainName;
@property(assign, nonatomic) BOOL allowInvalidCertificates;
@property(retain, nonatomic) NSArray* pinnedCertificates;
@property(assign, nonatomic) BOOL validatesCertificateChain;
@property(retain, nonatomic) NSArray* pinnedPublicKeys;
@property(assign, nonatomic) unsigned SSLPinningMode;
+(id)keyPathsForValuesAffectingPinnedPublicKeys;
+(id)policyWithPinningMode:(unsigned)pinningMode;
+(id)defaultPolicy;
+(id)defaultPinnedCertificates;
-(void).cxx_destruct;
-(BOOL)evaluateServerTrust:(SecTrust*)trust forDomain:(id)domain;
-(BOOL)evaluateServerTrust:(SecTrust*)trust;
-(id)init;
@end

@interface AFURLConnectionOperation : XXUnknownSuperclass <NSURLConnectionDelegate, NSURLConnectionDataDelegate, NSSecureCoding, NSCopying> {
	BOOL _shouldUseCredentialStorage;
	NSOutputStream* _outputStream;
	NSSet* _runLoopModes;
	NSURLRequest* _request;
	NSURLResponse* _response;
	NSError* _error;
	NSData* _responseData;
	NSURLCredential* _credential;
	AFSecurityPolicy* _securityPolicy;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
	NSDictionary* _userInfo;
	int _state;
	NSRecursiveLock* _lock;
	NSURLConnection* _connection;
	NSString* _responseString;
	unsigned _responseStringEncoding;
	unsigned _backgroundTaskIdentifier;
	id _uploadProgress;
	id _downloadProgress;
	id _authenticationChallenge;
	id _cacheResponse;
	id _redirectResponse;
	long long _totalBytesRead;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) NSURLCredential* credential;
@property(assign, nonatomic) BOOL shouldUseCredentialStorage;
@property(retain, nonatomic) NSSet* runLoopModes;
@property(copy, nonatomic) id redirectResponse;
@property(copy, nonatomic) id cacheResponse;
@property(copy, nonatomic) id authenticationChallenge;
@property(copy, nonatomic) id downloadProgress;
@property(copy, nonatomic) id uploadProgress;
@property(assign, nonatomic) unsigned backgroundTaskIdentifier;
@property(assign, nonatomic) long long totalBytesRead;
@property(assign, nonatomic) unsigned responseStringEncoding;
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) NSData* responseData;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic) int state;
@property(assign, nonatomic, setter=af_setDownloadProgressAnimated:) BOOL af_downloadProgressAnimated;
@property(copy, nonatomic) id downloadProgress;
@property(assign, nonatomic, setter=af_setUploadProgressAnimated:) BOOL af_uploadProgressAnimated;
@property(copy, nonatomic) id uploadProgress;
+(BOOL)supportsSecureCoding;
+(id)batchOfRequestOperations:(id)requestOperations progressBlock:(id)block completionBlock:(id)block3;
+(id)networkRequestThread;
+(void)networkRequestThreadEntryPoint:(id)point;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)cancelConnection;
-(void)cancel;
-(void)finish;
-(void)operationDidStart;
-(void)start;
-(BOOL)isConcurrent;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isReady;
-(void)setCompletionBlock:(id)block;
-(void)setRedirectResponseBlock:(id)block;
-(void)setCacheResponseBlock:(id)block;
-(void)setWillSendRequestForAuthenticationChallengeBlock:(id)sendRequestForAuthenticationChallengeBlock;
-(void)setDownloadProgressBlock:(id)block;
-(void)setUploadProgressBlock:(id)block;
-(void)resume;
-(BOOL)isPaused;
-(void)operationDidPause;
-(void)pause;
-(void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)executeAsBackgroundTaskWithExpirationHandler;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

@interface AFQueryStringPair : XXUnknownSuperclass {
	id _field;
	id _value;
}
@property(retain, nonatomic) id value;
@property(retain, nonatomic) id field;
-(void).cxx_destruct;
-(id)URLEncodedStringValueWithEncoding:(unsigned)encoding;
-(id)initWithField:(id)field value:(id)value;
@end

@interface AFHTTPRequestSerializer : XXUnknownSuperclass <AFURLRequestSerialization> {
	BOOL _allowsCellularAccess;
	BOOL _HTTPShouldHandleCookies;
	BOOL _HTTPShouldUsePipelining;
	unsigned _stringEncoding;
	unsigned _cachePolicy;
	unsigned _networkServiceType;
	NSSet* _HTTPMethodsEncodingParametersInURI;
	NSMutableSet* _mutableObservedChangedKeyPaths;
	NSMutableDictionary* _mutableHTTPRequestHeaders;
	unsigned _queryStringSerializationStyle;
	id _queryStringSerialization;
	double _timeoutInterval;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSSet* HTTPMethodsEncodingParametersInURI;
@property(readonly, assign, nonatomic) NSDictionary* HTTPRequestHeaders;
@property(assign, nonatomic) double timeoutInterval;
@property(assign, nonatomic) unsigned networkServiceType;
@property(assign, nonatomic) BOOL HTTPShouldUsePipelining;
@property(assign, nonatomic) BOOL HTTPShouldHandleCookies;
@property(assign, nonatomic) unsigned cachePolicy;
@property(assign, nonatomic) BOOL allowsCellularAccess;
@property(assign, nonatomic) unsigned stringEncoding;
@property(copy, nonatomic) id queryStringSerialization;
@property(assign, nonatomic) unsigned queryStringSerializationStyle;
@property(retain, nonatomic) NSMutableDictionary* mutableHTTPRequestHeaders;
@property(retain, nonatomic) NSMutableSet* mutableObservedChangedKeyPaths;
+(BOOL)supportsSecureCoding;
+(BOOL)automaticallyNotifiesObserversForKey:(id)key;
+(id)serializer;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
-(id)requestWithMultipartFormRequest:(id)multipartFormRequest writingStreamContentsToFile:(id)file completionHandler:(id)handler;
-(id)multipartFormRequestWithMethod:(id)method URLString:(id)string parameters:(id)parameters constructingBodyWithBlock:(id)block error:(id*)error;
-(id)multipartFormRequestWithMethod:(id)method URLString:(id)string parameters:(id)parameters constructingBodyWithBlock:(id)block;
-(id)requestWithMethod:(id)method URLString:(id)string parameters:(id)parameters error:(id*)error;
-(id)requestWithMethod:(id)method URLString:(id)string parameters:(id)parameters;
-(void)setQueryStringSerializationWithBlock:(id)block;
-(void)setQueryStringSerializationWithStyle:(unsigned)style;
-(void)clearAuthorizationHeader;
-(void)setAuthorizationHeaderFieldWithToken:(id)token;
-(void)setAuthorizationHeaderFieldWithUsername:(id)username password:(id)password;
-(id)valueForHTTPHeaderField:(id)httpheaderField;
-(void)setValue:(id)value forHTTPHeaderField:(id)httpheaderField;
-(void)dealloc;
-(id)init;
@end

@interface AFStreamingMultipartFormData : XXUnknownSuperclass <AFMultipartFormData> {
	NSMutableURLRequest* _request;
	unsigned _stringEncoding;
	NSString* _boundary;
	AFMultipartBodyStream* _bodyStream;
}
@property(retain, nonatomic) AFMultipartBodyStream* bodyStream;
@property(copy, nonatomic) NSString* boundary;
@property(assign, nonatomic) unsigned stringEncoding;
@property(copy, nonatomic) NSMutableURLRequest* request;
-(void).cxx_destruct;
-(id)requestByFinalizingMultipartFormData;
-(void)throttleBandwidthWithPacketSize:(unsigned)packetSize delay:(double)delay;
-(void)appendPartWithHeaders:(id)headers body:(id)body;
-(void)appendPartWithFormData:(id)formData name:(id)name;
-(void)appendPartWithFileData:(id)fileData name:(id)name fileName:(id)name3 mimeType:(id)type;
-(void)appendPartWithInputStream:(id)inputStream name:(id)name fileName:(id)name3 length:(long long)length mimeType:(id)type;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name fileName:(id)name3 mimeType:(id)type error:(id*)error;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name error:(id*)error;
-(id)initWithURLRequest:(id)urlrequest stringEncoding:(unsigned)encoding;
@end

@interface AFMultipartBodyStream : XXUnknownSuperclass <NSCopying, NSStreamDelegate> {
	id<NSStreamDelegate> delegate;
	unsigned streamStatus;
	NSError* streamError;
	unsigned _numberOfBytesInPacket;
	NSInputStream* _inputStream;
	unsigned _stringEncoding;
	NSMutableArray* _HTTPBodyParts;
	NSEnumerator* _HTTPBodyPartEnumerator;
	AFHTTPBodyPart* _currentHTTPBodyPart;
	NSOutputStream* _outputStream;
	NSMutableData* _buffer;
	double _delay;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isEmpty) BOOL empty;
@property(readonly, assign, nonatomic) unsigned long long contentLength;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(assign, nonatomic) double delay;
@property(assign, nonatomic) unsigned numberOfBytesInPacket;
@property(retain, nonatomic) NSMutableData* buffer;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) AFHTTPBodyPart* currentHTTPBodyPart;
@property(retain, nonatomic) NSEnumerator* HTTPBodyPartEnumerator;
@property(retain, nonatomic) NSMutableArray* HTTPBodyParts;
@property(assign, nonatomic) unsigned stringEncoding;
-(void)setStreamError:(id)error;
-(id)streamError;
-(void)setStreamStatus:(unsigned)status;
-(unsigned)streamStatus;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)_setCFClientFlags:(unsigned long)flags callback:(/*function-pointer*/ void*)callback context:(XXStruct_K1psTC*)context;
-(void)_unscheduleFromCFRunLoop:(CFRunLoopRef)cfrunLoop forMode:(CFStringRef)mode;
-(void)_scheduleInCFRunLoop:(CFRunLoopRef)cfrunLoop forMode:(CFStringRef)mode;
-(void)removeFromRunLoop:(id)runLoop forMode:(id)mode;
-(void)scheduleInRunLoop:(id)runLoop forMode:(id)mode;
-(BOOL)setProperty:(id)property forKey:(id)key;
-(id)propertyForKey:(id)key;
-(void)close;
-(void)open;
-(BOOL)hasBytesAvailable;
-(BOOL)getBuffer:(char**)buffer length:(unsigned*)length;
-(int)read:(char*)read maxLength:(unsigned)length;
-(void)appendHTTPBodyPart:(id)part;
-(void)setInitialAndFinalBoundaries;
-(id)initWithStringEncoding:(unsigned)stringEncoding;
@end

@interface AFHTTPBodyPart : XXUnknownSuperclass <NSCopying> {
	int _phase;
	NSInputStream* _inputStream;
	unsigned long long _phaseReadOffset;
	BOOL _hasInitialBoundary;
	BOOL _hasFinalBoundary;
	unsigned _stringEncoding;
	NSDictionary* _headers;
	NSString* _boundary;
	id _body;
	unsigned long long _bodyContentLength;
}
@property(readonly, assign, nonatomic) unsigned long long contentLength;
@property(readonly, assign, nonatomic, getter=hasBytesAvailable) BOOL bytesAvailable;
@property(assign, nonatomic) BOOL hasFinalBoundary;
@property(assign, nonatomic) BOOL hasInitialBoundary;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(assign, nonatomic) unsigned long long bodyContentLength;
@property(retain, nonatomic) id body;
@property(copy, nonatomic) NSString* boundary;
@property(retain, nonatomic) NSDictionary* headers;
@property(assign, nonatomic) unsigned stringEncoding;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)transitionToNextPhase;
-(int)readData:(id)data intoBuffer:(char*)buffer maxLength:(unsigned)length;
-(int)read:(char*)read maxLength:(unsigned)length;
-(id)stringForHeaders;
-(void)dealloc;
-(id)init;
@end

@interface AFJSONRequestSerializer : AFHTTPRequestSerializer {
	unsigned _writingOptions;
}
@property(assign, nonatomic) unsigned writingOptions;
+(id)serializerWithWritingOptions:(unsigned)writingOptions;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
@end

@interface AFPropertyListRequestSerializer : AFHTTPRequestSerializer {
	unsigned _format;
	unsigned _writeOptions;
}
@property(assign, nonatomic) unsigned writeOptions;
@property(assign, nonatomic) unsigned format;
+(id)serializerWithFormat:(unsigned)format writeOptions:(unsigned)options;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
@end

@interface AFHTTPResponseSerializer : XXUnknownSuperclass <AFURLResponseSerialization> {
	unsigned _stringEncoding;
	NSIndexSet* _acceptableStatusCodes;
	NSSet* _acceptableContentTypes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSSet* acceptableContentTypes;
@property(copy, nonatomic) NSIndexSet* acceptableStatusCodes;
@property(assign, nonatomic) unsigned stringEncoding;
+(BOOL)supportsSecureCoding;
+(id)serializer;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(BOOL)validateResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

@interface AFJSONResponseSerializer : AFHTTPResponseSerializer {
	BOOL _removesKeysWithNullValues;
	unsigned _readingOptions;
}
@property(assign, nonatomic) BOOL removesKeysWithNullValues;
@property(assign, nonatomic) unsigned readingOptions;
+(id)serializerWithReadingOptions:(unsigned)readingOptions;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

@interface AFXMLParserResponseSerializer : AFHTTPResponseSerializer {
}
+(id)serializer;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

@interface AFPropertyListResponseSerializer : AFHTTPResponseSerializer {
	unsigned _format;
	unsigned _readOptions;
}
@property(assign, nonatomic) unsigned readOptions;
@property(assign, nonatomic) unsigned format;
+(id)serializerWithFormat:(unsigned)format readOptions:(unsigned)options;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

@interface AFImageResponseSerializer : AFHTTPResponseSerializer {
	BOOL _automaticallyInflatesResponseImage;
	float _imageScale;
}
@property(assign, nonatomic) BOOL automaticallyInflatesResponseImage;
@property(assign, nonatomic) float imageScale;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

@interface AFCompoundResponseSerializer : AFHTTPResponseSerializer {
	NSArray* _responseSerializers;
}
@property(copy, nonatomic) NSArray* responseSerializers;
+(id)compoundSerializerWithResponseSerializers:(id)responseSerializers;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
@end

@interface AFURLSessionManagerTaskDelegate : XXUnknownSuperclass <NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate> {
	AFURLSessionManager* _manager;
	NSMutableData* _mutableData;
	NSProgress* _progress;
	NSURL* _downloadFileURL;
	id _downloadTaskDidFinishDownloading;
	id _completionHandler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id completionHandler;
@property(copy, nonatomic) id downloadTaskDidFinishDownloading;
@property(copy, nonatomic) NSURL* downloadFileURL;
@property(retain, nonatomic) NSProgress* progress;
@property(retain, nonatomic) NSMutableData* mutableData;
@property(assign, nonatomic) __weak AFURLSessionManager* manager;
-(void).cxx_destruct;
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(id)init;
@end

@interface _AFURLSessionTaskSwizzling : XXUnknownSuperclass {
}
+(void)swizzleResumeAndSuspendMethodForClass:(Class)aClass;
+(void)load;
-(void)af_suspend;
-(void)af_resume;
-(int)state;
@end

@interface AFURLSessionManager : XXUnknownSuperclass <NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate, NSSecureCoding, NSCopying> {
	BOOL _attemptsToRecreateUploadTasksForBackgroundSessions;
	NSURLSession* _session;
	NSOperationQueue* _operationQueue;
	id<AFURLResponseSerialization> _responseSerializer;
	AFSecurityPolicy* _securityPolicy;
	AFNetworkReachabilityManager* _reachabilityManager;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
	NSURLSessionConfiguration* _sessionConfiguration;
	NSMutableDictionary* _mutableTaskDelegatesKeyedByTaskIdentifier;
	NSLock* _lock;
	id _sessionDidBecomeInvalid;
	id _sessionDidReceiveAuthenticationChallenge;
	id _didFinishEventsForBackgroundURLSession;
	id _taskWillPerformHTTPRedirection;
	id _taskDidReceiveAuthenticationChallenge;
	id _taskNeedNewBodyStream;
	id _taskDidSendBodyData;
	id _taskDidComplete;
	id _dataTaskDidReceiveResponse;
	id _dataTaskDidBecomeDownloadTask;
	id _dataTaskDidReceiveData;
	id _dataTaskWillCacheResponse;
	id _downloadTaskDidFinishDownloading;
	id _downloadTaskDidWriteData;
	id _downloadTaskDidResume;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL attemptsToRecreateUploadTasksForBackgroundSessions;
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(readonly, assign, nonatomic) NSArray* downloadTasks;
@property(readonly, assign, nonatomic) NSArray* uploadTasks;
@property(readonly, assign, nonatomic) NSArray* dataTasks;
@property(readonly, assign, nonatomic) NSArray* tasks;
@property(retain, nonatomic) AFNetworkReachabilityManager* reachabilityManager;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) id<AFURLResponseSerialization> responseSerializer;
@property(copy, nonatomic) id downloadTaskDidResume;
@property(copy, nonatomic) id downloadTaskDidWriteData;
@property(copy, nonatomic) id downloadTaskDidFinishDownloading;
@property(copy, nonatomic) id dataTaskWillCacheResponse;
@property(copy, nonatomic) id dataTaskDidReceiveData;
@property(copy, nonatomic) id dataTaskDidBecomeDownloadTask;
@property(copy, nonatomic) id dataTaskDidReceiveResponse;
@property(copy, nonatomic) id taskDidComplete;
@property(copy, nonatomic) id taskDidSendBodyData;
@property(copy, nonatomic) id taskNeedNewBodyStream;
@property(copy, nonatomic) id taskDidReceiveAuthenticationChallenge;
@property(copy, nonatomic) id taskWillPerformHTTPRedirection;
@property(copy, nonatomic) id didFinishEventsForBackgroundURLSession;
@property(copy, nonatomic) id sessionDidReceiveAuthenticationChallenge;
@property(copy, nonatomic) id sessionDidBecomeInvalid;
@property(retain, nonatomic) NSLock* lock;
@property(readonly, copy, nonatomic) NSString* taskDescriptionForSessionTasks;
@property(retain, nonatomic) NSMutableDictionary* mutableTaskDelegatesKeyedByTaskIdentifier;
@property(retain, nonatomic) NSURLSession* session;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) NSURLSessionConfiguration* sessionConfiguration;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didBecomeDownloadTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)URLSession:(id)session task:(id)task needNewBodyStream:(id)stream;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)setDownloadTaskDidResumeBlock:(id)resumeBlock;
-(void)setDownloadTaskDidWriteDataBlock:(id)writeDataBlock;
-(void)setDownloadTaskDidFinishDownloadingBlock:(id)finishDownloadingBlock;
-(void)setDataTaskWillCacheResponseBlock:(id)cacheResponseBlock;
-(void)setDataTaskDidReceiveDataBlock:(id)receiveDataBlock;
-(void)setDataTaskDidBecomeDownloadTaskBlock:(id)becomeDownloadTaskBlock;
-(void)setDataTaskDidReceiveResponseBlock:(id)receiveResponseBlock;
-(void)setTaskDidCompleteBlock:(id)completeBlock;
-(void)setTaskDidSendBodyDataBlock:(id)sendBodyDataBlock;
-(void)setTaskDidReceiveAuthenticationChallengeBlock:(id)receiveAuthenticationChallengeBlock;
-(void)setTaskWillPerformHTTPRedirectionBlock:(id)performHTTPRedirectionBlock;
-(void)setTaskNeedNewBodyStreamBlock:(id)block;
-(void)setDidFinishEventsForBackgroundURLSessionBlock:(id)finishEventsForBackgroundURLSessionBlock;
-(void)setSessionDidReceiveAuthenticationChallengeBlock:(id)receiveAuthenticationChallengeBlock;
-(void)setSessionDidBecomeInvalidBlock:(id)becomeInvalidBlock;
-(id)downloadProgressForTask:(id)task;
-(id)uploadProgressForTask:(id)task;
-(id)downloadTaskWithResumeData:(id)resumeData progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
-(id)downloadTaskWithRequest:(id)request progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
-(id)uploadTaskWithStreamedRequest:(id)streamedRequest progress:(id*)progress completionHandler:(id)handler;
-(id)uploadTaskWithRequest:(id)request fromData:(id)data progress:(id*)progress completionHandler:(id)handler;
-(id)uploadTaskWithRequest:(id)request fromFile:(id)file progress:(id*)progress completionHandler:(id)handler;
-(id)dataTaskWithRequest:(id)request completionHandler:(id)handler;
-(void)invalidateSessionCancelingTasks:(BOOL)tasks;
-(id)tasksForKeyPath:(id)keyPath;
-(void)removeAllDelegates;
-(void)removeDelegateForTask:(id)task;
-(void)addDelegateForDownloadTask:(id)downloadTask progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
-(void)addDelegateForUploadTask:(id)uploadTask progress:(id*)progress completionHandler:(id)handler;
-(void)addDelegateForDataTask:(id)dataTask completionHandler:(id)handler;
-(void)setDelegate:(id)delegate forTask:(id)task;
-(id)delegateForTask:(id)task;
-(void)taskDidSuspend:(id)task;
-(void)taskDidResume:(id)task;
-(void)dealloc;
-(id)initWithSessionConfiguration:(id)sessionConfiguration;
-(id)init;
@end

@interface AFImageCache : XXUnknownSuperclass <AFImageCache> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)cacheImage:(id)image forRequest:(id)request;
-(id)cachedImageForRequest:(id)request;
@end

@interface A2BlockInvocation : XXUnknownSuperclass {
	NSMethodSignature* _methodSignature;
	id _block;
	NSMethodSignature* _blockSignature;
}
@property(readonly, copy, nonatomic) id block;
@property(readonly, assign, nonatomic) NSMethodSignature* methodSignature;
@property(readonly, assign, nonatomic) NSMethodSignature* blockSignature;
+(id)methodSignatureForBlock:(id)block;
+(id)methodSignatureForBlockSignature:(id)blockSignature;
+(id)typeSignatureForBlock:(id)block;
+(BOOL)isSignature:(id)signature compatibleWithSignature:(id)signature2;
-(void).cxx_destruct;
-(BOOL)invokeWithInvocation:(id)invocation returnValue:(out id*)value;
-(void)invokeWithInvocation:(id)invocation;
-(BOOL)invokeWithInvocation:(id)invocation returnValue:(out id*)value setOnInvocation:(BOOL)invocation3;
-(id)initWithBlock:(id)block methodSignature:(id)signature;
-(id)initWithBlock:(id)block;
-(id)initWithBlock:(id)block methodSignature:(id)signature blockSignature:(id)signature3;
@end

@interface A2DynamicDelegate : XXUnknownSuperclass {
	Protocol* _protocol;
	NSMutableDictionary* _handlers;
	id _realDelegate;
	A2DynamicClassDelegate* _classProxy;
	NSMapTable* _invocationsBySelectors;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* handlers;
@property(readonly, assign, nonatomic) Protocol* protocol;
@property(assign, nonatomic) __weak id realDelegate;
@property(readonly, assign, nonatomic) NSMapTable* invocationsBySelectors;
@property(retain, nonatomic) A2DynamicClassDelegate* classProxy;
+(id)description;
-(void).cxx_destruct;
-(void)removeBlockImplementationForClassMethod:(SEL)classMethod;
-(void)implementClassMethod:(SEL)method withBlock:(id)block;
-(id)blockImplementationForClassMethod:(SEL)classMethod;
-(void)removeBlockImplementationForMethod:(SEL)method;
-(void)implementMethod:(SEL)method withBlock:(id)block;
-(id)blockImplementationForMethod:(SEL)method;
-(void)doesNotRecognizeSelector:(SEL)selector;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(void)forwardInvocation:(id)invocation;
-(id)description;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)initWithProtocol:(id)protocol;
-(Class)class;
-(BOOL)isClassProxy;
@end

@interface A2DynamicClassDelegate : A2DynamicDelegate {
	Class _proxiedClass;
}
@property(retain, nonatomic) Class proxiedClass;
-(void).cxx_destruct;
-(void)removeBlockImplementationForClassMethod:(SEL)classMethod;
-(void)implementClassMethod:(SEL)method withBlock:(id)block;
-(id)blockImplementationForClassMethod:(SEL)classMethod;
-(void)forwardInvocation:(id)invocation;
-(unsigned)hash;
-(id)description;
-(id)methodSignatureForSelector:(SEL)selector;
-(Class)class;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)isEqual:(id)equal;
-(BOOL)isClassProxy;
@end

@interface PodsDummy_BlocksKit : XXUnknownSuperclass {
}
@end

@interface A2DynamicMFMailComposeViewControllerDelegate : A2DynamicDelegate <MFMailComposeViewControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@interface A2DynamicMFMessageComposeViewControllerDelegate : A2DynamicDelegate <MFMessageComposeViewControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@interface A2DynamicNSCacheDelegate : A2DynamicDelegate <NSCacheDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)cache:(id)cache willEvictObject:(id)object;
@end

@interface BKInvocationGrabber : XXUnknownSuperclass {
	id _target;
	NSInvocation* _invocation;
}
@property(retain, nonatomic) NSInvocation* invocation;
@property(retain, nonatomic) id target;
+(id)grabberWithTarget:(id)target;
-(void).cxx_destruct;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
@end

@interface _BKWeakAssociatedObject : XXUnknownSuperclass {
	id _value;
}
@property(assign, nonatomic) __weak id value;
-(void).cxx_destruct;
@end

@interface _BKObserver : XXUnknownSuperclass {
	BOOL _isObserving;
	id _observee;
	NSMutableArray* _keyPaths;
	id _task;
	int _context;
}
@property(readonly, assign, nonatomic) int context;
@property(readonly, assign, nonatomic) id task;
@property(readonly, assign, nonatomic) NSMutableArray* keyPaths;
@property(readonly, assign, nonatomic) id observee;
-(void).cxx_destruct;
-(void)dealloc;
-(void)stopObserving;
-(void)_stopObservingLocked;
-(void)stopObservingKeyPath:(id)path;
-(void)startObservingWithOptions:(unsigned)options;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)initWithObservee:(id)observee keyPaths:(id)paths context:(int)context task:(id)task;
@end

@interface A2DynamicBKURLConnectionInformalDelegate : A2DynamicDelegate <BKURLConnectionInformalDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
@end

@interface A2DynamicNSURLConnectionDelegate : A2DynamicDelegate <NSURLConnectionDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(BOOL)conformsToProtocol:(id)protocol;
@end

@interface A2DynamicUIActionSheetDelegate : A2DynamicDelegate <UIActionSheetDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@interface A2DynamicUIAlertViewDelegate : A2DynamicDelegate <UIAlertViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
@end

@interface BKControlWrapper : XXUnknownSuperclass <NSCopying> {
	unsigned _controlEvents;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(assign, nonatomic) unsigned controlEvents;
-(void).cxx_destruct;
-(void)invoke:(id)invoke;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithHandler:(id)handler forControlEvents:(unsigned)controlEvents;
@end

@interface A2DynamicUIImagePickerControllerDelegate : A2DynamicDelegate <UIImagePickerControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
@end

@interface A2DynamicUIPopoverControllerDelegate : A2DynamicDelegate <UIPopoverControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
@end

@interface A2DynamicUITextFieldDelegate : A2DynamicDelegate {
}
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@interface A2DynamicUIWebViewDelegate : A2DynamicDelegate <UIWebViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@interface BFAppLink : XXUnknownSuperclass {
	BOOL _backToReferrer;
	NSURL* _sourceURL;
	NSArray* _targets;
	NSURL* _webURL;
}
@property(assign, nonatomic, getter=isBackToReferrer) BOOL backToReferrer;
@property(retain, nonatomic) NSURL* webURL;
@property(copy, nonatomic) NSArray* targets;
@property(retain, nonatomic) NSURL* sourceURL;
+(id)appLinkWithSourceURL:(id)sourceURL targets:(id)targets webURL:(id)url;
+(id)appLinkWithSourceURL:(id)sourceURL targets:(id)targets webURL:(id)url isBackToReferrer:(BOOL)referrer;
-(void).cxx_destruct;
-(id)initWithIsBackToReferrer:(BOOL)referrer;
@end

@interface BFAppLinkNavigation : XXUnknownSuperclass {
	NSDictionary* _extras;
	NSDictionary* _appLinkData;
	BFAppLink* _appLink;
}
@property(retain, nonatomic) BFAppLink* appLink;
@property(copy, nonatomic) NSDictionary* appLinkData;
@property(copy, nonatomic) NSDictionary* extras;
+(void)setDefaultResolver:(id)resolver;
+(id)defaultResolver;
+(int)navigateToAppLink:(id)appLink error:(id*)error;
+(id)navigateToURLInBackground:(id)background resolver:(id)resolver;
+(id)navigateToURLInBackground:(id)background;
+(id)resolveAppLinkInBackground:(id)background;
+(id)resolveAppLinkInBackground:(id)background resolver:(id)resolver;
+(id)navigationWithAppLink:(id)appLink extras:(id)extras appLinkData:(id)data;
-(void).cxx_destruct;
-(void)postAppLinkNavigateEventNotificationWithTargetURL:(id)targetURL error:(id)error type:(int)type;
-(int)navigate:(id*)navigate;
-(id)appLinkURLWithTargetURL:(id)targetURL error:(id*)error;
-(id)stringByEscapingQueryString:(id)string;
@end

@interface BFAppLinkReturnToRefererController : XXUnknownSuperclass <BFAppLinkReturnToRefererViewDelegate> {
	UINavigationController* _navigationController;
	BFAppLinkReturnToRefererView* _view;
	id<BFAppLinkReturnToRefererControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) BFAppLinkReturnToRefererView* view;
@property(assign, nonatomic) __weak id<BFAppLinkReturnToRefererControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)openRefererAppLink:(id)link;
-(void)closeViewAnimated:(BOOL)animated explicitlyClosed:(BOOL)closed;
-(void)closeViewAnimated:(BOOL)animated;
-(void)updateNavigationBarY:(float)y;
-(void)moveNavigationBar;
-(void)orientationDidChange:(id)orientation;
-(void)statusBarFrameDidChange:(id)statusBarFrame;
-(void)statusBarFrameWillChange:(id)statusBarFrame;
-(void)returnToRefererViewDidTapInsideLink:(id)returnToRefererView link:(id)link;
-(void)returnToRefererViewDidTapInsideCloseButton:(id)returnToRefererView;
-(void)removeFromNavController;
-(void)showViewForRefererURL:(id)refererURL;
-(void)showViewForRefererAppLink:(id)refererAppLink;
-(void)dealloc;
-(id)initForDisplayAboveNavController:(id)displayAboveNavController;
-(id)init;
@end

@interface BFAppLinkReturnToRefererView : XXUnknownSuperclass {
	BOOL _explicitlyHidden;
	BOOL _closed;
	id<BFAppLinkReturnToRefererViewDelegate> _delegate;
	UIColor* _textColor;
	BFAppLink* _refererAppLink;
	unsigned _includeStatusBarInSize;
	UILabel* _labelView;
	UIButton* _closeButton;
	UITapGestureRecognizer* _insideTapGestureRecognizer;
	UIView* _viewToMoveWithNavController;
}
@property(assign, nonatomic) BOOL closed;
@property(assign, nonatomic) unsigned includeStatusBarInSize;
@property(retain, nonatomic) BFAppLink* refererAppLink;
@property(retain, nonatomic) UIColor* textColor;
@property(assign, nonatomic) __weak id<BFAppLinkReturnToRefererViewDelegate> delegate;
@property(retain, nonatomic) UIView* viewToMoveWithNavController;
@property(retain, nonatomic) UITapGestureRecognizer* insideTapGestureRecognizer;
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UILabel* labelView;
-(void).cxx_destruct;
-(void)updateHidden;
-(void)onTapInside:(id)inside;
-(void)closeButtonTapped:(id)tapped;
-(BOOL)hasRefererData;
-(id)localizedLabelForReferer:(id)referer;
-(id)drawCloseButtonImageWithColor:(id)color;
-(void)updateColors;
-(void)updateLabelText;
-(void)setHidden:(BOOL)hidden;
-(float)statusBarHeight;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(CGSize)intrinsicContentSize;
-(void)initViews;
-(void)commonInit;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface BFAppLinkTarget : XXUnknownSuperclass {
	NSURL* _URL;
	NSString* _appStoreId;
	NSString* _appName;
}
@property(copy, nonatomic) NSString* appName;
@property(copy, nonatomic) NSString* appStoreId;
@property(retain, nonatomic) NSURL* URL;
+(id)appLinkTargetWithURL:(id)url appStoreId:(id)anId appName:(id)name;
-(void).cxx_destruct;
@end

@interface BFCancellationToken : XXUnknownSuperclass {
	BOOL _cancellationRequested;
	BOOL _disposed;
	NSMutableArray* _registrations;
	NSObject* _lock;
}
@property(assign, nonatomic) BOOL disposed;
@property(retain, nonatomic) NSObject* lock;
@property(retain, nonatomic) NSMutableArray* registrations;
@property(assign, getter=isCancellationRequested) BOOL cancellationRequested;
-(void).cxx_destruct;
-(void)throwIfDisposed;
-(void)dispose;
-(void)cancelAfterDelay:(int)delay;
-(void)cancelPrivate;
-(void)unregisterRegistration:(id)registration;
-(id)registerCancellationObserverWithBlock:(id)block;
-(void)notifyCancellation:(id)cancellation;
-(void)cancel;
-(id)init;
@end

@interface BFCancellationTokenRegistration : XXUnknownSuperclass {
	BOOL _disposed;
	BFCancellationToken* _token;
	id _cancellationObserverBlock;
	NSObject* _lock;
}
@property(assign, nonatomic) BOOL disposed;
@property(retain, nonatomic) NSObject* lock;
@property(copy, nonatomic) id cancellationObserverBlock;
@property(assign, nonatomic) __weak BFCancellationToken* token;
+(id)registrationWithToken:(id)token delegate:(id)delegate;
-(void).cxx_destruct;
-(void)throwIfDisposed;
-(void)notifyDelegate;
-(void)dispose;
-(id)init;
@end

@interface BFCancellationTokenSource : XXUnknownSuperclass {
	BFCancellationToken* _token;
}
@property(readonly, assign, nonatomic, getter=isCancellationRequested) BOOL cancellationRequested;
@property(readonly, assign, nonatomic) BFCancellationToken* token;
+(id)cancellationTokenSource;
-(void).cxx_destruct;
-(void)dispose;
-(void)cancelAfterDelay:(int)delay;
-(void)cancel;
-(id)init;
@end

@interface BFExecutor : XXUnknownSuperclass {
	id _block;
}
@property(copy, nonatomic) id block;
+(id)executorWithOperationQueue:(id)operationQueue;
+(id)executorWithDispatchQueue:(id)dispatchQueue;
+(id)executorWithBlock:(id)block;
+(id)mainThreadExecutor;
+(id)immediateExecutor;
+(id)defaultExecutor;
-(void).cxx_destruct;
-(void)execute:(id)execute;
-(id)initWithBlock:(id)block;
@end

@interface BFMeasurementEvent : XXUnknownSuperclass {
	NSString* _name;
	NSDictionary* _args;
}
+(void)postNotificationForEventName:(id)eventName args:(id)args;
-(void).cxx_destruct;
-(id)initEventWithName:(id)name args:(id)args;
-(void)postNotification;
@end

@interface BFTask : XXUnknownSuperclass {
	id _result;
	NSError* _error;
	NSException* _exception;
	BOOL _cancelled;
	BOOL _faulted;
	BOOL _completed;
	NSObject* _lock;
	NSCondition* _condition;
	NSMutableArray* _callbacks;
}
@property(readonly, assign, nonatomic) NSException* exception;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) id result;
@property(retain, nonatomic) NSMutableArray* callbacks;
@property(retain, nonatomic) NSCondition* condition;
@property(retain, nonatomic) NSObject* lock;
@property(assign, getter=isCompleted) BOOL completed;
@property(assign, getter=isFaulted) BOOL faulted;
@property(assign, getter=isCancelled) BOOL cancelled;
+(id)taskFromExecutor:(id)executor withBlock:(id)block;
+(id)taskWithDelay:(int)delay cancellationToken:(id)token;
+(id)taskWithDelay:(int)delay;
+(id)taskForCompletionOfAllTasksWithResults:(id)results;
+(id)taskForCompletionOfAllTasks:(id)allTasks;
+(id)cancelledTask;
+(id)taskWithException:(id)exception;
+(id)taskWithError:(id)error;
+(id)taskWithResult:(id)result;
-(void).cxx_destruct;
-(id)description;
-(void)waitUntilFinished;
-(void)warnOperationOnMainThread;
-(id)continueWithSuccessBlock:(id)successBlock cancellationToken:(id)token;
-(id)continueWithSuccessBlock:(id)successBlock;
-(id)continueWithExecutor:(id)executor successBlock:(id)block cancellationToken:(id)token;
-(id)continueWithExecutor:(id)executor withSuccessBlock:(id)successBlock;
-(id)continueWithBlock:(id)block cancellationToken:(id)token;
-(id)continueWithBlock:(id)block;
-(id)continueWithExecutor:(id)executor block:(id)block cancellationToken:(id)token;
-(id)continueWithExecutor:(id)executor withBlock:(id)block;
-(void)runContinuations;
-(void)setCompleted;
-(BOOL)trySetCancelled;
-(BOOL)trySetException:(id)exception;
-(BOOL)trySetError:(id)error;
-(BOOL)trySetResult:(id)result;
-(id)initCancelled;
-(id)initWithException:(id)exception;
-(id)initWithError:(id)error;
-(id)initWithResult:(id)result;
-(id)init;
@end

@interface BFTaskCompletionSource : XXUnknownSuperclass {
	BFTask* _task;
}
@property(retain, nonatomic) BFTask* task;
+(id)taskCompletionSource;
-(void).cxx_destruct;
-(BOOL)trySetCancelled;
-(BOOL)trySetException:(id)exception;
-(BOOL)trySetError:(id)error;
-(BOOL)trySetResult:(id)result;
-(void)cancel;
-(void)setException:(id)exception;
-(void)setError:(id)error;
-(void)setResult:(id)result;
-(id)init;
@end

@interface BFURL : XXUnknownSuperclass {
	NSURL* _targetURL;
	NSDictionary* _targetQueryParameters;
	NSDictionary* _appLinkData;
	NSDictionary* _appLinkExtras;
	BFAppLink* _appLinkReferer;
	NSURL* _inputURL;
	NSDictionary* _inputQueryParameters;
}
@property(readonly, assign, nonatomic) NSDictionary* inputQueryParameters;
@property(readonly, assign, nonatomic) NSURL* inputURL;
@property(readonly, assign, nonatomic) BFAppLink* appLinkReferer;
@property(readonly, assign, nonatomic) NSDictionary* appLinkExtras;
@property(readonly, assign, nonatomic) NSDictionary* appLinkData;
@property(readonly, assign, nonatomic) NSDictionary* targetQueryParameters;
@property(readonly, assign, nonatomic) NSURL* targetURL;
+(id)queryParametersForURL:(id)url;
+(id)decodeURLString:(id)string;
+(id)URLForRenderBackToReferrerBarURL:(id)referrerBarURL;
+(id)URLWithInboundURL:(id)inboundURL sourceApplication:(id)application;
+(id)URLWithURL:(id)url;
-(void).cxx_destruct;
-(id)initWithURL:(id)url forOpenInboundURL:(BOOL)openInboundURL sourceApplication:(id)application forRenderBackToReferrerBar:(BOOL)referrerBar;
@end

@interface BFWebViewAppLinkResolverWebViewDelegate : XXUnknownSuperclass <UIWebViewDelegate> {
	BOOL _hasLoaded;
	id _didFinishLoad;
	id _didFailLoadWithError;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL hasLoaded;
@property(copy, nonatomic) id didFailLoadWithError;
@property(copy, nonatomic) id didFinishLoad;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidStartLoad:(id)webView;
-(void)webViewDidFinishLoad:(id)webView;
@end

@interface BFWebViewAppLinkResolver : XXUnknownSuperclass <BFAppLinkResolving> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)sharedInstance;
-(id)appLinkFromALData:(id)aldata destination:(id)destination;
-(id)getALDataFromLoadedPage:(id)loadedPage;
-(id)parseALData:(id)data;
-(id)appLinkFromURLInBackground:(id)background;
-(id)followRedirects:(id)redirects;
@end

@interface PodsDummy_Bolts : XXUnknownSuperclass {
}
@end

@interface Bolts : XXUnknownSuperclass {
}
+(id)version;
@end

@interface CCHLinkGestureRecognizer : XXUnknownSuperclass {
	float _allowableMovement;
	int _result;
	NSTimer* _timer;
	double _minimumPressDuration;
	CGPoint _initialPoint;
}
@property(assign, nonatomic) float allowableMovement;
@property(assign, nonatomic) double minimumPressDuration;
@property(retain, nonatomic) NSTimer* timer;
@property(assign, nonatomic) CGPoint initialPoint;
@property(assign, nonatomic) int result;
-(void).cxx_destruct;
-(BOOL)touchIsCloseToInitialPoint:(id)initialPoint;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)longPressed:(id)pressed;
-(void)reset;
-(void)setUp;
-(id)initWithTarget:(id)target action:(SEL)action;
-(id)init;
@end

@interface PodsDummy_CCHLinkTextView : XXUnknownSuperclass {
}
@end

@interface CCHLinkTextView : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	id<CCHLinkTextViewDelegate> _linkDelegate;
	NSDictionary* _linkTextTouchAttributes;
	CCHLinkGestureRecognizer* _linkGestureRecognizer;
	float _linkCornerRadius;
	NSArray* _rangeValuesForTouchDown;
	UIEdgeInsets _tapAreaInsets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float linkCornerRadius;
@property(assign, nonatomic) UIEdgeInsets tapAreaInsets;
@property(assign, nonatomic) float allowableMovement;
@property(assign, nonatomic) double minimumPressDuration;
@property(copy, nonatomic) NSDictionary* linkTextTouchAttributes;
@property(assign, nonatomic) __weak id<CCHLinkTextViewDelegate> linkDelegate;
@property(retain, nonatomic) CCHLinkGestureRecognizer* linkGestureRecognizer;
@property(copy, nonatomic) NSArray* rangeValuesForTouchDown;
-(void).cxx_destruct;
-(void)didLongPressAtRangeValues:(id)rangeValues;
-(void)didTapAtRangeValues:(id)rangeValues;
-(void)didCancelTouchDownAtRangeValues:(id)rangeValues;
-(id)didTouchDownAtLocation:(CGPoint)location;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)linkAction:(id)action;
-(void)drawRoundedCornerForRange:(NSRange)range;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(BOOL)enumerateLinkRangesContainingLocation:(CGPoint)location usingBlock:(id)block;
-(void)enumerateViewRectsForRanges:(id)ranges usingBlock:(id)block;
-(void)setAttributedText:(id)text;
-(void)setLinkTextAttributes:(id)attributes;
-(id)debugQuickLookObject;
-(void)setEditable:(BOOL)editable;
-(void)setUp;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PodsDummy_CocoaLumberjack : XXUnknownSuperclass {
}
@end

@interface DDAbstractDatabaseLogger : DDAbstractLogger {
	unsigned _saveThreshold;
	double _saveInterval;
	double _maxAge;
	double _deleteInterval;
	BOOL _deleteOnEverySave;
	BOOL _saveTimerSuspended;
	unsigned _unsavedCount;
	unsigned long long _unsavedTime;
	dispatch_source_s* _saveTimer;
	unsigned long long _lastDeleteTime;
	dispatch_source_s* _deleteTimer;
}
@property(assign) BOOL deleteOnEverySave;
@property(assign) double deleteInterval;
@property(assign) double maxAge;
@property(assign) double saveInterval;
@property(assign) unsigned saveThreshold;
-(void)flush;
-(void)logMessage:(id)message;
-(void)willRemoveLogger;
-(void)didAddLogger;
-(void)deleteOldLogEntries;
-(void)savePendingLogEntries;
-(void)createAndStartDeleteTimer;
-(void)updateDeleteTimer;
-(void)destroyDeleteTimer;
-(void)createSuspendedSaveTimer;
-(void)updateAndResumeSaveTimer;
-(void)destroySaveTimer;
-(void)performDelete;
-(void)performSaveAndSuspendSaveTimer;
-(void)db_saveAndDelete;
-(void)db_delete;
-(void)db_save;
-(BOOL)db_log:(id)log;
-(void)dealloc;
-(id)init;
@end

@interface DDASLLogCapture : XXUnknownSuperclass {
}
+(void)captureAslLogs;
+(void)aslMessageReceived:(asl_object_s*)received;
+(void)configureAslQuery:(asl_object_s*)query;
+(void)setCaptureLevel:(unsigned)level;
+(unsigned)captureLevel;
+(void)stop;
+(void)start;
+(void)initialize;
@end

@interface DDASLLogger : DDAbstractLogger <DDLogger> {
	asl_object_s* _client;
}
@property(readonly, assign, nonatomic) NSString* loggerName;
@property(readonly, assign, nonatomic) dispatch_queue_s* loggerQueue;
@property(retain, nonatomic) id<DDLogFormatter> logFormatter;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)sharedInstance;
-(void)logMessage:(id)message;
-(id)init;
@end

@interface DDContextWhitelistFilterLogFormatter : XXUnknownSuperclass <DDLogFormatter> {
	DDLoggingContextSet* _contextSet;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSArray* whitelist;
-(void).cxx_destruct;
-(id)formatLogMessage:(id)message;
-(BOOL)isOnWhitelist:(unsigned)whitelist;
-(void)removeFromWhitelist:(unsigned)whitelist;
-(void)addToWhitelist:(unsigned)whitelist;
-(id)init;
@end

@interface DDContextBlacklistFilterLogFormatter : XXUnknownSuperclass <DDLogFormatter> {
	DDLoggingContextSet* _contextSet;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSArray* blacklist;
-(void).cxx_destruct;
-(id)formatLogMessage:(id)message;
-(BOOL)isOnBlacklist:(unsigned)blacklist;
-(void)removeFromBlacklist:(unsigned)blacklist;
-(void)addToBlacklist:(unsigned)blacklist;
-(id)init;
@end

@interface DDLoggingContextSet : XXUnknownSuperclass {
	int _lock;
	NSMutableSet* _set;
}
@property(readonly, copy) NSArray* currentSet;
-(void).cxx_destruct;
-(BOOL)isInSet:(unsigned)set;
-(void)removeFromSet:(unsigned)set;
-(void)addToSet:(unsigned)set;
-(id)init;
@end

@interface DDDispatchQueueLogFormatter : XXUnknownSuperclass <DDLogFormatter> {
	unsigned _mode;
	NSString* _dateFormatterKey;
	int _atomicLoggerCount;
	NSDateFormatter* _threadUnsafeDateFormatter;
	int _lock;
	unsigned _minQueueLength;
	unsigned _maxQueueLength;
	NSMutableDictionary* _replacements;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign) unsigned maxQueueLength;
@property(assign) unsigned minQueueLength;
-(void).cxx_destruct;
-(void)willRemoveFromLogger:(id)logger;
-(void)didAddToLogger:(id)logger;
-(id)formatLogMessage:(id)message;
-(id)queueThreadLabelForLogMessage:(id)logMessage;
-(id)stringFromDate:(id)date;
-(void)configureDateFormatter:(id)formatter;
-(id)createDateFormatter;
-(void)setReplacementString:(id)string forQueueLabel:(id)queueLabel;
-(id)replacementStringForQueueLabel:(id)queueLabel;
-(id)initWithMode:(unsigned)mode;
-(id)init;
@end

@interface DDLogFileManagerDefault : XXUnknownSuperclass <DDLogFileManager> {
	unsigned _maximumNumberOfLogFiles;
	unsigned long long _logFilesDiskQuota;
	NSString* _logsDirectory;
	NSString* _defaultFileProtectionLevel;
}
@property(assign) unsigned long long logFilesDiskQuota;
@property(assign) unsigned maximumNumberOfLogFiles;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* newLogFileName;
+(BOOL)automaticallyNotifiesObserversForKey:(id)key;
-(void).cxx_destruct;
-(id)applicationName;
-(id)createNewLogFile;
-(id)sortedLogFileInfos;
-(id)sortedLogFileNames;
-(id)sortedLogFilePaths;
-(id)unsortedLogFileInfos;
-(id)unsortedLogFileNames;
-(id)unsortedLogFilePaths;
-(id)logFileDateFormatter;
-(BOOL)isLogFile:(id)file;
-(id)logsDirectory;
-(id)defaultLogsDirectory;
-(void)deleteOldLogFiles;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)initWithLogsDirectory:(id)logsDirectory defaultFileProtectionLevel:(id)level;
-(id)initWithLogsDirectory:(id)logsDirectory;
-(id)init;
@end

@interface DDLogFileFormatterDefault : XXUnknownSuperclass <DDLogFormatter> {
	NSDateFormatter* _dateFormatter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(id)formatLogMessage:(id)message;
-(id)initWithDateFormatter:(id)dateFormatter;
-(id)init;
@end

@interface DDFileLogger : DDAbstractLogger <DDLogger> {
	id<DDLogFileManager> _logFileManager;
	DDLogFileInfo* _currentLogFileInfo;
	NSFileHandle* _currentLogFileHandle;
	dispatch_source_s* _currentLogFileVnode;
	dispatch_source_s* _rollingTimer;
	unsigned long long _maximumFileSize;
	double _rollingFrequency;
	BOOL _doNotReuseLogFiles;
	BOOL _automaticallyAppendNewlineForCustomFormatters;
	id<DDLogFileManager> logFileManager;
}
@property(readonly, assign, nonatomic) NSString* loggerName;
@property(readonly, assign, nonatomic) dispatch_queue_s* loggerQueue;
@property(retain, nonatomic) id<DDLogFormatter> logFormatter;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL automaticallyAppendNewlineForCustomFormatters;
@property(readonly, assign, nonatomic) id<DDLogFileManager> logFileManager;
@property(assign) BOOL doNotReuseLogFiles;
@property(assign) double rollingFrequency;
@property(assign) unsigned long long maximumFileSize;
-(void).cxx_destruct;
-(void)willRemoveLogger;
-(void)logMessage:(id)message;
-(id)currentLogFileHandle;
-(id)currentLogFileInfo;
-(void)maybeRollLogFileDueToSize;
-(void)maybeRollLogFileDueToAge;
-(void)rollLogFileNow;
-(void)rollLogFileWithCompletionBlock:(id)completionBlock;
-(void)rollLogFile;
-(void)scheduleTimerToRollLogFileDueToAge;
-(void)dealloc;
-(id)initWithLogFileManager:(id)logFileManager;
-(id)init;
@end

@interface DDLogFileInfo : XXUnknownSuperclass {
	NSString* _filePath;
	NSString* _fileName;
	NSDictionary* _fileAttributes;
	NSDate* _creationDate;
	NSDate* _modificationDate;
	unsigned long long _fileSize;
	NSString* filePath;
}
@property(assign, nonatomic) BOOL isArchived;
@property(readonly, assign, nonatomic) double age;
@property(readonly, assign, nonatomic) unsigned long long fileSize;
@property(readonly, assign, nonatomic) NSDate* modificationDate;
@property(readonly, assign, nonatomic) NSDate* creationDate;
@property(readonly, assign, nonatomic) NSDictionary* fileAttributes;
@property(readonly, assign, nonatomic) NSString* fileName;
@property(readonly, assign, nonatomic) NSString* filePath;
+(id)logFileWithPath:(id)path;
-(void).cxx_destruct;
-(int)reverseCompareByModificationDate:(id)date;
-(int)reverseCompareByCreationDate:(id)date;
-(BOOL)isEqual:(id)equal;
-(void)removeExtendedAttributeWithName:(id)name;
-(void)addExtendedAttributeWithName:(id)name;
-(BOOL)hasExtendedAttributeWithName:(id)name;
-(void)renameFile:(id)file;
-(void)reset;
-(id)description;
-(id)initWithFilePath:(id)filePath;
@end

@interface DDLog : XXUnknownSuperclass {
}
+(void)lt_flush;
+(void)lt_log:(id)log;
+(id)lt_allLoggers;
+(void)lt_removeAllLoggers;
+(void)lt_removeLogger:(id)logger;
+(void)lt_addLogger:(id)logger level:(unsigned)level;
+(void)setLevel:(unsigned)level forClassWithName:(id)name;
+(void)setLevel:(unsigned)level forClass:(Class)aClass;
+(unsigned)levelForClassWithName:(id)name;
+(unsigned)levelForClass:(Class)aClass;
+(id)registeredClassNames;
+(id)registeredClasses;
+(BOOL)isRegisteredClass:(Class)aClass;
+(void)flushLog;
+(void)log:(BOOL)log message:(id)message;
+(void)log:(BOOL)log message:(id)message level:(unsigned)level flag:(unsigned)flag context:(int)context file:(const char*)file function:(const char*)function line:(unsigned)line tag:(id)tag;
+(void)log:(BOOL)log level:(unsigned)level flag:(unsigned)flag context:(int)context file:(const char*)file function:(const char*)function line:(unsigned)line tag:(id)tag format:(id)format args:(void*)args;
+(void)log:(BOOL)log level:(unsigned)level flag:(unsigned)flag context:(int)context file:(const char*)file function:(const char*)function line:(unsigned)line tag:(id)tag format:(id)format;
+(void)queueLogMessage:(id)message asynchronously:(BOOL)asynchronously;
+(id)allLoggers;
+(void)removeAllLoggers;
+(void)removeLogger:(id)logger;
+(void)addLogger:(id)logger withLevel:(unsigned)level;
+(void)addLogger:(id)logger;
+(void)applicationWillTerminate:(id)application;
+(dispatch_queue_s*)loggingQueue;
+(void)initialize;
@end

@interface DDLoggerNode : XXUnknownSuperclass {
	id<DDLogger> _logger;
	unsigned _level;
	dispatch_queue_s* _loggerQueue;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* loggerQueue;
@property(readonly, assign, nonatomic) unsigned level;
@property(readonly, assign, nonatomic) id<DDLogger> logger;
+(id)nodeWithLogger:(id)logger loggerQueue:(dispatch_queue_s*)queue level:(unsigned)level;
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithLogger:(id)logger loggerQueue:(dispatch_queue_s*)queue level:(unsigned)level;
@end

@interface DDLogMessage : XXUnknownSuperclass <NSCopying> {
	NSString* _message;
	unsigned _level;
	unsigned _flag;
	int _context;
	NSString* _file;
	NSString* _fileName;
	NSString* _function;
	unsigned _line;
	id _tag;
	int _options;
	NSDate* _timestamp;
	NSString* _threadID;
	NSString* _threadName;
	NSString* _queueLabel;
}
@property(readonly, assign, nonatomic) NSString* queueLabel;
@property(readonly, assign, nonatomic) NSString* threadName;
@property(readonly, assign, nonatomic) NSString* threadID;
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(readonly, assign, nonatomic) int options;
@property(readonly, assign, nonatomic) id tag;
@property(readonly, assign, nonatomic) unsigned line;
@property(readonly, assign, nonatomic) NSString* function;
@property(readonly, assign, nonatomic) NSString* fileName;
@property(readonly, assign, nonatomic) NSString* file;
@property(readonly, assign, nonatomic) int context;
@property(readonly, assign, nonatomic) unsigned flag;
@property(readonly, assign, nonatomic) unsigned level;
@property(readonly, assign, nonatomic) NSString* message;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithMessage:(id)message level:(unsigned)level flag:(unsigned)flag context:(int)context file:(id)file function:(id)function line:(unsigned)line tag:(id)tag options:(int)options timestamp:(id)timestamp;
@end

@interface DDAbstractLogger : XXUnknownSuperclass <DDLogger> {
	id<DDLogFormatter> _logFormatter;
	dispatch_queue_s* _loggerQueue;
}
@property(readonly, assign, nonatomic) NSString* loggerName;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isOnInternalLoggerQueue) BOOL onInternalLoggerQueue;
@property(readonly, assign, nonatomic, getter=isOnGlobalLoggingQueue) BOOL onGlobalLoggingQueue;
@property(assign, nonatomic) dispatch_queue_s* loggerQueue;
@property(retain, nonatomic) id<DDLogFormatter> logFormatter;
-(void).cxx_destruct;
-(void)logMessage:(id)message;
-(void)dealloc;
-(id)init;
@end

@interface DDMultiFormatter : XXUnknownSuperclass <DDLogFormatter> {
	dispatch_queue_s* _queue;
	NSMutableArray* _formatters;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign) NSArray* formatters;
-(void).cxx_destruct;
-(BOOL)isFormattingWithFormatter:(id)formatter;
-(void)removeAllFormatters;
-(void)removeFormatter:(id)formatter;
-(void)addFormatter:(id)formatter;
-(id)logMessageForLine:(id)line originalMessage:(id)message;
-(id)formatLogMessage:(id)message;
-(void)dealloc;
-(id)init;
@end

@interface DDTTYLogger : DDAbstractLogger <DDLogger> {
	unsigned _calendarUnitFlags;
	NSString* _appName;
	char* _app;
	unsigned long _appLen;
	NSString* _processID;
	char* _pid;
	unsigned long _pidLen;
	BOOL _colorsEnabled;
	NSMutableArray* _colorProfilesArray;
	NSMutableDictionary* _colorProfilesDict;
	BOOL _automaticallyAppendNewlineForCustomFormatters;
}
@property(readonly, assign, nonatomic) NSString* loggerName;
@property(readonly, assign, nonatomic) dispatch_queue_s* loggerQueue;
@property(retain, nonatomic) id<DDLogFormatter> logFormatter;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL automaticallyAppendNewlineForCustomFormatters;
@property(assign) BOOL colorsEnabled;
+(id)sharedInstance;
+(unsigned)codeIndexForColor:(UIColor*)color;
+(void)getRed:(float*)red green:(float*)green blue:(float*)blue fromColor:(UIColor*)color;
+(void)initialize_colors_256;
+(void)initialize_colors_16;
-(void).cxx_destruct;
-(void)logMessage:(id)message;
-(void)clearAllColors;
-(void)clearColorsForAllTags;
-(void)clearColorsForAllFlags;
-(void)clearColorsForTag:(id)tag;
-(void)clearColorsForFlag:(unsigned)flag context:(int)context;
-(void)clearColorsForFlag:(unsigned)flag;
-(void)setForegroundColor:(UIColor*)color backgroundColor:(UIColor*)color2 forTag:(id)tag;
-(void)setForegroundColor:(UIColor*)color backgroundColor:(UIColor*)color2 forFlag:(unsigned)flag context:(int)context;
-(void)setForegroundColor:(UIColor*)color backgroundColor:(UIColor*)color2 forFlag:(unsigned)flag;
-(void)loadDefaultColorProfiles;
-(id)init;
@end

@interface DDTTYLoggerColorProfile : XXUnknownSuperclass {
	unsigned mask;
	int context;
	unsigned char fg_r;
	unsigned char fg_g;
	unsigned char fg_b;
	unsigned char bg_r;
	unsigned char bg_g;
	unsigned char bg_b;
	unsigned fgCodeIndex;
	NSString* fgCodeRaw;
	unsigned bgCodeIndex;
	NSString* bgCodeRaw;
	BOOL fgCode[24];
	unsigned long fgCodeLen;
	BOOL bgCode[24];
	unsigned long bgCodeLen;
	BOOL resetCode[8];
	unsigned long resetCodeLen;
}
-(void).cxx_destruct;
-(id)description;
-(id)initWithForegroundColor:(UIColor*)foregroundColor backgroundColor:(UIColor*)color flag:(unsigned)flag context:(int)context;
@end

@interface PodsDummy_CoreTextLabel : XXUnknownSuperclass {
}
@end

@interface CoreTextLabel : XXUnknownSuperclass {
	BOOL _textIsTruncated;
	NSMutableAttributedString* _string;
	UIFont* _font;
	UIFont* _boldFont;
	UIFont* _italicFont;
	UIFont* _boldItalicFont;
	UIColor* _textColor;
	UIColor* _boldTextColor;
	UIColor* _italicTextColor;
	UIColor* _boldItalicTextColor;
	float _defaultFontSize;
	unsigned _numberOfLines;
	float _lineSpacing;
	unsigned _numberOfColumns;
	float _columnMargin;
	int _textAlignment;
	NSString* _html;
	NSString* _text;
	UIFont* _linkFont;
	UIColor* _linkTextColor;
	CATextLayer* _attributedTextLayer;
	CTFramesetterRef _framesetter;
	NSMutableAttributedString* _framesetterString;
	NSMutableArray* _linkArray;
	NSMutableDictionary* _blocks;
	NSTextCheckingResult* _activeLink;
}
@property(readonly, assign, nonatomic) BOOL textIsTruncated;
@property(assign, nonatomic) int textAlignment;
@property(assign, nonatomic) float lineSpacing;
@property(assign, nonatomic) float columnMargin;
@property(assign, nonatomic) unsigned numberOfColumns;
@property(assign, nonatomic) unsigned numberOfLines;
@property(assign, nonatomic) float defaultFontSize;
@property(retain, nonatomic) UIColor* linkTextColor;
@property(retain, nonatomic) UIColor* boldItalicTextColor;
@property(retain, nonatomic) UIColor* italicTextColor;
@property(retain, nonatomic) UIColor* boldTextColor;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* linkFont;
@property(retain, nonatomic) UIFont* boldItalicFont;
@property(retain, nonatomic) UIFont* italicFont;
@property(retain, nonatomic) UIFont* boldFont;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* html;
@property(retain, nonatomic) NSMutableAttributedString* string;
@property(retain, nonatomic) NSTextCheckingResult* activeLink;
@property(retain, nonatomic) NSMutableDictionary* blocks;
@property(retain, nonatomic) NSMutableArray* linkArray;
@property(retain, nonatomic) NSMutableAttributedString* framesetterString;
@property(assign, nonatomic) CTFramesetterRef framesetter;
@property(retain, nonatomic) CATextLayer* attributedTextLayer;
-(void).cxx_destruct;
-(id)attributedStringByHTML:(id)html parentTag:(id)tag;
-(id)attributedStringByHTML:(id)html;
-(id)defaultAttributedStringAttributes;
-(void)addLink:(id)link atRange:(NSRange)range inString:(id)string;
-(void)addLink:(id)link atRange:(NSRange)range;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)columnFrames;
-(CFArrayRef)columnPaths;
-(void)drawRect:(CGRect)rect;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)sizeToFit;
-(long)characterIndexAtPoint:(CGPoint)point;
-(id)linkAtCharacterIndex:(long)characterIndex;
-(void)setLinkPressedBlock:(id)block;
-(void)dealloc;
-(void)setupInitDefaults;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface PodsDummy_EasyMapping : XXUnknownSuperclass {
}
@end

@interface EKCoreDataImporter : XXUnknownSuperclass {
	NSManagedObjectContext* _context;
	EKManagedObjectMapping* _mapping;
	id _externalRepresentation;
	NSMutableSet* _collectedEntityNames;
	NSSet* _entityNames;
	NSDictionary* _existingEntitiesPrimaryKeys;
	NSMutableDictionary* _fetchedExistingEntities;
}
@property(retain, nonatomic) id externalRepresentation;
@property(retain, nonatomic) EKManagedObjectMapping* mapping;
@property(retain, nonatomic) NSManagedObjectContext* context;
@property(retain, nonatomic) NSMutableDictionary* fetchedExistingEntities;
@property(retain, nonatomic) NSDictionary* existingEntitiesPrimaryKeys;
@property(retain, nonatomic) NSSet* entityNames;
@property(retain, nonatomic) NSMutableSet* collectedEntityNames;
+(id)importerWithMapping:(id)mapping externalRepresentation:(id)representation context:(id)context;
-(void).cxx_destruct;
-(void)cacheObject:(id)object withMapping:(id)mapping;
-(id)existingObjectForRepresentation:(id)representation mapping:(id)mapping context:(id)context;
-(id)cachedObjectsForMapping:(id)mapping;
-(id)fetchExistingObjectsForMapping:(id)mapping;
-(id)primaryKeyValueFromRepresentation:(id)representation usingMapping:(id)mapping context:(id)context;
-(void)inspectRepresentation:(id)representation usingMapping:(id)mapping accumulateInside:(id)inside context:(id)context;
-(void)inspectRepresentationInContext:(id)context;
-(void)collectEntityNamesRecursively:(id)recursively mapping:(id)mapping;
-(void)collectEntityNames;
@end

@interface EKManagedObjectMapper : XXUnknownSuperclass {
	EKCoreDataImporter* _importer;
}
@property(retain, nonatomic) EKCoreDataImporter* importer;
+(id)syncArrayOfObjectsFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping fetchRequest:(id)request inManagedObjectContext:(id)managedObjectContext;
+(id)arrayOfObjectsFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping inManagedObjectContext:(id)managedObjectContext;
+(id)fillObject:(id)object fromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping inManagedObjectContext:(id)managedObjectContext;
+(id)objectFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping inManagedObjectContext:(id)managedObjectContext;
+(id)mapperWithImporter:(id)importer;
-(void).cxx_destruct;
-(id)syncArrayOfObjectsFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping fetchRequest:(id)request;
-(id)arrayOfObjectsFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping;
-(id)fillObject:(id)object fromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping;
-(id)objectFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping;
@end

@interface EKManagedObjectMapping : EKObjectMapping {
	NSMutableDictionary* _propertyMappings;
	NSMutableDictionary* _hasManyMappings;
	NSMutableDictionary* _hasOneMappings;
	NSString* _rootPath;
	NSString* _entityName;
	NSString* _primaryKey;
}
@property(retain, nonatomic) NSString* primaryKey;
@property(readonly, assign, nonatomic) NSString* entityName;
+(id)mappingForEntityName:(id)entityName withRootPath:(id)rootPath withBlock:(id)block;
+(id)mappingForEntityName:(id)entityName withBlock:(id)block;
-(id)rootPath;
-(id)hasOneMappings;
-(id)hasManyMappings;
-(id)propertyMappings;
-(void).cxx_destruct;
-(void)addPropertyMappingToDictionary:(id)dictionary;
-(void)mapKeyPath:(id)path toProperty:(id)property withValueBlock:(id)valueBlock reverseBlock:(id)block;
-(void)mapKeyPath:(id)path toProperty:(id)property withValueBlock:(id)valueBlock;
-(id)primaryKeyPropertyMapping;
-(id)initWithEntityName:(id)entityName withRootPath:(id)rootPath;
-(id)initWithEntityName:(id)entityName;
@end

@interface EKManagedObjectModel : XXUnknownSuperclass <EKManagedMappingProtocol> {
}
+(id)objectMapping;
+(id)objectWithProperties:(id)properties inContext:(id)context;
-(id)serializedObject;
-(id)serializedObjectInContext:(id)context;
@end

@interface EKMapper : XXUnknownSuperclass {
}
+(id)arrayOfObjectsFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping;
+(id)fillObject:(id)object fromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping;
+(id)objectFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping;
+(id)objectFromData:(id)data withMapping:(id)mapping andError:(id*)error;
@end

@interface EKMappingBlocks : XXUnknownSuperclass {
}
+(id)urlReverseMappingBlock;
+(id)urlMappingBlock;
@end

@interface EKObjectMapping : XXUnknownSuperclass {
	BOOL _incrementalData;
	BOOL _respectPropertyFoundationTypes;
	Class _objectClass;
	NSString* _rootPath;
	NSMutableDictionary* _propertyMappings;
	NSMutableDictionary* _hasOneMappings;
	NSMutableDictionary* _hasManyMappings;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* hasManyMappings;
@property(readonly, assign, nonatomic) NSMutableDictionary* hasOneMappings;
@property(readonly, assign, nonatomic) NSMutableDictionary* propertyMappings;
@property(readonly, assign, nonatomic) NSString* rootPath;
@property(assign, nonatomic) Class objectClass;
@property(assign, nonatomic) BOOL respectPropertyFoundationTypes;
@property(assign, nonatomic) BOOL incrementalData;
+(id)mappingForClass:(Class)aClass withRootPath:(id)rootPath withBlock:(id)block;
+(id)mappingForClass:(Class)aClass withBlock:(id)block;
-(void).cxx_destruct;
-(void)addPropertyMappingToDictionary:(id)dictionary;
-(void)hasMany:(Class)many forKeyPath:(id)keyPath forProperty:(id)property withObjectMapping:(id)objectMapping;
-(void)hasMany:(Class)many forKeyPath:(id)keyPath forProperty:(id)property;
-(void)hasMany:(Class)many forKeyPath:(id)keyPath;
-(void)hasOne:(Class)one forDictionaryFromKeyPaths:(id)keyPaths forProperty:(id)property withObjectMapping:(id)objectMapping;
-(void)hasOne:(Class)one forKeyPath:(id)keyPath forProperty:(id)property withObjectMapping:(id)objectMapping;
-(void)hasOne:(Class)one forKeyPath:(id)keyPath forProperty:(id)property;
-(void)hasOne:(Class)one forKeyPath:(id)keyPath;
-(void)mapKeyPath:(id)path toProperty:(id)property withValueBlock:(id)valueBlock reverseBlock:(id)block;
-(void)mapKeyPath:(id)path toProperty:(id)property withValueBlock:(id)valueBlock;
-(void)mapPropertiesFromMappingObject:(id)mappingObject;
-(void)mapPropertiesFromDictionary:(id)dictionary;
-(void)mapPropertiesFromArrayToPascalCase:(id)pascalCase;
-(void)mapPropertiesFromArray:(id)array;
-(void)mapKeyPath:(id)path toProperty:(id)property withDateFormatter:(id)dateFormatter;
-(void)mapKeyPath:(id)path toProperty:(id)property withDateFormat:(id)dateFormat;
-(void)mapKeyPath:(id)path toProperty:(id)property;
-(id)initWithObjectClass:(Class)objectClass withRootPath:(id)rootPath;
-(id)initWithObjectClass:(Class)objectClass;
@end

@interface EKObjectModel : XXUnknownSuperclass <EKMappingProtocol> {
}
+(id)objectMapping;
+(id)objectWithProperties:(id)properties;
-(id)serializedObject;
-(id)initWithProperties:(id)properties;
@end

@interface EKPropertyHelper : XXUnknownSuperclass {
}
+(id)extractRootPathFromExternalRepresentation:(id)externalRepresentation withMapping:(id)mapping;
+(id)getValueOfManagedProperty:(id)managedProperty fromRepresentation:(id)representation inContext:(id)context;
+(id)getValueOfProperty:(id)property fromRepresentation:(id)representation;
+(void)addValue:(id)value onObject:(id)object forKeyPath:(id)keyPath;
+(void)setValue:(id)value onObject:(id)object forKeyPath:(id)keyPath;
+(void)setProperty:(id)property onObject:(id)object fromRepresentation:(id)representation inContext:(id)context respectPropertyType:(BOOL)type;
+(void)setProperty:(id)property onObject:(id)object fromRepresentation:(id)representation respectPropertyType:(BOOL)type;
+(id)propertyRepresentation:(id)representation forObject:(id)object withPropertyName:(id)propertyName;
+(id)propertyTypeStringRepresentationFromProperty:(objc_property*)property;
+(BOOL)propertyNameIsScalar:(id)scalar fromObject:(id)object;
@end

@interface EKPropertyMapping : XXUnknownSuperclass {
	NSString* _keyPath;
	NSString* _property;
	id _valueBlock;
	id _reverseBlock;
	id _managedValueBlock;
	id _managedReverseBlock;
}
@property(copy, nonatomic) id managedReverseBlock;
@property(copy, nonatomic) id managedValueBlock;
@property(copy, nonatomic) id reverseBlock;
@property(copy, nonatomic) id valueBlock;
@property(retain, nonatomic) NSString* property;
@property(retain, nonatomic) NSString* keyPath;
-(void).cxx_destruct;
@end

@interface EKRelationshipMapping : XXUnknownSuperclass {
	Class _objectClass;
	NSString* _keyPath;
	NSString* _property;
	EKObjectMapping* _objectMapping;
	NSArray* _nonNestedKeyPaths;
}
@property(retain, nonatomic) NSArray* nonNestedKeyPaths;
@property(retain, nonatomic) EKObjectMapping* objectMapping;
@property(retain, nonatomic) NSString* property;
@property(retain, nonatomic) NSString* keyPath;
@property(retain, nonatomic) Class objectClass;
-(void).cxx_destruct;
-(id)extractObjectFromRepresentation:(id)representation;
@end

@interface EKSerializer : XXUnknownSuperclass {
}
+(void)setValue:(id)value forKeyPath:(id)keyPath inRepresentation:(id)representation;
+(void)setValueOnRepresentation:(id)representation fromObject:(id)object withPropertyMapping:(id)propertyMapping;
+(void)setValueOnRepresentation:(id)representation fromManagedObject:(id)managedObject withPropertyMapping:(id)propertyMapping inContext:(id)context;
+(id)serializeCollection:(id)collection withMapping:(id)mapping fromContext:(id)context;
+(id)serializeObject:(id)object withMapping:(id)mapping fromContext:(id)context;
+(id)serializeCollection:(id)collection withMapping:(id)mapping;
+(id)serializeObject:(id)object withMapping:(id)mapping;
+(id)serializeObject:(id)object withMapping:(id)mapping andError:(id*)error;
@end

@interface PodsDummy_Flurry_iOS_SDK : XXUnknownSuperclass {
}
@end

@interface FlurryPulseResponse : XXUnknownSuperclass {
	avro_obj_t* _pulseResponseSchema;
}
-(id)parsePulseResponse:(id)response;
-(void)dealloc;
-(void)initSchema;
@end

@interface FlurryPulseCallbackReportManager : XXUnknownSuperclass <FlurryPulseCBDataSenderDelegate> {
	NSObject<OS_dispatch_queue>* _queue;
	NSMutableArray* _triggers;
	unsigned _totalAttemptCount;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned totalAttemptCount;
@property(retain) NSMutableArray* triggers;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
+(id)sharedInstance;
-(void).cxx_destruct;
-(id)callbackStatusDataForReports:(id)reports;
-(void)sendCallBackInfoToServer;
-(void)checkAndSendReportsToServer;
-(id)dataForSending:(id)sending;
-(id)reportsFilePath;
-(id)savedTriggers;
-(BOOL)addToSavedTriggers:(id)savedTriggers;
-(void)setSavedTriggers:(id)triggers;
-(void)updateTotalAttemptsCount:(id)count;
-(void)performArchiveAttempt:(id)attempt;
-(void)archiveAttempt:(id)attempt;
-(id)init;
@end

@interface FlurryTransaction : XXUnknownSuperclass {
	NSString* _transactionId;
	NSString* _productId;
	int _quanity;
	NSString* _price;
	NSString* _currency;
	NSString* _productName;
	NSData* _receiptData;
	int _transactionState;
}
@property(assign, nonatomic) int transactionState;
@property(retain, nonatomic) NSData* receiptData;
@property(retain, nonatomic) NSString* productName;
@property(retain, nonatomic) NSString* currency;
@property(retain, nonatomic) NSString* price;
@property(assign, nonatomic) int quanity;
@property(retain, nonatomic) NSString* productId;
@property(retain, nonatomic) NSString* transactionId;
+(id)transactionEventEnumToString:(int)string;
+(id)transactionResultArrayInstance;
-(void).cxx_destruct;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryHttpAsyncTask : XXUnknownSuperclass <IFlurryHttpAsyncTask> {
	NSURLConnection* _connection;
	NSString* _tag;
	int _redirectsLimit;
	NSMutableDictionary* _taskParams;
	int _redirectsCount;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int redirectsCount;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSMutableDictionary* taskParams;
@property(assign, nonatomic) int redirectsLimit;
@property(retain, nonatomic) NSString* tag;
+(double)defaultTimeoutInterval;
+(id)urlWithProtocol:(id)protocol host:(id)host port:(int)port path:(id)path query:(id)query;
+(id)stringToQueryDictionary:(id)queryDictionary;
+(id)queryDictionaryToString:(id)string;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields timeoutInterval:(int)interval useCachePolicy:(unsigned)policy delegate:(id)delegate startImmediately:(BOOL)immediately;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields delegate:(id)delegate startImmediately:(BOOL)immediately;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields delegate:(id)delegate;
+(id)post:(id)post body:(id)body headerFields:(id)fields delegate:(id)delegate;
+(id)post:(id)post body:(id)body delegate:(id)delegate;
+(id)get:(id)get headerFields:(id)fields delegate:(id)delegate;
+(id)get:(id)get delegate:(id)delegate;
-(void).cxx_destruct;
-(void)cancelTask;
-(void)startInRunLoop:(id)runLoop;
-(id)init;
-(void)dealloc;
@end

@interface FlurryDataSenderIndex : XXUnknownSuperclass <NSCoding> {
	BOOL _sentReportSuccessfully;
	NSMutableDictionary* _indexMap;
	NSString* _fileName;
	NSObject<OS_dispatch_queue>* _indexMapQueue;
}
@property(assign, nonatomic) BOOL sentReportSuccessfully;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* indexMapQueue;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSMutableDictionary* indexMap;
+(id)instantiatedIndexWithIndexFile:(id)indexFile;
-(void).cxx_destruct;
-(id)notSentBlocksForDataKey:(id)dataKey;
-(BOOL)discardOldBlocksForDataKey:(id)dataKey;
-(BOOL)discardOutdatedBlocksForDataKey:(id)dataKey;
-(void)setupForCurrentDataKey:(id)currentDataKey;
-(void)removeBlockInfoWithIdentifier:(id)identifier forDataKey:(id)dataKey;
-(void)addBlockInfo:(id)info forDataKey:(id)dataKey;
-(void)saveState;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface FlurryURLSessionDelegate : XXUnknownSuperclass {
	BOOL _done;
	NSMutableURLRequest* _originalRequest;
	NSHTTPURLResponse* _response;
	NSMutableData* _body;
	NSError* _error;
	id<FlurryHttpAsyncTaskDelegate> _httpTaskDelegate;
	FlurryHttpAsyncURLSessionTask* _httpTask;
	int _redirectCount;
}
@property(assign, nonatomic) int redirectCount;
@property(retain, nonatomic) FlurryHttpAsyncURLSessionTask* httpTask;
@property(retain, nonatomic) id<FlurryHttpAsyncTaskDelegate> httpTaskDelegate;
@property(readonly, assign, nonatomic) NSMutableData* body;
@property(readonly, assign, nonatomic) NSHTTPURLResponse* response;
@property(retain, nonatomic) NSMutableURLRequest* originalRequest;
@property(retain, nonatomic) NSError* error;
-(void).cxx_destruct;
-(id)constructResponse;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(BOOL)isDone;
-(id)initWithTaskDelegate:(id)taskDelegate taskParent:(id)parent;
-(id)init;
@end

@interface FlurryReachability : XXUnknownSuperclass {
	NSString* key_;
	SCNetworkReachabilityRef _flurryReachabilityRef;
}
@property(copy) NSString* key;
@property(assign, nonatomic) SCNetworkReachabilityRef flurryReachabilityRef;
+(id)flurryReachabilityForLocalWiFi;
+(id)flurryReachabilityForInternetConnection;
+(id)flurryReachabilityWithAddress:(const sockaddr_in*)address;
+(id)flurryMakeAddressKey:(unsigned)key;
+(id)flurryReachabilityWithHostName:(id)hostName;
+(BOOL)accessInstanceVariablesDirectly;
-(void).cxx_destruct;
-(unsigned)flurryReachabilityFlags;
-(BOOL)isFlurryReachableViaWiFi;
-(BOOL)isFlurryReachableViaWWAN;
-(BOOL)isFlurryUserInterventionRequired;
-(BOOL)isFlurryConnectionOnDemand;
-(BOOL)isFlurryConnectionRequired;
-(BOOL)isFlurryReachable;
-(int)flurryCurrentReachabilityStatus;
-(int)flurryNetworkStatusForFlags:(unsigned)flags;
-(BOOL)isFlurryReachabilityEqual:(id)equal;
-(void)flurryStopNotifier;
-(BOOL)flurryStartNotifier;
-(id)initWithFlurryReachabilityRef:(SCNetworkReachabilityRef)flurryReachabilityRef;
-(void)dealloc;
@end

@interface FlurryHTTPResponse : XXUnknownSuperclass {
	NSData* _body;
	int _statusCode;
	NSError* _error;
	NSMutableDictionary* _headers;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* headers;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) int statusCode;
@property(readonly, assign, nonatomic) NSData* body;
+(id)filePath:(int)path;
+(id)readFromURL:(id)url;
-(void).cxx_destruct;
-(id)saveToDisk;
-(id)description;
-(BOOL)isError;
-(BOOL)isSuccess;
-(id)initWithBody:(id)body statusCode:(int)code headers:(id)headers error:(id)error;
-(id)initWithResponse:(id)response body:(id)body error:(id)error;
@end

@interface FlurryHttpAsyncURLSessionTask : XXUnknownSuperclass <IFlurryHttpAsyncTask> {
	NSString* _tag;
	int _redirectsLimit;
	NSMutableDictionary* _taskParams;
	int _redirectsCount;
	NSURLSessionTask* _task;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSURLSessionTask* task;
@property(assign, nonatomic) int redirectsCount;
@property(retain, nonatomic) NSMutableDictionary* taskParams;
@property(assign, nonatomic) int redirectsLimit;
@property(retain, nonatomic) NSString* tag;
+(id)urlWithProtocol:(id)protocol host:(id)host port:(int)port path:(id)path query:(id)query;
+(id)stringToQueryDictionary:(id)queryDictionary;
+(id)queryDictionaryToString:(id)string;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields timeoutInterval:(int)interval useCachePolicy:(unsigned)policy delegate:(id)delegate startImmediately:(BOOL)immediately;
+(id)sessionWithConfiguration:(id)configuration delgate:(id)delgate;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields delegate:(id)delegate startImmediately:(BOOL)immediately;
+(id)sendMethod:(id)method to:(id)to body:(id)body headerFields:(id)fields delegate:(id)delegate;
+(id)post:(id)post body:(id)body headerFields:(id)fields delegate:(id)delegate;
+(id)post:(id)post body:(id)body delegate:(id)delegate;
+(id)get:(id)get headerFields:(id)fields delegate:(id)delegate;
+(id)get:(id)get delegate:(id)delegate;
-(void).cxx_destruct;
-(void)cancelTask;
-(void)startInRunLoop:(id)runLoop;
-(id)init;
@end

@interface FlurryPulseCBReportSender : FlurryDataSenderBase <FlurryHttpAsyncTaskDelegate> {
	FlurryDataSenderIndex* _pulseCBReportDataIndex;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) FlurryDataSenderIndex* pulseCBReportDataIndex;
+(id)pulseCBReportDataKey;
+(Class)httpAsyncTaskClass;
+(void)cleanup;
+(id)instance;
+(void)setupInstanceWithQueue:(id)queue;
-(void).cxx_destruct;
-(void)retransmitNotSentBlocks;
-(void)didCompleteAllTasks;
-(void)requestSuccessComplete:(id)complete withResponse:(id)response;
-(void)requestSuccessful:(id)successful withResponse:(id)response;
-(void)requestDidCancel:(id)request withResponse:(id)response;
-(void)requestDidFail:(id)request withResponse:(id)response;
-(void)sendData:(id)data withIdentifier:(id)identifier;
-(void)sendPulseReportsData:(id)data;
-(void)removeStoredDataWithIdentifier:(id)identifier;
-(id)storePulseCBReportData:(id)data withGrpupId:(id)grpupId;
-(void)setup;
-(id)initWithQueue:(id)queue;
@end

@interface FlurrySession : XXUnknownSuperclass <FlurryDataSenderDelegate, FlurryWatchConnectivityDelegate, IFlurrySession, NSCoding> {
	BOOL _crashed;
	BOOL _truncated;
	BOOL _eventLogComplete;
	BOOL _eventLoggingEnabled;
	BOOL _sessionReportsOnCloseEnabled;
	BOOL _sessionReportsOnPauseEnabled;
	BOOL _crashReportingEnabled;
	BOOL _setBackgroundSessionEnabled;
	BOOL _hasSessionOriginName;
	BOOL _hasDeepLinkName;
	NSData* _crashReportData;
	NSDate* _startTime;
	NSString* _apiKey;
	NSMutableDictionary* _sessionParams;
	NSMutableDictionary* _sessionPropertyParams;
	float _accuracy;
	NSString* _appVersion;
	int _pageViewCount;
	NSDate* _endTime;
	NSDate* _resumeTime;
	NSDate* _pauseTime;
	NSMutableDictionary* _eventCounts;
	NSMutableArray* _pendingEventLog;
	NSMutableArray* _eventLog;
	NSMutableArray* _errors;
	int _totalErrorCount;
	NSString* _locale;
	NSString* _timeZone;
	int _gender;
	int _serializationVersion;
	NSString* _userID;
	int _appApplicationState;
	NSString* _sessionOriginName;
	NSString* _deepLinkName;
	NSString* _watchAppVersion;
	int _watchEventThreshold;
	int _watchDurationThreshold;
	NSMutableArray* _purchaseItems;
	NSDate* _lastPartialUploadTime;
	NSDate* _age;
	NSMutableArray* _transactionRequests;
	double _latitude;
	double _longitude;
	long long _totalPauseIntervalMillis;
}
@property(assign, nonatomic) long long totalPauseIntervalMillis;
@property(retain, nonatomic) NSMutableArray* eventLog;
@property(retain, nonatomic) NSMutableDictionary* eventCounts;
@property(retain, nonatomic) NSDate* endTime;
@property(assign, nonatomic) int pageViewCount;
@property(copy, nonatomic) NSString* appVersion;
@property(retain, nonatomic) NSData* crashReportData;
@property(assign) BOOL crashed;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableArray* transactionRequests;
@property(assign, nonatomic) int watchDurationThreshold;
@property(assign, nonatomic) int watchEventThreshold;
@property(retain, nonatomic) NSString* watchAppVersion;
@property(copy, nonatomic) NSString* deepLinkName;
@property(copy, nonatomic) NSString* sessionOriginName;
@property(assign, nonatomic) BOOL hasDeepLinkName;
@property(assign, nonatomic) BOOL hasSessionOriginName;
@property(assign, nonatomic) int appApplicationState;
@property(assign, nonatomic) BOOL setBackgroundSessionEnabled;
@property(assign, nonatomic) BOOL crashReportingEnabled;
@property(assign, nonatomic) BOOL sessionReportsOnPauseEnabled;
@property(assign, nonatomic) BOOL sessionReportsOnCloseEnabled;
@property(assign, nonatomic) BOOL eventLoggingEnabled;
@property(copy, nonatomic) NSString* userID;
@property(assign, nonatomic) int serializationVersion;
@property(retain, nonatomic) NSString* timeZone;
@property(retain, nonatomic) NSString* locale;
@property(retain, nonatomic) NSDate* age;
@property(assign, nonatomic) int gender;
@property(assign, nonatomic) int totalErrorCount;
@property(retain, nonatomic) NSMutableArray* errors;
@property(assign, nonatomic) BOOL eventLogComplete;
@property(retain, nonatomic) NSMutableArray* pendingEventLog;
@property(assign, nonatomic) BOOL truncated;
@property(assign, nonatomic) float accuracy;
@property(assign, nonatomic) double longitude;
@property(assign, nonatomic) double latitude;
@property(retain) NSString* apiKey;
@property(retain, nonatomic) NSMutableDictionary* sessionPropertyParams;
@property(retain, nonatomic) NSMutableDictionary* sessionParams;
@property(retain) NSDate* pauseTime;
@property(retain) NSDate* resumeTime;
@property(retain) NSDate* lastPartialUploadTime;
@property(retain) NSDate* startTime;
@property(retain, nonatomic) NSMutableArray* purchaseItems;
+(int)getBatteryState;
+(void)disableTransferOfFlurryInfo;
+(void)disableWatchConnectivity;
+(id)initialTimestampFilePath;
+(id)oldInitialTimestampFilePathUptilAgentVersion109;
+(id)currentWatchAutoIncrementFilePath;
+(id)currentWatchSessionFilePath;
+(id)currentSessionFilePath;
+(void)removeCurrentSessionFile;
+(id)sessionsFilePath;
+(id)removeOldSessionsIfNecessary:(id)necessary;
+(void)addToSavedSessions:(id)savedSessions;
+(void)setSavedSessions:(id)sessions;
+(id)savedSessions;
+(id)sessionId;
+(id)currentSession;
+(void)cleanup;
+(void)setupCurrentSessionWithKey:(id)key;
+(id)sessionWithApiKey:(id)apiKey startTime:(id)time withPreCacheEventLog:(id)preCacheEventLog;
+(id)getFlurryVersion;
+(id)getAgentVersion;
+(id)getAgentVersionWithBuild;
-(void).cxx_destruct;
-(void)dealloc;
-(void)transferIDs;
-(id)installationIDAsBytes;
-(id)installationIDForSessionReport;
-(void)migrateInstallIDFromDiskToKeychain;
-(void)removeInstallationIDFromKeychain;
-(long long)sessionLength;
-(long long)timeIntervalSinceSessionStart:(id)start;
-(BOOL)sentReportSuccessful;
-(id)initialTimestamp;
-(BOOL)isPaused;
-(id)dataForSessions:(id)sessions;
-(void)getSessionParametersAtPhase:(int)phase callSite:(int)site;
-(id)data;
-(int)updateIfTrackedAndChangedPropertyValue:(id)value forPropertyKey:(id)propertyKey;
-(void)sendSessionsToServerIncludingCurrentSession:(BOOL)serverIncludingCurrentSession;
-(void)sendSessionsToServerForCreateSession;
-(BOOL)flurryUserInfo:(id)info;
-(BOOL)isFlurryUserInfo:(id)info;
-(void)saveToDisk;
-(void)mergeValidPendingEventLog;
-(void)mergePendingEventLog;
-(int)putEventIntoLog:(id)log;
-(void)recordError:(id)error message:(id)message exceptionString:(id)string errorType:(int)type liveReport:(id)report;
-(void)recordError:(id)error message:(id)message error:(id)error3 liveReport:(id)report;
-(void)recordError:(id)error message:(id)message exception:(id)exception liveReport:(id)report;
-(void)recordTransaction:(id)transaction statusCallback:(id)callback;
-(void)endTimedEvents;
-(void)endTimedEvent:(id)event withParameters:(id)parameters;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed transaction:(id)transaction;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed;
-(int)totalEventCount;
-(int)recordEvent:(id)event withParameters:(id)parameters;
-(void)uploadPartialSessionDataIfNeeded:(BOOL)needed;
-(void)setAgeInYears:(int)years;
-(void)setGenderAsString:(id)string;
-(void)setLatitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(float)accuracy verticalAccuracy:(float)accuracy4;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)encodeWithCoder:(id)coder;
-(void)resetEventLogs;
-(id)dataForSending:(id)sending;
-(void)maybeIncrementPageView;
-(void)finishSession;
-(void)endSession;
-(void)archiveSession;
-(void)resumeSession;
-(void)markSessionAsResuming;
-(void)pauseSession;
-(void)resetSessionData;
-(id)initWithAPIKey:(id)apikey appVersion:(id)version startDate:(id)date;
-(void)endSessionAsync;
-(BOOL)needToSendPartialReport;
-(id)sessionWithNewEventsWithApiKey:(id)apiKey startTime:(id)time;
@end

@interface FlurryPreCacheEventManager : XXUnknownSuperclass {
	NSMutableArray* _log;
	NSMutableArray* _preCacheEventLog;
	NSObject<OS_dispatch_queue>* _queue;
}
@property(retain) NSMutableArray* log;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(retain) NSMutableArray* preCacheEventLog;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)processWriteSyncWithBlock:(id)block;
-(id)init;
@end

@interface FlurryFileCache : XXUnknownSuperclass {
	NSString* _apiKey;
	NSString* _agentVersion;
}
@property(copy, nonatomic) NSString* agentVersion;
@property(copy, nonatomic) NSString* apiKey;
+(void)cleanup;
+(id)instance;
+(id)createInstanceWithApiKey:(id)apiKey agentVersion:(id)version;
-(void).cxx_destruct;
-(BOOL)remove:(id)remove forCurentAgentVersion:(bool)curentAgentVersion;
-(BOOL)remove:(id)remove;
-(id)get:(id)get forCurentAgentVersion:(bool)curentAgentVersion;
-(id)get:(id)get;
-(id)save:(id)save prefix:(id)prefix forCurentAgentVersion:(bool)curentAgentVersion;
-(id)save:(id)save prefix:(id)prefix;
-(id)createFilePath:(id)path forCurentAgentVersion:(bool)curentAgentVersion;
-(id)initWithApiKey:(id)apiKey agentVersion:(id)version;
@end

@interface FlurryWatchSession : XXUnknownSuperclass <FlurryDataSenderDelegate, FlurryWatchConnectivityDelegate> {
	BOOL _eventLogComplete;
	NSString* _userID;
	NSString* _apiKey;
	NSString* _appVersion;
	int _serializationVersion;
	NSDictionary* _watchIDs;
	NSDate* _startTime;
	NSDate* _endTime;
	float _accuracy;
	NSMutableDictionary* _eventCounts;
	NSMutableArray* _eventLog;
	NSMutableArray* _errors;
	int _totalErrorCount;
	NSMutableDictionary* _sessionParams;
	int _gender;
	NSDate* _age;
	NSString* _locale;
	NSString* _timeZone;
	int _watchEventThreshold;
	int _watchDurationThreshold;
	long long _totalPauseIntervalMillis;
	double _latitude;
	double _longitude;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int watchDurationThreshold;
@property(assign, nonatomic) int watchEventThreshold;
@property(retain, nonatomic) NSString* timeZone;
@property(retain, nonatomic) NSString* locale;
@property(retain, nonatomic) NSDate* age;
@property(assign, nonatomic) int gender;
@property(retain, nonatomic) NSMutableDictionary* sessionParams;
@property(assign, nonatomic) int totalErrorCount;
@property(retain, nonatomic) NSMutableArray* errors;
@property(assign, nonatomic) BOOL eventLogComplete;
@property(retain, nonatomic) NSMutableArray* eventLog;
@property(retain, nonatomic) NSMutableDictionary* eventCounts;
@property(assign, nonatomic) float accuracy;
@property(assign, nonatomic) double longitude;
@property(assign, nonatomic) double latitude;
@property(assign, nonatomic) long long totalPauseIntervalMillis;
@property(retain) NSDate* endTime;
@property(retain) NSDate* startTime;
@property(retain) NSDictionary* watchIDs;
@property(assign, nonatomic) int serializationVersion;
@property(copy) NSString* userID;
@property(copy) NSString* appVersion;
@property(copy) NSString* apiKey;
+(id)initialTimestampFilePath;
+(id)oldInitialTimestampFilePathUptilAgentVersion109;
+(id)currentWatchAutoIncrementFilePath;
+(id)currentWatchIDsFilePath;
+(id)currentWatchSessionFilePath;
+(void)loadWatchDisableWatchConnectivity;
+(void)loadWatchSessionIfOnDisk;
+(BOOL)createAndLoadWatchSession;
+(id)currentWatchSession;
+(id)sessionWithApiKey:(id)apiKey startTime:(id)time;
+(id)getAgentVersionWithBuild;
+(void)load;
+(void)initReachabilty;
+(id)queue;
-(void).cxx_destruct;
-(BOOL)flurryUserInfo:(id)info;
-(void)disableWatchConnectivity;
-(BOOL)didReceiveUserInfo:(id)info;
-(BOOL)isFlurryUserInfo:(id)info;
-(void)dealloc;
-(long long)sessionLength;
-(long long)timeIntervalSinceSessionStart:(id)start;
-(BOOL)sentReportSuccessful;
-(id)initialTimestamp;
-(id)dataForSessions:(id)sessions;
-(id)data;
-(void)printSessionPrivateLogs;
-(void)appendNetworkStatusToData:(id)data;
-(void)appendCookiesToData:(id)data;
-(void)appendSessions:(id)sessions toData:(id)data;
-(void)appendDevicePropertiesToData:(id)data;
-(id)systemVersion;
-(BOOL)appendReportedIDsToData:(id)data;
-(BOOL)appendEventLogToData:(id)data;
-(BOOL)appendEventCountToData:(id)data;
-(void)appendSessionParamsToData:(id)data;
-(void)getSessionParametersAtPhase:(int)phase;
-(int)updateIfTrackedAndChangedPropertyValue:(id)value forPropertyKey:(id)propertyKey;
-(void)sendSessionsToServer;
-(void)clearWatchSessionOnDisk;
-(void)saveWatchIDsToDisk;
-(void)saveWatchSessionToDisk;
-(int)putEventIntoLog:(id)log;
-(int)recordError:(id)error message:(id)message exceptionString:(id)string errorType:(int)type liveReport:(id)report;
-(int)recordWatchError:(id)error message:(id)message error:(id)error3 liveReport:(id)report;
-(int)recordWatchError:(id)error message:(id)message exception:(id)exception liveReport:(id)report;
-(int)recordError:(id)error message:(id)message error:(id)error3 liveReport:(id)report;
-(int)recordError:(id)error message:(id)message exception:(id)exception liveReport:(id)report;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed;
-(int)recordWatchEvent:(id)event withParameters:(id)parameters;
-(int)sanityCheckEventName:(id)name parameters:(id)parameters;
-(BOOL)hasWatchSessionExpired;
-(int)totalEventCount;
-(id)watchIDGuidAsBytes;
-(id)watchIdGUID;
-(id)watchIdIDFV;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)resetEventLogs;
-(id)dataForSending:(id)sending;
-(void)endWatchSession;
-(void)finishWatchEvent;
-(void)finishSession;
-(void)resetSessionData;
-(id)initWithAPIKey:(id)apikey appVersion:(id)version startDate:(id)date;
-(void)loadWatchDurationThreshold;
-(void)loadWatchEventThreshold;
-(void)loadWatchUserID;
-(void)loadWatchAppVersion;
-(void)loadWatchDebug;
-(void)loadWatchIDsFromDisk;
@end

@interface FlurryGlobalVariableStorage : XXUnknownSuperclass {
	BOOL _udidEnabled;
	BOOL _sessionReportsOnCloseEnabled;
	BOOL _sessionReportsOnPauseEnabled;
	BOOL _backgroundSessionEnabled;
	BOOL _crashReportingEnabled;
	BOOL _eventLoggingEnabled;
	BOOL _hasSessionOriginName;
	BOOL _hasDeepLinkName;
	BOOL _startSessionCalled;
	BOOL _optOutSessionPending;
	BOOL _appInstallProcessDone;
	BOOL _pulseMonitoringEnabled;
	BOOL _pulseRequestPending;
	NSString* _savedResponseUrl;
	NSString* _apiKey;
	int _pauseSecondsBeforeStartingNewSession;
	NSDate* _pauseTime;
	NSDate* _lastPageViewDate;
	int _appApplicationState;
	NSString* _appVersion;
	NSString* _userID;
	int _age;
	NSString* _gender;
	NSString* _sessionOriginName;
	NSString* _deepLinkName;
	NSMutableDictionary* _sessionParameters;
	NSMutableDictionary* _launchOptions;
	id _location;
	FlurryPLCrashReporter* _flurryCrashReporter;
	NSMutableArray* _originSets;
	int _maxBitRateKbps;
	NSMutableArray* _pendingUrlTimers;
	NSDate* _lastPulseReportTime;
	long _adsFetchCount;
	long _adRequestsCount;
	long _adsReturnedCount;
	long _adsReadyCount;
	long _adsImpressionFiredCount;
}
@property(assign) long adsImpressionFiredCount;
@property(assign) long adsReadyCount;
@property(assign) long adsReturnedCount;
@property(assign) long adRequestsCount;
@property(assign) long adsFetchCount;
@property(retain, nonatomic) NSString* guidAsIDForSessionReports;
@property(retain) NSDate* lastPulseReportTime;
@property(assign) BOOL lastAdTrackingEnabledSetting;
@property(assign) BOOL pulseRequestPending;
@property(assign) BOOL pulseMonitoringEnabled;
@property(retain) NSMutableArray* pendingUrlTimers;
@property(assign) BOOL appInstallProcessDone;
@property(assign) int maxBitRateKbps;
@property(retain, nonatomic) NSMutableArray* originSets;
@property(assign) BOOL optOutSessionPending;
@property(retain, nonatomic) FlurryPLCrashReporter* flurryCrashReporter;
@property(retain) id location;
@property(readonly, assign) NSMutableDictionary* launchOptions;
@property(assign) BOOL startSessionCalled;
@property(retain) NSMutableDictionary* sessionParameters;
@property(copy) NSString* deepLinkName;
@property(copy) NSString* sessionOriginName;
@property(assign) BOOL hasDeepLinkName;
@property(assign) BOOL hasSessionOriginName;
@property(copy) NSString* gender;
@property(assign) int age;
@property(copy) NSString* userID;
@property(assign) BOOL eventLoggingEnabled;
@property(copy) NSString* appVersion;
@property(assign) BOOL crashReportingEnabled;
@property(assign) int appApplicationState;
@property(assign) BOOL backgroundSessionEnabled;
@property(assign) BOOL sessionReportsOnPauseEnabled;
@property(assign) BOOL sessionReportsOnCloseEnabled;
@property(retain) NSDate* lastPageViewDate;
@property(retain) NSDate* pauseTime;
@property(assign) int pauseSecondsBeforeStartingNewSession;
@property(assign) BOOL udidEnabled;
@property(copy, nonatomic) NSString* apiKey;
@property(copy) NSString* savedResponseUrl;
+(id)getPersistentFilePath:(id)path;
+(id)persistentPulsePrepUrlsFilePath;
+(id)persistentPulseUrlsFilePath;
+(id)persistentUrlsFilePath;
+(id)persistentCookiesFilePath;
+(id)persistentGlobalsFilePath;
+(void)cleanup;
+(id)sharedInstance;
-(void).cxx_destruct;
-(BOOL)isMoPubIntegration;
-(int)logLevel;
-(BOOL)analyticsEnabled;
-(void)removePendingUrlTimers;
-(void)recordOrigin:(id)origin originVersion:(id)version withParameters:(id)parameters;
-(void)recordSessionProperties:(id)properties;
-(void)savePersistentGlobalsToDisk;
-(void)resetLaunchOptions;
-(id)init;
@end

@interface FlurryPulseCallback : XXUnknownSuperclass <NSCoding> {
	NSString* _partner;
	int _method;
	NSString* _uriTemplate;
	NSString* _bodyTemplate;
	int _maxRedirects;
	int _connectTimeout;
	int _requestTimeout;
	NSDictionary* _headers;
	long long _callbackId;
}
@property(retain, nonatomic) NSDictionary* headers;
@property(assign, nonatomic) long long callbackId;
@property(assign, nonatomic) int requestTimeout;
@property(assign, nonatomic) int connectTimeout;
@property(assign, nonatomic) int maxRedirects;
@property(retain, nonatomic) NSString* bodyTemplate;
@property(retain, nonatomic) NSString* uriTemplate;
@property(assign, nonatomic) int method;
@property(retain, nonatomic) NSString* partner;
+(int)pulseMethodStringToEnum:(id)anEnum;
+(id)pulseMethodEnumToString:(int)string;
+(id)pulseMethodsArrayInstance;
-(void).cxx_destruct;
-(id)dataDictionary;
-(void)encodeWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryPreCacheEvent : XXUnknownSuperclass {
	BOOL _timed;
	NSString* _eventName;
	NSDictionary* _params;
}
@property(assign, nonatomic) BOOL timed;
@property(retain, nonatomic) NSDictionary* params;
@property(retain, nonatomic) NSString* eventName;
-(void).cxx_destruct;
-(id)initWithEventName:(id)eventName params:(id)params timed:(BOOL)timed;
@end

@interface FlurryPulseCallbackReportInfo : XXUnknownSuperclass <NSCoding> {
	NSString* _invokeId;
	NSNumber* _callbackId;
	NSString* _substitutedUrl;
	NSMutableArray* _attempts;
}
@property(retain, nonatomic) NSMutableArray* attempts;
@property(retain, nonatomic) NSString* substitutedUrl;
@property(retain, nonatomic) NSNumber* callbackId;
@property(retain, nonatomic) NSString* invokeId;
-(void).cxx_destruct;
-(unsigned)removeSentAttempts;
-(void)setAttemptsSent;
-(BOOL)finalAttemptMade;
-(id)copyWithZone:(NSZone*)zone;
-(id)data;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryImpl : XXUnknownSuperclass <IFlurrySession> {
	BOOL isBackgroundSupported;
	FlurrySession* session;
	NSString* apiKey;
	NSDate* startTime;
	NSObject<OS_dispatch_queue>* queue;
	NSMutableDictionary* eventCounts;
	NSMutableArray* eventLog;
}
@property(assign, nonatomic) long long totalPauseIntervalMillis;
@property(retain, nonatomic) NSMutableArray* eventLog;
@property(retain, nonatomic) NSMutableDictionary* eventCounts;
@property(readonly, assign, nonatomic) NSDate* age;
@property(readonly, assign, nonatomic) int gender;
@property(retain, nonatomic) NSDate* endTime;
@property(assign, nonatomic) int pageViewCount;
@property(copy, nonatomic) NSString* appVersion;
@property(readonly, assign, nonatomic) float accuracy;
@property(readonly, assign, nonatomic) double longitude;
@property(readonly, assign, nonatomic) double latitude;
@property(retain, nonatomic) NSData* crashReportData;
@property(assign) BOOL crashed;
@property(readonly, assign) NSDate* startTime;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign) NSDate* pauseTime;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(assign, nonatomic) BOOL isBackgroundSupported;
@property(retain) NSString* apiKey;
@property(retain, nonatomic) FlurrySession* session;
+(void)unregisterBackgoundTask:(unsigned)task;
+(unsigned)registerBackgoundTask;
+(void)cleanup;
+(id)instance;
-(void).cxx_destruct;
-(id)installationIDForSessionReport;
-(void)removeInstallationIDFromKeychain;
-(BOOL)flurryUserInfo:(id)info;
-(BOOL)isFlurryUserInfo:(id)info;
-(id)initialTimestamp;
-(void)sendSessionsToServerForCreateSession;
-(void)endSessionAsync;
-(void)endSession;
-(void)resumeSession;
-(void)markSessionAsResuming;
-(void)pauseSession;
-(void)recordError:(id)error message:(id)message exceptionString:(id)string errorType:(int)type liveReport:(id)report;
-(void)recordError:(id)error message:(id)message error:(id)error3 liveReport:(id)report;
-(void)recordError:(id)error message:(id)message exception:(id)exception liveReport:(id)report;
-(void)endTimedEvent:(id)event withParameters:(id)parameters;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed transaction:(id)transaction;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed;
-(int)recordEvent:(id)event withParameters:(id)parameters;
-(void)recordTransaction:(id)transaction statusCallback:(id)callback;
-(void)setAgeInYears:(int)years;
-(void)setGenderAsString:(id)string;
-(void)maybeIncrementPageView;
-(void)setCrashReportingEnabled:(BOOL)enabled;
-(void)setSessionReportsOnPauseEnabled:(BOOL)enabled;
-(void)setSessionReportsOnCloseEnabled:(BOOL)enabled;
-(void)setUserID:(id)anId;
-(void)setEventLoggingEnabled:(BOOL)enabled;
-(void)setLatitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(float)accuracy verticalAccuracy:(float)accuracy4;
-(void)setupForApiKey:(id)apiKey;
-(void)dealloc;
-(id)init;
@end

@interface FlurryWatchConnectivityProxy : XXUnknownSuperclass {
	NSObject* _realObject;
	id<FlurryWatchConnectivityDelegate> _sdkDelegate;
}
@property(assign, nonatomic) __weak id<FlurryWatchConnectivityDelegate> sdkDelegate;
@property(assign, nonatomic) __weak NSObject* realObject;
-(void).cxx_destruct;
-(void)session:(id)session didFinishUserInfoTransfer:(id)transfer error:(id)error;
-(void)session:(id)session didReceiveUserInfo:(id)info;
-(id)description;
-(void)forwardInvocation:(id)invocation;
-(BOOL)respondsToSelector:(SEL)selector;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)initWithObject:(id)object;
@end

@interface FlurryWatchConnectivity : XXUnknownSuperclass {
	BOOL _disabled;
	BOOL _disableTransferInfo;
	BOOL _kvoSetup;
	id<FlurryWatchConnectivityDelegate> _delegate;
	Class _wcsession;
	FlurryWatchConnectivityProxy* _connectivityProxy;
	WCSession* _session;
}
@property(assign, nonatomic) __weak id<FlurryWatchConnectivityDelegate> delegate;
@property(assign, nonatomic) BOOL kvoSetup;
@property(assign, nonatomic) BOOL disableTransferInfo;
@property(assign, nonatomic) BOOL disabled;
@property(assign, nonatomic) __weak WCSession* session;
@property(retain) FlurryWatchConnectivityProxy* connectivityProxy;
@property(assign, nonatomic) Class wcsession;
+(id)defaultConnectivty;
-(void).cxx_destruct;
-(void)removeKVO;
-(void)setupKVO;
-(void)checkNewDelegate:(id)delegate;
-(void)setSessionDelegate:(id)delegate;
-(void)restoreCachedSessionDelegate;
-(void)cacheAndReplaceSessionDelegate;
-(void)activateSession;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)disableTransferFlurryInfo;
-(void)disableWatchConnectivity;
-(void)transferUserInfo:(id)info;
-(void)teardown;
-(void)setup;
-(id)init;
@end

@interface FlurryWatch : XXUnknownSuperclass {
}
+(void)setServerURL:(id)url;
+(BOOL)flurryUserInfo:(id)info;
+(BOOL)isFlurryUserInfo:(id)info;
+(void)disableWatchConnectivity;
+(void)logWatchError:(id)error message:(id)message error:(id)error3;
+(void)logWatchError:(id)error message:(id)message exception:(id)exception;
+(int)logWatchEvent:(id)event withParameters:(id)parameters;
+(int)logWatchEvent:(id)event;
+(id)apiKey;
@end

@interface FlurryKeychainWrapper : XXUnknownSuperclass {
	NSString* identifier;
}
@property(retain, nonatomic) NSString* identifier;
+(id)keychainWrapperWithIdentifier:(id)identifier;
-(void).cxx_destruct;
-(void)removeObjectForKey:(id)key;
-(BOOL)updateValueData:(id)data forKey:(id)key;
-(BOOL)setThisDeviceData:(id)data forKey:(id)key;
-(BOOL)setData:(id)data forKey:(id)key;
-(BOOL)setThisDeviceString:(id)string forKey:(id)key;
-(BOOL)setString:(id)string forKey:(id)key;
-(id)objectForKey:(id)key;
-(BOOL)setObject:(id)object forKey:(id)key;
-(id)stringForKey:(id)key;
-(id)dataForKey:(id)key;
-(id)setupSearchForKey:(id)key;
-(id)initWithIdentifier:(id)identifier;
@end

@interface FlurryPulseSettings : XXUnknownSuperclass <NSCoding> {
	NSDictionary* _callbacks;
	NSDictionary* _callbackEventsMap;
	int _maxCallbackRetries;
	int _maxCallbackAttemptsPerReport;
	int _maxReportDelaySecs;
	NSString* _agentReportUrl;
	NSDictionary* _globalSettings;
	NSDictionary* _analytics;
	long long _lastResponseTime;
	long long _nextRefreshTTL;
	long long _expirationTTL;
}
@property(retain, nonatomic) NSDictionary* analytics;
@property(retain, nonatomic) NSDictionary* globalSettings;
@property(retain, nonatomic) NSString* agentReportUrl;
@property(assign, nonatomic) int maxReportDelaySecs;
@property(assign, nonatomic) int maxCallbackAttemptsPerReport;
@property(assign, nonatomic) int maxCallbackRetries;
@property(retain, nonatomic) NSDictionary* callbackEventsMap;
@property(retain, nonatomic) NSDictionary* callbacks;
@property(assign, nonatomic) long long expirationTTL;
@property(assign, nonatomic) long long nextRefreshTTL;
@property(assign, nonatomic) long long lastResponseTime;
-(void).cxx_destruct;
-(id)dataDictionary;
-(void)encodeWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryBackgroundTaskTracker : XXUnknownSuperclass {
	BOOL _isBackgroundSupported;
	unsigned _backgroundTask;
}
@property(assign, nonatomic) BOOL isBackgroundSupported;
@property(assign, nonatomic) unsigned backgroundTask;
+(id)defaultTracker;
-(void)stopBackgroundTasksTracking;
-(void)startBackgroundTaskTrackingIfNeeded;
-(id)init;
@end

@interface FlurryRecordTransactionRequest : XXUnknownSuperclass <SKProductsRequestDelegate> {
	SKPaymentTransaction* _appleTransaction;
	NSData* _receiptData;
	SKProductsRequest* _productsRequest;
	NSDate* _sessionStartTime;
	id _flurryTransactionCallback;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id flurryTransactionCallback;
@property(retain, nonatomic) NSDate* sessionStartTime;
@property(retain, nonatomic) SKProductsRequest* productsRequest;
@property(retain, nonatomic) NSData* receiptData;
@property(retain, nonatomic) SKPaymentTransaction* appleTransaction;
-(void).cxx_destruct;
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
-(void)start;
-(id)initWithReceiptData:(id)receiptData transaction:(id)transaction sessionStartTime:(id)time transactionCallback:(id)callback;
@end

@interface FlurryError : XXUnknownSuperclass <NSCoding> {
	int errorID;
	NSDate* date;
	NSString* errorString;
	NSString* errorMessage;
	NSString* exceptionString;
	int errorType;
	NSData* reportData;
}
@property(retain, nonatomic) NSData* reportData;
@property(assign, nonatomic) int errorType;
@property(retain, nonatomic) NSString* exceptionString;
@property(retain, nonatomic) NSString* errorMessage;
@property(retain, nonatomic) NSString* errorString;
@property(retain, nonatomic) NSDate* date;
@property(assign, nonatomic) int errorID;
+(id)errorWithString:(id)string message:(id)message exceptionString:(id)string3 errorType:(int)type reportData:(id)data;
-(void).cxx_destruct;
-(id)description;
-(void)appendToData:(id)data;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface FlurryPulseAppTemplate : XXUnknownSuperclass <NSCoding> {
	NSString* _partner;
	NSArray* _events;
	int _method;
	NSString* _uriTemplate;
	NSString* _bodyTemplate;
	int _maxRedirects;
	int _connectTimeout;
	int _requestTimeout;
}
@property(assign, nonatomic) int requestTimeout;
@property(assign, nonatomic) int connectTimeout;
@property(assign, nonatomic) int maxRedirects;
@property(retain, nonatomic) NSString* bodyTemplate;
@property(retain, nonatomic) NSString* uriTemplate;
@property(assign, nonatomic) int method;
@property(retain, nonatomic) NSArray* events;
@property(retain, nonatomic) NSString* partner;
+(int)pulseMethodStringToEnum:(id)anEnum;
+(id)pulseMethodEnumToString:(int)string;
+(id)pulseMethodsArrayInstance;
-(void).cxx_destruct;
-(id)dataDictionary;
-(void)encodeWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryPageViewDelegate : XXUnknownSuperclass <UINavigationControllerDelegate, UITabBarControllerDelegate, UITableViewDelegate> {
	id<NSObject> _delegate;
	id _target;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id target;
@property(assign, nonatomic) __weak id<NSObject> delegate;
+(void)destroyDelegateOnTarget:(id)target;
+(void)createDelegateOnTarget:(id)target;
+(id)createInvocationOnSelector:(SEL)selector target:(id)target;
-(void).cxx_destruct;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithTarget:(id)target;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
@end

@interface FlurryPageViewDelegateOld : XXUnknownSuperclass <UINavigationControllerDelegate, UITabBarControllerDelegate, UITableViewDelegate> {
	id<NSObject> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<NSObject> delegate;
+(void)createDelegateOnTarget:(id)target;
+(id)createInvocationOnSelector:(SEL)selector target:(id)target;
-(void).cxx_destruct;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface FlurryProtocolData : XXUnknownSuperclass {
}
+(int)getInt32FromData:(id)data atIndex:(int)index;
+(short)getInt16FromData:(id)data atIndex:(int)index;
+(void)appendLargeData:(id)data toData:(id)data2;
+(void)appendShortData:(id)data toData:(id)data2;
+(void)appendTinyData:(id)data toData:(id)data2;
+(void)appendStringUnlimited:(id)unlimited toData:(id)data;
+(void)appendString:(id)string toData:(id)data;
+(void)appendTimestamp:(id)timestamp toData:(id)data;
+(void)appendDouble:(double)aDouble toData:(id)data;
+(void)appendFloat:(float)aFloat toData:(id)data;
+(void)appendLong:(long long)aLong toData:(id)data;
+(void)appendInt:(int)int toData:(id)data;
+(void)appendUshort:(unsigned short)ushort toData:(id)data;
+(void)appendByte:(BOOL)byte toData:(id)data;
+(void)appendBoolean:(BOOL)boolean toData:(id)data;
+(id)limitStringLength:(id)length;
+(long long)timeIntervalFrom:(id)from to:(id)to;
@end

@interface FlurrySessionBuilder : XXUnknownSuperclass {
	BOOL _sessionContinueSecondsSet;
	BOOL _crashReportingEnabled;
	BOOL _showErrorsInLog;
	NSString* _appVersion;
	int _sessionContinueSeconds;
	int _eventCountThreshold;
	int _sessionReportingInterval;
	int _logLevel;
}
@property(assign, nonatomic) int logLevel;
@property(assign, nonatomic) BOOL showErrorsInLog;
@property(assign, nonatomic) BOOL crashReportingEnabled;
@property(assign, nonatomic) BOOL sessionContinueSecondsSet;
@property(assign, nonatomic) int sessionReportingInterval;
@property(assign, nonatomic) int eventCountThreshold;
@property(assign, nonatomic) int sessionContinueSeconds;
@property(retain, nonatomic) NSString* appVersion;
-(void).cxx_destruct;
-(void)build;
-(id)withShowErrorInLog:(BOOL)log;
-(id)withLogLevel:(int)logLevel;
-(id)withSessionContinueSeconds:(int)sessionContinueSeconds;
-(id)withCrashReporting:(BOOL)crashReporting;
-(id)withAppVersion:(id)appVersion;
-(id)init;
@end

@interface FlurryUtil : XXUnknownSuperclass {
}
+(BOOL)assertNotNil:(id)aNil;
+(id)getIdentifierForVendor;
+(int)getSystemVersionAsAnInteger;
+(BOOL)isRetina;
+(BOOL)isIPad;
+(id)getCanvasOrientation;
+(BOOL)deviceInLandscape;
+(BOOL)canvasInPortraitUpsideDown;
+(BOOL)canvasInLandscapeLeft;
+(BOOL)canvasInLandscapeRight;
+(BOOL)canvasInLandscape;
+(BOOL)canvasInLandscapeLeft:(id)landscapeLeft;
+(BOOL)canvasInLandscapeRight:(id)landscapeRight;
+(BOOL)canvasInLandscape:(id)landscape;
+(BOOL)isInBackground;
+(void)substituteParamsInString:(id)string withValuesDictionary:(id)valuesDictionary forPattern:(id)pattern;
+(double)reduceLocationPrecision:(double)precision withDecimalPlaces:(int)decimalPlaces;
+(id)getFixedSalt;
+(BOOL)updateIfChangedCookieValue:(id)value forCookieKey:(id)cookieKey;
+(id)md5String:(id)string;
+(BOOL)hasUserOptedOut;
+(void)setFlurryOptOut:(BOOL)anOut;
+(long)lastBootTime;
+(unsigned long long)getDiskSize;
+(BOOL)isInWatchExtension;
+(unsigned long long)getFreeDiskspace;
+(int)int32FromNSInteger:(int)nsinteger;
+(unsigned)uint32FromNSUInteger:(unsigned)nsuinteger;
+(id)allCounters;
+(void)printCounters;
+(void)decrementCounter:(id)counter;
+(void)decrementCounter:(id)counter locationName:(char*)name;
+(void)incrementCounter:(id)counter;
+(void)incrementCounter:(id)counter locationName:(char*)name;
+(id)preferredLanguage;
+(BOOL)isAdTrackingEnabled;
+(id)getFlurryId;
+(char*)getLimit;
+(char*)getUser;
+(char*)getModule;
+(char*)getMgr;
+(char*)getId;
+(id)generateCFUUIDBasedUID;
+(id)generateCFUUID;
+(void)cleanupStoredIdentifierForVendor;
+(id)dataFromHexString:(id)hexString;
+(id)hashDataToHexString:(char*)hexString length:(unsigned)length;
+(id)hashData:(id)data;
+(BOOL)appIsCracked;
+(BOOL)deviceIsJailbroken;
+(id)devicePlatform;
+(id)filePathDirectory;
+(id)oldFilePathDirectoryUptilAgentVersion109;
+(NSRange)flurryRangeOfData:(id)data inData:(id)data2;
+(id)createParamKeysDictFromUrlParams:(id)urlParams paramsHeader:(id*)header paramsKVString:(id*)string;
+(int)dataChecksum:(id)checksum;
+(void)generateChecksumTable;
+(id)encodeIllegalCharsToPercentEscapeString:(id)percentEscapeString;
+(id)encodeToPercentEscapeString:(id)percentEscapeString;
+(id)decodeFromPercentEscapeString:(id)percentEscapeString;
+(BOOL)addSkipBackupAttributeToItemAtURL:(id)url;
+(CGRect)deviceScreenBounds;
+(id)firstElementFromArray:(id)array;
+(void)archiveDictionary:(id)dictionary toFile:(id)file;
+(void)archiveObject:(id)object toFile:(id)file;
+(void)_archiveObject:(id)object toPath:(id)path;
+(void)_TVOS_archiveObject:(id)object toPath:(id)path;
+(id)safeUnarchiveObjectFromFSWithFile:(id)file;
+(id)safeUnarchiveObjectWithFile:(id)file;
+(id)_unarchiveFromNSUserDefaultsWithPath:(id)path;
+(id)_safeUnarchiveObjectWithFile:(id)file;
+(BOOL)dataExistsAtPath:(id)path;
+(void)handleException:(id)exception;
+(void)setShowErrorInLogEnabled:(BOOL)logEnabled;
+(int)logLevel;
+(void)setLogLevel:(int)level;
+(void)assertNotRunningOnQueue:(id)queue;
+(void)assertRunningOnQueue:(id)queue;
+(void)assertThreadIsNotMain;
@end

@interface FlurryNetworkUtil : XXUnknownSuperclass {
	NSError* lastNetworkOperationError;
}
@property(retain) NSError* lastNetworkOperationError;
+(id)appCloudServerUrl;
+(void)setAppCloudServerToStaging:(BOOL)staging;
+(id)serverURL;
+(void)setSecureTransportEnabledDeprecated:(BOOL)deprecated;
+(void)setServerURL:(id)url;
+(id)pulseCBServerUrl;
+(void)setPulseCBServerUrl:(id)url;
+(id)pulseServerUrl;
+(void)setPulseServerUrl:(id)url;
+(id)adLogServerUrl;
+(void)setAdLogServerUrl:(id)url;
+(id)adServerUrl;
+(void)setAdServerUrl:(id)url;
+(int)networkStatus;
+(BOOL)isNetworkReachable;
+(void)updateNetworkStatus:(id)status;
+(void)initNetworkReachability;
+(BOOL)isNetworkLikelyNotReachable;
+(void)setNetworkLikelyNotReachable;
+(void)setLastNetworkOperationError:(id)error;
+(id)instance;
-(void).cxx_destruct;
@end

@interface Flurry : XXUnknownSuperclass {
}
+(void)logPaymentTransaction:(id)transaction statusCallback:(id)callback;
+(void)removeInstallationIDFromKeychain;
+(BOOL)flurryUserInfo:(id)info;
+(BOOL)isFlurryUserInfo:(id)info;
+(void)disableWatchConnectivity;
+(void)disableTransferOfFlurryInfo;
+(BOOL)sendUsageInfo;
+(BOOL)hasUserOptedOut;
+(void)setFlurryOptOut:(BOOL)anOut;
+(void)shutdown;
+(void)setShowErrorInLogEnabled:(BOOL)logEnabled;
+(void)setAge:(int)age;
+(void)setGender:(id)gender;
+(void)setBackgroundSessionEnabled:(BOOL)enabled;
+(void)setSessionReportsOnPauseEnabled:(BOOL)enabled;
+(void)setSessionReportsOnCloseEnabled:(BOOL)enabled;
+(void)setCrashReportingEnabled:(BOOL)enabled;
+(void)setSecureTransportEnabledDeprecated:(BOOL)deprecated;
+(void)setAppCloudServerToStaging:(BOOL)staging;
+(void)setPulseCBServerURL:(id)url;
+(void)setPulseServerURL:(id)url;
+(void)setPulseEnabled:(BOOL)enabled;
+(void)setEventLoggingEnabled:(BOOL)enabled;
+(void)setUserID:(id)anId;
+(void)endTimedEvent:(id)event withParameters:(id)parameters;
+(int)logEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed;
+(int)logEvent:(id)event timed:(BOOL)timed;
+(int)logEvent:(int)event syndicationID:(id)anId parameters:(id)parameters;
+(BOOL)areParametersValidForSyndicationEvent:(int)syndicationEvent syndicationID:(id)anId parameters:(id)parameters;
+(id)updateSyndicationParameters:(id)parameters syndicationID:(id)anId;
+(void)logPageView;
+(void)stopLogPageViewsForTarget:(id)target;
+(void)logAllPageViewsForTarget:(id)target;
+(void)logAllPageViews:(id)views;
+(void)logError:(id)error message:(id)message error:(id)error3;
+(void)logError:(id)error message:(id)message exception:(id)exception;
+(int)logEvent:(id)event withParameters:(id)parameters;
+(int)logEvent:(id)event;
+(void)addOrigin:(id)origin withVersion:(id)version withParameters:(id)parameters;
+(void)addOrigin:(id)origin withVersion:(id)version;
+(void)sessionProperties:(id)properties;
+(void)addSessionOrigin:(id)origin withDeepLink:(id)deepLink;
+(void)addSessionOrigin:(id)origin;
+(void)didFinishLaunchingWithOptionsInBackground:(id)background;
+(void)applicationDidBecomeActive;
+(void)applicationWillEnterForeground;
+(void)pauseSession;
+(void)pauseBackgroundSession;
+(void)endSession;
+(void)setDelegate:(id)delegate;
+(void)setLatitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(float)accuracy verticalAccuracy:(float)accuracy4;
+(id)getSessionID;
+(BOOL)activeSessionExists;
+(void)startupNetworkAndSendSession;
+(void)startSession:(id)session;
+(void)startSession:(id)session withSessionBuilder:(id)sessionBuilder;
+(void)startSession:(id)session withOptions:(id)options withSessionBuilder:(id)sessionBuilder;
+(void)startSession:(id)session withOptions:(id)options;
+(void)createAndSendSession;
+(void)applicationWillResignActive;
+(void)setMaxSessionsSaved:(int)saved;
+(void)setSessionContinueSeconds:(int)seconds;
+(int)sessionContinueSeconds;
+(void)setServerURL:(id)url;
+(void)setDebugLogEnabled:(BOOL)enabled;
+(void)setLogLevel:(int)level;
+(id)getFlurryAgentVersion;
+(void)parseDictionary:(id)dictionary;
+(void)parsePropertyList:(id)list;
+(void)setLaunchOptions:(id)options;
+(void)setAppVersion:(id)version;
+(void)logAuthorizedEventWithSuccess:(BOOL)success;
@end

@interface FlurryPulseCallbackAttemptInfo : XXUnknownSuperclass <NSCoding, NSCopying> {
	BOOL _finalAttempt;
	BOOL _beingFired;
	int _logSendState;
	NSString* _substitutedUrl;
	NSString* _body;
	NSDictionary* _headers;
	NSNumber* _eventOccuranceId;
	NSString* _invokeId;
	NSNumber* _callbackId;
	NSNumber* _attemptNumber;
	NSNumber* _cbSessionId;
	NSNumber* _cbSessionOffset;
	int _httpStatus;
	int _requestState;
	NSData* _responseBody;
	NSNumber* _redirectsCount;
	NSNumber* _duration;
	NSDictionary* _params;
	NSDate* _creationTime;
	int _repeatDuration;
	int _method;
	NSDate* _expiration;
}
@property(copy, nonatomic) NSDate* expiration;
@property(assign, nonatomic) int method;
@property(assign, nonatomic) int repeatDuration;
@property(assign, nonatomic) BOOL beingFired;
@property(copy, nonatomic) NSDate* creationTime;
@property(copy, nonatomic) NSDictionary* params;
@property(copy, nonatomic) NSNumber* eventOccuranceId;
@property(copy, nonatomic) NSDictionary* headers;
@property(copy, nonatomic) NSString* body;
@property(copy, nonatomic) NSString* substitutedUrl;
@property(assign, nonatomic) int logSendState;
@property(copy, nonatomic) NSNumber* duration;
@property(copy, nonatomic) NSNumber* redirectsCount;
@property(copy, nonatomic) NSData* responseBody;
@property(assign, nonatomic) int requestState;
@property(assign, nonatomic) int httpStatus;
@property(assign, nonatomic) BOOL finalAttempt;
@property(copy, nonatomic) NSNumber* cbSessionOffset;
@property(copy, nonatomic) NSNumber* cbSessionId;
@property(copy, nonatomic) NSNumber* attemptNumber;
@property(copy, nonatomic) NSNumber* callbackId;
@property(copy, nonatomic) NSString* invokeId;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(id)data;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryDataSenderBlockInfo : XXUnknownSuperclass <NSCoding> {
	NSString* _groupIdentifier;
	NSString* _identifier;
	unsigned _dataSize;
	NSDate* _creationDate;
}
@property(retain, nonatomic) NSString* groupIdentifier;
@property(retain, nonatomic) NSDate* creationDate;
@property(assign, nonatomic) unsigned dataSize;
@property(retain, nonatomic) NSString* identifier;
-(void).cxx_destruct;
-(BOOL)setData:(id)data;
-(id)data;
-(BOOL)deletePersistentData;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(id)initWithCoder:(id)coder;
-(id)initWithData:(id)data;
@end

@interface FlurryPulseRequest : XXUnknownSuperclass <FlurryHttpAsyncTaskDelegate> {
	avro_obj_t* _pulseRequestSchema;
	avro_obj_t* _deviceTagsSchema;
	avro_obj_t* _iosTagsSchema;
	avro_obj_t* _geoTypeSchema;
	avro_obj_t* _geoLocationSchema;
	avro_obj_t* _deviceIdTypeSchema;
	avro_obj_t* _pulseRequest;
	NSDictionary* params;
	NSMutableArray* runningTasks;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableArray* runningTasks;
+(void)synchronizedPulseAccessWithCallback_sync:(id)callback_sync;
+(void)synchronizedPulseAccessWithCallback_async:(id)callback_async;
+(id)accessQueue;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)requestSuccessful:(id)successful withResponse:(id)response;
-(void)requestDidCancel:(id)request withResponse:(id)response;
-(void)requestDidFail:(id)request withResponse:(id)response;
-(void)unregisterTask:(id)task;
-(void)sendPulseRequestWithParams:(id)params;
-(BOOL)buildObjectWithParams:(id)params;
-(void)dealloc;
-(void)cleanUp;
-(void)initSchema;
@end

@interface FlurrySessionInfo : XXUnknownSuperclass {
}
+(id)agentVersion;
+(void)setMaxSessions:(int)sessions;
+(int)maxSessions;
+(int)maxTransactions;
+(int)maxErrors;
+(int)maxEventCounts;
+(int)maxEventLogCount;
+(int)maxSessionProperties;
+(int)maxOriginSets;
@end

@interface FlurryActor : XXUnknownSuperclass {
	NSOperationQueue* _operationQueue;
	NSObject<OS_dispatch_queue>* _queue;
	NSThread* _activeThread;
}
@property(retain, nonatomic) NSThread* activeThread;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
-(void).cxx_destruct;
-(id)wrapAsyncBlock:(id)block;
-(id)wrapSyncBlock:(id)block withException:(id)exception onCurrentThread:(id)thread;
-(void)asyncBlock:(id)block onGroup:(id)group;
-(void)asyncBlock:(id)block;
-(void)syncBlock:(id)block;
-(id)initWithDescription:(id)description target:(id)target;
-(id)initWithDescription:(id)description;
-(id)init;
@end

@interface FlurryiOSUtil : XXUnknownSuperclass {
}
+(BOOL)isInBackground;
+(BOOL)theAppIsActive;
+(CGRect)screenBounds;
+(CGRect)screenBounds:(id)bounds;
+(id)getIdentifierForVendor;
+(int)getSystemVersionAsAnInteger;
+(id)partnerCode;
+(id)deviceModel;
+(id)deviceManufacturer;
+(id)deviceBuild;
+(id)appVersion;
+(id)appShortVersion;
+(float)screenSize;
+(BOOL)isRetina;
+(BOOL)isIPad;
+(int)userDeviceIdiom;
+(unsigned short)agentPlatform;
+(id)getCanvasOrientation;
+(BOOL)canvasInLandscapeLeft:(id)landscapeLeft;
+(BOOL)canvasInLandscapeRight:(id)landscapeRight;
+(BOOL)canvasInLandscape:(id)landscape;
+(BOOL)canvasInPortraitUpsideDown;
+(BOOL)canvasInLandscapeLeft;
+(BOOL)canvasInLandscapeRight;
+(BOOL)canvasInLandscape;
+(BOOL)deviceInLandscape;
@end

@interface FlurryDataSender : FlurryDataSenderBase <FlurryHttpAsyncTaskDelegate> {
	FlurryDataSenderIndex* _dataIndex;
	id<FlurryDataSenderDelegate> _dataSenderDelegate;
	Class _httpAsyncTaskClass;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) Class httpAsyncTaskClass;
@property(assign, nonatomic) __weak id<FlurryDataSenderDelegate> dataSenderDelegate;
@property(retain, nonatomic) FlurryDataSenderIndex* dataIndex;
+(id)dataKey;
+(void)cleanup;
+(id)instance;
+(void)setupInstanceWithQueue:(id)queue backgroundTracker:(id)tracker;
+(void)setupInstanceWithQueue:(id)queue;
-(void).cxx_destruct;
-(void)retransmitNotSentBlocks;
-(void)didCompleteAllTasks;
-(void)parseResponse:(id)response;
-(int)parseCookies:(id)cookies;
-(void)requestSuccessComplete:(id)complete withResponse:(id)response;
-(void)requestSuccessful:(id)successful withResponse:(id)response;
-(void)requestDidCancel:(id)request withResponse:(id)response;
-(void)requestDidFail:(id)request withResponse:(id)response;
-(void)sendSessionsData:(id)data;
-(void)sendData:(id)data withIdentifier:(id)identifier;
-(BOOL)everSentReportSuccessfully;
-(void)removeStoredDataWithIdentifier:(id)identifier;
-(id)storeData:(id)data;
-(void)setup;
-(id)initWithQueue:(id)queue backgroundTracker:(id)tracker;
-(id)initWithQueue:(id)queue;
@end

@interface FlurryEvent : XXUnknownSuperclass <NSCoding> {
	NSString* _name;
	NSDate* _started;
	NSDate* _ended;
	BOOL _timed;
	BOOL _automaticallyEnded;
	NSDictionary* _parameters;
	NSNumber* _eventLogId;
	FlurryTransaction* _transaction;
}
@property(retain, nonatomic) NSDictionary* parameters;
@property(retain, nonatomic) FlurryTransaction* transaction;
@property(retain, nonatomic) NSNumber* eventLogId;
@property(assign, nonatomic) BOOL automaticallyEnded;
@property(assign, nonatomic) BOOL timed;
@property(retain, nonatomic) NSDate* ended;
@property(retain, nonatomic) NSDate* started;
@property(copy, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)dataRelativeToSessionStart:(id)sessionStart;
-(long)duration;
-(long)startOffsetFromSessionStart:(id)sessionStart;
-(BOOL)isRevenue;
-(BOOL)isUnterminated;
-(void)encodeWithCoder:(id)coder;
-(void)updateParameters:(id)parameters;
-(void)updateID;
-(id)initWithCoder:(id)coder;
-(id)initWithName:(id)name timed:(BOOL)timed parameters:(id)parameters transaction:(id)transaction;
-(id)initWithName:(id)name timed:(BOOL)timed parameters:(id)parameters;
-(id)initWithName:(id)name timed:(BOOL)timed;
-(id)initWithName:(id)name;
@end

@interface FlurryHeartBeater : XXUnknownSuperclass {
	NSTimer* _timer;
}
+(id)instance;
+(id)createAndStartInstance:(double)instance;
-(void).cxx_destruct;
-(void)dealloc;
-(void)heartBeat;
-(void)start:(double)start;
@end

@interface FlurryPulseEventTrigger : XXUnknownSuperclass <NSCoding, NSCopying> {
	NSString* _eventName;
	NSString* _eventParamName;
	NSArray* _eventParamValues;
}
@property(retain, nonatomic) NSArray* eventParamValues;
@property(retain, nonatomic) NSString* eventParamName;
@property(retain, nonatomic) NSString* eventName;
-(void).cxx_destruct;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)copyWithZone:(NSZone*)zone;
-(id)dataDictionary;
-(void)encodeWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryGlobalPersistentManager : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* _persistentGlobalsMapQueue;
	NSObject<OS_dispatch_queue>* _persistentCookiesMapQueue;
	NSObject<OS_dispatch_queue>* _persistentUrlsMapQueue;
	NSObject<OS_dispatch_queue>* _persistentPulseUrlsMapQueue;
	NSObject<OS_dispatch_queue>* _persistentPulsePrepUrlsMapQueue;
	NSMutableDictionary* _persistentGlobalsMap;
	NSMutableDictionary* _persistentCookiesMap;
	NSMutableDictionary* _persistentUrlsMap;
	NSMutableDictionary* _persistentPulseUrlsMap;
	NSMutableDictionary* _persistentPulsePrepUrlsMap;
}
@property(retain, nonatomic) NSMutableDictionary* persistentPulsePrepUrlsMap;
@property(retain, nonatomic) NSMutableDictionary* persistentPulseUrlsMap;
@property(retain, nonatomic) NSMutableDictionary* persistentUrlsMap;
@property(retain, nonatomic) NSMutableDictionary* persistentCookiesMap;
@property(retain, nonatomic) NSMutableDictionary* persistentGlobalsMap;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* persistentPulsePrepUrlsMapQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* persistentPulseUrlsMapQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* persistentUrlsMapQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* persistentCookiesMapQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* persistentGlobalsMapQueue;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)processWriteOperationForPersistentPulsePrepUrlMapWithBlock:(id)block;
-(void)processReadOperationForPersistentPulsePrepUrlMapWithBlock:(id)block;
-(void)processWriteOperationForPersistentPulseUrlMapSyncWithBlock:(id)block;
-(void)processWriteOperationForPersistentPulseUrlMapWithBlock:(id)block;
-(void)processReadOperationForPersistentPulseUrlMapWithBlock:(id)block;
-(void)processWriteOperationForPersistentUrlMapWithBlock:(id)block;
-(void)processReadOperationForPersistentUrlMapWithBlock:(id)block;
-(void)processWriteOperationForPersistentCookiesMapSyncWithBlock:(id)block;
-(void)processWriteOperationForPersistentCookiesMapWithBlock:(id)block;
-(void)processReadOperationForPersistentCookiesMapSyncWithBlock:(id)block;
-(void)processReadOperationForPersistentCookiesMapWithBlock:(id)block;
-(void)processWriteOperationForPersistentGlobalsMapWithBlock:(id)block;
-(void)processReadOperationForPersistentGlobalsMapSyncWithBlock:(id)block;
-(void)processReadOperationForPersistentGlobalsMapWithBlock:(id)block;
-(id)init;
@end

@interface FlurryAutoIncrement : XXUnknownSuperclass <NSCoding> {
	NSMutableDictionary* counters;
}
@property(retain, nonatomic) NSMutableDictionary* counters;
+(void)setWatchInstance:(id)instance;
+(id)instance;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)resetAll;
-(int)nextCountFor:(int)aFor;
-(id)init;
@end

@interface FlurryPulseTriggerInvokeInfo : XXUnknownSuperclass <NSCoding, NSCopying> {
	BOOL _includesEventTrigger;
	NSString* _invokeId;
	int _triggerType;
	NSNumber* _sessionId;
	NSNumber* _sessionOffset;
	NSNumber* _eventOccuranceId;
	NSString* _eventName;
	NSMutableArray* _callbacks;
}
@property(retain) NSMutableArray* callbacks;
@property(retain, nonatomic) NSString* eventName;
@property(retain, nonatomic) NSNumber* eventOccuranceId;
@property(assign, nonatomic) BOOL includesEventTrigger;
@property(retain, nonatomic) NSNumber* sessionOffset;
@property(retain, nonatomic) NSNumber* sessionId;
@property(assign, nonatomic) int triggerType;
@property(retain, nonatomic) NSString* invokeId;
-(void).cxx_destruct;
-(void)removeCompletedCallbacks;
-(unsigned)removeSentCBAttempts;
-(void)setCBAttemptsSent;
-(id)copyWithZone:(NSZone*)zone;
-(id)data;
-(id)dataDictionary;
-(void)encodeWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithCoder:(id)coder;
@end

@interface FlurryConnectionDelegate : XXUnknownSuperclass {
	BOOL _done;
	NSMutableURLRequest* _originalRequest;
	NSHTTPURLResponse* _response;
	NSMutableData* _body;
	NSError* _error;
	id<FlurryHttpAsyncTaskDelegate> _httpTaskDelegate;
	FlurryHttpAsyncTask* _httpTask;
	int _redirectCount;
}
@property(assign, nonatomic) int redirectCount;
@property(retain, nonatomic) FlurryHttpAsyncTask* httpTask;
@property(retain, nonatomic) id<FlurryHttpAsyncTaskDelegate> httpTaskDelegate;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSMutableData* body;
@property(readonly, assign, nonatomic) NSHTTPURLResponse* response;
@property(retain, nonatomic) NSMutableURLRequest* originalRequest;
-(void).cxx_destruct;
-(id)constructResponse;
-(void)connectionCanceled;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)isDone;
-(id)initWithTaskDelegate:(id)taskDelegate taskParent:(id)parent;
-(id)init;
@end

@interface FlurryPulseEventController : XXUnknownSuperclass <FlurryHttpAsyncTaskDelegate> {
	NSObject<OS_dispatch_queue>* queue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
+(int)pulseEventStringToEnum:(id)anEnum;
+(id)pulseEventEnumToString:(int)string;
+(id)pulseEventArrayInstance;
+(void)cleanup;
+(id)sharedInstance;
-(void).cxx_destruct;
-(id)substituteParamsInDictionary:(id)dictionary withValuesDictionary:(id)valuesDictionary forPattern:(id)pattern;
-(void)firePendingUrls;
-(void)fireUrlOnTimer:(id)timer;
-(void)setTimerToFireUrlWithInvokeInfo:(id)invokeInfo;
-(void)makePulseRequest;
-(void)manageUrlStorage:(id)storage;
-(void)firePendingUrlsOnNetworkAvailability;
-(void)networkStatusChanged:(id)changed;
-(void)appWillResume:(id)app;
-(void)appWillBackground:(id)app;
-(void)requestDidCancel:(id)request withResponse:(id)response;
-(void)requestDidFail:(id)request withResponse:(id)response;
-(void)requestSuccessful:(id)successful withResponse:(id)response;
-(void)fireAllConfigUrls;
-(void)asyncInvokeURLWithParams:(id)params;
-(void)processEvent:(id)event withParams:(id)params;
-(void)updatePulseForAdTracking;
-(void)registerForNotifications:(id)notifications;
-(void)dealloc;
-(id)init;
@end

@interface FlurryDataSenderBase : XXUnknownSuperclass {
	NSMutableArray* _runningTasks;
	NSObject<OS_dispatch_queue>* _queue;
	FlurryBackgroundTaskTracker* _backgroundTaskTracker;
}
@property(retain, nonatomic) FlurryBackgroundTaskTracker* backgroundTaskTracker;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(retain, nonatomic) NSMutableArray* runningTasks;
-(void).cxx_destruct;
-(void)performRetransmitNotSentBlocks;
-(void)networkStatusChanged:(id)changed;
-(void)cancelTasks;
-(void)didCompleteAllTasks;
-(void)retransmitNotSentBlocks;
-(void)unregisterTask:(id)task completedSuccessfuly:(BOOL)successfuly;
-(void)registerNewTask:(id)task;
-(BOOL)hasOngoingTasksWindow;
-(void)dealloc;
-(id)initWithQueue:(id)queue backgroundTracker:(id)tracker;
-(id)initWithQueue:(id)queue;
-(id)init;
-(void)initialize;
@end

@interface FlurryRecordTransactionRequestManager : XXUnknownSuperclass {
	NSMutableArray* _transactionRequests;
	NSObject<OS_dispatch_queue>* _sessionResourceAccessQueue;
}
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* sessionResourceAccessQueue;
@property(retain, nonatomic) NSMutableArray* transactionRequests;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)recordTransaction:(id)transaction statusCallback:(id)callback;
-(id)init;
@end

@interface FlurryPLCrashSignalHandler : XXUnknownSuperclass {
	darwin_sigaltstack _sigstk;
}
+(void)resetHandlers;
+(id)sharedHandler;
+(void)initialize;
-(BOOL)registerHandlerForSignal:(int)signal callback:(/*function-pointer*/ void*)callback context:(void*)context error:(id*)error;
-(BOOL)registerHandlerWithSignal:(int)signal error:(id*)error;
-(id)init;
@end

@interface FlurryPLCrashReporter : XXUnknownSuperclass {
	FlurryPLCrashReporterConfig* _config;
	BOOL _enabled;
	FlurryPLCrashMachExceptionServer* _machServer;
	FlurryPLCrashMachExceptionPortSet* _previousMachPorts;
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
	NSString* _applicationMarketingVersion;
	NSString* _crashReportDirectory;
}
+(id)sharedReporter;
+(void)initialize;
-(void)setCrashCallbacks:(PLCrashReporterCallbacks*)callbacks;
-(id)generateLiveReportAndReturnError:(id*)error;
-(id)generateLiveReport;
-(id)generateLiveReportWithThread:(unsigned)thread error:(id*)error;
-(id)generateLiveReportWithThread:(unsigned)thread;
-(BOOL)enableCrashReporterAndReturnError:(id*)error;
-(BOOL)enableCrashReporter;
-(BOOL)purgePendingCrashReportAndReturnError:(id*)error;
-(BOOL)purgePendingCrashReport;
-(id)loadPendingCrashReportDataAndReturnError:(id*)error;
-(id)loadPendingCrashReportData;
-(BOOL)hasPendingCrashReport;
-(id)initWithConfiguration:(id)configuration;
-(id)init;
-(id)crashReportPath;
-(id)queuedCrashReportDirectory;
-(id)crashReportDirectory;
-(BOOL)populateCrashReportDirectoryAndReturnError:(id*)error;
-(int)mapToAsyncSymbolicationStrategy:(unsigned)asyncSymbolicationStrategy;
-(void)dealloc;
-(id)enableMachExceptionServerWithPreviousPortSet:(id*)previousPortSet callback:(/*function-pointer*/ void*)callback context:(void*)context error:(id*)error;
-(id)initWithBundle:(id)bundle configuration:(id)configuration;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier appVersion:(id)version appMarketingVersion:(id)version3 configuration:(id)configuration;
@end

@interface FlurryPLCrashReport : XXUnknownSuperclass {
	PLCrashReportDecoder* _decoder;
	FlurryPLCrashReportSystemInfo* _systemInfo;
	FlurryPLCrashReportMachineInfo* _machineInfo;
	FlurryPLCrashReportApplicationInfo* _applicationInfo;
	FlurryPLCrashReportProcessInfo* _processInfo;
	FlurryPLCrashReportSignalInfo* _signalInfo;
	FlurryPLCrashReportMachExceptionInfo* _machExceptionInfo;
	NSArray* _threads;
	NSArray* _images;
	FlurryPLCrashReportExceptionInfo* _exceptionInfo;
	CFUUIDRef _uuid;
}
@property(readonly, assign, nonatomic) CFUUIDRef uuidRef;
@property(readonly, assign, nonatomic) FlurryPLCrashReportExceptionInfo* exceptionInfo;
@property(readonly, assign, nonatomic) BOOL hasExceptionInfo;
@property(readonly, assign, nonatomic) NSArray* images;
@property(readonly, assign, nonatomic) NSArray* threads;
@property(readonly, assign, nonatomic) FlurryPLCrashReportMachExceptionInfo* machExceptionInfo;
@property(readonly, assign, nonatomic) FlurryPLCrashReportSignalInfo* signalInfo;
@property(readonly, assign, nonatomic) FlurryPLCrashReportProcessInfo* processInfo;
@property(readonly, assign, nonatomic) BOOL hasProcessInfo;
@property(readonly, assign, nonatomic) FlurryPLCrashReportApplicationInfo* applicationInfo;
@property(readonly, assign, nonatomic) FlurryPLCrashReportMachineInfo* machineInfo;
@property(readonly, assign, nonatomic) BOOL hasMachineInfo;
@property(readonly, assign, nonatomic) FlurryPLCrashReportSystemInfo* systemInfo;
-(id)imageForAddress:(unsigned long long)address;
-(void)dealloc;
-(id)initWithData:(id)data error:(id*)error;
-(id)extractMachExceptionInfo:(Plcrash__CrashReport__Signal__MachException*)info error:(id*)error;
-(id)extractSignalInfo:(Plcrash__CrashReport__Signal*)info error:(id*)error;
-(id)extractExceptionInfo:(Plcrash__CrashReport__Exception*)info error:(id*)error;
-(id)extractImageInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractThreadInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractStackFrameInfo:(Plcrash__CrashReport__Thread__StackFrame*)info error:(id*)error;
-(id)extractSymbolInfo:(Plcrash__CrashReport__Symbol*)info error:(id*)error;
-(id)extractProcessInfo:(Plcrash__CrashReport__ProcessInfo*)info error:(id*)error;
-(id)extractApplicationInfo:(Plcrash__CrashReport__ApplicationInfo*)info error:(id*)error;
-(id)extractMachineInfo:(Plcrash__CrashReport__MachineInfo*)info error:(id*)error;
-(id)extractProcessorInfo:(Plcrash__CrashReport__Processor*)info error:(id*)error;
-(id)extractSystemInfo:(Plcrash__CrashReport__SystemInfo*)info error:(id*)error;
-(Plcrash__CrashReport*)decodeCrashData:(id)data error:(id*)error;
@end

@interface FlurryPLCrashReportSystemInfo : XXUnknownSuperclass {
	int _operatingSystem;
	NSString* _osVersion;
	NSString* _osBuild;
	int _architecture;
	NSDate* _timestamp;
}
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(readonly, assign, nonatomic) int architecture;
@property(readonly, assign, nonatomic) NSString* operatingSystemBuild;
@property(readonly, assign, nonatomic) NSString* operatingSystemVersion;
@property(readonly, assign, nonatomic) int operatingSystem;
-(void)dealloc;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version operatingSystemBuild:(id)build architecture:(int)architecture timestamp:(id)timestamp;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version architecture:(int)architecture timestamp:(id)timestamp;
@end

@interface FlurryPLCrashReportApplicationInfo : XXUnknownSuperclass {
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
	NSString* _applicationMarketingVersion;
}
@property(readonly, assign, nonatomic) NSString* applicationMarketingVersion;
@property(readonly, assign, nonatomic) NSString* applicationVersion;
@property(readonly, assign, nonatomic) NSString* applicationIdentifier;
-(void)dealloc;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier applicationVersion:(id)version applicationMarketingVersion:(id)version3;
@end

@interface FlurryPLCrashReportThreadInfo : XXUnknownSuperclass {
	int _threadNumber;
	NSArray* _stackFrames;
	BOOL _crashed;
	NSArray* _registers;
}
@property(readonly, assign, nonatomic) NSArray* registers;
@property(readonly, assign, nonatomic) BOOL crashed;
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) int threadNumber;
-(void)dealloc;
-(id)initWithThreadNumber:(int)threadNumber stackFrames:(id)frames crashed:(BOOL)crashed registers:(id)registers;
@end

@interface FlurryPLCrashReportBinaryImageInfo : XXUnknownSuperclass {
	FlurryPLCrashReportProcessorInfo* _processorInfo;
	unsigned long long _baseAddress;
	unsigned long long _imageSize;
	NSString* _imageName;
	BOOL _hasImageUUID;
	NSString* _imageUUID;
}
@property(readonly, assign, nonatomic) NSString* imageUUID;
@property(readonly, assign, nonatomic) BOOL hasImageUUID;
@property(readonly, assign, nonatomic) NSString* imageName;
@property(readonly, assign, nonatomic) unsigned long long imageSize;
@property(readonly, assign, nonatomic) unsigned long long imageBaseAddress;
@property(readonly, assign, nonatomic) FlurryPLCrashReportProcessorInfo* codeType;
-(void)dealloc;
-(id)initWithCodeType:(id)codeType baseAddress:(unsigned long long)address size:(unsigned long long)size name:(id)name uuid:(id)uuid;
@end

@interface FlurryPLCrashReportExceptionInfo : XXUnknownSuperclass {
	NSString* _name;
	NSString* _reason;
	NSArray* _stackFrames;
}
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) NSString* exceptionReason;
@property(readonly, assign, nonatomic) NSString* exceptionName;
-(void)dealloc;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason stackFrames:(id)frames;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason;
@end

@interface FlurryPLCrashReportSignalInfo : XXUnknownSuperclass {
	NSString* _name;
	NSString* _code;
	unsigned long long _address;
}
@property(readonly, assign, nonatomic) unsigned long long address;
@property(readonly, assign, nonatomic) NSString* code;
@property(readonly, assign, nonatomic) NSString* name;
-(void)dealloc;
-(id)initWithSignalName:(id)signalName code:(id)code address:(unsigned long long)address;
@end

@interface FlurryPLCrashReportProcessInfo : XXUnknownSuperclass {
	NSString* _processName;
	unsigned _processID;
	NSString* _processPath;
	NSDate* _processStartTime;
	NSString* _parentProcessName;
	unsigned _parentProcessID;
	BOOL _native;
}
@property(readonly, assign, nonatomic) BOOL native;
@property(readonly, assign, nonatomic) unsigned parentProcessID;
@property(readonly, assign, nonatomic) NSString* parentProcessName;
@property(readonly, assign, nonatomic) NSDate* processStartTime;
@property(readonly, assign, nonatomic) NSString* processPath;
@property(readonly, assign, nonatomic) unsigned processID;
@property(readonly, assign, nonatomic) NSString* processName;
-(void)dealloc;
-(id)initWithProcessName:(id)processName processID:(unsigned)anId processPath:(id)path processStartTime:(id)time parentProcessName:(id)name parentProcessID:(unsigned)anId6 native:(BOOL)native;
@end

@interface FlurryPLCrashReportTextFormatter : XXUnknownSuperclass <FlurryPLCrashReportFormatter> {
	int _textFormat;
	unsigned _stringEncoding;
}
+(id)stringValueForCrashReport:(id)crashReport withTextFormat:(int)textFormat;
+(id)formatStackFrame:(id)frame frameIndex:(unsigned)index report:(id)report lp64:(BOOL)a64;
-(id)formatReport:(id)report error:(id*)error;
-(id)initWithTextFormat:(int)textFormat stringEncoding:(unsigned)encoding;
@end

@interface FlurryPLCrashReportProcessorInfo : XXUnknownSuperclass {
	int _typeEncoding;
	unsigned long long _type;
	unsigned long long _subtype;
}
@property(readonly, assign, nonatomic) unsigned long long subtype;
@property(readonly, assign, nonatomic) unsigned long long type;
@property(readonly, assign, nonatomic) int typeEncoding;
-(id)initWithTypeEncoding:(int)typeEncoding type:(unsigned long long)type subtype:(unsigned long long)subtype;
@end

@interface FlurryPLCrashReportMachineInfo : XXUnknownSuperclass {
	NSString* _modelName;
	FlurryPLCrashReportProcessorInfo* _processorInfo;
	unsigned _processorCount;
	unsigned _logicalProcessorCount;
}
@property(readonly, assign, nonatomic) unsigned logicalProcessorCount;
@property(readonly, assign, nonatomic) unsigned processorCount;
@property(readonly, assign, nonatomic) FlurryPLCrashReportProcessorInfo* processorInfo;
@property(readonly, assign, nonatomic) NSString* modelName;
-(void)dealloc;
-(id)initWithModelName:(id)modelName processorInfo:(id)info processorCount:(unsigned)count logicalProcessorCount:(unsigned)count4;
@end

@interface FlurryPLCrashReportStackFrameInfo : XXUnknownSuperclass {
	unsigned long long _instructionPointer;
	FlurryPLCrashReportSymbolInfo* _symbolInfo;
}
@property(readonly, assign, nonatomic) FlurryPLCrashReportSymbolInfo* symbolInfo;
@property(readonly, assign, nonatomic) unsigned long long instructionPointer;
-(void)dealloc;
-(id)initWithInstructionPointer:(unsigned long long)instructionPointer symbolInfo:(id)info;
@end

@interface FlurryPLCrashReportRegisterInfo : XXUnknownSuperclass {
	NSString* _registerName;
	unsigned long long _registerValue;
}
@property(readonly, assign, nonatomic) unsigned long long registerValue;
@property(readonly, assign, nonatomic) NSString* registerName;
-(void)dealloc;
-(id)initWithRegisterName:(id)registerName registerValue:(unsigned long long)value;
@end

@interface FlurryPLCrashReportSymbolInfo : XXUnknownSuperclass {
	NSString* _symbolName;
	unsigned long long _startAddress;
	unsigned long long _endAddress;
}
@property(readonly, assign, nonatomic) unsigned long long endAddress;
@property(readonly, assign, nonatomic) unsigned long long startAddress;
@property(readonly, assign, nonatomic) NSString* symbolName;
-(void)dealloc;
-(id)initWithSymbolName:(id)symbolName startAddress:(unsigned long long)address endAddress:(unsigned long long)address3;
@end

@interface FlurryPLCrashMachExceptionServer : XXUnknownSuperclass {
	plcrash_exception_server_context* _serverContext;
}
@property(readonly, assign, nonatomic) unsigned serverThread;
-(void)dealloc;
-(id)exceptionPortWithMask:(unsigned)mask error:(id*)error;
-(unsigned)copySendRightForServerAndReturningError:(id*)serverAndReturningError;
-(id)initWithCallBack:(/*function-pointer*/ void*)callBack context:(void*)context error:(id*)error;
@end

@interface FlurryPLCrashProcessInfo : XXUnknownSuperclass {
	int _processID;
	NSString* _processName;
	int _parentProcessID;
	timeval _startTime;
	BOOL _traced;
}
@property(readonly, assign, nonatomic, getter=isTraced) BOOL traced;
@property(readonly, assign, nonatomic) timeval startTime;
@property(readonly, assign, nonatomic) int parentProcessID;
@property(readonly, assign, nonatomic) NSString* processName;
@property(readonly, assign, nonatomic) int processID;
+(id)currentProcessInfo;
-(void)dealloc;
-(id)initWithProcessID:(int)processID;
@end

@interface FlurryPLCrashHostInfo : XXUnknownSuperclass {
	PLCrashHostInfoVersion _darwinVersion;
}
@property(readonly, assign, nonatomic) PLCrashHostInfoVersion darwinVersion;
+(id)currentHostInfo;
-(id)init;
@end

@interface FlurryPLCrashMachExceptionPort : XXUnknownSuperclass {
	unsigned _mask;
	unsigned _port;
	int _behavior;
	int _flavor;
}
@property(readonly, assign, nonatomic) int flavor;
@property(readonly, assign, nonatomic) int behavior;
@property(readonly, assign, nonatomic) unsigned mask;
@property(readonly, assign, nonatomic) unsigned server_port;
+(id)exceptionPortsForThread:(unsigned)thread mask:(unsigned)mask error:(id*)error;
+(id)exceptionPortsForTask:(unsigned)task mask:(unsigned)mask error:(id*)error;
-(BOOL)registerForThread:(unsigned)thread previousPortSet:(id*)set error:(id*)error;
-(BOOL)registerForTask:(unsigned)task previousPortSet:(id*)set error:(id*)error;
-(void)dealloc;
-(id)initWithServerPort:(unsigned)serverPort mask:(unsigned)mask behavior:(int)behavior flavor:(int)flavor;
@end

@interface FlurryPLCrashMachExceptionPortSet : XXUnknownSuperclass <NSFastEnumeration> {
	NSSet* _state_set;
	plcrash_mach_exception_port_set _asyncSafeRepresentation;
}
@property(readonly, assign, nonatomic) plcrash_mach_exception_port_set asyncSafeRepresentation;
@property(readonly, assign, nonatomic) NSSet* set;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)dealloc;
-(id)initWithAsyncSafeRepresentation:(plcrash_mach_exception_port_set)asyncSafeRepresentation;
-(id)initWithSet:(id)set;
@end

@interface FlurryPLCrashReporterConfig : XXUnknownSuperclass {
	unsigned _signalHandlerType;
	unsigned _symbolicationStrategy;
}
@property(readonly, assign, nonatomic) unsigned symbolicationStrategy;
@property(readonly, assign, nonatomic) unsigned signalHandlerType;
+(id)defaultConfiguration;
-(id)initWithSignalHandlerType:(unsigned)signalHandlerType symbolicationStrategy:(unsigned)strategy;
-(id)init;
@end

@interface FlurryPLCrashUncaughtExceptionHandler : XXUnknownSuperclass {
}
@end

@interface FlurryPLCrashReportMachExceptionInfo : XXUnknownSuperclass {
	unsigned long long _type;
	NSArray* _codes;
}
@property(readonly, assign, nonatomic) NSArray* codes;
@property(readonly, assign, nonatomic) unsigned long long type;
-(void)dealloc;
-(id)initWithType:(unsigned long long)type codes:(id)codes;
@end

@interface PodsDummy_NSString_HTML : XXUnknownSuperclass {
}
@end

@interface PodsDummy_RMStore : XXUnknownSuperclass {
}
@end

@interface RMAddPaymentParameters : XXUnknownSuperclass {
	id _successBlock;
	id _failureBlock;
}
@property(copy, nonatomic) id failureBlock;
@property(copy, nonatomic) id successBlock;
-(void).cxx_destruct;
@end

@interface RMStore : XXUnknownSuperclass <SKRequestDelegate, SKPaymentTransactionObserver> {
	NSMutableDictionary* _addPaymentParameters;
	NSMutableDictionary* _products;
	NSMutableSet* _productsRequestDelegates;
	NSMutableArray* _restoredTransactions;
	int _pendingRestoredTransactionsCount;
	BOOL _restoredCompletedTransactionsFinished;
	SKReceiptRefreshRequest* _refreshReceiptRequest;
	id _refreshReceiptFailureBlock;
	id _refreshReceiptSuccessBlock;
	id _restoreTransactionsFailureBlock;
	id _restoreTransactionsSuccessBlock;
	id<RMStoreContentDownloader> _contentDownloader;
	id<RMStoreReceiptVerificator> _receiptVerificator;
	id<RMStoreTransactionPersistor> _transactionPersistor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<RMStoreTransactionPersistor> transactionPersistor;
@property(assign, nonatomic) __weak id<RMStoreReceiptVerificator> receiptVerificator;
@property(assign, nonatomic) __weak id<RMStoreContentDownloader> contentDownloader;
+(BOOL)hasPendingDownloadsInTransaction:(id)transaction;
+(id)localizedPriceOfProduct:(id)product;
+(id)receiptURL;
+(BOOL)canMakePayments;
+(id)defaultStore;
-(void).cxx_destruct;
-(void)removeProductsRequestDelegate:(id)delegate;
-(void)postNotificationWithName:(id)name transaction:(id)transaction userInfoExtras:(id)extras;
-(void)postNotificationWithName:(id)name download:(id)download userInfoExtras:(id)extras;
-(void)addProduct:(id)product;
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
-(id)popAddPaymentParametersForIdentifier:(id)identifier;
-(void)notifyRestoreTransactionFinishedIfApplicableAfterTransaction:(id)transaction;
-(void)finishTransaction:(id)transaction queue:(id)queue;
-(void)didDownloadSelfHostedContentForTransaction:(id)transaction queue:(id)queue;
-(void)didVerifyTransaction:(id)transaction queue:(id)queue;
-(void)didDeferTransaction:(id)transaction;
-(void)didRestoreTransaction:(id)transaction queue:(id)queue;
-(void)didFailTransaction:(id)transaction queue:(id)queue error:(id)error;
-(void)didPurchaseTransaction:(id)transaction queue:(id)queue;
-(void)didUpdateDownload:(id)download queue:(id)queue;
-(void)didPauseDownload:(id)download queue:(id)queue;
-(void)didFinishDownload:(id)download queue:(id)queue;
-(void)didFailDownload:(id)download queue:(id)queue;
-(void)didCancelDownload:(id)download queue:(id)queue;
-(void)paymentQueue:(id)queue updatedDownloads:(id)downloads;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)addStoreObserver:(id)observer selector:(SEL)selector notificationName:(id)name;
-(void)removeStoreObserver:(id)observer;
-(void)addStoreObserver:(id)observer;
-(id)productForIdentifier:(id)identifier;
-(void)refreshReceiptOnSuccess:(id)success failure:(id)failure;
-(void)refreshReceipt;
-(void)restoreTransactionsOfUser:(id)user onSuccess:(id)success failure:(id)failure;
-(void)restoreTransactionsOnSuccess:(id)success failure:(id)failure;
-(void)restoreTransactions;
-(void)requestProducts:(id)products success:(id)success failure:(id)failure;
-(void)requestProducts:(id)products;
-(void)addPayment:(id)payment user:(id)user success:(id)success failure:(id)failure;
-(void)addPayment:(id)payment success:(id)success failure:(id)failure;
-(void)addPayment:(id)payment;
-(void)dealloc;
-(id)init;
@end

@interface RMProductsRequestDelegate : XXUnknownSuperclass <SKProductsRequestDelegate> {
	id _successBlock;
	id _failureBlock;
	RMStore* _store;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak RMStore* store;
@property(copy, nonatomic) id failureBlock;
@property(copy, nonatomic) id successBlock;
-(void).cxx_destruct;
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

@interface PodsDummy_RegexKitLite : XXUnknownSuperclass {
}
@end

@interface RKLLowMemoryWarningObserver : XXUnknownSuperclass {
}
+(void)lowMemoryWarning:(id)warning;
@end

@interface RKLBlockEnumerationHelper : XXUnknownSuperclass {
	struct {
		CFStringRef regexString;
		unsigned regexHash;
		unsigned options;
		uregex* icu_regex;
		int captureCount;
		CFStringRef setToString;
		unsigned setToHash;
		int setToLength;
		unsigned setToIsImmutable : 1;
		unsigned setToNeedsConversion : 1;
		unsigned short* setToUniChar;
		NSRange setToRange;
		NSRange lastFindRange;
		NSRange lastMatchRange;
		CGPoint* buffer;
	} cachedRegex;
	struct {
		CFStringRef string;
		unsigned hash;
		int length;
		unsigned short* uniChar;
	} buffer;
	void* scratchBuffer[5];
	unsigned needToFreeBufferUniChar : 1;
}
-(void)dealloc;
-(id)initWithRegex:(id)regex options:(unsigned)options string:(id)string range:(NSRange)range error:(id*)error;
@end

@interface SDiOSVersion : XXUnknownSuperclass {
}
+(id)deviceName;
+(int)deviceSize;
+(int)deviceVersion;
+(id)deviceNamesByCode;
@end

@interface PodsDummy_SDVersion : XXUnknownSuperclass {
}
@end

@interface AutoPurgeCache : XXUnknownSuperclass {
}
-(void)dealloc;
-(id)init;
@end

@interface SDImageCache : XXUnknownSuperclass {
	NSFileManager* _fileManager;
	BOOL _shouldDecompressImages;
	BOOL _shouldDisableiCloud;
	BOOL _shouldCacheImagesInMemory;
	int _maxCacheAge;
	unsigned _maxCacheSize;
	NSCache* _memCache;
	NSString* _diskCachePath;
	NSMutableArray* _customPaths;
	NSObject<OS_dispatch_queue>* _ioQueue;
}
@property(assign, nonatomic) unsigned maxCacheSize;
@property(assign, nonatomic) int maxCacheAge;
@property(assign, nonatomic) unsigned maxMemoryCountLimit;
@property(assign, nonatomic) unsigned maxMemoryCost;
@property(assign, nonatomic) BOOL shouldCacheImagesInMemory;
@property(assign, nonatomic) BOOL shouldDisableiCloud;
@property(assign, nonatomic) BOOL shouldDecompressImages;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* ioQueue;
@property(retain, nonatomic) NSMutableArray* customPaths;
@property(retain, nonatomic) NSString* diskCachePath;
@property(retain, nonatomic) NSCache* memCache;
+(id)sharedImageCache;
-(void).cxx_destruct;
-(void)calculateSizeWithCompletionBlock:(id)completionBlock;
-(unsigned)getDiskCount;
-(unsigned)getSize;
-(void)backgroundCleanDisk;
-(void)cleanDiskWithCompletionBlock:(id)completionBlock;
-(void)cleanDisk;
-(void)clearDiskOnCompletion:(id)completion;
-(void)clearDisk;
-(void)clearMemory;
-(void)removeImageForKey:(id)key fromDisk:(BOOL)disk withCompletion:(id)completion;
-(void)removeImageForKey:(id)key fromDisk:(BOOL)disk;
-(void)removeImageForKey:(id)key withCompletion:(id)completion;
-(void)removeImageForKey:(id)key;
-(id)queryDiskCacheForKey:(id)key done:(id)done;
-(id)scaledImageForKey:(id)key image:(id)image;
-(id)diskImageForKey:(id)key;
-(id)diskImageDataBySearchingAllPathsForKey:(id)key;
-(id)imageFromDiskCacheForKey:(id)key;
-(id)imageFromMemoryCacheForKey:(id)key;
-(void)diskImageExistsWithKey:(id)key completion:(id)completion;
-(BOOL)diskImageExistsWithKey:(id)key;
-(void)storeImageDataToDisk:(id)disk forKey:(id)key;
-(void)storeImage:(id)image forKey:(id)key toDisk:(BOOL)disk;
-(void)storeImage:(id)image forKey:(id)key;
-(void)storeImage:(id)image recalculateFromImage:(BOOL)image2 imageData:(id)data forKey:(id)key toDisk:(BOOL)disk;
-(id)makeDiskCachePath:(id)path;
-(id)cachedFileNameForKey:(id)key;
-(id)defaultCachePathForKey:(id)key;
-(id)cachePathForKey:(id)key inPath:(id)path;
-(void)addReadOnlyCachePath:(id)path;
-(void)dealloc;
-(id)initWithNamespace:(id)aNamespace diskCacheDirectory:(id)directory;
-(id)initWithNamespace:(id)aNamespace;
-(id)init;
@end

@interface PodsDummy_SDWebImage : XXUnknownSuperclass {
}
@end

@interface SDWebImageDownloader : XXUnknownSuperclass <NSURLSessionTaskDelegate, NSURLSessionDataDelegate> {
	BOOL _shouldDecompressImages;
	int _executionOrder;
	NSURLCredential* _urlCredential;
	NSString* _username;
	NSString* _password;
	id _headersFilter;
	NSOperationQueue* _downloadQueue;
	NSOperation* _lastAddedOperation;
	Class _operationClass;
	NSMutableDictionary* _URLCallbacks;
	NSMutableDictionary* _HTTPHeaders;
	NSObject<OS_dispatch_queue>* _barrierQueue;
	NSURLSession* _session;
	double _downloadTimeout;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id headersFilter;
@property(retain, nonatomic) NSString* password;
@property(retain, nonatomic) NSString* username;
@property(retain, nonatomic) NSURLCredential* urlCredential;
@property(assign, nonatomic) int executionOrder;
@property(assign, nonatomic) double downloadTimeout;
@property(readonly, assign, nonatomic) unsigned currentDownloadCount;
@property(assign, nonatomic) int maxConcurrentDownloads;
@property(assign, nonatomic) BOOL shouldDecompressImages;
@property(retain, nonatomic) NSURLSession* session;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* barrierQueue;
@property(retain, nonatomic) NSMutableDictionary* HTTPHeaders;
@property(retain, nonatomic) NSMutableDictionary* URLCallbacks;
@property(assign, nonatomic) Class operationClass;
@property(assign, nonatomic) __weak NSOperation* lastAddedOperation;
@property(retain, nonatomic) NSOperationQueue* downloadQueue;
+(id)sharedDownloader;
+(void)initialize;
-(void).cxx_destruct;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(id)operationWithTask:(id)task;
-(void)cancelAllDownloads;
-(void)setSuspended:(BOOL)suspended;
-(void)addProgressCallback:(id)callback completedBlock:(id)block forURL:(id)url createCallback:(id)callback4;
-(id)downloadImageWithURL:(id)url options:(unsigned)options progress:(id)progress completed:(id)completed;
-(id)valueForHTTPHeaderField:(id)httpheaderField;
-(void)setValue:(id)value forHTTPHeaderField:(id)httpheaderField;
-(void)dealloc;
-(id)init;
@end

@interface SDWebImageDownloaderOperation : XXUnknownSuperclass <SDWebImageOperation, NSURLSessionTaskDelegate, NSURLSessionDataDelegate> {
	unsigned long width;
	unsigned long height;
	int orientation;
	BOOL responseFromCached;
	BOOL _executing;
	BOOL _finished;
	BOOL _shouldDecompressImages;
	BOOL _shouldUseCredentialStorage;
	NSURLRequest* _request;
	NSURLSessionTask* _dataTask;
	NSURLCredential* _credential;
	unsigned _options;
	int _expectedSize;
	NSURLResponse* _response;
	id _progressBlock;
	id _completedBlock;
	id _cancelBlock;
	NSMutableData* _imageData;
	NSURLSession* _unownedSession;
	NSURLSession* _ownedSession;
	NSThread* _thread;
	unsigned _backgroundTaskId;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSURLResponse* response;
@property(assign, nonatomic) int expectedSize;
@property(readonly, assign, nonatomic) unsigned options;
@property(retain, nonatomic) NSURLCredential* credential;
@property(assign, nonatomic) BOOL shouldUseCredentialStorage;
@property(assign, nonatomic) BOOL shouldDecompressImages;
@property(readonly, assign, nonatomic) NSURLRequest* request;
@property(assign, nonatomic) unsigned backgroundTaskId;
@property(retain) NSThread* thread;
@property(retain, nonatomic) NSURLSessionTask* dataTask;
@property(retain, nonatomic) NSURLSession* ownedSession;
@property(assign, nonatomic) __weak NSURLSession* unownedSession;
@property(retain, nonatomic) NSMutableData* imageData;
@property(assign, nonatomic, getter=isFinished) BOOL finished;
@property(assign, nonatomic, getter=isExecuting) BOOL executing;
@property(copy, nonatomic) id cancelBlock;
@property(copy, nonatomic) id completedBlock;
@property(copy, nonatomic) id progressBlock;
+(int)orientationFromPropertyValue:(int)propertyValue;
-(void).cxx_destruct;
-(BOOL)shouldContinueWhenAppEntersBackground;
-(id)scaledImageForKey:(id)key image:(id)image;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(BOOL)isConcurrent;
-(void)reset;
-(void)done;
-(void)cancelInternal;
-(void)cancelInternalAndStop;
-(void)cancel;
-(void)start;
-(id)initWithRequest:(id)request inSession:(id)session options:(unsigned)options progress:(id)progress completed:(id)completed cancelled:(id)cancelled;
-(id)initWithRequest:(id)request options:(unsigned)options progress:(id)progress completed:(id)completed cancelled:(id)cancelled;
@end

@interface SDWebImageManager : XXUnknownSuperclass {
	id<SDWebImageManagerDelegate> _delegate;
	SDImageCache* _imageCache;
	SDWebImageDownloader* _imageDownloader;
	id _cacheKeyFilter;
	NSMutableSet* _failedURLs;
	NSMutableArray* _runningOperations;
}
@property(copy, nonatomic) id cacheKeyFilter;
@property(assign, nonatomic) __weak id<SDWebImageManagerDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* runningOperations;
@property(retain, nonatomic) NSMutableSet* failedURLs;
@property(retain, nonatomic) SDWebImageDownloader* imageDownloader;
@property(retain, nonatomic) SDImageCache* imageCache;
+(id)sharedManager;
-(void).cxx_destruct;
-(BOOL)isRunning;
-(void)cancelAll;
-(void)saveImageToCache:(id)cache forURL:(id)url;
-(id)downloadImageWithURL:(id)url options:(unsigned)options progress:(id)progress completed:(id)completed;
-(void)diskImageExistsForURL:(id)url completion:(id)completion;
-(void)cachedImageExistsForURL:(id)url completion:(id)completion;
-(BOOL)diskImageExistsForURL:(id)url;
-(BOOL)cachedImageExistsForURL:(id)url;
-(id)cacheKeyForURL:(id)url;
-(id)initWithCache:(id)cache downloader:(id)downloader;
-(id)init;
-(id)downloadWithURL:(id)url options:(unsigned)options progress:(id)progress completed:(id)completed;
@end

@interface SDWebImageCombinedOperation : XXUnknownSuperclass <SDWebImageOperation> {
	BOOL _cancelled;
	id _cancelBlock;
	NSOperation* _cacheOperation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSOperation* cacheOperation;
@property(copy, nonatomic) id cancelBlock;
@property(assign, nonatomic, getter=isCancelled) BOOL cancelled;
-(void).cxx_destruct;
-(void)cancel;
@end

@interface SDWebImagePrefetcher : XXUnknownSuperclass {
	SDWebImageManager* _manager;
	unsigned _options;
	NSObject<OS_dispatch_queue>* _prefetcherQueue;
	id<SDWebImagePrefetcherDelegate> _delegate;
	NSArray* _prefetchURLs;
	unsigned _requestedCount;
	unsigned _skippedCount;
	unsigned _finishedCount;
	id _completionBlock;
	id _progressBlock;
	double _startedTime;
}
@property(assign, nonatomic) __weak id<SDWebImagePrefetcherDelegate> delegate;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* prefetcherQueue;
@property(assign, nonatomic) unsigned options;
@property(assign, nonatomic) unsigned maxConcurrentDownloads;
@property(copy, nonatomic) id progressBlock;
@property(copy, nonatomic) id completionBlock;
@property(assign, nonatomic) double startedTime;
@property(assign, nonatomic) unsigned finishedCount;
@property(assign, nonatomic) unsigned skippedCount;
@property(assign, nonatomic) unsigned requestedCount;
@property(retain, nonatomic) NSArray* prefetchURLs;
@property(retain, nonatomic) SDWebImageManager* manager;
+(id)sharedImagePrefetcher;
-(void).cxx_destruct;
-(void)cancelPrefetching;
-(void)prefetchURLs:(id)urls progress:(id)progress completed:(id)completed;
-(void)prefetchURLs:(id)urls;
-(void)reportStatus;
-(void)startPrefetchingAtIndex:(unsigned)index;
-(id)initWithImageManager:(id)imageManager;
-(id)init;
@end

@interface PodsDummy_SSKeychain : XXUnknownSuperclass {
}
@end

@interface SSKeychain : XXUnknownSuperclass {
}
+(void)setAccessibilityType:(void*)type;
+(void*)accessibilityType;
+(id)accountsForService:(id)service error:(id*)error;
+(id)accountsForService:(id)service;
+(id)allAccounts:(id*)accounts;
+(id)allAccounts;
+(BOOL)setPassword:(id)password forService:(id)service account:(id)account error:(id*)error;
+(BOOL)setPassword:(id)password forService:(id)service account:(id)account;
+(BOOL)deletePasswordForService:(id)service account:(id)account error:(id*)error;
+(BOOL)deletePasswordForService:(id)service account:(id)account;
+(id)passwordForService:(id)service account:(id)account error:(id*)error;
+(id)passwordForService:(id)service account:(id)account;
@end

@interface SSKeychainQuery : XXUnknownSuperclass {
	NSString* _account;
	NSString* _service;
	NSString* _label;
	NSData* _passwordData;
	NSString* _accessGroup;
	unsigned _synchronizationMode;
}
@property(copy, nonatomic) NSString* password;
@property(copy, nonatomic) id<NSCoding> passwordObject;
@property(copy, nonatomic) NSData* passwordData;
@property(assign, nonatomic) unsigned synchronizationMode;
@property(copy, nonatomic) NSString* accessGroup;
@property(copy, nonatomic) NSString* label;
@property(copy, nonatomic) NSString* service;
@property(copy, nonatomic) NSString* account;
+(id)errorWithCode:(long)code;
+(BOOL)isSynchronizationAvailable;
-(void).cxx_destruct;
-(id)query;
-(BOOL)fetch:(id*)fetch;
-(id)fetchAll:(id*)all;
-(BOOL)deleteItem:(id*)item;
-(BOOL)save:(id*)save;
@end

@interface STKFrameFilterEntry : XXUnknownSuperclass {
	NSString* name;
	id filter;
}
@property(readonly, assign) id filter;
@property(readonly, assign) NSString* name;
-(void).cxx_destruct;
-(id)initWithFilter:(id)filter andName:(id)name;
@end

@interface STKAudioPlayer : XXUnknownSuperclass <STKDataSourceDelegate> {
	BOOL muted;
	char* readBuffer;
	int readBufferSize;
	int internalState;
	float volume;
	float peakPowerDb[2];
	float averagePowerDb[2];
	BOOL meteringEnabled;
	BOOL equalizerOn;
	BOOL equalizerEnabled;
	XXStruct_YzVsxB options;
	NSMutableArray* converterNodes;
	OpaqueAUGraph* audioGraph;
	long eqNode;
	long mixerNode;
	long outputNode;
	long eqInputNode;
	long eqOutputNode;
	long mixerInputNode;
	long mixerOutputNode;
	OpaqueAudioComponentInstance* eqUnit;
	OpaqueAudioComponentInstance* mixerUnit;
	OpaqueAudioComponentInstance* outputUnit;
	unsigned long eqBandCount;
	int waitingForDataAfterSeekFrameCount;
	unsigned long framesRequiredToStartPlaying;
	unsigned long framesRequiredToPlayAfterRebuffering;
	unsigned long framesRequiredBeforeWaitingForDataAfterSeekBecomesPlaying;
	STKQueueEntry* currentlyPlayingEntry;
	STKQueueEntry* currentlyReadingEntry;
	NSMutableArray* upcomingQueue;
	NSMutableArray* bufferingQueue;
	int pcmBufferSpinLock;
	int internalStateLock;
	unsigned long pcmBufferTotalFrameCount;
	unsigned long pcmBufferFrameStartIndex;
	unsigned long pcmBufferUsedFrameCount;
	unsigned long pcmBufferFrameSizeInBytes;
	AudioBuffer* pcmAudioBuffer;
	AudioBufferList pcmAudioBufferList;
	OpaqueAudioConverter* audioConverterRef;
	AudioStreamBasicDescription audioConverterAudioStreamBasicDescription;
	BOOL deallocating;
	BOOL discontinuous;
	NSArray* frameFilters;
	NSThread* playbackThread;
	NSRunLoop* playbackThreadRunLoop;
	OpaqueAudioFileStreamID* audioFileStream;
	NSConditionLock* threadStartedLock;
	NSConditionLock* threadFinishedCondLock;
	OpaqueAudioFileID* recordAudioFileId;
	unsigned long recordFilePacketPosition;
	OpaqueAudioConverter* recordAudioConverterRef;
	unsigned long recordOutputBufferSize;
	char* recordOutputBuffer;
	unsigned long recordPacketsPerBuffer;
	unsigned long recordPacketSize;
	AudioStreamPacketDescription* recordPacketDescriptions;
	id stopBackBackgroundTaskBlock;
	int seekVersion;
	int seekLock;
	int currentEntryReferencesLock;
	opaque_pthread_mutex_t playerMutex;
	opaque_pthread_cond_t playerThreadReadyCondition;
	opaque_pthread_mutex_t mainThreadSyncCallMutex;
	opaque_pthread_cond_t mainThreadSyncCallReadyCondition;
	BOOL waiting;
	double requestedSeekTime;
	BOOL disposeWasRequested;
	BOOL seekToTimeWasRequested;
	int stopReason;
	int _state;
	id<STKAudioPlayerDelegate> _delegate;
	int _stateBeforePaused;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign) id<STKAudioPlayerDelegate> delegate;
@property(readonly, assign) int stopReason;
@property(readonly, assign) XXStruct_YzVsxB options;
@property(assign) int state;
@property(readonly, assign) NSObject* mostRecentlyQueuedStillPendingItem;
@property(readonly, assign) unsigned pendingQueueCount;
@property(readonly, assign) NSArray* pendingQueue;
@property(readonly, assign) NSArray* frameFilters;
@property(assign) BOOL equalizerEnabled;
@property(assign) BOOL meteringEnabled;
@property(readonly, assign) double progress;
@property(readonly, assign) double duration;
@property(assign) BOOL muted;
@property(assign) float volume;
@property(assign) int stateBeforePaused;
@property(assign) int internalState;
+(id)dataSourceFromURL:(id)url;
+(void)initialize;
-(void).cxx_destruct;
-(void)addFrameFilter:(id)filter withName:(id)name afterFilterWithName:(id)name3;
-(void)addFrameFilterWithName:(id)name afterFilterWithName:(id)name2 block:(id)block;
-(void)removeFrameFilterWithName:(id)name;
-(void)appendFrameFilterWithName:(id)name block:(id)block;
-(float)averagePowerInDecibelsForChannel:(unsigned)channel;
-(float)peakPowerInDecibelsForChannel:(unsigned)channel;
-(void)handleRecordingOfAudioPackets:(unsigned long)audioPackets audioBuffer:(AudioBuffer*)buffer;
-(void)handleAudioPackets:(const void*)packets numberBytes:(unsigned long)bytes numberPackets:(unsigned long)packets3 packetDescriptions:(AudioStreamPacketDescription*)descriptions;
-(void)stopAudioUnitWithReason:(int)reason;
-(BOOL)startAudioGraph;
-(BOOL)audioGraphIsRunning;
-(void)connectGraph;
-(void)createAudioGraph;
-(void)setOutputCallbackForFirstNode:(long)firstNode firstUnit:(OpaqueAudioComponentInstance*)unit;
-(void)connectNodes:(long)nodes desNode:(long)node srcUnit:(OpaqueAudioComponentInstance*)unit desUnit:(OpaqueAudioComponentInstance*)unit4;
-(long)createConverterNode:(AudioStreamBasicDescription)node desFormat:(AudioStreamBasicDescription)format;
-(void)setGain:(float)gain forEqualizerBand:(int)equalizerBand;
-(void)createEqUnit;
-(void)createMixerUnit;
-(void)createOutputUnit;
-(void)createAudioConverter:(AudioStreamBasicDescription*)converter;
-(void)destroyAudioConverter;
-(id)currentlyPlayingQueueItemId;
-(void)dispose;
-(void)closeRecordAudioFile;
-(void)unmute;
-(void)mute;
-(void)stopThread;
-(void)stop;
-(void)resetPcmBuffers;
-(void)resume;
-(void)pause;
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
-(void)processSeekToTime;
-(void)startInternal;
-(BOOL)processRunloop;
-(void)requeueBufferingEntries;
-(void)playbackThreadQueueMainThreadSyncBlock:(id)block;
-(void)dispatchSyncOnMainThread:(id)thread;
-(void)processFinishPlayingIfAnyAndPlayingNext:(id)next withNext:(id)next2;
-(void)setCurrentlyReadingEntry:(id)entry andStartPlaying:(BOOL)playing clearQueue:(BOOL)queue;
-(void)setCurrentlyReadingEntry:(id)entry andStartPlaying:(BOOL)playing;
-(void)audioQueueFinishedPlaying:(id)playing;
-(void)createPlaybackThread;
-(void)seekToTime:(double)time;
-(void)wakeupPlaybackThread;
-(BOOL)invokeOnPlaybackThread:(id)thread;
-(void)unexpectedError:(int)error;
-(double)currentTimeInFrames;
-(void)handlePropertyChangeForFileStream:(OpaqueAudioFileStreamID*)fileStream fileStreamPropertyID:(unsigned long)anId ioFlags:(unsigned*)flags;
-(void)queueDataSource:(id)source withQueueItemId:(id)queueItemId;
-(void)queueURL:(id)url withQueueItemId:(id)queueItemId;
-(void)queueURL:(id)url;
-(void)queue:(id)queue withQueueItemId:(id)queueItemId;
-(void)queue:(id)queue;
-(void)setDataSource:(id)source withQueueItemId:(id)queueItemId;
-(void)playDataSource:(id)source withQueueItemID:(id)queueItemID;
-(void)playDataSource:(id)source;
-(void)playURL:(id)url withQueueItemID:(id)queueItemID;
-(void)playURL:(id)url;
-(void)play:(id)play withQueueItemID:(id)queueItemID;
-(void)play:(id)play;
-(void)clearQueue;
-(void)stopSystemBackgroundTask;
-(void)startSystemBackgroundTask;
-(void)dealloc;
-(void)destroyAudioResources;
-(id)initWithOptions:(XXStruct_YzVsxB)options;
-(id)init;
-(void)logInfo:(id)info;
-(void)setInternalState:(int)state ifInState:(id)state2;
@end

@interface STKAutoRecoveringHTTPDataSource : STKDataSourceWrapper {
	int serial;
	int waitSeconds;
	NSTimer* timeoutTimer;
	BOOL waitingForNetwork;
	unsigned long long ticksWhenLastDataReceived;
	SCNetworkReachabilityRef reachabilityRef;
	timeval options;
}
@property(readonly, assign) STKHTTPDataSource* innerDataSource;
-(void).cxx_destruct;
-(id)description;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceEof:(id)eof;
-(void)processRetryOnError;
-(void)attemptReconnectWithTimer:(id)timer;
-(void)attemptReconnectWithSerial:(id)serial;
-(void)dataSourceDataAvailable:(id)available;
-(void)reachabilityChanged;
-(void)dealloc;
-(void)close;
-(void)seekToOffset:(long long)offset;
-(BOOL)hasGotNetworkConnection;
-(void)stopNotifier;
-(void)destroyTimeoutTimer;
-(void)createTimeoutTimer;
-(void)timeoutTimerTick:(id)tick;
-(void)unregisterForEvents;
-(BOOL)registerForEvents:(id)events;
-(BOOL)startNotifierOnRunLoop:(id)loop;
-(id)initWithHTTPDataSource:(id)httpdataSource andOptions:(timeval)options;
-(id)initWithHTTPDataSource:(id)httpdataSource;
-(id)initWithDataSource:(id)dataSource;
-(id)innerHTTPDataSource;
@end

@interface CoreFoundationDataSourceClientInfo : XXUnknownSuperclass {
	CFReadStreamRef readStreamRef;
	STKCoreFoundationDataSource* datasource;
}
@property(retain) STKCoreFoundationDataSource* datasource;
@property(assign) CFReadStreamRef readStreamRef;
-(void).cxx_destruct;
@end

@interface STKCoreFoundationDataSource : STKDataSource {
	CFReadStreamRef stream;
	BOOL isInErrorState;
	NSRunLoop* eventsRunLoop;
}
@property(readonly, assign) BOOL isInErrorState;
-(void).cxx_destruct;
-(void)openCompleted;
-(long)status;
-(BOOL)hasBytesAvailable;
-(BOOL)registerForEvents:(id)events;
-(BOOL)reregisterForEvents;
-(void)unregisterForEvents;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
-(void)open;
-(void)close;
-(void)dealloc;
-(void)errorOccured;
-(void)eof;
-(void)dataAvailable;
@end

@interface STKDataSource : XXUnknownSuperclass {
	id<STKDataSourceDelegate> delegate;
	NSURL* _recordToFileUrl;
	double _durationHint;
}
@property(retain, nonatomic) NSURL* recordToFileUrl;
@property(assign) id<STKDataSourceDelegate> delegate;
@property(assign, nonatomic) double durationHint;
@property(readonly, assign) BOOL hasBytesAvailable;
@property(readonly, assign) long long length;
@property(readonly, assign) long long position;
@property(readonly, assign) BOOL supportsSeek;
-(void).cxx_destruct;
-(unsigned long)audioFileTypeHint;
-(void)close;
-(void)unregisterForEvents;
-(BOOL)registerForEvents:(id)events;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
@end

@interface STKDataSourceWrapper : STKDataSource <STKDataSourceDelegate> {
	STKDataSource* _innerDataSource;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain) STKDataSource* innerDataSource;
-(void).cxx_destruct;
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
-(BOOL)hasBytesAvailable;
-(void)close;
-(void)unregisterForEvents;
-(BOOL)registerForEvents:(id)events;
-(long long)position;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
-(long long)length;
-(void)dealloc;
-(unsigned long)audioFileTypeHint;
-(id)initWithDataSource:(id)dataSource;
@end

@interface STKHTTPDataSource : STKCoreFoundationDataSource {
	BOOL supportsSeek;
	unsigned long httpStatusCode;
	long long seekStart;
	long long relativePosition;
	long long fileLength;
	int discontinuous;
	int requestSerialNumber;
	int prefixBytesRead;
	NSData* prefixBytes;
	NSMutableData* iceHeaderData;
	BOOL iceHeaderSearchComplete;
	BOOL iceHeaderAvailable;
	BOOL httpHeaderNotAvailable;
	NSURL* currentUrl;
	id asyncUrlProvider;
	NSDictionary* httpHeaders;
	unsigned long audioFileTypeHint;
	NSDictionary* requestHeaders;
}
@property(readonly, assign) unsigned long httpStatusCode;
@property(readonly, retain) NSURL* url;
+(unsigned long)audioFileTypeHintFromMimeType:(id)mimeType;
-(void).cxx_destruct;
-(BOOL)supportsSeek;
-(id)description;
-(id)eventsRunLoop;
-(void)openForSeek:(BOOL)seek;
-(void)open;
-(int)privateReadIntoBuffer:(char*)buffer withSize:(int)size;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
-(void)reconnect;
-(long long)length;
-(long long)position;
-(void)dataAvailable;
-(BOOL)parseHttpHeader;
-(id)parseIceHeader:(id)header;
-(unsigned long)audioFileTypeHint;
-(void)dealloc;
-(id)initWithAsyncURLProvider:(id)asyncURLProvider;
-(id)initWithURLProvider:(id)urlprovider;
-(id)initWithURL:(id)url httpRequestHeaders:(id)headers;
-(id)initWithURL:(id)url;
@end

@interface STKLocalFileDataSource : STKCoreFoundationDataSource {
	long long position;
	long long length;
	unsigned long audioFileTypeHint;
	NSString* filePath;
}
@property(copy) NSString* filePath;
+(unsigned long)audioFileTypeHintFromFileExtension:(id)fileExtension;
-(void).cxx_destruct;
-(id)description;
-(void)seekToOffset:(long long)offset;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(long long)length;
-(long long)position;
-(void)open;
-(void)close;
-(void)dealloc;
-(unsigned long)audioFileTypeHint;
-(id)initWithFilePath:(id)filePath;
@end

@interface STKQueueEntry : XXUnknownSuperclass {
	int spinLock;
	BOOL parsedHeader;
	double sampleRate;
	double packetDuration;
	unsigned long long audioDataOffset;
	unsigned long long audioDataByteCount;
	unsigned long packetBufferSize;
	double seekTime;
	long long framesQueued;
	long long framesPlayed;
	long long lastFrameQueued;
	int processedPacketsCount;
	int processedPacketsSizeTotal;
	AudioStreamBasicDescription audioStreamBasicDescription;
	double durationHint;
	NSObject* _queueItemId;
	STKDataSource* _dataSource;
}
@property(retain) STKDataSource* dataSource;
@property(retain) NSObject* queueItemId;
@property(readonly, assign) unsigned long long audioDataLengthInBytes;
-(void).cxx_destruct;
-(id)description;
-(double)progressInFrames;
-(BOOL)isDefinitelyCompatible:(AudioStreamBasicDescription*)compatible;
-(double)duration;
-(double)calculatedBitRate;
-(void)reset;
-(id)initWithDataSource:(id)dataSource andQueueItemId:(id)anId;
@end

@interface PodsDummy_StreamingKit : XXUnknownSuperclass {
}
@end

@interface TLYDelegateProxy : XXUnknownSuperclass {
	id _originalDelegate;
	id _middleMan;
}
@property(assign, nonatomic) __weak id originalDelegate;
@property(assign, nonatomic) __weak id middleMan;
-(void).cxx_destruct;
-(BOOL)respondsToSelector:(SEL)selector;
-(id)methodSignatureForSelector:(SEL)selector;
-(void)forwardInvocation:(id)invocation;
-(id)_copyInvocation:(id)invocation;
-(id)initWithMiddleMan:(id)middleMan;
@end

@interface PodsDummy_TLYShyNavBar : XXUnknownSuperclass {
}
@end

@interface TLYShyNavBarManager : XXUnknownSuperclass <UIScrollViewDelegate> {
	BOOL _disable;
	BOOL _contracted;
	BOOL _expanded;
	BOOL _contracting;
	BOOL _previousContractionState;
	UIViewController* _viewController;
	UIScrollView* _scrollView;
	UIView* _extensionView;
	float _expansionResistance;
	float _contractionResistance;
	int _fadeBehavior;
	id<TLYShyNavBarManagerDelegate> _delegate;
	id<TLYShyParent> _statusBarController;
	TLYShyViewController* _navBarController;
	TLYShyViewController* _extensionController;
	TLYShyScrollViewController* _scrollViewController;
	TLYDelegateProxy* _delegateProxy;
	UIView* _extensionViewContainer;
	float _previousYOffset;
	float _resistanceConsumed;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL expanded;
@property(assign, nonatomic) BOOL contracted;
@property(assign, nonatomic) BOOL handleStatusBar;
@property(assign, nonatomic) __weak id<TLYShyNavBarManagerDelegate> delegate;
@property(assign, nonatomic) BOOL disable;
@property(assign, nonatomic) int fadeBehavior;
@property(assign, nonatomic) float contractionResistance;
@property(assign, nonatomic) float expansionResistance;
@property(assign, nonatomic) BOOL stickyExtensionView;
@property(assign, nonatomic) BOOL stickyNavigationBar;
@property(readonly, assign, nonatomic) CGRect extensionViewBounds;
@property(retain, nonatomic) UIView* extensionView;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(readonly, assign, nonatomic) __weak UIViewController* viewController;
@property(readonly, assign, nonatomic) BOOL isViewControllerVisible;
@property(assign, nonatomic) BOOL previousContractionState;
@property(assign, nonatomic) BOOL contracting;
@property(assign, nonatomic) float resistanceConsumed;
@property(assign, nonatomic) float previousYOffset;
@property(retain, nonatomic) UIView* extensionViewContainer;
@property(retain, nonatomic) TLYDelegateProxy* delegateProxy;
@property(retain, nonatomic) TLYShyScrollViewController* scrollViewController;
@property(retain, nonatomic) TLYShyViewController* extensionController;
@property(retain, nonatomic) TLYShyViewController* navBarController;
@property(retain, nonatomic) id<TLYShyParent> statusBarController;
-(void).cxx_destruct;
-(void)applicationDidChangeStatusBarFrame:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)expandWithCompletion:(id)completion;
-(void)cleanup;
-(void)layoutViews;
-(void)prepareForDisplay;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)_handleScrollingEnded;
-(void)_handleScrolling;
-(BOOL)_shouldHandleScrolling;
-(BOOL)_scrollViewIsSuffecientlyLong;
-(void)setViewController:(id)controller;
-(void)dealloc;
-(id)init;
@end

@interface TLYShyScrollViewController : XXUnknownSuperclass <TLYShyChild> {
	UIScrollView* _scrollView;
	UIRefreshControl* _refreshControl;
	TLYShyViewController* _parent;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak TLYShyViewController* parent;
@property(assign, nonatomic) __weak UIRefreshControl* refreshControl;
@property(assign, nonatomic) __weak UIScrollView* scrollView;
-(void).cxx_destruct;
-(float)updateLayoutIfNeeded;
-(void)offsetCenterBy:(CGPoint)by;
@end

@interface TLYShyStatusBarController : XXUnknownSuperclass <TLYShyParent> {
	UIViewController* _viewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UIViewController* viewController;
-(void).cxx_destruct;
-(float)calculateTotalHeightRecursively;
-(float)maxYRelativeToView:(id)view;
-(float)_statusBarHeight;
@end

@interface TLYShyViewController : XXUnknownSuperclass <TLYShyParent, TLYShyChild> {
	BOOL _sticky;
	BOOL _handleStatusBar;
	BOOL _contracted;
	BOOL _expanded;
	id<TLYShyChild> _child;
	id<TLYShyParent> _parent;
	TLYShyViewController* _subShyController;
	UIView* _view;
	int _fadeBehavior;
	float _contractionAmountValue;
	CGPoint _expandedCenterValue;
	CGPoint _contractedCenterValue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL handleStatusBar;
@property(assign, nonatomic) BOOL sticky;
@property(assign, nonatomic) int fadeBehavior;
@property(assign, nonatomic) __weak UIView* view;
@property(assign, nonatomic) __weak TLYShyViewController* subShyController;
@property(assign, nonatomic) __weak id<TLYShyParent> parent;
@property(assign, nonatomic) __weak id<TLYShyChild> child;
@property(assign, nonatomic) BOOL expanded;
@property(assign, nonatomic) BOOL contracted;
@property(assign, nonatomic) CGPoint contractedCenterValue;
@property(assign, nonatomic) float contractionAmountValue;
@property(assign, nonatomic) CGPoint expandedCenterValue;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(float)contract;
-(float)expand;
-(float)snap:(BOOL)snap completion:(id)completion;
-(float)snap:(BOOL)snap;
-(float)updateYOffset:(float)offset;
-(void)offsetCenterBy:(CGPoint)by;
-(void)_updateCenter:(CGPoint)center;
-(void)_updateSubviewsAlpha:(float)alpha;
-(void)_onAlphaUpdate:(float)update;
-(float)calculateTotalHeightRecursively;
-(float)maxYRelativeToView:(id)view;
@end

@interface PodsDummy_Toast : XXUnknownSuperclass {
}
@end

@interface CSToastStyle : XXUnknownSuperclass {
	BOOL _displayShadow;
	UIColor* _backgroundColor;
	UIColor* _titleColor;
	UIColor* _messageColor;
	float _maxWidthPercentage;
	float _maxHeightPercentage;
	float _horizontalPadding;
	float _verticalPadding;
	float _cornerRadius;
	UIFont* _titleFont;
	UIFont* _messageFont;
	int _titleAlignment;
	int _messageAlignment;
	int _titleNumberOfLines;
	int _messageNumberOfLines;
	UIColor* _shadowColor;
	float _shadowOpacity;
	float _shadowRadius;
	CGSize _shadowOffset;
	CGSize _imageSize;
	CGSize _activitySize;
	double _fadeDuration;
}
@property(assign, nonatomic) double fadeDuration;
@property(assign, nonatomic) CGSize activitySize;
@property(assign, nonatomic) CGSize imageSize;
@property(assign, nonatomic) CGSize shadowOffset;
@property(assign, nonatomic) float shadowRadius;
@property(assign, nonatomic) float shadowOpacity;
@property(retain, nonatomic) UIColor* shadowColor;
@property(assign, nonatomic) BOOL displayShadow;
@property(assign, nonatomic) int messageNumberOfLines;
@property(assign, nonatomic) int titleNumberOfLines;
@property(assign, nonatomic) int messageAlignment;
@property(assign, nonatomic) int titleAlignment;
@property(retain, nonatomic) UIFont* messageFont;
@property(retain, nonatomic) UIFont* titleFont;
@property(assign, nonatomic) float cornerRadius;
@property(assign, nonatomic) float verticalPadding;
@property(assign, nonatomic) float horizontalPadding;
@property(assign, nonatomic) float maxHeightPercentage;
@property(assign, nonatomic) float maxWidthPercentage;
@property(retain, nonatomic) UIColor* messageColor;
@property(retain, nonatomic) UIColor* titleColor;
@property(retain, nonatomic) UIColor* backgroundColor;
-(void).cxx_destruct;
-(id)init;
-(id)initWithDefaultStyle;
@end

@interface CSToastManager : XXUnknownSuperclass {
	BOOL _tapToDismissEnabled;
	BOOL _queueEnabled;
	CSToastStyle* _sharedStyle;
	id _defaultPosition;
	double _defaultDuration;
}
@property(retain, nonatomic) id defaultPosition;
@property(assign, nonatomic) double defaultDuration;
@property(assign, nonatomic, getter=isQueueEnabled) BOOL queueEnabled;
@property(assign, nonatomic, getter=isTapToDismissEnabled) BOOL tapToDismissEnabled;
@property(retain, nonatomic) CSToastStyle* sharedStyle;
+(id)defaultPosition;
+(void)setDefaultPosition:(id)position;
+(double)defaultDuration;
+(void)setDefaultDuration:(double)duration;
+(BOOL)isQueueEnabled;
+(void)setQueueEnabled:(BOOL)enabled;
+(BOOL)isTapToDismissEnabled;
+(void)setTapToDismissEnabled:(BOOL)dismissEnabled;
+(id)sharedStyle;
+(void)setSharedStyle:(id)style;
+(id)sharedManager;
-(void).cxx_destruct;
-(id)init;
@end

@interface OrderedDictionary : XXUnknownSuperclass {
	NSMutableDictionary* dictionary;
	NSMutableArray* array;
}
-(void).cxx_destruct;
-(id)descriptionWithLocale:(id)locale indent:(unsigned)indent;
-(id)keyAtIndex:(unsigned)index;
-(void)insertObject:(id)object forKey:(id)key atIndex:(unsigned)index;
-(id)reverseKeyEnumerator;
-(id)keyEnumerator;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)copy;
-(id)initWithCapacity:(unsigned)capacity;
-(id)init;
@end

@interface PodsDummy_VK_ios_sdk : XXUnknownSuperclass {
}
@end

@interface VKAccessToken : VKObject <NSCoding> {
	NSString* _accessToken;
	NSString* _userId;
	NSString* _secret;
	NSArray* _permissions;
	BOOL _httpsRequired;
	int _expiresIn;
	VKUser* _localUser;
	NSString* _email;
	double _created;
}
@property(readonly, assign, nonatomic) VKUser* localUser;
@property(readonly, assign, nonatomic) double created;
@property(readonly, assign, nonatomic) BOOL httpsRequired;
@property(readonly, assign, nonatomic) int expiresIn;
@property(readonly, copy, nonatomic) NSString* email;
@property(readonly, copy, nonatomic) NSArray* permissions;
@property(readonly, copy, nonatomic) NSString* secret;
@property(readonly, copy, nonatomic) NSString* userId;
@property(copy, nonatomic) NSString* accessToken;
+(void)delete:(id)aDelete;
+(id)load:(id)load;
+(void)save:(id)save data:(id)data;
+(id)getKeychainQuery:(id)query;
+(id)savedToken:(id)token;
+(id)tokenFromUrlString:(id)urlString;
+(id)tokenWithToken:(id)token secret:(id)secret userId:(id)anId;
-(void).cxx_destruct;
-(id)mutableCopy;
-(id)copy;
-(void)saveTokenToDefaults:(id)defaults;
-(void)checkIfExpired;
-(BOOL)isExpired;
-(id)initWithVKAccessToken:(id)vkaccessToken;
-(id)initWithUrlString:(id)urlString;
-(id)restorePermissions:(id)permissions;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithToken:(id)token secret:(id)secret userId:(id)anId;
-(void)notifyTokenExpired;
-(void)setAccessTokenRequiredHTTPS;
@end

@interface VKAccessTokenMutable : VKAccessToken {
}
@property(retain, nonatomic) VKUser* localUser;
@property(assign, nonatomic) int expiresIn;
@property(assign, nonatomic) BOOL httpsRequired;
@property(copy, nonatomic) NSArray* permissions;
@property(copy, nonatomic) NSString* secret;
@property(copy, nonatomic) NSString* userId;
@property(copy, nonatomic) NSString* accessToken;
@end

@interface VKActivity : XXUnknownSuperclass {
	VKShareDialogController* _shareDialog;
}
@property(retain, nonatomic) VKShareDialogController* shareDialog;
+(BOOL)vkShareExtensionEnabled;
+(int)activityCategory;
-(void).cxx_destruct;
-(id)activityViewController;
-(void)prepareWithActivityItems:(id)activityItems;
-(BOOL)canPerformWithActivityItems:(id)activityItems;
-(id)activityTitle;
-(id)activityImage;
-(id)activityType;
@end

@interface VKApi : XXUnknownSuperclass {
}
+(id)uploadMessagePhotoRequest:(id)request parameters:(id)parameters;
+(id)uploadAlbumPhotoRequest:(id)request parameters:(id)parameters albumId:(int)anId groupId:(int)anId4;
+(id)uploadWallPhotoRequest:(id)request parameters:(id)parameters userId:(int)anId groupId:(int)anId4;
+(id)requestWithMethod:(id)method andParameters:(id)parameters andHttpMethod:(id)method3;
+(id)requestWithMethod:(id)method andParameters:(id)parameters;
+(id)groups;
+(id)friends;
+(id)photos;
+(id)wall;
+(id)users;
@end

@interface VKApiBase : VKObject {
	NSString* _methodGroup;
}
-(void).cxx_destruct;
-(id)prepareRequestWithMethodName:(id)methodName parameters:(id)parameters modelClass:(Class)aClass;
-(id)prepareRequestWithMethodName:(id)methodName parameters:(id)parameters;
-(void)setMethodGroup:(id)group;
-(id)getMethodGroup;
-(id)init;
@end

@interface VKApiCaptcha : VKApiBase {
}
-(id)force;
@end

@interface VKApiDocs : VKApiBase {
}
-(id)edit:(int)edit docID:(int)anId title:(id)title tags:(id)tags;
-(id)edit:(int)edit docID:(int)anId title:(id)title;
-(id)edit:(int)edit title:(id)title tags:(id)tags;
-(id)edit:(int)edit title:(id)title;
-(id)search:(id)search count:(int)count andOffset:(int)offset;
-(id)search:(id)search count:(int)count;
-(id)search:(id)search;
-(id)add:(int)add andDocID:(int)anId andAccessKey:(id)key;
-(id)add:(int)add andDocID:(int)anId;
-(id)delete:(int)aDelete andDocID:(int)anId;
-(id)save:(id)save andTitle:(id)title andTags:(id)tags;
-(id)save:(id)save andTitle:(id)title;
-(id)save:(id)save;
-(id)getWallUploadServer:(int)server;
-(id)getWallUploadServer;
-(id)getUploadServer:(int)server;
-(id)getUploadServer;
-(id)getByID:(id)anId;
-(id)get:(int)get andOffset:(int)offset andOwnerID:(int)anId;
-(id)get:(int)get andOffset:(int)offset;
-(id)get:(int)get;
-(id)get;
@end

@interface VKApiFriends : VKApiBase {
}
-(id)get:(id)get;
-(id)get;
@end

@interface VKApiGroups : VKApiBase {
}
-(id)getById:(id)anId;
@end

@interface VKPropertyHelper : VKObject {
	BOOL _isPrimitive;
	BOOL _isModelsArray;
	BOOL _isModel;
	NSString* _propertyName;
	NSString* _propertyClassName;
	Class _propertyClass;
	objc_property* _property;
}
@property(assign, nonatomic) BOOL isModel;
@property(assign, nonatomic) BOOL isModelsArray;
@property(assign, nonatomic) BOOL isPrimitive;
@property(retain, nonatomic) Class propertyClass;
@property(retain, nonatomic) NSString* propertyClassName;
@property(retain, nonatomic) NSString* propertyName;
@property(assign, nonatomic) objc_property* property;
-(void).cxx_destruct;
-(id)initWith:(objc_property*)with;
@end

@interface VKApiObject : VKObject <VKApiObject> {
	NSDictionary* _fields;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDictionary* fields;
+(id)createWithArray:(id)array;
+(id)createWithDictionary:(id)dictionary;
-(void).cxx_destruct;
-(void)setValue:(id)value forUndefinedKey:(id)undefinedKey;
-(id)serialize;
-(id)ignoredProperties;
-(void)enumPropertiesWithBlock:(id)block;
-(void)parse:(id)parse;
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKApiObjectArray : VKApiObject <NSFastEnumeration> {
	unsigned _count;
	NSMutableArray* _items;
}
@property(retain, nonatomic) NSMutableArray* items;
@property(assign, nonatomic) unsigned count;
+(id)createWithArray:(id)array;
+(id)createWithDictionary:(id)dictionary;
-(void).cxx_destruct;
-(Class)objectClass;
-(void)serializeTo:(id)to withName:(id)name;
-(id)serialize;
-(id)lastObject;
-(id)firstObject;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(void)removeObject:(id)object;
-(void)addObject:(id)object;
-(id)reverseObjectEnumerator;
-(id)objectEnumerator;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndex:(int)index;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)parseItems:(id)items asClass:(Class)aClass;
-(id)initWithArray:(id)array;
-(id)initWithArray:(id)array objectClass:(Class)aClass;
-(id)initWithDictionary:(id)dictionary objectClass:(Class)aClass;
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKApiPhotos : VKApiBase {
}
-(id)save:(id)save;
-(id)saveWallPhoto:(id)photo;
-(id)getWallUploadServer:(int)server;
-(id)getWallUploadServer;
-(id)getUploadServer:(int)server andGroupId:(int)anId;
-(id)getUploadServer:(int)server;
@end

@interface VKApiUsers : VKApiBase {
}
-(id)getFollowers:(id)followers;
-(id)getFollowers;
-(id)getSubscriptions:(id)subscriptions;
-(id)getSubscriptions;
-(id)isAppUser:(int)user;
-(id)isAppUser;
-(id)search:(id)search;
-(id)get:(id)get;
-(id)get;
@end

@interface VKApiWall : VKApiBase {
}
-(id)post:(id)post;
@end

@interface VKAudio : VKApiObject {
	BOOL _fromCache;
	BOOL _ignoreCache;
	NSNumber* _id;
	NSNumber* _owner_id;
	NSString* _artist;
	NSString* _title;
	NSNumber* _duration;
	NSString* _url;
	NSNumber* _lyrics_id;
	NSNumber* _album_id;
	NSNumber* _genre_id;
}
@property(assign, nonatomic) BOOL ignoreCache;
@property(assign, nonatomic) BOOL fromCache;
@property(retain, nonatomic) NSNumber* genre_id;
@property(retain, nonatomic) NSNumber* album_id;
@property(retain, nonatomic) NSNumber* lyrics_id;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSNumber* duration;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* artist;
@property(retain, nonatomic) NSNumber* owner_id;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKAudios : VKApiObjectArray {
	VKUser* _user;
}
@property(retain, nonatomic) VKUser* user;
-(void).cxx_destruct;
-(id)parseItems:(id)items asClass:(Class)aClass;
-(Class)objectClass;
@end

@interface VKAuthorizationResult : VKObject {
	VKAccessToken* _token;
	VKUser* _user;
	NSError* _error;
	unsigned _state;
}
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) VKAccessToken* token;
-(void).cxx_destruct;
@end

@interface VKMutableAuthorizationResult : VKAuthorizationResult {
}
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) VKAccessToken* token;
@end

@interface VKAuthorizeController : XXUnknownSuperclass <UIWebViewDelegate> {
	BOOL _finished;
	UIWebView* _webView;
	NSString* _appId;
	NSString* _scope;
	NSURL* _redirectUri;
	UIActivityIndicatorView* _activityMark;
	UILabel* _warningLabel;
	UILabel* _statusBar;
	VKError* _validationError;
	NSURLRequest* _lastRequest;
	UINavigationController* _internalNavigationController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL finished;
@property(assign, nonatomic) __weak UINavigationController* internalNavigationController;
@property(retain, nonatomic) NSURLRequest* lastRequest;
@property(retain, nonatomic) VKError* validationError;
@property(retain, nonatomic) UILabel* statusBar;
@property(retain, nonatomic) UILabel* warningLabel;
@property(retain, nonatomic) UIActivityIndicatorView* activityMark;
@property(retain, nonatomic) NSURL* redirectUri;
@property(retain, nonatomic) NSString* scope;
@property(retain, nonatomic) NSString* appId;
@property(retain, nonatomic) UIWebView* webView;
+(id)buildAuthorizationURLWithContext:(id)context;
+(void)presentThisController:(id)controller;
+(void)presentForValidation:(id)validation;
+(void)presentForAuthorizeWithAppId:(id)appId andPermissions:(id)permissions revokeAccess:(BOOL)access displayType:(id)type;
-(void).cxx_destruct;
-(int)preferredStatusBarStyle;
-(void)dismissWithCompletion:(id)completion;
-(void)cancelAuthorization:(id)authorization;
-(void)makeViewport;
-(void)webViewDidFinishLoad:(id)webView;
-(void)setRightBarButtonActivity;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)startLoading;
-(void)viewDidLoad;
-(id)initWith:(id)with andPermissions:(id)permissions revokeAccess:(BOOL)access displayType:(id)type;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)loadView;
@end

@interface VKAuthorizationContext : VKObject {
	BOOL _revoke;
	BOOL _usingVkApp;
	NSString* _clientId;
	NSString* _displayType;
	NSArray* _scope;
	NSString* _authPrefix;
	NSString* _redirectUri;
	NSString* _responseType;
}
@property(assign, nonatomic) BOOL usingVkApp;
@property(assign, nonatomic) BOOL revoke;
@property(retain, nonatomic) NSArray* scope;
@property(retain, nonatomic) NSString* responseType;
@property(retain, nonatomic) NSString* displayType;
@property(retain, nonatomic) NSString* clientId;
@property(retain, nonatomic) NSString* redirectUri;
@property(retain, nonatomic) NSString* authPrefix;
+(id)contextWithAuthType:(int)authType clientId:(id)anId displayType:(id)type scope:(id)scope revoke:(BOOL)revoke;
-(void).cxx_destruct;
@end

@interface VKBatchRequest : VKObject {
	NSMutableArray* _requests;
	NSMutableArray* _responses;
	BOOL _canceled;
	id _completeBlock;
	id _errorBlock;
}
@property(copy, nonatomic) id errorBlock;
@property(copy, nonatomic) id completeBlock;
-(void).cxx_destruct;
-(void)provideError:(id)error;
-(void)provideResponse:(id)response;
-(void)cancel;
-(void)executeWithResultBlock:(id)resultBlock errorBlock:(id)block;
-(id)initWithRequestsArray:(id)requestsArray;
-(id)initWithRequests:(id)requests;
@end

@interface VKBundle : VKObject {
}
+(id)localizedString:(id)string;
+(id)vkLibraryImageNamed:(id)named;
+(id)vkLibraryResourcesBundle;
@end

@interface VKCaptchaView : XXUnknownSuperclass <UITextFieldDelegate> {
	VKError* _error;
	UIImageView* _captchaImage;
	UILabel* _infoLabel;
	UITextField* _captchaTextField;
	UIButton* _doneButton;
	UIActivityIndicatorView* _imageLoadingActivity;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)didMoveToSuperview;
-(void)doneButtonPressed:(id)pressed;
-(void)deviceDidRotate:(id)device;
-(id)initWithFrame:(CGRect)frame andError:(id)error;
-(void)dealloc;
@end

@interface VKCaptchaViewController : XXUnknownSuperclass {
	VKError* _captchaError;
	VKSharedTransitioningObject* _transitionDelegate;
	VKCaptchaView* _captchaView;
}
@property(retain, nonatomic) VKCaptchaView* captchaView;
+(id)captchaControllerWithError:(id)error;
-(void).cxx_destruct;
-(void)dealloc;
-(CGSize)preferredContentSize;
-(int)preferredStatusBarStyle;
-(void)presentIn:(id)anIn;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(CGRect)captchaFrameForScreenSize:(CGSize)screenSize;
-(void)captchaDidAnswered;
-(void)loadView;
@end

@interface VKCounters : VKApiObject {
	NSNumber* _friends;
	NSNumber* _messages;
	NSNumber* _photos;
	NSNumber* _videos;
	NSNumber* _notifications;
	NSNumber* _groups;
	NSNumber* _gifts;
	NSNumber* _events;
	NSNumber* _albums;
	NSNumber* _audios;
	NSNumber* _online_friends;
	NSNumber* _mutual_friends;
	NSNumber* _user_videos;
	NSNumber* _followers;
	NSNumber* _user_photos;
	NSNumber* _subscriptions;
	NSNumber* _documents;
	NSNumber* _topics;
	NSNumber* _pages;
}
@property(retain, nonatomic) NSNumber* pages;
@property(retain, nonatomic) NSNumber* topics;
@property(retain, nonatomic) NSNumber* documents;
@property(retain, nonatomic) NSNumber* subscriptions;
@property(retain, nonatomic) NSNumber* user_photos;
@property(retain, nonatomic) NSNumber* followers;
@property(retain, nonatomic) NSNumber* user_videos;
@property(retain, nonatomic) NSNumber* mutual_friends;
@property(retain, nonatomic) NSNumber* online_friends;
@property(retain, nonatomic) NSNumber* audios;
@property(retain, nonatomic) NSNumber* albums;
@property(retain, nonatomic) NSNumber* events;
@property(retain, nonatomic) NSNumber* gifts;
@property(retain, nonatomic) NSNumber* groups;
@property(retain, nonatomic) NSNumber* notifications;
@property(retain, nonatomic) NSNumber* videos;
@property(retain, nonatomic) NSNumber* photos;
@property(retain, nonatomic) NSNumber* messages;
@property(retain, nonatomic) NSNumber* friends;
-(void).cxx_destruct;
@end

@interface VKDocs : VKApiObject {
	NSNumber* _id;
	NSNumber* _owner_id;
	NSString* _title;
	NSNumber* _size;
	NSString* _ext;
	NSString* _url;
	NSString* _photo_100;
	NSString* _photo_130;
	NSNumber* _date;
	NSNumber* _type;
}
@property(retain, nonatomic) NSNumber* type;
@property(retain, nonatomic) NSNumber* date;
@property(copy, nonatomic) NSString* photo_130;
@property(copy, nonatomic) NSString* photo_100;
@property(copy, nonatomic) NSString* url;
@property(copy, nonatomic) NSString* ext;
@property(retain, nonatomic) NSNumber* size;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* owner_id;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKDocsArray : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKError : VKObject {
	NSError* _httpError;
	VKError* _apiError;
	VKRequest* _request;
	int _errorCode;
	NSString* _errorMessage;
	NSString* _errorReason;
	NSString* _errorText;
	NSDictionary* _requestParams;
	NSString* _captchaSid;
	NSString* _captchaImg;
	NSString* _redirectUri;
	id _json;
}
@property(retain, nonatomic) id json;
@property(retain, nonatomic) NSString* redirectUri;
@property(retain, nonatomic) NSString* captchaImg;
@property(retain, nonatomic) NSString* captchaSid;
@property(retain, nonatomic) NSDictionary* requestParams;
@property(retain, nonatomic) NSString* errorText;
@property(retain, nonatomic) NSString* errorReason;
@property(retain, nonatomic) NSString* errorMessage;
@property(assign, nonatomic) int errorCode;
@property(retain, nonatomic) VKRequest* request;
@property(retain, nonatomic) VKError* apiError;
@property(retain, nonatomic) NSError* httpError;
+(id)errorWithQuery:(id)query;
+(id)errorWithJson:(id)json;
+(id)errorWithCode:(int)code;
-(void).cxx_destruct;
-(id)description;
-(void)answerCaptcha:(id)captcha;
-(void)notifyAuthorizationFailed;
-(void)notifyCaptchaRequired;
@end

@interface VKGeoPlace : VKApiObject {
	NSNumber* _id;
	NSString* _title;
	NSNumber* _latitude;
	NSNumber* _longitude;
	NSNumber* _created;
	NSString* _icon;
	NSNumber* _group_id;
	NSNumber* _group_photo;
	NSNumber* _checkins;
	NSNumber* _updated;
	NSNumber* _type;
	NSNumber* _country;
	NSString* _city;
	NSString* _address;
	NSNumber* _showmap;
}
@property(retain, nonatomic) NSNumber* showmap;
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSNumber* country;
@property(retain, nonatomic) NSNumber* type;
@property(retain, nonatomic) NSNumber* updated;
@property(retain, nonatomic) NSNumber* checkins;
@property(retain, nonatomic) NSNumber* group_photo;
@property(retain, nonatomic) NSNumber* group_id;
@property(retain, nonatomic) NSString* icon;
@property(retain, nonatomic) NSNumber* created;
@property(retain, nonatomic) NSNumber* longitude;
@property(retain, nonatomic) NSNumber* latitude;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKGroupContact : VKApiObject {
	NSNumber* _user_id;
	NSString* _desc;
	NSString* _email;
}
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSNumber* user_id;
-(void).cxx_destruct;
@end

@interface VKGroupContacts : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKGroupLink : VKApiObject {
	NSString* _url;
	NSString* _name;
	NSString* _desc;
	NSString* _photo_50;
	NSString* _photo_100;
}
@property(retain, nonatomic) NSString* photo_100;
@property(retain, nonatomic) NSString* photo_50;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* url;
-(void).cxx_destruct;
@end

@interface VKGroupLinks : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKGroup : VKApiObject {
	NSString* _description;
	NSNumber* _id;
	NSString* _name;
	NSString* _screen_name;
	NSNumber* _is_closed;
	NSString* _type;
	NSNumber* _is_admin;
	NSNumber* _admin_level;
	NSNumber* _is_member;
	VKCity* _city;
	VKCountry* _country;
	VKGeoPlace* _place;
	NSString* _wiki_page;
	NSNumber* _members_count;
	VKCounters* _counters;
	NSNumber* _start_date;
	NSNumber* _end_date;
	NSNumber* _finish_date;
	NSNumber* _can_post;
	NSNumber* _can_see_all_posts;
	NSNumber* _can_create_topic;
	NSNumber* _can_upload_doc;
	NSString* _activity;
	NSString* _status;
	VKAudio* _status_audio;
	VKGroupContacts* _contacts;
	VKGroupLinks* _links;
	NSNumber* _fixed_post;
	NSNumber* _verified;
	NSString* _site;
	NSString* _photo_50;
	NSString* _photo_100;
	NSString* _photo_200;
	NSString* _photo_max_orig;
	NSNumber* _is_request;
	NSNumber* _is_invite;
	VKPhotoArray* _photos;
	NSNumber* _photos_count;
	NSNumber* _invited_by;
	int _invite_state;
	NSString* _deactivated;
	NSNumber* _blacklisted;
}
@property(retain, nonatomic) NSNumber* blacklisted;
@property(retain, nonatomic) NSString* deactivated;
@property(assign, nonatomic) int invite_state;
@property(retain, nonatomic) NSNumber* invited_by;
@property(retain, nonatomic) NSNumber* photos_count;
@property(retain, nonatomic) VKPhotoArray* photos;
@property(retain, nonatomic) NSNumber* is_invite;
@property(retain, nonatomic) NSNumber* is_request;
@property(retain, nonatomic) NSString* photo_max_orig;
@property(retain, nonatomic) NSString* photo_200;
@property(retain, nonatomic) NSString* photo_100;
@property(retain, nonatomic) NSString* photo_50;
@property(retain, nonatomic) NSString* site;
@property(retain, nonatomic) NSNumber* verified;
@property(retain, nonatomic) NSNumber* fixed_post;
@property(retain, nonatomic) VKGroupLinks* links;
@property(retain, nonatomic) VKGroupContacts* contacts;
@property(retain, nonatomic) VKAudio* status_audio;
@property(retain, nonatomic) NSString* status;
@property(retain, nonatomic) NSString* activity;
@property(retain, nonatomic) NSNumber* can_upload_doc;
@property(retain, nonatomic) NSNumber* can_create_topic;
@property(retain, nonatomic) NSNumber* can_see_all_posts;
@property(retain, nonatomic) NSNumber* can_post;
@property(retain, nonatomic) NSNumber* finish_date;
@property(retain, nonatomic) NSNumber* end_date;
@property(retain, nonatomic) NSNumber* start_date;
@property(retain, nonatomic) VKCounters* counters;
@property(retain, nonatomic) NSNumber* members_count;
@property(retain, nonatomic) NSString* wiki_page;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) VKGeoPlace* place;
@property(retain, nonatomic) VKCountry* country;
@property(retain, nonatomic) VKCity* city;
@property(retain, nonatomic) NSNumber* is_member;
@property(retain, nonatomic) NSNumber* admin_level;
@property(retain, nonatomic) NSNumber* is_admin;
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSNumber* is_closed;
@property(retain, nonatomic) NSString* screen_name;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKGroups : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKHTTPClient : VKObject <NSCoding> {
	NSOperationQueue* _operationQueue;
	NSMutableDictionary* _defaultHeaders;
}
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) NSMutableDictionary* defaultHeaders;
+(id)getClient;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)enqueueBatchOfHTTPRequestOperations:(id)httprequestOperations progressBlock:(id)block completionBlock:(id)block3;
-(void)enqueueOperation:(id)operation;
-(id)multipartFormRequestWithMethod:(id)method path:(id)path images:(id)images;
-(id)requestWithMethod:(id)method path:(id)path parameters:(id)parameters secure:(BOOL)secure;
-(void)setDefaultHeader:(id)header value:(id)value;
-(id)defaultValueForHeader:(id)header;
-(id)init;
@end

@interface VKHTTPOperation : VKOperation <NSURLConnectionDataDelegate, NSURLConnectionDelegate, NSCoding, NSCopying> {
	BOOL _wasCanceled;
	VKRequest* _loadingRequest;
	NSSet* _runLoopModes;
	VKRequest* _vkRequest;
	NSURLRequest* _request;
	NSData* _responseData;
	NSHTTPURLResponse* _response;
	NSObject<OS_dispatch_queue>* _successCallbackQueue;
	NSObject<OS_dispatch_queue>* _failureCallbackQueue;
	NSURLConnection* _connection;
	NSError* _error;
	NSString* _responseString;
	id _responseJson;
	unsigned _responseStringEncoding;
	unsigned _backgroundTaskIdentifier;
	id _uploadProgress;
	id _downloadProgress;
	NSError* _HTTPError;
	NSOutputStream* _outputStream;
	NSError* _JSONError;
	long long _totalBytesRead;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* failureCallbackQueue;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* successCallbackQueue;
@property(retain, nonatomic) NSSet* runLoopModes;
@property(retain, nonatomic) VKRequest* loadingRequest;
@property(assign, nonatomic) __weak VKRequest* vkRequest;
@property(retain, nonatomic) NSError* JSONError;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) NSError* HTTPError;
@property(copy, nonatomic) id downloadProgress;
@property(copy, nonatomic) id uploadProgress;
@property(assign, nonatomic) unsigned backgroundTaskIdentifier;
@property(assign, nonatomic) long long totalBytesRead;
@property(assign, nonatomic) unsigned responseStringEncoding;
@property(copy, nonatomic) id responseJson;
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) NSData* responseData;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSHTTPURLResponse* response;
@property(retain, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic, getter=isCancelled) BOOL wasCanceled;
+(id)networkRequestThread;
+(void)networkRequestThreadEntryPoint:(id)point;
+(id)operationWithRequest:(id)request;
-(void).cxx_destruct;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(BOOL)hasAcceptableStatusCode;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)cancelConnection;
-(void)cancel;
-(void)finish;
-(void)operationDidStart;
-(void)start;
-(void)resume;
-(BOOL)isPaused;
-(void)pause;
-(void)setDownloadProgressBlock:(id)block;
-(void)setUploadProgressBlock:(id)block;
-(void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)executeAsBackgroundTaskWithExpirationHandler;
-(void)dealloc;
-(id)initWithURLRequest:(id)urlrequest;
@end

@interface VKImageParameters : VKObject {
	int _imageType;
	float _jpegQuality;
}
@property(assign, nonatomic) float jpegQuality;
@property(assign, nonatomic) int imageType;
+(id)jpegImageWithQuality:(float)quality;
+(id)pngImage;
-(id)mimeType;
-(id)fileExtension;
@end

@interface VKJSONOperation : VKHTTPOperation {
}
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
@end

@interface VKLikes : VKApiObject {
	NSNumber* _count;
	NSNumber* _user_likes;
	NSNumber* _can_like;
	NSNumber* _can_publish;
}
@property(retain, nonatomic) NSNumber* can_publish;
@property(retain, nonatomic) NSNumber* can_like;
@property(retain, nonatomic) NSNumber* user_likes;
@property(retain, nonatomic) NSNumber* count;
-(void).cxx_destruct;
@end

@interface VKObject : XXUnknownSuperclass {
}
@end

@interface VKOperation : XXUnknownSuperclass {
	BOOL _wasCancelled;
	int _state;
	NSRecursiveLock* _lock;
	NSObject<OS_dispatch_queue>* _responseQueue;
}
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* responseQueue;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic) int state;
@property(assign, nonatomic, getter=isCancelled) BOOL wasCancelled;
-(void).cxx_destruct;
-(void)setCompletionBlock:(id)block;
-(void)cancel;
-(BOOL)isConcurrent;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isReady;
-(id)init;
@end

@interface VKPhoto : VKApiObject {
	NSNumber* _id;
	NSNumber* _album_id;
	NSNumber* _owner_id;
	NSString* _photo_75;
	NSString* _photo_130;
	NSString* _photo_604;
	NSString* _photo_807;
	NSString* _photo_1280;
	NSString* _photo_2560;
	NSNumber* _width;
	NSNumber* _height;
	NSString* _text;
	NSNumber* _date;
	VKPhotoSizes* _sizes;
}
@property(readonly, assign, nonatomic) NSString* attachmentString;
@property(retain, nonatomic) VKPhotoSizes* sizes;
@property(retain, nonatomic) NSNumber* date;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSNumber* height;
@property(retain, nonatomic) NSNumber* width;
@property(retain, nonatomic) NSString* photo_2560;
@property(retain, nonatomic) NSString* photo_1280;
@property(retain, nonatomic) NSString* photo_807;
@property(retain, nonatomic) NSString* photo_604;
@property(retain, nonatomic) NSString* photo_130;
@property(retain, nonatomic) NSString* photo_75;
@property(retain, nonatomic) NSNumber* owner_id;
@property(retain, nonatomic) NSNumber* album_id;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKPhotoArray : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKPhotoSize : VKApiObject {
	NSString* _src;
	NSNumber* _width;
	NSNumber* _height;
	NSString* _type;
}
@property(copy, nonatomic) NSString* type;
@property(copy, nonatomic) NSNumber* height;
@property(copy, nonatomic) NSNumber* width;
@property(copy, nonatomic) NSString* src;
-(void).cxx_destruct;
@end

@interface VKPhotoSizes : VKApiObjectArray {
	NSDictionary* sizesDictionary;
}
-(void).cxx_destruct;
-(id)photoSizeWithType:(id)type;
-(id)initWithArray:(id)array;
-(Class)objectClass;
@end

@interface VKRelative : VKApiObject {
	NSNumber* _id;
	NSString* _type;
}
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKRelativities : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKRequestTiming : VKObject {
	NSDate* _parseStartTime;
	NSDate* _startTime;
	NSDate* _finishTime;
	double _loadTime;
	double _parseTime;
}
@property(readonly, assign, nonatomic) double totalTime;
@property(assign, nonatomic) double parseTime;
@property(assign, nonatomic) double loadTime;
@property(retain, nonatomic) NSDate* finishTime;
@property(retain, nonatomic) NSDate* startTime;
-(void).cxx_destruct;
-(void)finished;
-(void)parseFinished;
-(void)parseStarted;
-(void)loaded;
-(void)started;
-(id)description;
@end

@interface VKRequest : VKObject {
	NSObject<OS_dispatch_semaphore>* _waitUntilDoneSemaphore;
	float _waitMultiplier;
	BOOL _secure;
	BOOL _useSystemLanguage;
	BOOL _parseModel;
	BOOL _debugTiming;
	BOOL _waitUntilDone;
	id _progressBlock;
	id _completeBlock;
	id _errorBlock;
	int _attempts;
	int _requestTimeout;
	NSObject<OS_dispatch_queue>* _responseQueue;
	NSString* _methodName;
	NSString* _httpMethod;
	NSDictionary* _methodParameters;
	NSOperation* _executionOperation;
	VKRequestTiming* _requestTiming;
	NSArray* _preventThisErrorsHandling;
	OrderedDictionary* _preparedParameters;
	NSString* _uploadUrl;
	NSMutableArray* _postRequestsQueue;
	Class _modelClass;
	NSArray* _photoObjects;
	int _attemptsUsed;
	VKResponse* _response;
	NSError* _error;
	NSString* _requestLang;
	VKAccessToken* _specialToken;
}
@property(copy, nonatomic) NSArray* preventThisErrorsHandling;
@property(readonly, assign, nonatomic) BOOL isExecuting;
@property(assign, nonatomic) BOOL waitUntilDone;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* responseQueue;
@property(assign, nonatomic) int requestTimeout;
@property(assign, nonatomic) BOOL debugTiming;
@property(assign, nonatomic) BOOL parseModel;
@property(assign, nonatomic) BOOL useSystemLanguage;
@property(assign, nonatomic) BOOL secure;
@property(assign, nonatomic) int attempts;
@property(copy, nonatomic) id errorBlock;
@property(copy, nonatomic) id completeBlock;
@property(copy, nonatomic) id progressBlock;
@property(retain, nonatomic) VKAccessToken* specialToken;
@property(retain, nonatomic) NSOperation* executionOperation;
@property(copy, nonatomic) NSString* requestLang;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) VKResponse* response;
@property(assign) int attemptsUsed;
@property(retain, nonatomic) NSArray* photoObjects;
@property(retain, nonatomic) Class modelClass;
@property(retain, nonatomic) NSMutableArray* postRequestsQueue;
@property(retain, nonatomic) NSString* uploadUrl;
@property(retain, nonatomic) OrderedDictionary* preparedParameters;
@property(retain, nonatomic) NSDictionary* methodParameters;
@property(retain, nonatomic) NSString* httpMethod;
@property(retain, nonatomic) NSString* methodName;
@property(retain, nonatomic) VKRequestTiming* requestTiming;
+(id)photoRequestWithPostUrl:(id)postUrl withPhotos:(id)photos;
+(id)requestWithMethod:(id)method parameters:(id)parameters modelClass:(Class)aClass;
+(id)requestWithMethod:(id)method parameters:(id)parameters;
+(id)requestWithMethod:(id)method andParameters:(id)parameters modelClass:(Class)aClass;
+(id)requestWithMethod:(id)method andParameters:(id)parameters andHttpMethod:(id)method3 classOfModel:(Class)model;
+(id)requestWithMethod:(id)method andParameters:(id)parameters;
+(id)requestWithMethod:(id)method andParameters:(id)parameters andHttpMethod:(id)method3;
+(id)processingQueue;
-(void).cxx_destruct;
-(void)setPreferredLang:(id)lang;
-(id)language;
-(BOOL)processCommonError:(id)error;
-(id)generateSig:(id)sig token:(id)token;
-(void)addExtraParameters:(id)parameters;
-(void)setupProgress:(id)progress;
-(void)cancel;
-(void)repeat;
-(void)finishRequest;
-(void)provideError:(id)error;
-(void)provideResponse:(id)response responseString:(id)string;
-(void)operationDidStart:(id)operation;
-(void)start;
-(id)createExecutionOperation;
-(id)getPreparedRequest;
-(void)addPostRequest:(id)request;
-(void)executeAfter:(id)after withResultBlock:(id)resultBlock errorBlock:(id)block;
-(void)executeWithResultBlock:(id)resultBlock errorBlock:(id)block;
-(id)debugDescription;
-(id)init;
-(void)dealloc;
@end

@interface VKRequestsScheduler : VKObject {
	NSObject<OS_dispatch_queue>* _schedulerQueue;
	int _currentLimitPerSecond;
	NSMutableDictionary* _scheduleDict;
	BOOL _enabled;
}
+(id)instance;
-(void).cxx_destruct;
-(void)scheduleRequest:(id)request;
-(double)currentAvailableInterval;
-(void)setEnabled:(BOOL)enabled;
-(id)init;
@end

@interface VKResponse : VKObject {
	VKRequest* _request;
	id _json;
	VKApiObject* _parsedModel;
	NSString* _responseString;
}
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) VKApiObject* parsedModel;
@property(retain, nonatomic) id json;
@property(assign, nonatomic) __weak VKRequest* request;
-(void).cxx_destruct;
-(id)description;
@end

@interface VKSchool : VKApiObject {
	NSNumber* _id;
	NSNumber* _country;
	NSNumber* _city;
	NSString* _name;
	NSNumber* _year_from;
	NSNumber* _year_to;
	NSNumber* _year_graduated;
	NSString* _Mclass;
	NSString* _speciality;
	NSNumber* _type;
	NSString* _type_str;
}
@property(retain, nonatomic) NSString* type_str;
@property(retain, nonatomic) NSNumber* type;
@property(retain, nonatomic) NSString* speciality;
@property(retain, nonatomic) NSString* Mclass;
@property(retain, nonatomic) NSNumber* year_graduated;
@property(retain, nonatomic) NSNumber* year_to;
@property(retain, nonatomic) NSNumber* year_from;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* city;
@property(retain, nonatomic) NSNumber* country;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKSchools : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKSdk : XXUnknownSuperclass <SFSafariViewControllerDelegate> {
	id<VKSdkUIDelegate> _uiDelegate;
	NSString* _apiVersion;
	NSMutableArray* _sdkDelegates;
	unsigned _authState;
	unsigned _lastKnownOptions;
	NSString* _currentAppId;
	VKAccessToken* _accessToken;
	UIViewController* _presentedSafariViewController;
	NSSet* _permissions;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKSdkUIDelegate> uiDelegate;
@property(retain, nonatomic) NSSet* permissions;
@property(assign, nonatomic) __weak UIViewController* presentedSafariViewController;
@property(retain, nonatomic) VKAccessToken* accessToken;
@property(copy, nonatomic) NSString* apiVersion;
@property(copy, nonatomic) NSString* currentAppId;
@property(assign, nonatomic) unsigned lastKnownOptions;
@property(assign, nonatomic) unsigned authState;
@property(readonly, assign, nonatomic) NSMutableArray* sdkDelegates;
+(id)actualToken;
+(void)forcedWakeUpSession;
+(void)forcedSetAccessToken:(id)token;
+(void)setSchedulerEnabled:(BOOL)enabled;
+(void)wakeUpSession:(id)session completeBlock:(id)block;
+(BOOL)isLoggedIn;
+(void)forceLogout;
+(BOOL)processOpenInternalURL:(id)url validation:(BOOL)validation;
+(BOOL)processOpenURL:(id)url fromApplication:(id)application;
+(BOOL)processOpenURL:(id)url validation:(BOOL)validation;
+(id)accessToken;
+(void)setAccessToken:(id)token;
+(BOOL)vkAppMayExists;
+(void)authorize:(id)authorize withOptions:(unsigned)options;
+(void)authorize:(id)authorize;
+(id)initializeWithAppId:(id)appId apiVersion:(id)version;
+(id)initializeWithAppId:(id)appId;
+(BOOL)initialized;
+(id)instance;
+(void)initialize;
-(void).cxx_destruct;
-(void)safariViewControllerDidFinish:(id)safariViewController;
-(void)notifyDelegate:(SEL)delegate obj:(id)obj;
-(void)resetSdkState;
-(void)notifyUserAuthorizationFailed:(id)failed;
-(void)requestSdkState:(id)state trackVisitor:(BOOL)visitor token:(id)token;
-(void)handleDidBecomeActive;
-(void)dealloc;
-(id)initUniqueInstance;
-(id)updatePermissions:(int)permissions;
-(BOOL)hasPermissions:(id)permissions;
-(void)unregisterDelegate:(id)delegate;
-(void)registerDelegate:(id)delegate;
@end

@interface VKWeakDelegate : XXUnknownSuperclass <VKSdkDelegate> {
	Class objectClass;
	id<VKSdkDelegate> _weakTarget;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKSdkDelegate> weakTarget;
+(id)with:(id)with;
-(void).cxx_destruct;
-(BOOL)isEqualTarget:(id)target;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)initWithObject:(id)object;
@end

@interface VKPhotoAttachmentCell : XXUnknownSuperclass {
	UIProgressView* _progressView;
	UIActivityIndicatorView* _activity;
	UIImageView* _attachImageView;
}
@property(retain, nonatomic) UIImageView* attachImageView;
@property(retain, nonatomic) UIActivityIndicatorView* activity;
@property(retain, nonatomic) UIProgressView* progressView;
-(void).cxx_destruct;
-(void)hideProgress;
-(void)setProgress:(float)progress;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKUploadingAttachment : VKObject {
	BOOL _isDownloading;
	NSString* _attachmentString;
	UIImage* _preview;
	VKRequest* _uploadingRequest;
	CGSize _attachSize;
}
@property(assign, nonatomic) __weak VKRequest* uploadingRequest;
@property(retain, nonatomic) UIImage* preview;
@property(retain, nonatomic) NSString* attachmentString;
@property(assign, nonatomic) CGSize attachSize;
@property(assign, nonatomic) BOOL isDownloading;
-(void).cxx_destruct;
@end

@interface VKPostSettings : VKObject {
	NSNumber* _friendsOnly;
	NSNumber* _exportTwitter;
	NSNumber* _exportFacebook;
	NSNumber* _exportLivejournal;
}
@property(retain, nonatomic) NSNumber* exportLivejournal;
@property(retain, nonatomic) NSNumber* exportFacebook;
@property(retain, nonatomic) NSNumber* exportTwitter;
@property(retain, nonatomic) NSNumber* friendsOnly;
-(void).cxx_destruct;
@end

@interface VKShareDialogController : XXUnknownSuperclass {
	int defaultBarStyle;
	BOOL _dismissAutomatically;
	NSArray* _uploadImages;
	NSArray* _vkImages;
	VKShareLink* _shareLink;
	NSString* _text;
	NSArray* _requestedScope;
	id _completionHandler;
	NSString* _postId;
	UINavigationController* _internalNavigation;
	VKSharedTransitioningObject* _transitionDelegate;
	VKShareDialogControllerInternal* _targetShareDialog;
}
@property(assign, nonatomic) BOOL dismissAutomatically;
@property(copy, nonatomic) id completionHandler;
@property(retain, nonatomic) NSArray* requestedScope;
@property(copy, nonatomic) NSString* text;
@property(retain, nonatomic) VKShareLink* shareLink;
@property(retain, nonatomic) NSArray* vkImages;
@property(retain, nonatomic) NSArray* uploadImages;
@property(copy, nonatomic) NSString* postId;
@property(readonly, assign, nonatomic) VKShareDialogControllerInternal* targetShareDialog;
@property(readonly, assign, nonatomic) VKSharedTransitioningObject* transitionDelegate;
@property(readonly, assign, nonatomic) UINavigationController* internalNavigation;
+(void)initialize;
-(void).cxx_destruct;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)rotateToInterfaceOrientation:(int)interfaceOrientation appear:(BOOL)appear;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewWillAppear:(BOOL)view;
-(CGSize)preferredContentSize;
-(void)viewWillLayoutSubviews;
-(void)loadView;
-(id)init;
@end

@interface VKPlaceholderTextView : XXUnknownSuperclass {
	NSString* _placeholder;
	UIColor* _placeholderColor;
	UILabel* _placeholderLabel;
}
@property(retain, nonatomic) UILabel* placeholderLabel;
@property(retain, nonatomic) UIColor* placeholderColor;
@property(retain, nonatomic) NSString* placeholder;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(float)measureHeightOfUITextView;
-(void)setText:(id)text;
-(void)textChanged:(id)changed;
-(id)initWithFrame:(CGRect)frame;
-(void)awakeFromNib;
-(void)dealloc;
@end

@interface VKPrivacyButton : XXUnknownSuperclass {
}
-(CGRect)titleRectForContentRect:(CGRect)contentRect;
-(CGRect)imageRectForContentRect:(CGRect)contentRect;
-(void)setHighlighted:(BOOL)highlighted;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKLinkAttachView : XXUnknownSuperclass {
	UILabel* _linkTitle;
	UILabel* _linkHost;
}
@property(retain, nonatomic) UILabel* linkHost;
@property(retain, nonatomic) UILabel* linkTitle;
-(void).cxx_destruct;
-(void)setTargetLink:(id)link;
-(void)sizeToFit;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKShareDialogView : XXUnknownSuperclass <UITextViewDelegate> {
	float lastTextViewHeight;
	UIView* _notAuthorizedView;
	UILabel* _notAuthorizedLabel;
	UIButton* _notAuthorizedButton;
	UIScrollView* _contentScrollView;
	UIButton* _privacyButton;
	UICollectionView* _attachmentsCollection;
	VKPlaceholderTextView* _textView;
	VKLinkAttachView* _linkAttachView;
	UIActivityIndicatorView* _activityIndicator;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) VKLinkAttachView* linkAttachView;
@property(retain, nonatomic) VKPlaceholderTextView* textView;
@property(retain, nonatomic) UICollectionView* attachmentsCollection;
@property(retain, nonatomic) UIButton* privacyButton;
@property(retain, nonatomic) UIScrollView* contentScrollView;
@property(retain, nonatomic) UIButton* notAuthorizedButton;
@property(retain, nonatomic) UILabel* notAuthorizedLabel;
@property(retain, nonatomic) UIView* notAuthorizedView;
-(void).cxx_destruct;
-(void)setShareLink:(id)link;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)positionSubviews;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKShareDialogControllerInternal : XXUnknownSuperclass <UITextViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, VKSdkDelegate, VKSdkUIDelegate> {
	NSObject<OS_dispatch_queue>* imageProcessingQueue;
	BOOL _prepared;
	VKShareDialogController* _parent;
	UIBarButtonItem* _sendButton;
	NSMutableArray* _attachmentsArray;
	VKPostSettings* _postSettings;
	id<VKSdkUIDelegate> _oldDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKSdkUIDelegate> oldDelegate;
@property(assign, nonatomic) BOOL prepared;
@property(retain, nonatomic) VKPostSettings* postSettings;
@property(retain, nonatomic) NSMutableArray* attachmentsArray;
@property(retain, nonatomic) UIBarButtonItem* sendButton;
@property(readonly, assign, nonatomic) UICollectionView* attachmentsScrollView;
@property(assign, nonatomic) __weak VKShareDialogController* parent;
-(void).cxx_destruct;
-(void)textViewDidChange:(id)textView;
-(void)removeAttachIfExists:(id)exists;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)createAttachments;
-(void)vkSdkUserAuthorizationFailed;
-(void)vkSdkAuthorizationStateUpdatedWithResult:(id)result;
-(void)vkSdkAccessAuthorizationFinishedWithResult:(id)result;
-(void)vkSdkShouldPresentViewController:(id)vkSdk;
-(void)vkSdkNeedCaptchaEnter:(id)enter;
-(void)authorize:(id)authorize;
-(void)openSettings:(id)settings;
-(void)sendMessage:(id)message;
-(void)close:(id)close;
-(id)rightBarButtonItems;
-(void)prepare;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)setAuthorizationState:(unsigned)state;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)init;
-(void)dealloc;
@end

@interface VKShareSettingsController : XXUnknownSuperclass {
	VKPostSettings* _currentSettings;
	NSArray* _rows;
}
@property(retain, nonatomic) NSArray* rows;
@property(retain, nonatomic) VKPostSettings* currentSettings;
-(void).cxx_destruct;
-(void)switchChanged:(id)changed;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidLoad;
-(id)initWithPostSettings:(id)postSettings;
@end

@interface VKShareLink : VKObject {
	NSString* _title;
	NSURL* _link;
}
@property(copy, nonatomic) NSURL* link;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title link:(id)link;
@end

@interface VKHelperNavigationController : XXUnknownSuperclass {
}
@end

@interface VKSharedTransitioningObject : XXUnknownSuperclass <UIViewControllerTransitioningDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
@end

@interface AnimatedTransitioning : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	BOOL _isPresenting;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL isPresenting;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

@interface VKUniversity : VKApiObject {
	NSNumber* _id;
	NSNumber* _country;
	NSNumber* _city;
	NSString* _name;
	NSNumber* _faculty;
	NSString* _faculty_name;
	NSNumber* _chair;
	NSString* _chair_name;
	NSNumber* _graduation;
	NSString* _education_form;
	NSString* _education_status;
}
@property(retain, nonatomic) NSString* education_status;
@property(retain, nonatomic) NSString* education_form;
@property(retain, nonatomic) NSNumber* graduation;
@property(retain, nonatomic) NSString* chair_name;
@property(retain, nonatomic) NSNumber* chair;
@property(retain, nonatomic) NSString* faculty_name;
@property(retain, nonatomic) NSNumber* faculty;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* city;
@property(retain, nonatomic) NSNumber* country;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKUniversities : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKUploadImage : VKObject {
	NSData* _imageData;
	UIImage* _sourceImage;
	VKImageParameters* _parameters;
}
@property(retain, nonatomic) VKImageParameters* parameters;
@property(retain, nonatomic) UIImage* sourceImage;
@property(retain, nonatomic) NSData* imageData;
+(id)uploadImageWithImage:(id)image andParams:(id)params;
+(id)uploadImageWithData:(id)data andParams:(id)params;
-(void).cxx_destruct;
@end

@interface VKUploadMessagesPhotoRequest : VKUploadPhotoBase {
}
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
@end

@interface VKUploadPhotoBase : VKRequest {
	int _albumId;
	int _groupId;
	int _userId;
	VKImageParameters* _imageParameters;
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) VKImageParameters* imageParameters;
@property(assign, nonatomic) int userId;
@property(assign, nonatomic) int groupId;
@property(assign, nonatomic) int albumId;
@property(retain, nonatomic) NSOperation* executionOperation;
-(void).cxx_destruct;
-(id)methodName;
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
-(id)createExecutionOperation;
-(id)initWithImage:(id)image parameters:(id)parameters;
@end

@interface VKUploadImageOperation : VKOperation {
	VKUploadPhotoBase* _uploadRequest;
	VKRequest* _lastLoadingRequest;
}
@property(retain, nonatomic) VKRequest* lastLoadingRequest;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) VKUploadPhotoBase* uploadRequest;
+(id)operationWithUploadRequest:(id)uploadRequest;
-(void).cxx_destruct;
-(void)cancel;
-(void)finish;
-(void)start;
@end

@interface VKUploadPhotoRequest : VKUploadPhotoBase {
}
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
-(id)initWithImage:(id)image parameters:(id)parameters albumId:(int)anId groupId:(int)anId4;
@end

@interface VKUploadWallPhotoRequest : VKUploadPhotoBase {
}
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
-(id)initWithImage:(id)image parameters:(id)parameters userId:(int)anId groupId:(int)anId4;
@end

@interface VKLastSeen : VKApiObject {
	NSNumber* _time;
	NSNumber* _platform;
}
@property(retain, nonatomic) NSNumber* platform;
@property(retain, nonatomic) NSNumber* time;
-(void).cxx_destruct;
@end

@interface VKUser : VKApiObject {
	BOOL _can_post;
	BOOL _can_see_all_posts;
	bool _status_loaded;
	BOOL _can_write_private_message;
	BOOL _can_see_audio;
	NSNumber* _id;
	NSString* _first_name;
	NSString* _last_name;
	NSString* _first_name_acc;
	NSString* _last_name_acc;
	NSString* _first_name_gen;
	NSString* _last_name_gen;
	NSString* _first_name_dat;
	NSString* _last_name_dat;
	NSString* _first_name_ins;
	NSString* _last_name_ins;
	NSString* _domain;
	VKPersonal* _personal;
	NSNumber* _sex;
	NSNumber* _invited_by;
	NSNumber* _online;
	NSString* _bdate;
	VKCity* _city;
	VKCountry* _country;
	NSMutableArray* _lists;
	NSString* _screen_name;
	NSNumber* _has_mobile;
	NSNumber* _rate;
	NSString* _mobile_phone;
	NSString* _home_phone;
	NSString* _status;
	VKAudio* _status_audio;
	VKLastSeen* _last_seen;
	NSNumber* _relation;
	VKUser* _relation_partner;
	VKCounters* _counters;
	NSString* _nickname;
	VKExports* _exports;
	NSNumber* _wall_comments;
	NSString* _phone;
	NSNumber* _online_mobile;
	NSNumber* _faculty;
	NSNumber* _university;
	VKUniversities* _universities;
	VKSchools* _schools;
	NSNumber* _graduation;
	NSNumber* _friendState;
	NSNumber* _common_count;
	NSString* _faculty_name;
	NSString* _university_name;
	NSString* _books;
	NSString* _games;
	NSString* _interests;
	NSString* _movies;
	NSString* _tv;
	NSString* _about;
	NSString* _music;
	NSString* _quoutes;
	NSString* _activities;
	NSString* _photo_max;
	NSString* _photo_50;
	NSString* _photo_100;
	NSString* _photo_200;
	NSString* _photo_200_orig;
	NSString* _photo_400_orig;
	NSString* _photo_max_orig;
	VKPhotoArray* _photos;
	NSNumber* _photos_count;
	VKRelativities* _relatives;
	NSNumber* _verified;
	NSString* _deactivated;
	NSString* _site;
	NSString* _home_town;
	NSNumber* _blacklisted;
	NSNumber* _blacklisted_by_me;
	NSString* _twitter;
	NSString* _skype;
	NSString* _facebook;
	NSString* _instagram;
	NSString* _livejournal;
	NSString* _wall_default;
	NSNumber* _followers_count;
	double _bdateIntervalSort;
}
@property(retain, nonatomic) NSNumber* followers_count;
@property(retain, nonatomic) NSString* wall_default;
@property(retain, nonatomic) NSString* livejournal;
@property(retain, nonatomic) NSString* instagram;
@property(retain, nonatomic) NSString* facebook;
@property(retain, nonatomic) NSString* skype;
@property(retain, nonatomic) NSString* twitter;
@property(retain, nonatomic) NSNumber* blacklisted_by_me;
@property(retain, nonatomic) NSNumber* blacklisted;
@property(retain, nonatomic) NSString* home_town;
@property(retain, nonatomic) NSString* site;
@property(retain, nonatomic) NSString* deactivated;
@property(retain, nonatomic) NSNumber* verified;
@property(assign, nonatomic) double bdateIntervalSort;
@property(retain, nonatomic) VKRelativities* relatives;
@property(retain, nonatomic) NSNumber* photos_count;
@property(retain, nonatomic) VKPhotoArray* photos;
@property(retain, nonatomic) NSString* photo_max_orig;
@property(retain, nonatomic) NSString* photo_400_orig;
@property(retain, nonatomic) NSString* photo_200_orig;
@property(retain, nonatomic) NSString* photo_200;
@property(retain, nonatomic) NSString* photo_100;
@property(retain, nonatomic) NSString* photo_50;
@property(retain, nonatomic) NSString* photo_max;
@property(retain, nonatomic) NSString* activities;
@property(retain, nonatomic) NSString* quoutes;
@property(retain, nonatomic) NSString* music;
@property(retain, nonatomic) NSString* about;
@property(retain, nonatomic) NSString* tv;
@property(retain, nonatomic) NSString* movies;
@property(retain, nonatomic) NSString* interests;
@property(retain, nonatomic) NSString* games;
@property(retain, nonatomic) NSString* books;
@property(retain, nonatomic) NSString* university_name;
@property(retain, nonatomic) NSString* faculty_name;
@property(retain, nonatomic) NSNumber* common_count;
@property(retain, nonatomic) NSNumber* friendState;
@property(retain, nonatomic) NSNumber* graduation;
@property(retain, nonatomic) VKSchools* schools;
@property(retain, nonatomic) VKUniversities* universities;
@property(retain, nonatomic) NSNumber* university;
@property(retain, nonatomic) NSNumber* faculty;
@property(retain, nonatomic) NSNumber* online_mobile;
@property(retain, nonatomic) NSString* phone;
@property(assign, nonatomic) BOOL can_see_audio;
@property(assign, nonatomic) BOOL can_write_private_message;
@property(retain, nonatomic) NSNumber* wall_comments;
@property(retain, nonatomic) VKExports* exports;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) VKCounters* counters;
@property(retain, nonatomic) VKUser* relation_partner;
@property(retain, nonatomic) NSNumber* relation;
@property(retain, nonatomic) VKLastSeen* last_seen;
@property(assign, nonatomic) bool status_loaded;
@property(retain, nonatomic) VKAudio* status_audio;
@property(retain, nonatomic) NSString* status;
@property(assign, nonatomic) BOOL can_see_all_posts;
@property(assign, nonatomic) BOOL can_post;
@property(retain, nonatomic) NSString* home_phone;
@property(retain, nonatomic) NSString* mobile_phone;
@property(retain, nonatomic) NSNumber* rate;
@property(retain, nonatomic) NSNumber* has_mobile;
@property(retain, nonatomic) NSString* screen_name;
@property(retain, nonatomic) NSMutableArray* lists;
@property(retain, nonatomic) VKCountry* country;
@property(retain, nonatomic) VKCity* city;
@property(retain, nonatomic) NSString* bdate;
@property(retain, nonatomic) NSNumber* online;
@property(retain, nonatomic) NSNumber* invited_by;
@property(retain, nonatomic) NSNumber* sex;
@property(retain, nonatomic) VKPersonal* personal;
@property(retain, nonatomic) NSString* domain;
@property(retain, nonatomic) NSString* last_name_ins;
@property(retain, nonatomic) NSString* first_name_ins;
@property(retain, nonatomic) NSString* last_name_dat;
@property(retain, nonatomic) NSString* first_name_dat;
@property(retain, nonatomic) NSString* last_name_gen;
@property(retain, nonatomic) NSString* first_name_gen;
@property(retain, nonatomic) NSString* last_name_acc;
@property(retain, nonatomic) NSString* first_name_acc;
@property(retain, nonatomic) NSString* last_name;
@property(retain, nonatomic) NSString* first_name;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
-(id)description;
@end

@interface VKGeoObject : VKApiObject {
	NSNumber* _id;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKCity : VKGeoObject {
}
@end

@interface VKCountry : VKGeoObject {
}
@end

@interface VKExports : VKApiObject {
	NSNumber* _twitter;
	NSNumber* _facebook;
	NSNumber* _livejournal;
	NSNumber* _instagram;
}
@property(retain, nonatomic) NSNumber* instagram;
@property(retain, nonatomic) NSNumber* livejournal;
@property(retain, nonatomic) NSNumber* facebook;
@property(retain, nonatomic) NSNumber* twitter;
-(void).cxx_destruct;
@end

@interface VKUsersArray : VKApiObjectArray {
}
-(Class)objectClass;
@end

@interface VKUtil : XXUnknownSuperclass {
}
+(BOOL)isOperatingSystemAtLeastIOS8;
+(BOOL)isOperatingSystemAtLeastIOS7;
+(BOOL)isOperatingSystemAtLeastVersion:(avro_obj_t)leastVersion;
+(id)queryStringFromParams:(id)params;
+(id)escapeString:(id)string;
+(id)colorWithRGB:(int)rgb;
+(id)parseNumberString:(id)string;
+(id)generateGUID;
+(id)explodeQueryString:(id)string;
@end

@interface CLSInternalReport : XXUnknownSuperclass {
	NSString* _identifier;
	NSString* _path;
	NSArray* _metadataSections;
}
@property(readonly, copy, nonatomic) NSString* OSBuildVersion;
@property(readonly, copy, nonatomic) NSString* OSVersion;
@property(readonly, copy, nonatomic) NSDate* dateCreated;
@property(readonly, copy, nonatomic) NSString* bundleShortVersionString;
@property(readonly, copy, nonatomic) NSString* bundleVersion;
@property(readonly, copy, nonatomic) NSDictionary* customKeys;
@property(readonly, copy, nonatomic) NSString* identifier;
@property(readonly, assign, nonatomic) BOOL isCrash;
@property(readonly, copy, nonatomic) NSString* APIKey;
@property(readonly, copy, nonatomic) NSString* metadataPath;
@property(readonly, copy, nonatomic) NSString* binaryImagePath;
@property(readonly, assign, nonatomic) BOOL needsToBeSubmitted;
@property(copy, nonatomic) NSString* path;
@property(readonly, copy, nonatomic) NSString* directoryName;
+(id)readMetadataAtPath:(id)path;
+(id)reportWithPath:(id)path;
-(void).cxx_destruct;
-(id)metadataSections;
-(void)enumerateSymbolicatableFilesInContent:(id)content;
-(BOOL)checkExistenceOfAtLeastOnceFileInArray:(id)array;
-(id)crashFilenames;
-(id)pathForContentFile:(id)contentFile;
-(id)initWithPath:(id)path;
-(id)initWithPath:(id)path executionIdentifier:(id)identifier;
@end

@interface Crashlytics : XXUnknownSuperclass <FABKit, CLSCrashReportingControllerDelegate, CLSBetaControllerDelegate, WKScriptMessageHandler> {
	id<CrashlyticsDelegate> _delegate;
	CLSCrashReportingController* _crashReportingController;
	CLSBetaController* _betaController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) id<CrashlyticsDelegate> delegate;
@property(assign, nonatomic) BOOL debugMode;
@property(readonly, copy, nonatomic) NSString* version;
@property(readonly, copy, nonatomic) NSString* APIKey;
@property(readonly, assign, nonatomic) CLSBetaController* betaController;
+(void)logEvent:(id)event attributes:(id)attributes;
+(void)logEvent:(id)event;
+(void)setDevelopmentPlatformVersion:(id)version;
+(void)setDevelopmentPlatformName:(id)name;
+(void)setFloatValue:(float)value forKey:(id)key;
+(void)setBoolValue:(BOOL)value forKey:(id)key;
+(void)setIntValue:(int)value forKey:(id)key;
+(void)setObjectValue:(id)value forKey:(id)key;
+(void)setUserEmail:(id)email;
+(void)setUserName:(id)name;
+(void)setUserIdentifier:(id)identifier;
+(id)startWithAPIKey:(id)apikey delegate:(id)delegate afterDelay:(double)delay;
+(id)startWithAPIKey:(id)apikey afterDelay:(double)delay;
+(id)startWithAPIKey:(id)apikey delegate:(id)delegate;
+(id)startWithAPIKey:(id)apikey;
+(void)initializeIfNeeded;
+(id)kitBuildVersion;
+(id)kitDisplayVersion;
+(id)bundleIdentifier;
+(id)sharedInstance;
+(id)stringFromActionType:(unsigned)actionType;
+(void)recordInAppError:(id)appError forActionType:(unsigned)actionType withParams:(id)params;
+(void)recordInAppPurchaseRestoreError:(id)appPurchaseRestoreError;
+(void)recordInAppPurchaseBuyError:(id)appPurchaseBuyError forStoreId:(id)storeId;
-(void).cxx_destruct;
-(void)logEvent:(id)event attributes:(id)attributes;
-(void)logEvent:(id)event;
-(void)userContentController:(id)controller didReceiveScriptMessage:(id)message;
-(id)settingsForBetaController:(id)betaController;
-(id)APIKeyForBetaController:(id)betaController;
-(id)settingsForCrashReportingController:(id)crashReportingController;
-(BOOL)isFirstInstallForCrashReportingController:(id)crashReportingController;
-(id)installIDForCrashReportingController:(id)crashReportingController;
-(id)APIKeyForCrashReportingController:(id)crashReportingController;
-(BOOL)reportingController:(id)controller ensureDeliveryOfUnixSignal:(int)unixSignal;
-(void)reportingController:(id)controller internalDidDetectReportForLastExecution:(id)internal;
-(void)reportingController:(id)controller didDetectReportForLastExecution:(id)lastExecution completionHandler:(id)handler;
-(BOOL)reportingControllerMustInformDelegateOfReports:(id)reports;
-(BOOL)reportingControllerCanUseBackgroundSessions:(id)sessions;
-(void)detectedCrash;
-(BOOL)shouldInstallCrashCallback;
-(void)warnDelegateAboutMethods;
-(BOOL)delegateRespondsToLegacyMethods;
-(void)monitorErrorsForWKWebViewConfiguration:(id)wkwebViewConfiguration;
-(BOOL)handleWebView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)monitorErrorsForUIWebView:(id)uiwebView;
-(void)recordCustomExceptionName:(id)name reason:(id)reason frameArray:(id)array;
-(void)recordError:(id)error withAdditionalUserInfo:(id)additionalUserInfo;
-(void)recordError:(id)error;
-(void)setDevelopmentPlatformVersion:(id)version;
-(id)developmentPlatformVersion;
-(void)setDevelopmentPlatformName:(id)name;
-(id)developmentPlatformName;
-(void)setFloatValue:(float)value forKey:(id)key;
-(void)setBoolValue:(BOOL)value forKey:(id)key;
-(void)setIntValue:(int)value forKey:(id)key;
-(void)setObjectValue:(id)value forKey:(id)key;
-(void)setUserEmail:(id)email;
-(void)setUserName:(id)name;
-(void)setUserIdentifier:(id)identifier;
-(void)throwException;
-(void)crash;
-(BOOL)isCrashlyticsStarted;
-(id)settingsDictionary;
-(BOOL)isFirstInstall;
-(id)installID;
-(void)setKitInfo:(id)info;
-(id)kitInfo;
-(id)bundleIdentifier;
-(void)start;
-(id)initWithSuper;
-(id)init;
@end

@interface CLSFileManager : XXUnknownSuperclass {
	NSString* _rootPath;
	NSFileManager* _underlyingFileManager;
}
@property(readonly, assign, nonatomic) NSArray* processingPathContents;
@property(readonly, assign, nonatomic) NSArray* preparedPathContents;
@property(readonly, assign, nonatomic) NSArray* activePathContents;
@property(readonly, copy, nonatomic) NSString* preparedPath;
@property(readonly, copy, nonatomic) NSString* pendingPath;
@property(readonly, copy, nonatomic) NSString* processingPath;
@property(readonly, copy, nonatomic) NSString* activePath;
@property(readonly, copy, nonatomic) NSString* structurePath;
@property(readonly, copy, nonatomic) NSString* rootPath;
@property(readonly, assign, nonatomic) NSFileManager* underlyingFileManager;
-(void).cxx_destruct;
-(BOOL)removeContentsOfAllPaths;
-(BOOL)removeContentsOfPendingPath;
-(BOOL)removeContentsOfProcessingPath;
-(BOOL)movePendingToProcessing;
-(BOOL)moveProcessingContentsToPrepared;
-(void)enumerateFilesInPreparedDirectoryUsingBlock:(id)preparedDirectoryUsingBlock;
-(void)enumerateFilesInActiveDirectoryUsingBlock:(id)activeDirectoryUsingBlock;
-(void)enumerateReportsInProcessingDirectoryUsingBlock:(id)processingDirectoryUsingBlock;
-(void)removeLegacyDirectories;
-(id)setupNewPathForExecutionIdentifier:(id)executionIdentifier;
-(BOOL)prepareForNewLaunch;
-(id)pathNamespace;
-(id)contentsOfDirectory:(id)directory;
-(id)fileSizeAtPath:(id)path;
-(BOOL)moveItemsFromDirectory:(id)directory toDirectory:(id)directory2;
-(void)enumerateFilesInDirectory:(id)directory usingBlock:(id)block;
-(BOOL)moveItemAtPath:(id)path toDirectory:(id)directory;
-(BOOL)removeContentsOfDirectoryAtPath:(id)path;
-(BOOL)removeItemAtPath:(id)path;
-(BOOL)createDirectoryAtPath:(id)path;
-(id)init;
@end

@interface CLSAlert : XXUnknownSuperclass {
}
+(id)alertWithTitle:(id)title message:(id)message delegate:(id)delegate cancelButtonTitle:(id)title4 otherButtonTitle:(id)title5;
@end

@interface CLSDemangleOperation : CLSThreadArrayOperation {
}
+(id)demangleSwiftSymbol:(const char*)symbol;
+(id)demangleCppSymbol:(const char*)symbol;
+(id)demangleBlockInvokeCppSymbol:(const char*)symbol;
+(id)demangleSymbol:(const char*)symbol;
-(void)main;
-(id)demangleSymbol:(const char*)symbol;
@end

@interface CLSPackageReportOperation : XXUnknownSuperclass {
	CLSInternalReport* _report;
	CLSFileManager* _fileManager;
	NSString* _finalPath;
}
@property(readonly, assign, nonatomic) CLSFileManager* fileManager;
@property(readonly, assign, nonatomic) CLSInternalReport* report;
@property(copy, nonatomic) NSString* finalPath;
-(void).cxx_destruct;
-(void)encode:(id)encode data:(id)data fromPath:(id)path;
-(void)main;
-(id)packagedPathWithName:(id)name;
-(id)destinationDirectory;
-(id)reportPath;
-(BOOL)writeBytes:(const void*)bytes length:(unsigned long)length toGZFile:(void*)gzfile;
-(BOOL)compressData:(id)data toPath:(id)path;
-(id)initWithReport:(id)report fileManager:(id)manager;
@end

@interface CLSSerializeSymbolicatedFramesOperation : CLSThreadArrayOperation {
	NSString* _outputPath;
}
@property(copy, nonatomic) NSString* outputPath;
-(void).cxx_destruct;
-(void)main;
@end

@interface CLSProcessReportOperation : XXUnknownSuperclass {
	CLSSymbolResolver* _symbolResolver;
	CLSInternalReport* _report;
}
@property(readonly, assign, nonatomic) CLSInternalReport* report;
@property(readonly, assign, nonatomic) CLSSymbolResolver* symbolResolver;
-(void).cxx_destruct;
-(void)main;
-(BOOL)symbolicateFile:(id)file withResolver:(id)resolver;
-(id)threadArrayFromFile:(id)file;
-(id)binaryImagePath;
-(id)initWithReport:(id)report resolver:(id)resolver;
@end

@interface CLSSettings : XXUnknownSuperclass {
	NSDictionary* _settingsDictionary;
}
@property(readonly, copy, nonatomic) NSString* interactivePromptAlwaysSendTitle;
@property(readonly, copy, nonatomic) NSString* interactivePromptSendTitle;
@property(readonly, copy, nonatomic) NSString* interactivePromptCancelTitle;
@property(readonly, copy, nonatomic) NSString* interactivePromptMessage;
@property(readonly, copy, nonatomic) NSString* interactivePromptTitle;
@property(readonly, assign, nonatomic) unsigned maxCustomKeys;
@property(readonly, assign, nonatomic) unsigned maxCustomExceptions;
@property(readonly, assign, nonatomic) unsigned logBufferSize;
@property(readonly, assign, nonatomic) unsigned errorLogBufferSize;
@property(readonly, assign, nonatomic) BOOL userPromptEnabled;
@property(readonly, assign, nonatomic) BOOL crashReportingEnabled;
@property(readonly, assign, nonatomic) BOOL customExceptionsEnabled;
@property(readonly, assign, nonatomic) BOOL errorReportingEnabled;
@property(readonly, assign, nonatomic) BOOL canProcessUrgentReports;
@property(readonly, assign, nonatomic) BOOL shouldSubmitReports;
@property(readonly, assign, nonatomic) BOOL shouldPackageReports;
@property(readonly, copy, nonatomic) NSNumber* betaSuspendDuration;
@property(readonly, copy, nonatomic) NSString* betaEndpoint;
@property(readonly, copy, nonatomic) NSString* reportsEndpoint;
@property(readonly, assign, nonatomic) NSDictionary* settingsDictionary;
-(void).cxx_destruct;
-(id)promptValueForSettingsKey:(id)settingsKey withLocalizedKey:(id)localizedKey defaultValue:(id)value;
-(id)valueForConfigurationKey:(id)configurationKey;
-(id)defaultConfiguration;
-(id)configuration;
-(id)initWithDictionary:(id)dictionary;
@end

@interface CLSBetaController : XXUnknownSuperclass <NSURLSessionDelegate> {
	NSString* _betaToken;
	BOOL _checksSuspended;
	BOOL _retrying;
	id<CLSBetaControllerDelegate> _delegate;
	FABNetworkClient* _networkClient;
	CLSBetaUpdate* _activeUpdate;
	NSTimer* _checkSuspensionTimer;
	NSObject<OS_dispatch_queue>* _queue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) NSString* betaToken;
@property(assign, nonatomic) __weak id<CLSBetaControllerDelegate> delegate;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(assign, nonatomic) BOOL retrying;
@property(assign, nonatomic) BOOL checksSuspended;
@property(retain, nonatomic) NSTimer* checkSuspensionTimer;
@property(retain, nonatomic) CLSBetaUpdate* activeUpdate;
@property(readonly, assign, nonatomic) FABNetworkClient* networkClient;
+(id)pinnnedCertificates;
+(BOOL)isBetaSupported;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)applicationWillEnterForeground:(id)application;
-(void)fabricSettingsDownloaded:(id)downloaded;
-(void)showBetaAlertForUpdate:(id)update;
-(void)didGetUpdate:(id)update;
-(BOOL)shouldGetUpdates;
-(void)applicationWillEnterForeground;
-(void)allowChecks;
-(void)temporarilySuspendChecks;
-(id)updateWithData:(id)data error:(id*)error;
-(void)handledCompletedBetaRequestWithData:(id)data error:(id)error completionBlock:(id)block;
-(void)loadUpdateWithCompletionBlock:(id)completionBlock;
-(void)maybeGetUpdate:(id)update;
-(void)checkForUpdate;
-(id)betaUpdateURL;
-(id)APIKey;
-(id)appInstallationSource;
-(id)appInstanceIdentifier;
-(id)appDisplayVersion;
-(id)appBuildVersion;
-(id)appBundleIdentifier;
-(id)betaEndpoint;
-(id)betaUpdateSuspendDurationSecs;
-(id)settings;
-(void)dealloc;
-(BOOL)start;
-(id)initWithDelegate:(id)delegate;
@end

@interface CLSSymbolResolver : XXUnknownSuperclass {
	NSMutableArray* _binaryImages;
}
-(void).cxx_destruct;
-(BOOL)updateStackFrame:(id)frame;
-(id)frameForAddress:(unsigned long long)address;
-(BOOL)fillInImageDetails:(XXStruct_sUoPdA*)imageDetails forUUID:(id)uuid;
-(id)loadedBinaryImageForPC:(unsigned long)pc;
-(BOOL)loadBinaryImagesFromFile:(id)file;
-(id)init;
@end

@interface CLSCrashReportingController : XXUnknownSuperclass <CLSNetworkClientDelegate, CLSReportsControllerDelegate> {
	CLSFileManager* _fileMananger;
	CLSNetworkClient* _networkClient;
	CLSReportsController* _reportsController;
	NSOperationQueue* _operationQueue;
	CLSSettings* _settings;
	int _alwaysSendButtonIndex;
	UIAlertView* _crashReportSubmissionAlert;
	CLSInternalReport* _promptedReport;
	int _promptChoice;
	id<CLSCrashReportingControllerDelegate> _delegate;
	CLSFileManager* _fileManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<CLSCrashReportingControllerDelegate> delegate;
@property(retain, nonatomic) CLSFileManager* fileManager;
@property(readonly, assign, nonatomic) CLSReportsController* reportsController;
@property(retain, nonatomic) CLSNetworkClient* networkClient;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
-(void).cxx_destruct;
-(void)reportsControllerDidCompleteAllSubmissions:(id)reportsController;
-(void)reportsController:(id)controller didCompletePackageSubmission:(id)submission error:(id)error;
-(id)bundleIdentifierForReportsController:(id)reportsController;
-(id)APIKeyForReportsController:(id)reportsController;
-(id)settingsForReportsController:(id)reportsController;
-(void)networkClient:(id)client didFinishUploadWithPath:(id)path error:(id)error;
-(BOOL)networkClientCanUseBackgroundSessions:(id)sessions;
-(void)didChangeUIOrientation:(id)orientation;
-(void)didChangeOrientation:(id)orientation;
-(void)didBecomeInactive:(id)inactive;
-(void)willBecomeActive:(id)active;
-(void)captureInitialNotificationStates;
-(void)setupStateNotifications;
-(BOOL)checkForAndCreateLaunchMarker;
-(BOOL)removeLaunchFailureMarker;
-(BOOL)launchFailureMarkerPresent;
-(BOOL)createLaunchFailureMarker;
-(id)launchFailureMarkerPath;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)alertViewCancel:(id)cancel;
-(void)handlePromptCompleteForReport:(id)report shouldSubmit:(BOOL)submit shouldMarkAlwaysSubmit:(BOOL)submit3;
-(void)setupAndDisplayAlertWithTitle:(id)title message:(id)message cancel:(id)cancel send:(id)send alwaysSend:(id)send5 report:(id)report;
-(void)displayPermissionAlertForReport:(id)report;
-(void)retryUploadForReportAtPath:(id)path;
-(void)uploadPreexistingFiles:(id)files;
-(void)handleExistingFilesInPrepared;
-(void)handleExistingFilesInProcessing;
-(void)handleContentsInOtherReportingDirectories;
-(void)removeReport:(id)report;
-(void)handleDelegateCompletionForReport:(id)report submit:(BOOL)submit;
-(void)processExistingActiveReportPath:(id)path asUrgent:(BOOL)urgent;
-(void)processExistingReportPaths:(id)paths asUrgent:(BOOL)urgent;
-(id)setupCurrentReport;
-(BOOL)installCrashReportingHandlers:(XXStruct_69FNmD*)handlers;
-(BOOL)prepareForNewLaunch;
-(id)bundleIdentifier;
-(BOOL)needsToPrompt;
-(BOOL)canProcessUrgentReports;
-(BOOL)delegateNeedsToBeInformedOfReports;
-(BOOL)packagingEnabled;
-(void)checkForUserPromptSetting;
-(BOOL)potentiallySubmittableCrashOccurred;
-(BOOL)attemptCurrentReportSubmission;
-(void)deliverCrashDelegateCallback;
-(unsigned)machExceptionMask;
-(id)settings;
-(id)APIKey;
-(id)installIdentifier;
-(BOOL)firstInstall;
-(BOOL)checkPreconditions;
-(void)crashReportingSetupCompleted:(unsigned long long)completed;
-(BOOL)startCrashReporterWithAPIKey:(id)apikey betaToken:(id)token profilingMark:(unsigned long long)mark report:(id)report;
-(BOOL)startWithProfilingMark:(unsigned long long)profilingMark betaToken:(id)token;
-(id)clientWithOperationQueue:(id)operationQueue;
-(id)initWithFileManager:(id)fileManager delegate:(id)delegate;
@end

@interface CLSStackFrame : XXUnknownSuperclass {
	NSString* _symbol;
	NSString* _rawSymbol;
	NSString* _library;
	NSString* _fileName;
	unsigned _lineNumber;
	unsigned long long _offset;
	unsigned long long _address;
}
@property(assign, nonatomic) unsigned long long address;
@property(assign, nonatomic) unsigned long long offset;
@property(assign, nonatomic) unsigned lineNumber;
@property(copy, nonatomic) NSString* fileName;
@property(copy, nonatomic) NSString* library;
@property(copy, nonatomic) NSString* rawSymbol;
@property(copy, nonatomic) NSString* symbol;
+(id)stackFrameWithSymbol:(id)symbol;
+(id)stackFrameWithAddress:(unsigned)address;
+(id)stackFrame;
-(void).cxx_destruct;
-(id)description;
@end

@interface CLSSymbolicationOperation : CLSThreadArrayOperation {
	CLSSymbolResolver* _symbolResolver;
}
@property(retain, nonatomic) CLSSymbolResolver* symbolResolver;
-(void).cxx_destruct;
-(void)main;
@end

@interface CLSReportsController : XXUnknownSuperclass {
	id<CLSReportsControllerDelegate> _delegate;
	NSOperationQueue* _operationQueue;
	CLSNetworkClient* _networkClient;
	CLSFileManager* _fileManager;
}
@property(readonly, assign, nonatomic) CLSFileManager* fileManager;
@property(readonly, assign, nonatomic) CLSNetworkClient* networkClient;
@property(readonly, assign, nonatomic) NSOperationQueue* operationQueue;
@property(assign, nonatomic) __weak id<CLSReportsControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)reportUploadAtPath:(id)path completedWithError:(id)error;
-(BOOL)cleanUpSubmittedReportAtPath:(id)path;
-(BOOL)uploadPackagedReportAtPath:(id)path asUrgent:(BOOL)urgent;
-(BOOL)submitPackageMultipartMimeAtPath:(id)path synchronously:(BOOL)synchronously;
-(BOOL)prepareAndSubmitReport:(id)report asUrgent:(BOOL)urgent withProcessing:(BOOL)processing;
-(BOOL)fillInRequest:(id)request forMultipartMimeDataAtPath:(id)path;
-(id)mutableRequestWithURL:(id)url timeout:(double)timeout;
-(id)APIKey;
-(id)localeIdentifier;
-(BOOL)packagingEnabled;
-(BOOL)submissionEnabled;
-(id)reportURL;
-(id)reportEndpoint;
-(id)appBundleIdentifier;
-(id)settings;
-(id)initWithQueue:(id)queue delegate:(id)delegate client:(id)client fileManager:(id)manager;
@end

@interface CLSReport : XXUnknownSuperclass <CLSCrashReport> {
	CLSInternalReport* _internalReport;
	unsigned _internalKVCounter;
	unsigned _userKVCounter;
	NSString* _internalCompactedKVFile;
	NSString* _internalIncrementalKVFile;
	NSString* _userCompactedKVFile;
	NSString* _userIncrementalKVFile;
}
@property(readonly, copy, nonatomic) NSDate* crashedOnDate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* userEmail;
@property(copy, nonatomic) NSString* userName;
@property(copy, nonatomic) NSString* userIdentifier;
@property(readonly, assign, nonatomic) BOOL isCrash;
@property(readonly, copy, nonatomic) NSString* OSBuildVersion;
@property(readonly, copy, nonatomic) NSString* OSVersion;
@property(readonly, copy, nonatomic) NSDate* dateCreated;
@property(readonly, copy, nonatomic) NSString* bundleShortVersionString;
@property(readonly, copy, nonatomic) NSString* bundleVersion;
@property(readonly, copy, nonatomic) NSDictionary* customKeys;
@property(readonly, copy, nonatomic) NSString* identifier;
@property(readonly, assign, nonatomic) CLSInternalReport* internalReport;
-(void).cxx_destruct;
-(void)setObjectValue:(id)value forKey:(id)key;
-(void)recordValue:(id)value forUserKey:(id)userKey;
-(void)recordValue:(id)value forInternalKey:(id)internalKey;
-(XXStruct_aQabGB)userKVStorage;
-(XXStruct_aQabGB)internalKVStorage;
-(id)initWithInternalReport:(id)internalReport;
@end

@interface CLSThreadArrayOperation : XXUnknownSuperclass {
	NSArray* _threadArray;
}
@property(retain, nonatomic) NSArray* threadArray;
-(void).cxx_destruct;
-(void)enumerateFramesWithBlock:(id)block;
@end

@interface CLSBetaUpdate : XXUnknownSuperclass {
	NSURL* _url;
	NSString* _version;
}
@property(readonly, copy, nonatomic) NSString* installLabel;
@property(readonly, copy, nonatomic) NSString* cancelLabel;
@property(readonly, copy, nonatomic) NSString* promptMessage;
@property(readonly, copy, nonatomic) NSString* promptTitle;
@property(readonly, copy, nonatomic) NSString* version;
@property(readonly, assign, nonatomic) NSURL* url;
+(id)betaUpdateWithDictionary:(id)dictionary error:(id*)error;
-(void).cxx_destruct;
-(id)initWithDictionary:(id)dictionary;
@end

@interface CLSNetworkClient : XXUnknownSuperclass <NSURLSessionDelegate> {
	NSURLSession* _session;
	BOOL _canUseBackgroundSession;
	id<CLSNetworkClientDelegate> _delegate;
	NSOperationQueue* _operationQueue;
	FABCertificatePinner* _certPinner;
	id _backgroundCompletionHandler;
	CLSFileManager* _fileManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL supportsBackgroundRequests;
@property(readonly, assign, nonatomic) NSOperationQueue* operationQueue;
@property(assign, nonatomic) __weak id<CLSNetworkClientDelegate> delegate;
@property(retain, nonatomic) CLSFileManager* fileManager;
@property(assign, nonatomic) BOOL canUseBackgroundSession;
@property(readonly, assign, nonatomic) NSURLSession* session;
@property(copy, nonatomic) id backgroundCompletionHandler;
@property(readonly, assign, nonatomic) FABCertificatePinner* certPinner;
+(id)pinner;
-(void).cxx_destruct;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
-(void)handleTaskDescription:(id)description completedWithError:(id)error;
-(void)handleTask:(id)task completedWithError:(id)error;
-(void)restartTask:(id)task;
-(void)runAfterRetryValueFromResponse:(id)response block:(id)block;
-(void)checkForExistingTaskMatchingDescription:(id)existingTaskMatchingDescription completionBlock:(id)block;
-(void)checkSession:(id)session forTasksMatchingDescription:(id)tasksMatchingDescription completionBlock:(id)block;
-(BOOL)taskArray:(id)array hasTaskMatchingDescription:(id)description;
-(id)relativeTaskPathForAbsolutePath:(id)absolutePath;
-(id)absolutePathForRelativeTaskPath:(id)relativeTaskPath;
-(id)rootPath;
-(void)startNewUploadRequest:(id)request filePath:(id)path;
-(void)startImmediateUploadRequest:(id)request filePath:(id)path;
-(void)startUploadRequest:(id)request filePath:(id)path immediately:(BOOL)immediately;
-(void)attemptToReconnectBackgroundSessionWithCompletionBlock:(id)completionBlock;
-(BOOL)NSURLSessionAvailable;
-(id)initWithQueue:(id)queue fileManager:(id)manager delegate:(id)delegate;
@end

@interface Answers : XXUnknownSuperclass <FABKit> {
	ANSAnswersController* _answersController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ANSAnswersController* answersController;
+(void)initializeIfNeeded;
+(id)kitBuildVersion;
+(id)kitDisplayVersion;
+(id)bundleIdentifier;
+(void)logCustomEventWithName:(id)name customAttributes:(id)attributes;
+(void)logSearchWithQuery:(id)query customAttributes:(id)attributes;
+(void)logContentViewWithName:(id)name contentType:(id)type contentId:(id)anId customAttributes:(id)attributes;
+(void)logRating:(id)rating contentName:(id)name contentType:(id)type contentId:(id)anId customAttributes:(id)attributes;
+(void)logStartCheckoutWithPrice:(id)price currency:(id)currency itemCount:(id)count customAttributes:(id)attributes;
+(void)logAddToCartWithPrice:(id)price currency:(id)currency itemName:(id)name itemType:(id)type itemId:(id)anId customAttributes:(id)attributes;
+(void)logLevelEnd:(id)end score:(id)score success:(id)success customAttributes:(id)attributes;
+(void)logLevelStart:(id)start customAttributes:(id)attributes;
+(void)logPurchaseWithPrice:(id)price currency:(id)currency success:(id)success itemName:(id)name itemType:(id)type itemId:(id)anId customAttributes:(id)attributes;
+(void)logShareWithMethod:(id)method contentName:(id)name contentType:(id)type contentId:(id)anId customAttributes:(id)attributes;
+(void)logLoginWithMethod:(id)method success:(id)success customAttributes:(id)attributes;
+(void)logSignUpWithMethod:(id)method success:(id)success customAttributes:(id)attributes;
+(void)logInviteWithMethod:(id)method customAttributes:(id)attributes;
+(void)logPreviousSessionCrashedOnDate:(id)date;
+(void)startWithBetaToken:(id)betaToken;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)startWithBetaToken:(id)betaToken;
-(void)configureLogging;
@end

@interface ANSPredefinedEvent : ANSEvent {
	NSString* _predefinedEventName;
	ANSAttributeDictionary* _customAttributes;
	ANSAttributeDictionary* _predefinedAttributes;
}
@property(retain, nonatomic) ANSAttributeDictionary* predefinedAttributes;
@property(retain, nonatomic) ANSAttributeDictionary* customAttributes;
@property(retain, nonatomic) NSString* predefinedEventName;
+(id)searchEventWithQuery:(id)query customAttributes:(id)attributes;
+(id)contentViewEventWithName:(id)name contentType:(id)type contentId:(id)anId customAttributes:(id)attributes;
+(id)ratingEventWithRating:(id)rating contentName:(id)name contentType:(id)type contentId:(id)anId customAttributes:(id)attributes;
+(id)startCheckoutEventWithPrice:(id)price currency:(id)currency itemCount:(id)count customAttributes:(id)attributes;
+(id)addToCartEventWithPrice:(id)price currency:(id)currency itemName:(id)name itemType:(id)type itemId:(id)anId customAttributes:(id)attributes;
+(id)levelEndEventWithLevelName:(id)levelName score:(id)score success:(id)success customAttributes:(id)attributes;
+(id)levelStartEventWithLevelName:(id)levelName customAttributes:(id)attributes;
+(id)purchaseEventWithPrice:(id)price currency:(id)currency success:(id)success itemName:(id)name itemType:(id)type itemId:(id)anId customAttributes:(id)attributes;
+(id)inviteEventWithMethod:(id)method customAttributes:(id)attributes;
+(id)shareEventWithMethod:(id)method contentName:(id)name contentType:(id)type contentId:(id)anId customAttributes:(id)attributes;
+(id)loginEventWithMethod:(id)method success:(id)success customAttributes:(id)attributes;
+(id)signUpEventWithMethod:(id)method success:(id)success customAttributes:(id)attributes;
-(void).cxx_destruct;
-(id)description;
-(id)dictionaryRepresentation;
-(id)name;
@end

@interface ANSCrashMetadata : XXUnknownSuperclass <ANSMetadataSerializable> {
	NSDictionary* _rawMetadataDictionary;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSDictionary* rawMetadataDictionary;
+(BOOL)writeSerializedDictionary:(id)dictionary toURL:(id)url;
+(id)readSerializedDictionaryFromURL:(id)url;
-(void).cxx_destruct;
-(id)dictionaryRepresentationWithStartTime:(unsigned long long)startTime;
-(id)eventName;
-(id)initWithDictionary:(id)dictionary;
@end

@interface ANSPackageLogOperation : XXUnknownSuperclass {
	NSURL* _compressedLogURL;
	NSString* _multipartMimeBoundary;
	NSURL* _packagedLogURL;
}
@property(retain, nonatomic) NSString* multipartMimeBoundary;
@property(retain, nonatomic) NSURL* compressedLogURL;
@property(retain, nonatomic) NSURL* packagedLogURL;
-(void).cxx_destruct;
-(id)multipartURLForCompressedURL:(id)compressedURL withBoundary:(id)boundary;
-(void)main;
-(id)initWithCompressedLogURL:(id)compressedLogURL packagedLogURL:(id)url multipartMimeBoundary:(id)boundary;
@end

@interface ANSLifecycleEvent : ANSEvent {
	NSString* _name;
}
+(id)nameFromNotification:(id)notification;
+(id)notificationNameMap;
+(id)appLaunchedEvent;
+(id)installEvent;
+(id)eventWithNotification:(id)notification;
-(void).cxx_destruct;
-(BOOL)triggersFlush;
-(id)dictionaryRepresentation;
-(id)name;
-(id)initWithName:(id)name;
-(id)initWithNotification:(id)notification;
@end

@interface ANSRotateCrashMetadataOperation : XXUnknownSuperclass {
	NSURL* _crashMetadataURL;
	ANSMetadata* _currentMetadata;
	ANSCrashMetadata* _crashMetadata;
	NSDictionary* _currentMetadataDictionary;
}
@property(retain, nonatomic) NSDictionary* currentMetadataDictionary;
@property(retain, nonatomic) ANSCrashMetadata* crashMetadata;
@property(retain, nonatomic) ANSMetadata* currentMetadata;
@property(retain, nonatomic) NSURL* crashMetadataURL;
-(void).cxx_destruct;
-(void)main;
-(id)initWithCrashMetadataURL:(id)crashMetadataURL currentMetadata:(id)metadata;
@end

@interface ANSCleanupFilesOperation : XXUnknownSuperclass {
	id _successBlock;
	NSURL* _directoryUrl;
	int _maximumPendingMultipartFiles;
}
@property(copy, nonatomic) id successBlock;
@property(readonly, assign, nonatomic) int maximumPendingMultipartFiles;
@property(readonly, assign, nonatomic) NSURL* directoryUrl;
-(void).cxx_destruct;
-(id)URLsByRemovingOldFiles:(id)files withMaximumFileCount:(int)maximumFileCount;
-(void)main;
-(id)initWithDirectoryURL:(id)directoryURL maximumPendingMulitpartFiles:(int)files;
@end

@interface ANSAttributeDictionary : XXUnknownSuperclass {
	NSMutableDictionary* _rawDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* rawDictionary;
-(void).cxx_destruct;
-(id)serializeNSNumberAsInteger:(id)integer;
-(id)serializePriceToMicros:(id)micros;
-(id)serializeSuccess:(id)success;
-(id)truncateAttribute:(id)attribute;
-(BOOL)validAttributeValue:(id)value;
-(void)addPriceAttribute:(id)attribute forKey:(id)key;
-(void)addBooleanAttribute:(id)attribute forKey:(id)key;
-(void)addAttribute:(id)attribute forKey:(id)key;
-(id)dictionaryRepresentation;
-(id)description;
-(id)initWithDictionary:(id)dictionary;
-(id)init;
@end

@interface ANSSettings : XXUnknownSuperclass {
	NSDictionary* _settingsDictionary;
}
@property(readonly, assign, nonatomic) double lowPowerUploadTimeout;
@property(readonly, assign, nonatomic) double defaultUploadTimeout;
@property(readonly, assign, nonatomic) int samplingRate;
@property(readonly, assign, nonatomic) double flushInterval;
@property(readonly, assign, nonatomic) int maxPendingSendFiles;
@property(readonly, assign, nonatomic) int maximumPayloadSize;
@property(readonly, assign, nonatomic) BOOL shouldCollectPredefinedEvents;
@property(readonly, assign, nonatomic) BOOL shouldCollectCustomEvents;
@property(readonly, assign, nonatomic) BOOL shouldCollectAnalytics;
@property(readonly, assign, nonatomic) NSURL* answersURL;
@property(readonly, assign, nonatomic) BOOL valid;
@property(readonly, assign, nonatomic) NSDictionary* settingsDictionary;
-(void).cxx_destruct;
-(id)initWithDictionary:(id)dictionary;
@end

@interface ANSMetadata : XXUnknownSuperclass <ANSMetadataSerializable> {
	BOOL _isJailbroken;
	NSString* _APIKey;
	NSString* _betaToken;
	NSString* _buildVersion;
	NSString* _bundleIdentifier;
	NSString* _displayVersion;
	NSString* _executionIdentifier;
	NSString* _hostModel;
	NSString* _installationId;
	NSString* _instanceIdentifier;
	NSString* _locale;
	unsigned _numberOfCores;
	NSString* _OSBuildVersion;
	NSString* _OSDisplayVersion;
	NSString* _platform;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned platformCode;
@property(readonly, assign, nonatomic) NSString* platform;
@property(readonly, assign, nonatomic) NSString* OSDisplayVersion;
@property(readonly, assign, nonatomic) NSString* OSBuildVersion;
@property(readonly, assign, nonatomic) unsigned numberOfCores;
@property(readonly, assign, nonatomic) NSString* locale;
@property(readonly, assign, nonatomic) BOOL isJailbroken;
@property(readonly, assign, nonatomic) NSString* instanceIdentifier;
@property(readonly, assign, nonatomic) NSString* installationId;
@property(readonly, assign, nonatomic) NSString* hostModel;
@property(readonly, assign, nonatomic) NSString* executionIdentifier;
@property(readonly, assign, nonatomic) NSString* displayVersion;
@property(readonly, assign, nonatomic) NSString* bundleIdentifier;
@property(readonly, assign, nonatomic) NSString* buildVersion;
@property(readonly, assign, nonatomic) NSString* betaToken;
@property(readonly, assign, nonatomic) NSString* APIKey;
+(id)identifierForAdvertisingWithManager:(id)manager;
+(id)identifierForAdvertising;
+(BOOL)trackingForAdvertisingEnabled;
+(BOOL)advertisingSupportFrameworkLinked;
+(id)ASManager;
-(void).cxx_destruct;
-(id)dictionaryRepresentationWithStartTime:(unsigned long long)startTime;
-(void)setValueInDictionary:(id)dictionary withKey:(id)key toObject:(id)object;
-(id)eventName;
-(BOOL)computeIsJailbroken;
-(id)unwrapBetaToken:(id)token;
-(id)initWithFabric:(id)fabric betaToken:(id)token;
@end

@interface ANSEvent : XXUnknownSuperclass {
	NSDate* _timestamp;
	NSString* _identifier;
}
@property(readonly, assign, nonatomic) BOOL triggersFlush;
@property(readonly, assign, nonatomic) NSDictionary* dictionaryRepresentation;
@property(readonly, assign, nonatomic) NSString* identifier;
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(readonly, assign, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)init;
@end

@interface ANSFileUtils : XXUnknownSuperclass {
}
+(id)fileCreatedDateAtURL:(id)url withDefault:(id)aDefault;
+(id)fileSizeAtURL:(id)url;
+(id)filesWithExtension:(id)extension inDirectory:(id)directory;
+(id)allFilesInDirectory:(id)directory;
@end

@interface ANSBackoffTimer : XXUnknownSuperclass {
	unsigned _retryCount;
	double _initialValue;
	double _jitterCoefficient;
}
@property(assign, nonatomic) unsigned retryCount;
@property(readonly, assign, nonatomic) double jitterCoefficient;
@property(assign, nonatomic) double initialValue;
+(BOOL)jitterCoefficientIsValid:(double)valid;
-(double)computeDelayForInitialValue:(double)initialValue retryCount:(unsigned)count;
-(double)generateRandomJitter;
-(double)randomDoubleWithMin:(double)min max:(double)max;
-(void)executeBlockAfterNextInterval:(id)interval;
-(id)init;
-(id)initWithInitialValue:(double)initialValue jitterCoefficient:(double)coefficient;
-(id)initWithInitialValue:(double)initialValue;
@end

@interface ANSNetworkRetryHandler : XXUnknownSuperclass {
	FABCertificatePinner* _certPinner;
	NSMutableDictionary* _retryTimerMap;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* retryTimerMap;
@property(readonly, assign, nonatomic) FABCertificatePinner* certPinner;
-(void).cxx_destruct;
-(id)timerForIdentifier:(id)identifier initialRetryValue:(double)value;
-(void)handleCompletedRequest:(id)request withResponse:(id)response forIdentifier:(id)identifier maxRetries:(unsigned)retries error:(id)error completionHandler:(id)handler;
-(void)handleCompletedRequest:(id)request withResponse:(id)response forIdentifier:(id)identifier error:(id)error completionHandler:(id)handler;
-(id)errorWithCode:(int)code forIdentifier:(id)identifier request:(id)request handlerError:(id)error;
-(double)retryValueForResponse:(id)response;
-(void)handleChallenge:(id)challenge fromURLSession:(id)urlsession completionHandler:(id)handler;
-(id)sharedFabricSDK;
-(id)init;
@end

@interface ANSWriteEventOperation : XXUnknownSuperclass {
	BOOL _success;
	ANSEvent* _event;
	id<ANSMetadataSerializable> _metadata;
	NSURL* _logFileUrl;
	NSString* _formattedEvent;
	NSString* _formattedMetadata;
}
@property(readonly, assign, nonatomic) id<ANSMetadataSerializable> metadata;
@property(retain, nonatomic) NSString* formattedMetadata;
@property(retain, nonatomic) NSString* formattedEvent;
@property(assign, nonatomic) BOOL success;
@property(retain, nonatomic) NSURL* logFileUrl;
@property(retain, nonatomic) ANSEvent* event;
-(void).cxx_destruct;
-(id)logLineWithTimestamp:(id)timestamp eventName:(id)name payloadDictionary:(id)dictionary;
-(id)generateFormattedLogLineWithMetdata:(id)metdata timestamp:(id)timestamp;
-(id)generateFormattedLogLineWithEvent:(id)event;
-(BOOL)appendLogLine:(id)line toFileDescriptor:(int)fileDescriptor;
-(BOOL)writeDataToDescriptor:(int)descriptor withPreexistingFile:(BOOL)preexistingFile;
-(void)main;
-(id)initWithEvent:(id)event metadata:(id)metadata logFileUrl:(id)url;
@end

@interface ANSTimer : XXUnknownSuperclass {
	NSString* _timerIdentifier;
	id _timerBlock;
	NSOperationQueue* _queue;
	NSObject<OS_dispatch_source>* _timerSource;
	double _timeInterval;
}
@property(readonly, assign, nonatomic) NSString* timerIdentifier;
@property(retain, nonatomic) NSObject<OS_dispatch_source>* timerSource;
@property(readonly, assign, nonatomic) NSOperationQueue* queue;
@property(copy, nonatomic) id timerBlock;
@property(readonly, assign, nonatomic) double tolerance;
@property(assign, nonatomic) double timeInterval;
-(void).cxx_destruct;
-(void)scheduleDispatchTimer;
-(void)executeBlock;
-(void)scheduleTimer;
-(void)dealloc;
-(id)initWithTimeInterval:(double)timeInterval onQueue:(id)queue timerIdentifier:(id)identifier block:(id)block;
@end

@interface ANSActivityOperation : XXUnknownSuperclass {
	ANSActivity* _activity;
}
@property(readonly, assign, nonatomic) ANSActivity* activity;
+(id)operationByStartingActivityName:(id)name options:(unsigned long long)options;
-(void).cxx_destruct;
-(void)main;
-(void)startActivityWithName:(id)name options:(unsigned long long)options;
@end

@interface ANSCompressLogOperation : XXUnknownSuperclass {
	NSURL* _uncompressedLogURL;
	NSURL* _compressedLogURL;
}
@property(retain, nonatomic) NSURL* uncompressedLogURL;
@property(retain, nonatomic) NSURL* compressedLogURL;
-(void).cxx_destruct;
-(id)compressedURLForUncompressedURL:(id)uncompressedURL;
-(void)main;
-(id)initWithUncompressedLogURL:(id)uncompressedLogURL compressedLogURL:(id)url;
@end

@interface ANSUploader : XXUnknownSuperclass <NSURLSessionDelegate> {
	NSURLSession* _session;
	id<ANSUploaderDelegate> _delegate;
	NSOperationQueue* _operationQueue;
	double _defaultUploadTimeout;
	double _lowPowerUploadTimeout;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) double lowPowerUploadTimeout;
@property(assign, nonatomic) double defaultUploadTimeout;
@property(readonly, assign, nonatomic) BOOL supportsBackgroundRequests;
@property(assign, nonatomic) __weak id<ANSUploaderDelegate> delegate;
@property(readonly, assign, nonatomic) BOOL lowPowerMode;
@property(readonly, assign, nonatomic) NSOperationQueue* operationQueue;
-(void).cxx_destruct;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
-(void)handleTaskDescription:(id)description completedWithError:(id)error;
-(void)handleTask:(id)task completedWithError:(id)error;
-(void)restartTask:(id)task;
-(void)checkForExistingTaskMatchingDescription:(id)existingTaskMatchingDescription completionBlock:(id)block;
-(void)checkSession:(id)session forTasksMatchingDescription:(id)tasksMatchingDescription completionBlock:(id)block;
-(BOOL)taskArray:(id)array hasTaskMatchingDescription:(id)description;
-(void)startNewUploadRequest:(id)request filePath:(id)path uniqueName:(id)name;
-(id)errorUserInfoWithFilePath:(id)filePath uniqueName:(id)name;
-(id)errorWithCode:(int)code userInfo:(id)info;
-(void)startUploadRequest:(id)request filePath:(id)path uniqueName:(id)name;
-(id)session;
-(id)createBackgroundSessionConfiguration;
-(Class)urlSessionConfigurationClass;
-(Class)urlSessionClass;
-(void)attemptToReconnectBackgroundSessionWithCompletionBlock:(id)completionBlock;
-(BOOL)shouldUseBackgroundRequests;
-(BOOL)supportsPowerStateNotifications;
-(void)powerStageChanged:(id)changed;
-(id)initWithQueue:(id)queue delegate:(id)delegate;
@end

@interface ANSLogger : XXUnknownSuperclass {
	BOOL _debugMode;
}
@property(assign, nonatomic) BOOL debugMode;
+(id)sharedLogger;
-(void)internalLog:(id)log args:(void*)args;
-(void)logWithLabel:(id)label format:(id)format;
-(void)log:(id)log;
@end

@interface ANSApplication : XXUnknownSuperclass {
	NSDictionary* _infoPlistDict;
}
@property(readonly, assign, nonatomic) UIApplication* appSharedInstance;
@property(readonly, assign, nonatomic) BOOL isExtension;
@property(readonly, assign, nonatomic) NSString* extensionPointIdentifier;
@property(readonly, assign, nonatomic) NSDictionary* extensionDefinitionDictionary;
@property(readonly, assign, nonatomic) NSString* shortVersionString;
@property(readonly, assign, nonatomic) NSString* bundleVersion;
@property(readonly, assign, nonatomic) NSString* bundleIdentifier;
@property(readonly, assign, nonatomic) NSDictionary* infoPlistDict;
+(id)hostApplication;
-(void).cxx_destruct;
-(id)initWithInfoPlistDictionary:(id)infoPlistDictionary;
@end

@interface ANSCrashEvent : ANSEvent {
	NSDate* _crashTimestamp;
	unsigned _crashState;
}
@property(assign, nonatomic) unsigned crashState;
@property(retain, nonatomic) NSDate* crashTimestamp;
-(void).cxx_destruct;
-(id)payloadStringForCrashState:(unsigned)crashState;
-(id)dictionaryRepresentation;
-(id)timestamp;
-(id)name;
-(id)initWithTimestamp:(id)timestamp crashState:(unsigned)state;
@end

@interface ANSCustomEvent : ANSEvent {
	NSString* _customEventName;
	ANSAttributeDictionary* _customAttributes;
}
@property(readonly, assign, nonatomic) NSString* customEventName;
@property(retain, nonatomic) ANSAttributeDictionary* customAttributes;
-(void).cxx_destruct;
-(id)description;
-(id)dictionaryRepresentation;
-(id)name;
-(id)initWithCustomEventName:(id)customEventName customAttributes:(id)attributes;
@end

@interface ANSActivity : XXUnknownSuperclass {
	id<NSObject> _processInfoToken;
	NSString* _reason;
	unsigned _backgroundTaskIdentifier;
	unsigned long long _options;
}
@property(readonly, assign, nonatomic) NSString* reason;
@property(readonly, assign, nonatomic) unsigned long long options;
@property(assign, nonatomic) unsigned backgroundTaskIdentifier;
@property(retain, nonatomic) id<NSObject> processInfoToken;
+(BOOL)supportsBackgroundTasks;
+(id)sharedAppInstance;
+(unsigned)beginBackgroundTaskWithName:(id)name expirationHandler:(id)handler;
+(id)beginActivityIfAvailable:(id)available options:(unsigned long long)options;
+(void)performActivity:(id)activity options:(unsigned long long)options withBlock:(id)block;
+(id)beginActivity:(id)activity withOptions:(unsigned long long)options;
+(id)beginActivity:(id)activity withOptions:(unsigned long long)options expirationHandler:(id)handler;
-(void).cxx_destruct;
-(void)endAndInvalidateInternalActivity;
-(void)endAndInvalidateBackgroundTask;
-(void)end;
-(void)dealloc;
-(id)initWithProcessToken:(id)processToken options:(unsigned long long)options reason:(id)reason backgroundTaskIdentifier:(unsigned)identifier;
@end

@interface ANSAnswersController : XXUnknownSuperclass <ANSUploaderDelegate> {
	NSOperationQueue* _eventQueue;
	NSString* _rootEventDirectory;
	ANSMetadata* _metadata;
	ANSCrashMetadata* _previousExecutionMetadata;
	ANSUploader* _uploader;
	ANSNetworkRetryHandler* _networkRetryHandler;
	NSURL* _currentLogURL;
	ANSEventFilter* _eventFilter;
	ANSSettings* _settings;
	ANSTimer* _flushTimer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) ANSTimer* flushTimer;
@property(readonly, assign, nonatomic) ANSSettings* settings;
@property(readonly, assign, nonatomic) ANSEventFilter* eventFilter;
@property(readonly, assign, nonatomic) NSURL* currentLogURL;
@property(readonly, assign, nonatomic) ANSNetworkRetryHandler* networkRetryHandler;
@property(readonly, assign, nonatomic) ANSUploader* uploader;
@property(readonly, assign, nonatomic) ANSCrashMetadata* previousExecutionMetadata;
@property(readonly, assign, nonatomic) ANSMetadata* metadata;
@property(readonly, assign, nonatomic) NSString* rootEventDirectory;
@property(readonly, assign, nonatomic) NSOperationQueue* eventQueue;
+(id)rootDirectory;
-(void).cxx_destruct;
-(void)uploader:(id)uploader completedRequest:(id)request withResponse:(id)response uniqueName:(id)name error:(id)error completionHandler:(id)handler;
-(void)uploader:(id)uploader session:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)uploader:(id)uploader didFinishUploadWithUniqueName:(id)uniqueName error:(id)error;
-(id)uploader:(id)uploader filePathForUniqueName:(id)uniqueName;
-(id)multipartMimeURLWithBoundary:(id)boundary;
-(id)boundaryFromURL:(id)url;
-(void)uploadMultipartFiles:(id)files;
-(void)uploadAllMultipartFiles;
-(void)cleanupAndProcessExistingFiles;
-(id)uploadOperationForFileAtURL:(id)url withBoundary:(id)boundary;
-(id)operationsForCompressedLog:(id)compressedLog;
-(id)operationsForUncompressedLog:(id)uncompressedLog;
-(void)rotateAndSubmitCurrentLog;
-(BOOL)shouldSubmitLogAtURL:(id)url;
-(void)enqueueEvent:(id)event;
-(void)logCrashEvent:(id)event;
-(BOOL)shouldLogEvent;
-(void)logEvent:(id)event;
-(id)replacePreviousExecutionMetadataWithCurrentMetadata:(id)currentMetadata inRootDirectory:(id)rootDirectory;
-(void)removeAllLogs;
-(void)flushTimerFired;
-(void)setupFlushTimer;
-(void)initializeSettingsIfNeededWithFabricSettings:(id)fabricSettings;
-(void)fabricSettingsDidBecomeAvailable:(id)fabricSettings;
-(id)generateNewLogPath;
-(void)applicationLifecycleEvent:(id)event;
-(void)registerForApplicationLifecycleEvents;
-(id)uploaderWithQueue:(id)queue delegate:(id)delegate;
-(id)sharedFabricSDK;
-(id)crashMetadataPathForRootDirectory:(id)rootDirectory;
-(id)eventDirectoryForRootDirectory:(id)rootDirectory;
-(id)initWithBetaToken:(id)betaToken rootDirectory:(id)directory;
-(id)initWithBetaToken:(id)betaToken;
@end

@interface ANSUploadOperation : XXUnknownSuperclass {
	ANSUploader* _uploader;
	NSURL* _answersURL;
	NSString* _apiKey;
	NSURL* _multipartURL;
	NSString* _multipartMimeBoundary;
}
@property(readonly, assign, nonatomic) NSString* multipartMimeBoundary;
@property(readonly, assign, nonatomic) NSURL* multipartURL;
@property(readonly, assign, nonatomic) NSString* apiKey;
@property(readonly, assign, nonatomic) NSURL* answersURL;
@property(readonly, assign, nonatomic) ANSUploader* uploader;
-(void).cxx_destruct;
-(id)currentTimestampString;
-(void)main;
-(id)initWithUploader:(id)uploader answersURL:(id)url apiKey:(id)key multipartURL:(id)url4 multipartMimeBoundary:(id)boundary;
@end

@interface ANSEventFilter : XXUnknownSuperclass {
}
+(int)javaHashCodeForString:(id)string;
-(BOOL)shouldDiscardEventWithInstallationID:(id)installationID forSamplingFactor:(int)samplingFactor;
-(BOOL)samplingEnabledForEventType:(id)eventType;
-(BOOL)shouldDiscardEvent:(id)event betaToken:(id)token installationID:(id)anId withFactor:(int)factor;
@end

@interface FABSettingsOnboardingManager : XXUnknownSuperclass <FABDownloadAndSaveSettingsOperationDelegate, FABOnboardingOperationDelegate> {
	BOOL _hasAttemptedAppConfigure;
	FABApplicationIdentiferModel* _appIdentifierModel;
	FABSettings* _settingsModel;
	FABOnboardingOperation* _onboardingOperation;
	NSFileManager* _fileManager;
	NSDictionary* _configuration;
	NSDictionary* _defaultConfiguration;
	NSString* _APIKey;
	NSDictionary* _kitVersionsByKitBundleIdentifier;
	FABNetworkClient* _networkClient;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) FABNetworkClient* networkClient;
@property(copy, nonatomic) NSDictionary* kitVersionsByKitBundleIdentifier;
@property(copy, nonatomic) NSString* APIKey;
@property(retain, nonatomic) NSDictionary* defaultConfiguration;
@property(retain, nonatomic) NSDictionary* configuration;
@property(assign, nonatomic) BOOL hasAttemptedAppConfigure;
@property(retain, nonatomic) NSFileManager* fileManager;
@property(retain, nonatomic) FABApplicationIdentiferModel* appIdentifierModel;
@property(retain, nonatomic) FABOnboardingOperation* onboardingOperation;
@property(retain, nonatomic) FABSettings* settingsModel;
+(id)settingsDirectoryPath;
-(void).cxx_destruct;
-(void)postSettingsDownloadCompletedNotification;
-(id)settingsPath;
-(id)settingsURL;
-(void)operation:(id)operation didDownloadAndSaveSettingsWithError:(id)error;
-(void)onboardingOperation:(id)operation didCompleteAppUpdateWithError:(id)error;
-(void)onboardingOperation:(id)operation didCompleteAppCreationWithError:(id)error;
-(id)appIconHash;
-(id)valueForConfigurationKey:(id)configurationKey;
-(void)finishNetworkingSession;
-(id)advertisingToken;
-(void)beginOnboarding:(BOOL)onboarding endpointString:(id)string;
-(void)beginSettingsDownload;
-(void)beginSettingsAndOnboardingOperationsWithAPIKey:(id)apikey kitVersionsByKitBundleIdentifier:(id)identifier;
-(id)initWithApplicationIdentifierModel:(id)applicationIdentifierModel;
@end

@interface FABIcon : XXUnknownSuperclass {
	BOOL _prerendered;
	NSData* _data;
	NSString* _dataHash;
	CGSize _size;
}
@property(readonly, assign, nonatomic) BOOL isWithinMaxSurfaceArea;
@property(readonly, assign, nonatomic) float surfaceArea;
@property(assign, nonatomic) BOOL prerendered;
@property(assign, nonatomic) CGSize size;
@property(copy, nonatomic) NSString* dataHash;
@property(copy, nonatomic) NSData* data;
+(BOOL)isWithinMaxSurfaceAreaWithImage:(id)image;
-(void).cxx_destruct;
-(BOOL)largerThanSize:(CGSize)size;
-(id)initWithPNGImageAtPath:(id)path size:(CGSize)size prerendered:(BOOL)prerendered;
-(id)initWithData:(id)data size:(CGSize)size;
-(id)initWithData:(id)data size:(CGSize)size prerendered:(BOOL)prerendered;
-(id)initWithData:(id)data dataHash:(id)hash size:(CGSize)size prerendered:(BOOL)prerendered;
@end

@interface Fabric : XXUnknownSuperclass {
	BOOL _debug;
	BOOL _isFirstInstall;
	NSArray* _kitClasses;
	NSDictionary* _fabricConfig;
	FABSettingsOnboardingManager* _settingsAndOnboardingManager;
	FABApplicationIdentiferModel* _applicationIdentifierModel;
	NSString* _APIKey;
	NSString* _installID;
	NSString* _executionIdentifier;
	NSString* _advertisingToken;
}
@property(assign, nonatomic) BOOL debug;
@property(readonly, assign, nonatomic) NSString* instanceIdentifier;
@property(readonly, assign, nonatomic) NSDictionary* settings;
@property(copy, nonatomic) NSString* advertisingToken;
@property(readonly, copy, nonatomic) NSString* executionIdentifier;
@property(readonly, assign, nonatomic) BOOL isFirstInstall;
@property(readonly, copy, nonatomic) NSString* installID;
@property(copy, nonatomic) NSString* APIKey;
@property(readonly, assign, nonatomic) FABApplicationIdentiferModel* applicationIdentifierModel;
@property(retain, nonatomic) FABSettingsOnboardingManager* settingsAndOnboardingManager;
@property(copy, nonatomic) NSDictionary* fabricConfig;
@property(copy, nonatomic) NSArray* kitClasses;
+(id)configurationDictionaryForKitClass:(Class)kitClass;
+(void)initializeKit:(Class)kit;
+(id)kitClassesByEnsuringAppseeIsFirst:(id)first;
+(id)kitClassesByAddingAnswersIfFound:(id)found;
+(id)kitClassesByAddingDigitsIfFound:(id)found;
+(void)validateFABKitConformance:(id)conformance;
+(id)convertToKitClassesIfNeeded:(id)kitClassesIfNeeded;
+(id)with:(id)with;
+(id)sharedSDK;
-(void).cxx_destruct;
-(id)configurationDictionaryForKit:(id)kit;
-(id)validFabricConfigFromInfoPlist:(id)infoPlist;
-(id)generateInstallationUUID;
-(id)readInstallationUUID;
-(id)kitVersionsByKitBundleIdentifier;
-(void)onboardAppAndDownloadSettings;
-(id)init;
@end

@interface FABNetworkOperation : FABAsyncOperation {
	NSString* _APIKey;
}
@property(readonly, assign, nonatomic) NSString* APIKey;
-(void).cxx_destruct;
-(id)localeIdentifier;
-(id)userAgentString;
-(id)mutableRequestWithDefaultHTTPHeadersForURL:(id)url timeout:(double)timeout;
-(id)mutableRequestWithDefaultHTTPHeaderFieldsAndTimeoutForURL:(id)url;
-(id)initWithAPIKey:(id)apikey;
@end

@interface FABURLBuilder : XXUnknownSuperclass {
	NSMutableString* _URLString;
	unsigned _queryParams;
}
@property(assign, nonatomic) unsigned queryParams;
@property(retain, nonatomic) NSMutableString* URLString;
+(id)URLWithBase:(id)base;
-(void).cxx_destruct;
-(id)URL;
-(void)appendValue:(id)value forQueryParam:(id)queryParam;
-(void)escapeAndAppendComponent:(id)component;
-(void)appendComponent:(id)component;
-(id)escapeString:(id)string;
-(id)init;
@end

@interface FABCertificatePinner : XXUnknownSuperclass {
	NSArray* _certificates;
}
@property(readonly, assign, nonatomic) NSArray* certificates;
+(SecCertificate*)createCertificationWithData:(const void*)data length:(unsigned)length;
-(void).cxx_destruct;
-(BOOL)handleChallenge:(id)challenge fromURLSession:(id)urlsession completionHandler:(id)handler;
-(short)evaluateTrust:(SecTrust*)trust result:(unsigned*)result;
-(id)initWithCertificates:(id)certificates;
@end

@interface FABAppIconUtility : XXUnknownSuperclass {
	FABIcon* _applicationIcon;
}
@property(readonly, assign, nonatomic) NSDictionary* appInfoDictionary;
@property(retain, nonatomic) FABIcon* applicationIcon;
+(id)iconNameSetWithAlternateNamesAddedToIconNameSet:(id)iconNameSet;
+(void)addIconNameWithModifier:(id)modifier forIconWithName:(id)name toSetOfIconNames:(id)iconNames;
+(BOOL)isIconImageFileNameExtensionPresentInName:(id)name;
+(CGSize)sizeForImage:(id)image;
-(void).cxx_destruct;
-(id)fetchApplicationIcon;
-(id)iconByFallingBackOnDefaultIconNamingConvention;
-(id)iconFromCFBundleIconFile;
-(id)iconFromCFBundleIconFiles;
-(id)iconFromIOS7StyleCFBundleIconsInFieldWithKey:(id)key;
-(id)largestIconInIconNames:(id)iconNames prerendered:(BOOL)prerendered;
-(id)iconRootPath;
@end

@interface FABMultipartMimeStreamEncoder : XXUnknownSuperclass <NSStreamDelegate> {
	unsigned _length;
	NSString* _boundary;
	NSOutputStream* _outputStream;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) NSString* contentLengthHTTPHeaderValue;
@property(readonly, copy, nonatomic) NSString* contentTypeHTTPHeaderValue;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(readonly, copy, nonatomic) NSData* footerData;
@property(readonly, copy, nonatomic) NSData* headerData;
@property(copy, nonatomic) NSString* boundary;
@property(assign, nonatomic) unsigned length;
+(id)generateBoundary;
+(id)encoderWithStream:(id)stream andBoundary:(id)boundary;
+(id)contentTypeHTTPHeaderValueWithBoundary:(id)boundary;
+(void)populateRequest:(id)request withDataFromEncoder:(id)encoder;
-(void).cxx_destruct;
-(void)writeData:(id)data;
-(BOOL)writeBytes:(const void*)bytes ofLength:(unsigned)length;
-(void)addFile:(id)file fileName:(id)name mimeType:(id)type fieldName:(id)name4;
-(void)addValue:(id)value fieldName:(id)name;
-(void)addFileData:(id)data fileName:(id)name mimeType:(id)type fieldName:(id)name4;
-(void)endEncoding;
-(void)beginEncoding;
-(void)encode:(id)encode;
-(id)initWithStream:(id)stream andBoundary:(id)boundary;
@end

@interface FABSettings : XXUnknownSuperclass {
	BOOL _reportingEnabled;
	BOOL _errorReportingEnabled;
	NSNumber* _logBufferSize;
	NSNumber* _maxErrors;
	NSNumber* _maxCustomKeys;
	NSDictionary* _settingsDictionary;
	NSString* _settingsPath;
	NSFileManager* _fileManager;
}
@property(readonly, assign, nonatomic) NSNumber* maxCustomKeys;
@property(readonly, assign, nonatomic) NSNumber* maxErrors;
@property(readonly, assign, nonatomic) NSNumber* logBufferSize;
@property(readonly, assign, nonatomic) BOOL errorReportingEnabled;
@property(readonly, assign, nonatomic) BOOL reportingEnabled;
@property(readonly, assign, nonatomic) BOOL appUpdateRequired;
@property(readonly, assign, nonatomic) BOOL appNeedsOnboarding;
@property(retain, nonatomic) NSFileManager* fileManager;
@property(retain, nonatomic) NSString* settingsPath;
@property(retain, nonatomic) NSDictionary* settingsDictionary;
-(void).cxx_destruct;
-(id)settingsURLForEndpoint:(id)endpoint appInstanceIdentifer:(id)identifer appIconHash:(id)hash;
-(void)clearSettingsDictionary;
-(id)appStatus;
-(id)appSettings;
-(id)appSource;
-(id)appDisplayVersion;
-(id)appBuildVersion;
-(id)appPlatform;
-(id)appBundleIdentifier;
-(id)initWithSettingsPath:(id)settingsPath fileManager:(id)manager;
@end

@interface FABApplicationIdentiferModel : XXUnknownSuperclass {
	NSDictionary* _architectureUUIDMap;
	NSString* _installID;
	FABIcon* _icon;
	NSString* _bundleIdentifier;
	NSString* _instanceIdentifier;
	PLCrashHostInfoVersion _builtSDK;
	PLCrashHostInfoVersion _minimumSDK;
}
@property(readonly, assign, nonatomic) NSString* bundleIdentifier;
@property(readonly, assign, nonatomic) FABIcon* icon;
@property(readonly, assign, nonatomic) NSString* installID;
@property(readonly, assign, nonatomic) NSString* minimumSDKString;
@property(readonly, assign, nonatomic) NSString* builtSDKString;
@property(readonly, assign, nonatomic) PLCrashHostInfoVersion minimumSDK;
@property(readonly, assign, nonatomic) PLCrashHostInfoVersion builtSDK;
@property(copy, nonatomic) NSString* instanceIdentifier;
@property(copy, nonatomic) NSDictionary* architectureUUIDMap;
-(void).cxx_destruct;
-(BOOL)computeInstanceIdentifier;
-(BOOL)computeExecutableInfo;
-(id)initWithInstallID:(id)installID;
@end

@interface FABDownloadAndSaveSettingsOperation : FABNetworkOperation {
	id<FABDownloadAndSaveSettingsOperationDelegate> _delegate;
	NSError* _error;
	NSURL* _settingsURL;
	NSFileManager* _fileManager;
	NSString* _settingsDirectoryPath;
	NSString* _settingsFilePath;
	NSString* _installIdentifier;
	NSString* _advertisingToken;
	FABNetworkClient* _networkClient;
}
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) id<FABDownloadAndSaveSettingsOperationDelegate> delegate;
@property(readonly, assign, nonatomic) __weak FABNetworkClient* networkClient;
@property(readonly, assign, nonatomic) NSString* advertisingToken;
@property(readonly, assign, nonatomic) NSString* installIdentifier;
@property(readonly, assign, nonatomic) NSString* settingsFilePath;
@property(readonly, assign, nonatomic) NSString* settingsDirectoryPath;
@property(readonly, assign, nonatomic) NSFileManager* fileManager;
@property(readonly, assign, nonatomic) NSURL* settingsURL;
-(void).cxx_destruct;
-(void)main;
-(id)mutableRequestWithDefaultHTTPHeaderFieldsAndTimeoutForURL:(id)url;
-(id)initWithAPIKey:(id)apikey delegate:(id)delegate settingsURL:(id)url settingsDirectoryPath:(id)path settingsFilePath:(id)path5 fileManager:(id)manager installIdentifier:(id)identifier advertisingToken:(id)token networkClient:(id)client;
-(id)initWithAPIKey:(id)apikey;
@end

@interface FABNetworkResponseHandler : XXUnknownSuperclass {
}
+(void)handleCompletedResponse:(id)response forOriginalRequest:(id)originalRequest error:(id)error block:(id)block;
+(void)clientResponseType:(id)type handler:(id)handler;
+(id)errorForResponse:(id)response ofType:(int)type status:(int)status;
+(id)errorForCode:(int)code userInfo:(id)info;
+(BOOL)contentTypeForResponse:(id)response matchesRequest:(id)request;
+(id)requestIdForResponse:(id)response;
+(double)retryValueForResponse:(id)response;
+(id)headerForResponse:(id)response withKey:(id)key;
@end

@interface FABOnboardingOperation : FABNetworkOperation {
	BOOL _shouldCreate;
	NSError* _error;
	FABApplicationIdentiferModel* _appIdentifierModel;
	NSString* _appEndpoint;
	id<FABOnboardingOperationDelegate> _delegate;
	FABNetworkClient* _networkClient;
	NSDictionary* _kitVersionsByKitBundleIdentifier;
}
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, copy, nonatomic) NSDictionary* kitVersionsByKitBundleIdentifier;
@property(readonly, assign, nonatomic) __weak FABNetworkClient* networkClient;
@property(readonly, assign, nonatomic) id<FABOnboardingOperationDelegate> delegate;
@property(readonly, assign, nonatomic) NSString* appEndpoint;
@property(readonly, assign, nonatomic) FABApplicationIdentiferModel* appIdentifierModel;
@property(assign, nonatomic) BOOL shouldCreate;
-(void).cxx_destruct;
-(id)onboardingRequestForAppCreate:(BOOL)appCreate;
-(id)appUpdateURL;
-(id)appCreateURL;
-(id)errorForCode:(unsigned)code userInfo:(id)info;
-(id)appInstallSource;
-(id)appDisplayVersion;
-(id)appBuildVersion;
-(id)appName;
-(id)appPlatform;
-(id)appBundleIdentifier;
-(void)beginAppConfigure;
-(void)main;
-(id)initWithDelegate:(id)delegate shouldCreate:(BOOL)create APIKey:(id)key kitVersionsByKitBundleIdentifier:(id)identifier appIdentifierModel:(id)model endpointString:(id)string networkClient:(id)client;
-(id)initWithAPIKey:(id)apikey;
@end

@interface FABNetworkClient : XXUnknownSuperclass <NSURLSessionDelegate, NSURLSessionTaskDelegate> {
	FABCertificatePinner* _certPinner;
	NSURLSession* _session;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSURLSession* session;
@property(readonly, assign, nonatomic) FABCertificatePinner* certPinner;
-(void).cxx_destruct;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
-(void)invalidateAndCancel;
-(void)startDownloadTaskWithRequest:(id)request completionHandler:(id)handler;
-(void)startDownloadTaskWithRequest:(id)request retryLimit:(unsigned)limit completionHandler:(id)handler;
-(void)startDownloadTaskWithRequest:(id)request retryLimit:(unsigned)limit tries:(unsigned)tries completionHandler:(id)handler;
-(void)startDataTaskWithRequest:(id)request completionHandler:(id)handler;
-(void)startDataTaskWithRequest:(id)request retryLimit:(unsigned)limit completionHandler:(id)handler;
-(void)startDataTaskWithRequest:(id)request retryLimit:(unsigned)limit tries:(unsigned)tries completionHandler:(id)handler;
-(void)runAfterRetryValueFromResponse:(id)response attempts:(unsigned)attempts block:(id)block;
-(void)runAfterRetryValueFromResponse:(id)response attempts:(unsigned)attempts onQueue:(id)queue block:(id)block;
-(double)computeDelayForResponse:(id)response withRetryCount:(unsigned)retryCount;
-(double)generateRandomJitter;
-(double)randomDoubleWithMin:(double)min max:(double)max;
-(void)dealloc;
-(id)initWithSessionConfiguration:(id)sessionConfiguration queue:(id)queue pinnedCertificates:(id)certificates;
-(id)initWithQueue:(id)queue pinnedCertificates:(id)certificates;
-(id)initWithQueue:(id)queue;
-(id)init;
@end

@interface CLSdSYM : XXUnknownSuperclass {
	CLSMachOBinary* _binary;
	NSBundle* _bundle;
}
@property(readonly, copy, nonatomic) NSString* shortBundleVersion;
@property(readonly, copy, nonatomic) NSString* bundleVersion;
@property(readonly, copy, nonatomic) NSString* executablePath;
@property(readonly, copy, nonatomic) NSURL* executableURL;
@property(readonly, copy, nonatomic) NSString* bundleIdentifier;
@property(readonly, assign, nonatomic) CLSMachOBinary* binary;
@property(readonly, assign, nonatomic) NSBundle* bundle;
+(id)dSYMWithURL:(id)url;
-(void).cxx_destruct;
-(void)enumerateUUIDs:(id)uuids;
-(id)initWithURL:(id)url;
@end

@interface CLSCodeMapping : XXUnknownSuperclass {
	int _source;
	NSURL* _URL;
	NSString* _sourceName;
}
@property(readonly, copy, nonatomic) NSString* sourceName;
@property(assign, nonatomic) int source;
@property(readonly, copy, nonatomic) NSURL* URL;
+(id)mappingWithURL:(id)url;
-(void).cxx_destruct;
-(id)initWithURL:(id)url;
@end

@interface CLSMachOBinary : XXUnknownSuperclass {
	NSURL* _url;
	CLSMachOFile _file;
	NSMutableArray* _slices;
	NSString* _instanceIdentifier;
}
@property(readonly, copy, nonatomic) NSString* instanceIdentifier;
@property(readonly, assign, nonatomic) NSArray* slices;
@property(readonly, copy, nonatomic) NSString* path;
@property(readonly, copy, nonatomic) NSURL* URL;
+(id)hashNSString:(id)string;
+(id)MachOBinaryWithPath:(id)path;
-(void).cxx_destruct;
-(id)sliceForArchitecture:(id)architecture;
-(void)enumerateUUIDs:(id)uuids;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface CLSMachOSlice : XXUnknownSuperclass {
	CLSMachOSlice _slice;
	NSString* _uuidString;
	NSArray* _linkedDylibs;
	PLCrashHostInfoVersion _minimumOSVersion;
	PLCrashHostInfoVersion _linkedSDKVersion;
}
@property(readonly, assign, nonatomic) PLCrashHostInfoVersion linkedSDKVersion;
@property(readonly, assign, nonatomic) PLCrashHostInfoVersion minimumOSVersion;
@property(readonly, assign, nonatomic) NSArray* linkedDylibs;
@property(readonly, copy, nonatomic) NSString* architectureName;
@property(readonly, copy, nonatomic) NSString* uuid;
+(id)runningSlice;
-(void).cxx_destruct;
-(id)initWithSlice:(CLSMachOSlice*)slice;
@end

@interface CLSURLSessionDownloadTask : CLSURLSessionDataTask <NSStreamDelegate> {
	id _downloadCompletionHandler;
	NSOutputStream* _outputStream;
	NSURL* _targetURL;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id downloadCompletionHandler;
-(void).cxx_destruct;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)completeForError;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)writeDataToStream:(id)stream;
-(void)complete;
-(void)cleanup;
-(id)temporaryFileURL;
-(void)dealloc;
-(id)init;
@end

@interface CLSURLSessionTask : XXUnknownSuperclass {
	id<CLSURLSessionTaskDelegate> _delegate;
	NSURLRequest* _originalRequest;
	NSURLRequest* _currentRequest;
	NSURLResponse* _response;
	NSError* _error;
	NSObject<OS_dispatch_queue>* _queue;
	BOOL _invokesDelegate;
}
@property(copy, nonatomic) NSError* error;
@property(assign, nonatomic) BOOL invokesDelegate;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(copy, nonatomic) NSURLResponse* response;
@property(copy, nonatomic) NSURLRequest* currentRequest;
@property(copy, nonatomic) NSURLRequest* originalRequest;
@property(assign, nonatomic) id<CLSURLSessionTaskDelegate> delegate;
+(id)task;
-(void).cxx_destruct;
-(void)cleanup;
-(void)resume;
-(void)cancel;
-(void)start;
-(id)init;
@end

@interface CLSURLSessionDataTask : CLSURLSessionTask <NSURLConnectionDelegate> {
	id _completionHandler;
	NSURLConnection* _connection;
	NSMutableData* _data;
	NSString* _taskDescription;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* taskDescription;
@property(copy, nonatomic) id completionHandler;
@property(retain, nonatomic) NSURLConnection* connection;
-(void).cxx_destruct;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)cancel;
-(void)complete;
-(void)resume;
@end

@interface CLSURLSession : XXUnknownSuperclass <CLSURLSessionDownloadDelegate> {
	id<NSURLSessionDelegate> _delegate;
	NSOperationQueue* _delegateQueue;
	NSURLSessionConfiguration* _configuration;
	NSMutableSet* _taskSet;
	NSObject<OS_dispatch_queue>* _queue;
	NSString* _sessionDescription;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* sessionDescription;
@property(copy, nonatomic) NSURLSessionConfiguration* configuration;
@property(retain, nonatomic) id<NSURLSessionDelegate> delegate;
@property(retain, nonatomic) NSOperationQueue* delegateQueue;
+(id)newDefaultDelegateQueue;
+(id)sessionWithConfiguration:(id)configuration delegate:(id)delegate delegateQueue:(id)queue;
+(id)sessionWithConfiguration:(id)configuration;
+(BOOL)NSURLSessionShouldBeUsed;
-(void).cxx_destruct;
-(void)downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)task:(id)task didReceiveData:(id)data;
-(void)task:(id)task didReceiveResponse:(id)response;
-(void)task:(id)task didCompleteWithError:(id)error;
-(id)task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request;
-(id)downloadTaskWithRequest:(id)request completionHandler:(id)handler;
-(id)uploadTaskWithRequest:(id)request fromFile:(id)file completionHandler:(id)handler;
-(id)dataTaskWithRequest:(id)request;
-(id)dataTaskWithRequest:(id)request completionHandler:(id)handler;
-(id)downloadTaskWithURL:(id)url;
-(id)downloadTaskWithRequest:(id)request;
-(id)uploadTaskWithRequest:(id)request fromFile:(id)file;
-(BOOL)shouldInvokeDelegateSelector:(SEL)selector forTask:(id)task;
-(void)configureTask:(id)task withRequest:(id)request block:(id)block;
-(void)removeTaskFromSet:(id)set;
-(void)getTasksWithCompletionHandler:(id)completionHandler;
-(void)finishTasksAndInvalidate;
-(void)invalidateAndCancel;
-(id)init;
@end

@interface CLSURLSessionConfiguration : XXUnknownSuperclass <NSCopying> {
	NSDictionary* _additionalHeaders;
	NSURLCache* _URLCache;
	unsigned _cookiePolicy;
}
@property(assign, nonatomic) BOOL sessionSendsLaunchEvents;
@property(assign, nonatomic) unsigned HTTPCookieAcceptPolicy;
@property(retain, nonatomic) NSURLCache* URLCache;
@property(copy, nonatomic) NSDictionary* HTTPAdditionalHeaders;
+(id)backgroundSessionConfigurationWithIdentifier:(id)identifier;
+(id)backgroundSessionConfiguration:(id)configuration;
+(id)ephemeralSessionConfiguration;
+(id)defaultSessionConfiguration;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface CLSURLSessionUploadTask : CLSURLSessionDataTask {
}
@end

@interface CLSUserDefaults : XXUnknownSuperclass {
	NSURL* _directoryURL;
	NSURL* _fileURL;
	NSMutableDictionary* _dataDictionary;
	NSObject<OS_dispatch_queue>* _serialDictionaryQueue;
	NSObject<OS_dispatch_queue>* _synchronizationQueue;
}
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* synchronizationQueue;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* serialDictionaryQueue;
@property(readonly, copy, nonatomic) NSMutableDictionary* dataDictionary;
@property(readonly, copy, nonatomic) NSURL* fileURL;
@property(readonly, copy, nonatomic) NSURL* directoryURL;
+(id)standardUserDefaults;
-(void).cxx_destruct;
-(id)objectForKeyByMigratingFromNSUserDefaults:(id)nsuserDefaults;
-(void)migrateFromNSUserDefaults:(id)nsuserDefaults;
-(id)loadDefaults;
-(void)synchronize;
-(id)dictionaryRepresentation;
-(void)removeAllObjects;
-(void)removeObjectForKey:(id)key;
-(void)setBool:(BOOL)aBool forKey:(id)key;
-(void)setString:(id)string forKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(BOOL)boolForKey:(id)key;
-(id)stringForKey:(id)key;
-(id)objectForKey:(id)key;
-(id)getEscapedAppBundleIdentifier;
-(id)generateDirectoryURLForBaseURL:(id)baseURL hostAppBundleIdentifier:(id)identifier;
-(id)generateDirectoryURL;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface FABAsyncOperation : XXUnknownSuperclass {
	BOOL _internalExecuting;
	BOOL _internalFinished;
	id _asyncCompletion;
	NSRecursiveLock* _lock;
}
@property(copy, nonatomic) id asyncCompletion;
@property(retain, nonatomic) NSRecursiveLock* lock;
-(void).cxx_destruct;
-(void)finishWithError:(id)error;
-(void)markDone;
-(void)markStarted;
-(void)unlockedMarkComplete;
-(void)unlockedMarkStarted;
-(void)unlockedMarkFinished;
-(BOOL)checkForCancellation;
-(void)lock:(id)lock;
-(void)changeValueForKey:(id)key inBlock:(id)block;
-(void)start;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isAsynchronous;
-(BOOL)isConcurrent;
-(id)init;
@end

@interface FABCompoundOperation : FABAsyncOperation {
	NSArray* _operations;
	NSOperationQueue* _compoundQueue;
	unsigned _completedOperations;
	NSMutableArray* _errors;
	NSObject<OS_dispatch_queue>* _countingQueue;
}
@property(copy, nonatomic) NSArray* operations;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* countingQueue;
@property(retain, nonatomic) NSMutableArray* errors;
@property(assign, nonatomic) unsigned completedOperations;
@property(retain, nonatomic) NSOperationQueue* compoundQueue;
-(void).cxx_destruct;
-(void)attemptCompoundCompletion;
-(void)updateCompletionCountsWithError:(id)error;
-(void)injectCompoundSyncCompletionInOperation:(id)operation;
-(void)injectCompoundAsyncCompletionInOperation:(id)operation;
-(void)cancel;
-(void)main;
-(id)init;
@end

@interface PodsDummy_Pods_VK_Music : XXUnknownSuperclass {
}
@end

@interface XXUnknownSuperclass (CommonCryptoErrorDomain)
+(id)errorWithCCCryptorStatus:(int)cccryptorStatus;
@end

@interface XXUnknownSuperclass (VK_NavigationHelper)
@property(readonly, assign, nonatomic) VK_NavigationHelper* navigationHelper;
@end

@interface XXUnknownSuperclass (BoundingRect)
@property(readonly, assign, nonatomic) unsigned optimalNumberOfLines;
-(unsigned)optimalNumberOfLinesForWidth:(float)width;
-(CGSize)optimalSizeForWidth:(float)width;
-(CGSize)optimalSize;
@end

@interface XXUnknownSuperclass (QueryExtension)
-(id)linq_select:(id)select withDefaultVlaue:(id)defaultVlaue andMaxCount:(unsigned)count;
-(id)linq_selectWithNilFilter:(id)nilFilter andMaxCount:(unsigned)count;
-(id)linq_selectWithNilFilter:(id)nilFilter;
-(id)linq_reverse;
-(id)linq_concat:(id)concat;
-(unsigned)linq_count:(id)count;
-(id)linq_toDictionaryWithKeySelector:(id)keySelector;
-(id)linq_toDictionaryWithKeySelector:(id)keySelector valueSelector:(id)selector;
-(id)linq_groupBy:(id)by;
-(BOOL)linq_all:(id)all;
-(BOOL)linq_any:(id)any;
-(id)linq_take:(unsigned)take;
-(id)linq_skip:(unsigned)skip;
-(id)linq_lastOrNil;
-(id)linq_firstOrNil;
-(id)linq_aggregate:(id)aggregate;
-(id)linq_distinct:(id)distinct;
-(id)linq_distinct;
-(id)linq_selectMany:(id)many;
-(id)linq_ofType:(Class)type;
-(id)linq_whereFirstOrNil:(id)aNil;
-(int)linq_indexWhereFirstOrNil:(id)aNil;
-(id)linq_select:(id)select;
-(id)linq_where:(id)where;
@end

@interface XXUnknownSuperclass (Transform)
-(id)imageWithCornerRadius:(float)cornerRadius;
-(id)resizedImage:(CGSize)image interpolationQuality:(int)quality imageDrawingRect:(CGRect)rect;
-(id)imageWithContentMode:(int)contentMode sizeInPixels:(CGSize)pixels needCrop:(BOOL)crop interpolationQuality:(int)quality;
@end

@interface XXUnknownSuperclass (Extension)
+(id)addToCenterOfView:(id)view;
@end

@interface XXUnknownSuperclass (Precompiled)
@property(readonly, assign, nonatomic) BOOL isEmpty;
+(BOOL)isNilOrWhitespace:(id)whitespace;
+(BOOL)notNilOrEmpty:(id)empty;
-(BOOL)isSameCaseInsensitive:(id)insensitive;
-(id)toUTF8;
@end

@interface XXUnknownSuperclass (Precompiled)
@property(readonly, assign, nonatomic) float middleY;
@property(readonly, assign, nonatomic) float middleX;
@property(assign, nonatomic) float centerY;
@property(assign, nonatomic) float centerX;
@property(assign, nonatomic) float right;
@property(assign, nonatomic) float bottom;
@property(assign, nonatomic) float left;
@property(assign, nonatomic) float top;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) float width;
@property(assign, nonatomic) float y;
@property(assign, nonatomic) float x;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGPoint origin;
-(CGPoint)middlePoint;
@end

@interface XXUnknownSuperclass (Precompiled)
+(id)colorWithHex:(id)hex andAlpha:(float)alpha;
+(id)colorWithHex:(id)hex;
@end

@interface XXUnknownSuperclass (Precompiled)
+(id)cast:(id)cast;
@end

@interface XXUnknownSuperclass (IBDesignable)
@property(retain, nonatomic) UIColor* shadowColor;
@property(assign, nonatomic) float shadowOpacity;
@property(assign, nonatomic) float shadowRadius;
@property(assign, nonatomic) CGSize shadowOffset;
@property(assign, nonatomic) BOOL masksToBounds;
@property(assign, nonatomic) float cornerRadius;
@end

@interface XXUnknownSuperclass (NoteLinks)
-(void)replaceNoteLinksWithCompletionBlock:(id)completionBlock;
@end

@interface XXUnknownSuperclass (Extension)
@property(readonly, assign, nonatomic) CGSize sizeInPixels;
-(void)removeAllSubviews;
-(id)centerAlignConstraintsWithView:(id)view;
-(id)defaultAlignConstraintsWithView:(id)view;
-(id)verticalAlignConstraintsWithView:(id)view;
-(id)horizontalAlignConstraintsWithView:(id)view;
-(id)heightConstraintWithConstant:(float)constant;
-(id)widthConstraintWithConstant:(float)constant;
-(id)sizeConstraintWithConstant:(float)constant andDirectionFlag:(BOOL)flag;
-(id)verticalAlignToBottomView:(id)bottomView withConstant:(float)constant;
-(id)horizontalAlignToRightView:(id)rightView withConstant:(float)constant;
-(id)attributeAlignConstraintWithName:(int)name constant:(float)constant andView:(id)view;
-(void)doRoundedView;
-(void)setParalaxMotionEffect:(id)effect;
-(id)paralaxMotionEffect;
-(void)removeParalax;
-(void)addParalaxWithXDelta:(int)xdelta andYDelta:(int)delta;
-(id)snapshot;
-(void)addParalaxWithDelta:(int)delta;
@end

@interface XXUnknownSuperclass (Extension)
+(unsigned long long)availableSpace;
-(BOOL)addSkipBackupAttributeToItemAtURL:(id)url;
-(BOOL)skipDirectoryBackup:(id)backup;
@end

@interface XXUnknownSuperclass (LNPopupSupportPrivate)
@property(readonly, assign, nonatomic, getter=_ln_bottomBarSupport) _LNPopupBottomBarSupport* bottomBarSupport;
@property(readonly, assign, nonatomic) UIViewController* popupContentViewController;
@property(assign, nonatomic) UIViewController* popupPresentationContainerViewController;
@property(readonly, assign, nonatomic, getter=_ln_popupController) LNPopupController* ln_popupController;
@end

@interface XXUnknownSuperclass (LNPopupSupport)
@property(readonly, assign, nonatomic) __weak UIViewController* popupPresentationContainerViewController;
@property(readonly, assign, nonatomic) UIViewController* popupContentViewController;
@property(readonly, assign, nonatomic) unsigned popupPresentationState;
@property(readonly, assign, nonatomic) LNPopupContentView* popupContentView;
@property(readonly, assign, nonatomic) LNPopupBar* popupBar;
@property(readonly, retain, nonatomic) LNPopupItem* popupItem;
-(id)viewForPopupInteractionGestureRecognizer;
-(id)_ln_popupController_nocreate;
-(void)setPopupContentViewController:(id)controller;
-(void)setPopupPresentationContainerViewController:(id)controller;
-(void)updatePopupBarAppearance;
-(void)dismissPopupBarAnimated:(BOOL)animated completion:(id)completion;
-(void)closePopupAnimated:(BOOL)animated completion:(id)completion;
-(void)openPopupAnimated:(BOOL)animated completion:(id)completion;
-(void)presentPopupBarWithContentViewController:(id)contentViewController animated:(BOOL)animated completion:(id)completion;
-(void)presentPopupBarWithContentViewController:(id)contentViewController openPopup:(BOOL)popup animated:(BOOL)animated completion:(id)completion;
@end

@interface XXUnknownSuperclass (LNCustomContainerPopupSupport)
-(CGRect)defaultFrameForBottomDockingView;
-(id)bottomDockingViewForPopup;
-(id)bottomDockingViewForPopup_nocreate;
-(id)_ln_bottomBarSupport;
-(id)_ln_bottomBarSupport_nocreate;
-(id)_ln_popupController;
@end

@interface XXUnknownSuperclass (Extension)
-(void)setupVKDesign;
@end

@interface XXUnknownSuperclass (Extension)
@property(readonly, assign, nonatomic) CGSize defaultSizeThatFits;
-(float)estimatedHeightForWidth:(float)width;
@end

@interface XXUnknownSuperclass (Extension)
-(double)doubleValueWithKey:(id)key withDefault:(double)aDefault;
-(CGSize)sizeValueWithKey:(id)key withDefault:(CGSize)aDefault;
-(BOOL)boolValueWithKey:(id)key withDefault:(BOOL)aDefault;
-(int)intValueWithKey:(id)key withDefault:(int)aDefault;
-(unsigned)unsignedIntValueWithKey:(id)key withDefault:(unsigned)aDefault;
@end

@interface XXUnknownSuperclass (Keyboard)
-(void)onKeyboardWillHideNotification:(id)onKeyboard;
-(void)onKeyboardWillShowNotification:(id)onKeyboard;
-(void)unsubscribeToKeyboardNotifications;
-(void)subscribeToKeyboardNotifications;
@end

@interface XXUnknownSuperclass (VK_VCFactory)
@property(readonly, assign, nonatomic) VK_VCFactory* controllersFactory;
@end

@interface XXUnknownSuperclass (VK_Window)
@property(readonly, assign) VK_Window* window;
@end

@interface XXUnknownSuperclass (NetworkErrors)
@property(readonly, assign, nonatomic) BOOL isRealyNetworkConnectionError;
@property(readonly, assign, nonatomic) BOOL isConnectionCancelledError;
@property(readonly, assign, nonatomic) BOOL isNetworkConnectionError;
+(BOOL)isConnectionCancelledErrorCode:(int)code;
+(BOOL)isNetworkConnectionErrorCode:(int)code;
@end

@interface XXUnknownSuperclass (Keyboard)
@property(readonly, assign, nonatomic) CGRect keyboardEndFrame;
@end

@interface XXUnknownSuperclass (PopupPresentationState)
@property(readonly, assign, nonatomic) BOOL isPopupViewClosed;
@end

@interface XXUnknownSuperclass (MarqueeLabelHelpers)
-(id)traverseResponderChainForFirstViewController;
-(id)firstAvailableViewController;
@end

@interface XXUnknownSuperclass (MarqueeLabelHelpers)
-(id)controlPoints;
-(float)derivativeYValueForCurveAt:(float)at withControlPoints:(id)controlPoints;
-(float)XforCurveAt:(float)at withControlPoints:(id)controlPoints;
-(float)YforCurveAt:(float)at withControlPoints:(id)controlPoints;
-(float)solveTForY:(float)y withEpsilon:(float)epsilon controlPoints:(id)points;
-(float)durationPercentageForPositionPercentage:(float)positionPercentage withDuration:(double)duration;
@end

@interface XXUnknownSuperclass (Fingerprint)
-(unsigned)lengthWithType:(int)type;
-(id)fingerprintWithType:(int)type;
-(id)MD5Fingerprint;
-(id)SHA1Fingerprint;
@end

@interface XXUnknownSuperclass (RKAdditions)
-(BOOL)saveToPersistentStore:(id*)persistentStore;
-(unsigned)countForEntityForName:(id)name predicate:(id)predicate error:(id*)error;
-(id)insertNewObjectForEntityForName:(id)name;
@end

@interface XXUnknownSuperclass (VK_Category)
-(BOOL)isModalViewController;
@end

@interface XXUnknownSuperclass (ClassName)
+(id)clsName;
@end

@interface XXUnknownSuperclass (VK_QuadCurve)
+(CGPoint)controlPointForPoints:(CGPoint)points p2:(CGPoint)a2;
+(CGPoint)midPointForPoints:(CGPoint)points p2:(CGPoint)a2;
+(id)quadCurvedPathWithPoints:(id)points;
@end

@interface XXUnknownSuperclass (Extension)
+(id)stringFromNumber:(unsigned)number;
+(id)chooseString:(int)string andFirstWord:(id)word andSecondWord:(id)word3 andThirdWord:(id)word4;
+(id)stringFromArray:(id)array;
+(id)stringFromArray:(id)array withSeparator:(id)separator;
-(BOOL)matchesQuery:(id)query;
-(CGSize)roundedSizeWithFont:(id)font andMaxHeight:(float)height;
-(CGSize)roundedSizeWithFont:(id)font andMaxWidth:(float)width;
-(CGSize)roundedSizeWithAttributes:(id)attributes andMaxSize:(CGSize)size;
-(id)clipWithMaxSymbolsCount:(unsigned)maxSymbolsCount andClippedResult:(BOOL*)result;
@end

@interface XXUnknownSuperclass (Extension)
-(void)deleteLastCharacter;
@end

@interface XXUnknownSuperclass (NetworkLoading)
-(void)showImageIfNeeded:(id)needed withAnimationEnabled:(BOOL)animationEnabled;
-(void)prepareAndStartLoadingOperation:(id)operation withCompletion:(id)completion;
-(void)setImageLoadingOperation:(id)operation;
-(id)imageLoadingOperation;
-(void)loadLocalImageWithName:(id)name;
-(void)cancelLoadingImage;
-(void)loadRoundedImageFromUrl:(id)url withPlaceHolder:(id)placeHolder;
-(void)loadImageFromUrl:(id)url withPlaceHolder:(id)placeHolder andCornerRadius:(float)radius;
-(void)loadImageFromUrl:(id)url withPlaceHolder:(id)placeHolder params:(id)params andCompletion:(id)completion;
-(void)loadImageFromUrl:(id)url withPlaceHolder:(id)placeHolder andCompletion:(id)completion;
-(void)loadImageFromUrl:(id)url withPlaceHolder:(id)placeHolder;
-(void)loadImageFromUrl:(id)url;
@end

@interface XXUnknownSuperclass (Links)
-(id)linksCheckingResultsList;
@end

@interface XXUnknownSuperclass (LoadFromNib)
+(id)loadNibNamed:(id)named;
+(id)loadFromNibNamed:(id)nibNamed withOwner:(id)owner;
+(id)loadFromNib;
@end

@interface XXUnknownSuperclass (FixedHeightWhenStatusBarHidden)
@property(assign, nonatomic) BOOL fixedHeightWhenStatusBarHidden;
+(void)load;
-(CGSize)sizeThatFits_FixedHeightWhenStatusBarHidden:(CGSize)hidden;
@end

@interface XXUnknownSuperclass (Extension)
+(id)name;
+(id)shortVersionString;
+(id)versionString;
@end

@interface XXUnknownSuperclass (VK_Data)
@property(readonly, assign, nonatomic) VK_Data* vkData;
@end

@interface XXUnknownSuperclass (Extension)
@property(readonly, assign, nonatomic) CGSize sizeInPixels;
+(id)bluredImage:(id)image withBlurRadius:(float)blurRadius;
+(id)imageWithColor:(id)color;
+(id)cachedColoredImages;
@end

@interface XXUnknownSuperclass (CommonDigest)
-(id)SHA512Hash;
-(id)SHA384Hash;
-(id)SHA256Hash;
-(id)SHA224Hash;
-(id)SHA1Hash;
-(id)MD5Sum;
-(id)MD4Sum;
-(id)MD2Sum;
@end

@interface XXUnknownSuperclass (CommonCryptor)
-(id)decryptedCASTDataUsingKey:(id)key error:(id*)error;
-(id)CASTEncryptedDataUsingKey:(id)key error:(id*)error;
-(id)decryptedDESDataUsingKey:(id)key error:(id*)error;
-(id)DESEncryptedDataUsingKey:(id)key error:(id*)error;
-(id)decryptedAES256DataUsingKey:(id)key error:(id*)error;
-(id)AES256EncryptedDataUsingKey:(id)key error:(id*)error;
@end

@interface XXUnknownSuperclass (LowLevelCommonCryptor)
-(id)decryptedDataUsingAlgorithm:(unsigned)algorithm key:(id)key initializationVector:(id)vector options:(unsigned)options error:(int*)error;
-(id)decryptedDataUsingAlgorithm:(unsigned)algorithm key:(id)key options:(unsigned)options error:(int*)error;
-(id)decryptedDataUsingAlgorithm:(unsigned)algorithm key:(id)key error:(int*)error;
-(id)dataEncryptedUsingAlgorithm:(unsigned)algorithm key:(id)key initializationVector:(id)vector options:(unsigned)options error:(int*)error;
-(id)dataEncryptedOrDecryptedUsingAlgorithm:(unsigned)algorithm key:(id)key initializationVector:(id)vector options:(unsigned)options error:(int*)error encrypt:(BOOL)encrypt;
-(id)dataEncryptedUsingAlgorithm:(unsigned)algorithm key:(id)key options:(unsigned)options error:(int*)error;
-(id)dataEncryptedUsingAlgorithm:(unsigned)algorithm key:(id)key error:(int*)error;
-(id)_runCryptor:(CCCryptorRef)cryptor result:(int*)result;
@end

@interface XXUnknownSuperclass (CommonHMAC)
-(id)HMACWithAlgorithm:(unsigned)algorithm key:(id)key;
-(id)HMACWithAlgorithm:(unsigned)algorithm;
@end

@interface XXUnknownSuperclass (Extension)
+(BOOL)hasSongs;
@end

@interface XXUnknownSuperclass (Extension)
@property(readonly, assign, nonatomic) BOOL isValid;
@property(readonly, assign, nonatomic) BOOL isMusic;
@end

@interface XXUnknownSuperclass (Extension)
+(id)setUsingWeakReferencesWithCapacity:(unsigned)capacity;
+(id)setUsingWeakReferences;
@end

@interface XXUnknownSuperclass (LNPopupLayout)
+(void)load;
-(void)_ln_popup_viewDidLayoutSubviews;
-(BOOL)_vCUSB;
-(UIEdgeInsets)_ln_common_eIFCVC:(id)ifcvc iAA:(BOOL*)aa;
-(void)_sCoOvIns:(UIEdgeInsets)ins;
-(id)_ln_childViewControllerForStatusBarStyle;
-(id)_ln_childViewControllerForStatusBarHidden;
-(id)_ln_common_childViewControllerForStatusBarStyle;
-(id)_ln_common_childViewControllerForStatusBarHidden;
-(void)_ln_willTransitionToTraitCollection:(id)traitCollection withTransitionCoordinator:(id)transitionCoordinator;
-(void)_ln_viewWillTransitionToSize:(CGSize)_ln_view withTransitionCoordinator:(id)transitionCoordinator;
-(void)_ln_setNeedsStatusBarAppearanceUpdate;
@end

@interface XXUnknownSuperclass (LNPopupSupportPrivate)
+(void)load;
-(id)_ln_childViewControllerForStatusBarStyle;
-(id)_ln_childViewControllerForStatusBarHidden;
-(void)sBWT:(int)bwt iE:(BOOL)e;
-(void)hBWT:(int)bwt iE:(BOOL)e;
-(UIEdgeInsets)eIFCVC:(id)ifcvc iAA:(BOOL*)aa;
-(CGRect)defaultFrameForBottomDockingView;
-(id)bottomDockingViewForPopup;
-(id)bottomDockingViewForPopup_nocreate;
@end

@interface XXUnknownSuperclass (LNPopupSupportPrivate)
+(void)load;
-(id)_ln_childViewControllerForStatusBarStyle;
-(id)_ln_childViewControllerForStatusBarHidden;
-(UIEdgeInsets)eIFCVC:(id)ifcvc iAA:(BOOL*)aa;
-(void)_sTH:(BOOL)th e:(unsigned)e d:(double)d;
-(CGRect)defaultFrameForBottomDockingView;
-(id)bottomDockingViewForPopup;
-(id)bottomDockingViewForPopup_nocreate;
-(void)setToolbarHiddenDuringTransition:(BOOL)transition;
-(BOOL)isToolbarHiddenDuringTransition;
@end

@interface XXUnknownSuperclass (Extension)
-(id)randomItem;
-(id)previousObjectFromObject:(id)object withLoop:(BOOL)loop;
-(id)nextObjectFromObject:(id)object withLoop:(BOOL)loop;
-(id)differenceFromArray:(id)array;
-(unsigned)numberOfSharedObjectsWithArray:(id)array;
-(id)mergeWithDataItems:(id)dataItems andOffset:(unsigned)offset withRemoveLastElements:(BOOL)removeLastElements;
-(id)mergeWithDataItems:(id)dataItems andOffset:(unsigned)offset;
-(id)arrayWithOffset:(unsigned)offset andCount:(unsigned)count;
@end

@interface XXUnknownSuperclass (WeakReferences)
+(id)arrayUsingWeakReferencesWithCapacity:(unsigned)capacity;
+(id)arrayUsingWeakReferences;
-(void)moveObjectFromIndex:(unsigned)index toIndex:(unsigned)index2;
@end

@interface XXUnknownSuperclass (VK_DataCheckable) <VK_DataCheckable>
@property(readonly, assign, nonatomic) BOOL isEmpty;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@end

@interface XXUnknownSuperclass (AFNetworking)
-(void)af_stopAnimating;
-(void)af_startAnimating;
-(void)setAnimatingWithStateOfOperation:(id)operation;
@end

@interface XXUnknownSuperclass (AFNetworking)
+(void)showAlertViewForRequestOperationWithErrorOnCompletion:(id)errorOnCompletion delegate:(id)delegate cancelButtonTitle:(id)title otherButtonTitles:(id)titles;
+(void)showAlertViewForRequestOperationWithErrorOnCompletion:(id)errorOnCompletion delegate:(id)delegate;
@end

@interface XXUnknownSuperclass (_AFNetworking)
+(id)af_sharedImageRequestOperationQueue;
-(void)af_setBackgroundImageRequestOperation:(id)operation forState:(unsigned)state;
-(id)af_backgroundImageRequestOperationForState:(unsigned)state;
-(void)af_setImageRequestOperation:(id)operation forState:(unsigned)state;
-(id)af_imageRequestOperationForState:(unsigned)state;
@end

@interface XXUnknownSuperclass (AFNetworking)
@property(retain, nonatomic) id<AFURLResponseSerialization> imageResponseSerializer;
+(void)setSharedImageCache:(id)cache;
+(id)sharedImageCache;
-(void)cancelBackgroundImageRequestOperationForState:(unsigned)state;
-(void)cancelImageRequestOperationForState:(unsigned)state;
-(void)setBackgroundImageForState:(unsigned)state withURLRequest:(id)urlrequest placeholderImage:(id)image success:(id)success failure:(id)failure;
-(void)setBackgroundImageForState:(unsigned)state withURL:(id)url placeholderImage:(id)image;
-(void)setBackgroundImageForState:(unsigned)state withURL:(id)url;
-(void)setImageForState:(unsigned)state withURLRequest:(id)urlrequest placeholderImage:(id)image success:(id)success failure:(id)failure;
-(void)setImageForState:(unsigned)state withURL:(id)url placeholderImage:(id)image;
-(void)setImageForState:(unsigned)state withURL:(id)url;
@end

@interface XXUnknownSuperclass (_AFNetworking)
@property(retain, nonatomic, setter=af_setImageRequestOperation:) AFHTTPRequestOperation* af_imageRequestOperation;
+(id)af_sharedImageRequestOperationQueue;
@end

@interface XXUnknownSuperclass (AFNetworking)
@property(retain, nonatomic) id<AFURLResponseSerialization> imageResponseSerializer;
+(void)setSharedImageCache:(id)cache;
+(id)sharedImageCache;
-(void)cancelImageRequestOperation;
-(void)setImageWithURLRequest:(id)urlrequest placeholderImage:(id)image success:(id)success failure:(id)failure;
-(void)setImageWithURL:(id)url placeholderImage:(id)image;
-(void)setImageWithURL:(id)url;
@end

@interface XXUnknownSuperclass (AFNetworking)
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setProgressWithDownloadProgressOfOperation:(id)operation animated:(BOOL)animated;
-(void)setProgressWithUploadProgressOfOperation:(id)operation animated:(BOOL)animated;
-(void)af_setDownloadProgressAnimated:(BOOL)animated;
-(BOOL)af_downloadProgressAnimated;
-(void)af_setUploadProgressAnimated:(BOOL)animated;
-(BOOL)af_uploadProgressAnimated;
@end

@interface XXUnknownSuperclass (AFNetworking)
-(void)af_endRefreshing;
-(void)af_beginRefreshing;
-(void)setRefreshingWithStateOfOperation:(id)operation;
@end

@interface XXUnknownSuperclass (_AFNetworking)
@property(retain, nonatomic, setter=af_setHTTPRequestOperation:) AFHTTPRequestOperation* af_HTTPRequestOperation;
@end

@interface XXUnknownSuperclass (AFNetworking)
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer<AFURLRequestSerialization>* requestSerializer;
-(void)loadRequest:(id)request MIMEType:(id)type textEncodingName:(id)name progress:(id)progress success:(id)success failure:(id)failure;
-(void)loadRequest:(id)request progress:(id)progress success:(id)success failure:(id)failure;
@end

@interface XXUnknownSuperclass (BKAdditions)
+(id)bk_selectorsToStrongObjectsMapTable;
-(void)bk_setObject:(id)object forSelector:(SEL)selector;
-(void)bk_removeObjectForSelector:(SEL)selector;
-(id)bk_objectForSelector:(SEL)selector;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setCompletionBlock:) id bk_completionBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setCompletionBlock:) id bk_completionBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_corresponds:(id)corresponds withBlock:(id)block;
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(float)bk_reduceFloat:(float)aFloat withBlock:(id)block;
-(int)bk_reduceInteger:(int)integer withBlock:(id)block;
-(id)bk_reduce:(id)reduce withBlock:(id)block;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setWillEvictBlock:) id bk_willEvictBlock;
+(void)load;
-(id)bk_objectForKey:(id)key withGetter:(id)getter;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_mapIndex:(id)index;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(unsigned)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (BlocksKit)
+(id)bk_invocationWithTarget:(id)target block:(id)block;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (A2BlockDelegate)
+(void)bk_registerDynamicDelegateNamed:(id)named forProtocol:(id)protocol;
+(void)bk_registerDynamicDelegateNamed:(id)named;
+(void)bk_registerDynamicDataSourceNamed:(id)named;
+(void)bk_registerDynamicDelegate;
+(void)bk_registerDynamicDataSource;
+(void)bk_linkProtocol:(id)protocol methods:(id)methods;
+(void)bk_linkDelegateMethods:(id)methods;
+(void)bk_linkDataSourceMethods:(id)methods;
+(const XXStruct_bmT6iB*)bk_delegateInfoForProtocol:(id)protocol;
+(id)bk_delegateInfoByProtocol:(BOOL)protocol;
-(id)bk_ensuredDynamicDelegateForProtocol:(id)protocol;
-(id)bk_ensuredDynamicDelegate;
@end

@interface XXUnknownSuperclass (A2DynamicDelegate)
-(id)bk_dynamicDelegateWithClass:(Class)aClass forProtocol:(id)protocol;
-(id)bk_dynamicDelegateForProtocol:(id)protocol;
-(id)bk_dynamicDelegate;
-(id)bk_dynamicDataSource;
@end

@interface XXUnknownSuperclass (BKAssociatedObjects)
+(void)bk_removeAllAssociatedObjects;
+(id)bk_associatedValueForKey:(const void*)key;
+(void)bk_weaklyAssociateValue:(id)value withKey:(const void*)key;
+(void)bk_atomicallyAssociateCopyOfValue:(id)value withKey:(const void*)key;
+(void)bk_associateCopyOfValue:(id)value withKey:(const void*)key;
+(void)bk_atomicallyAssociateValue:(id)value withKey:(const void*)key;
+(void)bk_associateValue:(id)value withKey:(const void*)key;
-(void)bk_removeAllAssociatedObjects;
-(id)bk_associatedValueForKey:(const void*)key;
-(void)bk_weaklyAssociateValue:(id)value withKey:(const void*)key;
-(void)bk_atomicallyAssociateCopyOfValue:(id)value withKey:(const void*)key;
-(void)bk_associateCopyOfValue:(id)value withKey:(const void*)key;
-(void)bk_atomicallyAssociateValue:(id)value withKey:(const void*)key;
-(void)bk_associateValue:(id)value withKey:(const void*)key;
@end

@interface XXUnknownSuperclass (BlocksKit)
+(void)bk_cancelBlock:(id)block;
+(id)bk_performBlock:(id)block onQueue:(id)queue afterDelay:(double)delay;
+(id)bk_performBlockInBackground:(id)background afterDelay:(double)delay;
+(id)bk_performBlock:(id)block afterDelay:(double)delay;
-(id)bk_performBlock:(id)block onQueue:(id)queue afterDelay:(double)delay;
-(id)bk_performBlockInBackground:(id)background afterDelay:(double)delay;
-(id)bk_performBlock:(id)block afterDelay:(double)delay;
@end

@interface XXUnknownSuperclass (BlockObservation)
+(id)bk_observedClassesHash;
-(id)bk_observerBlocks;
-(void)bk_setObserverBlocks:(id)blocks;
-(void)bk_addObserverForKeyPaths:(id)keyPaths identifier:(id)identifier options:(unsigned)options context:(int)context task:(id)task;
-(void)bk_removeAllBlockObservers;
-(void)bk_removeObserversWithIdentifier:(id)identifier;
-(void)bk_removeObserverForKeyPath:(id)keyPath identifier:(id)identifier;
-(void)bk_addObserverForKeyPaths:(id)keyPaths identifier:(id)identifier options:(unsigned)options task:(id)task;
-(void)bk_addObserverForKeyPath:(id)keyPath identifier:(id)identifier options:(unsigned)options task:(id)task;
-(id)bk_addObserverForKeyPaths:(id)keyPaths options:(unsigned)options task:(id)task;
-(id)bk_addObserverForKeyPath:(id)keyPath options:(unsigned)options task:(id)task;
-(id)bk_addObserverForKeyPaths:(id)keyPaths task:(id)task;
-(id)bk_addObserverForKeyPath:(id)keyPath task:(id)task;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_corresponds:(id)corresponds withBlock:(id)block;
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_reduce:(id)reduce withBlock:(id)block;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_reduce:(id)reduce withBlock:(id)block;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (BlocksKit)
+(void)bk_executeBlockFromTimer:(id)timer;
+(id)bk_timerWithTimeInterval:(double)timeInterval block:(id)block repeats:(BOOL)repeats;
+(id)bk_scheduledTimerWithTimeInterval:(double)timeInterval block:(id)block repeats:(BOOL)repeats;
@end

@interface XXUnknownSuperclass (BlocksKitPrivate)
@property(assign, nonatomic, setter=bk_setResponseLength:) unsigned bk_responseLength;
@property(retain, nonatomic, setter=bk_setResponse:) NSURLResponse* bk_response;
@property(retain, nonatomic, setter=bk_setResponseData:) NSMutableData* bk_responseData;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setDownloadBlock:) id bk_downloadBlock;
@property(copy, nonatomic, setter=bk_setUploadBlock:) id bk_uploadBlock;
@property(copy, nonatomic, setter=bk_setSuccessBlock:) id bk_successBlock;
@property(copy, nonatomic, setter=bk_setFailureBlock:) id bk_failureBlock;
@property(copy, nonatomic, setter=bk_setResponseBlock:) id bk_responseBlock;
@property(assign, nonatomic, setter=setDelegate:) __weak id delegate;
+(id)bk_startConnectionWithRequest:(id)request successHandler:(id)handler failureHandler:(id)handler3;
+(id)bk_connectionWithRequest:(id)request;
+(void)load;
-(void)bk_startWithCompletionBlock:(id)completionBlock;
-(id)bk_initWithRequest:(id)request completionHandler:(id)handler;
-(id)bk_initWithRequest:(id)request;
@end

@interface XXUnknownSuperclass (BlocksKit) <UIActionSheetDelegate>
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic, setter=bk_setDidDismissBlock:) id bk_didDismissBlock;
@property(copy, nonatomic, setter=bk_setWillDismissBlock:) id bk_willDismissBlock;
@property(copy, nonatomic, setter=bk_setDidShowBlock:) id bk_didShowBlock;
@property(copy, nonatomic, setter=bk_setWillShowBlock:) id bk_willShowBlock;
@property(copy, nonatomic, setter=bk_setCancelBlock:) id bk_cancelBlock;
+(id)bk_actionSheetWithTitle:(id)title;
+(void)load;
-(id)bk_handlerForButtonAtIndex:(int)index;
-(void)bk_setHandler:(id)handler forButtonAtIndex:(int)index;
-(int)bk_setCancelButtonWithTitle:(id)title handler:(id)handler;
-(int)bk_setDestructiveButtonWithTitle:(id)title handler:(id)handler;
-(int)bk_addButtonWithTitle:(id)title handler:(id)handler;
-(id)bk_initWithTitle:(id)title;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_SetShouldEnableFirstOtherButtonBlock:) id bk_shouldEnableFirstOtherButtonBlock;
@property(copy, nonatomic, setter=bk_setDidDismissBlock:) id bk_didDismissBlock;
@property(copy, nonatomic, setter=bk_setWillDismissBlock:) id bk_willDismissBlock;
@property(copy, nonatomic, setter=bk_setDidShowBlock:) id bk_didShowBlock;
@property(copy, nonatomic, setter=bk_setWillShowBlock:) id bk_willShowBlock;
@property(copy, nonatomic, setter=bk_setCancelBlock:) id bk_cancelBlock;
+(id)bk_alertViewWithTitle:(id)title message:(id)message;
+(id)bk_alertViewWithTitle:(id)title;
+(id)bk_showAlertViewWithTitle:(id)title message:(id)message cancelButtonTitle:(id)title3 otherButtonTitles:(id)titles handler:(id)handler;
+(void)load;
-(id)bk_handlerForButtonAtIndex:(int)index;
-(void)bk_setHandler:(id)handler forButtonAtIndex:(int)index;
-(int)bk_setCancelButtonWithTitle:(id)title handler:(id)handler;
-(int)bk_addButtonWithTitle:(id)title handler:(id)handler;
-(id)bk_initWithTitle:(id)title message:(id)message;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_handleAction:(id)action;
-(id)bk_initWithTitle:(id)title style:(int)style handler:(id)handler;
-(id)bk_initWithImage:(id)image landscapeImagePhone:(id)phone style:(int)style handler:(id)handler;
-(id)bk_initWithImage:(id)image style:(int)style handler:(id)handler;
-(id)bk_initWithBarButtonSystemItem:(int)barButtonSystemItem handler:(id)handler;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_hasEventHandlersForControlEvents:(unsigned)controlEvents;
-(void)bk_removeEventHandlersForControlEvents:(unsigned)controlEvents;
-(void)bk_addEventHandler:(id)handler forControlEvents:(unsigned)controlEvents;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(assign, nonatomic, setter=bk_setHandlerDelay:) double bk_handlerDelay;
@property(copy, nonatomic, setter=bk_setHandler:) id bk_handler;
+(id)bk_recognizerWithHandler:(id)handler;
+(id)bk_recognizerWithHandler:(id)handler delay:(double)delay;
-(void)bk_cancel;
-(BOOL)bk_shouldHandleAction;
-(void)bk_setShouldHandleAction:(BOOL)bk_set;
-(void)bk_handleAction:(id)action;
-(id)bk_initWithHandler:(id)handler;
-(id)bk_initWithHandler:(id)handler delay:(double)delay;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic) id bk_didCancelBlock;
@property(copy, nonatomic) id bk_didFinishPickingMediaBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setDidDismissBlock:) id bk_didDismissBlock;
@property(copy, nonatomic, setter=bk_setShouldDismissBlock:) id bk_shouldDismissBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic) id bk_shouldReturnBlock;
@property(copy, nonatomic) id bk_shouldClearBlock;
@property(copy, nonatomic) id bk_shouldChangeCharactersInRangeWithReplacementStringBlock;
@property(copy, nonatomic) id bk_didEndEditingBlock;
@property(copy, nonatomic) id bk_shouldEndEditingBlock;
@property(copy, nonatomic) id bk_didBeginEditingBlock;
@property(copy, nonatomic) id bk_shouldBeginEditingBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_eachSubview:(id)subview;
-(void)bk_whenDoubleTapped:(id)tapped;
-(void)bk_whenTapped:(id)tapped;
-(void)bk_whenTouches:(unsigned)touches tapped:(unsigned)tapped handler:(id)handler;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setDidFinishWithErrorBlock:) id bk_didFinishWithErrorBlock;
@property(copy, nonatomic, setter=bk_setDidFinishLoadBlock:) id bk_didFinishLoadBlock;
@property(copy, nonatomic, setter=bk_setDidStartLoadBlock:) id bk_didStartLoadBlock;
@property(copy, nonatomic, setter=bk_setShouldStartLoadBlock:) id bk_shouldStartLoadBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (FlattenArray)
-(id)ek_flattenedCompactedArray;
@end

@interface XXUnknownSuperclass (EasyMappingAdditions)
+(id)ek_formatterForCurrentThread;
@end

@interface XXUnknownSuperclass (Flurry)
-(void)hashAndUpdateValueForKey:(id)key;
@end

@interface XXUnknownSuperclass (json2avro)
-(id)AVRORepresentationWithJSONSchemaData:(id)jsonschemaData;
@end

@interface XXUnknownSuperclass (HTML)
-(id)kv_encodeHTMLCharacterEntities;
-(id)kv_decodeHTMLCharacterEntities;
@end

@interface XXUnknownSuperclass (RMStore)
@property(readonly, assign, nonatomic) NSArray* rm_transactions;
@property(readonly, assign, nonatomic) SKPaymentTransaction* rm_transaction;
@property(readonly, assign, nonatomic) NSError* rm_storeError;
@property(readonly, assign, nonatomic) SKDownload* rm_storeDownload;
@property(readonly, assign, nonatomic) NSArray* rm_products;
@property(readonly, assign, nonatomic) NSString* rm_productIdentifier;
@property(readonly, assign, nonatomic) NSArray* rm_invalidProductIdentifiers;
@property(readonly, assign, nonatomic) float rm_downloadProgress;
@end

@interface XXUnknownSuperclass (RegexKitLiteAdditions)
+(int)captureCountForRegex:(id)regex options:(unsigned)options error:(id*)error;
+(int)captureCountForRegex:(id)regex;
+(void)clearStringCache;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex usingBlock:(id)block;
-(BOOL)enumerateStringsSeparatedByRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(BOOL)enumerateStringsSeparatedByRegex:(id)regex usingBlock:(id)block;
-(BOOL)enumerateStringsMatchedByRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(BOOL)enumerateStringsMatchedByRegex:(id)regex usingBlock:(id)block;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withKeys:(id*)keys forCaptures:(int*)captures count:(unsigned)count;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withFirstKey:(id)firstKey arguments:(void*)arguments;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex range:(NSRange)range withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withKeys:(id*)keys forCaptures:(int*)captures count:(unsigned)count;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withFirstKey:(id)firstKey arguments:(void*)arguments;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex range:(NSRange)range withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex range:(NSRange)range;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex;
-(id)captureComponentsMatchedByRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)captureComponentsMatchedByRegex:(id)regex range:(NSRange)range;
-(id)captureComponentsMatchedByRegex:(id)regex;
-(id)componentsMatchedByRegex:(id)regex options:(unsigned)options range:(NSRange)range capture:(int)capture error:(id*)error;
-(id)componentsMatchedByRegex:(id)regex range:(NSRange)range;
-(id)componentsMatchedByRegex:(id)regex capture:(int)capture;
-(id)componentsMatchedByRegex:(id)regex;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string range:(NSRange)range;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string;
-(id)stringByMatching:(id)matching options:(unsigned)options inRange:(NSRange)range capture:(int)capture error:(id*)error;
-(id)stringByMatching:(id)matching inRange:(NSRange)range;
-(id)stringByMatching:(id)matching capture:(int)capture;
-(id)stringByMatching:(id)matching;
-(NSRange)rangeOfRegex:(id)regex options:(unsigned)options inRange:(NSRange)range capture:(int)capture error:(id*)error;
-(NSRange)rangeOfRegex:(id)regex inRange:(NSRange)range;
-(NSRange)rangeOfRegex:(id)regex capture:(int)capture;
-(NSRange)rangeOfRegex:(id)regex;
-(void)flushCachedRegexData;
-(BOOL)isRegexValidWithOptions:(unsigned)options error:(id*)error;
-(BOOL)isRegexValid;
-(BOOL)isMatchedByRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error;
-(BOOL)isMatchedByRegex:(id)regex inRange:(NSRange)range;
-(BOOL)isMatchedByRegex:(id)regex;
-(id)componentsSeparatedByRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)componentsSeparatedByRegex:(id)regex range:(NSRange)range;
-(id)componentsSeparatedByRegex:(id)regex;
-(int)captureCountWithOptions:(unsigned)options error:(id*)error;
-(int)captureCount;
@end

@interface XXUnknownSuperclass (RegexKitLiteAdditions)
-(int)replaceOccurrencesOfRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(int)replaceOccurrencesOfRegex:(id)regex usingBlock:(id)block;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string options:(unsigned)options range:(NSRange)range error:(id*)error;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string range:(NSRange)range;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string;
@end

@interface XXUnknownSuperclass (ImageContentType)
+(id)sd_contentTypeForImageData:(id)imageData;
@end

@interface XXUnknownSuperclass (ImageContentTypeDeprecated)
+(id)contentTypeForImageData:(id)imageData;
@end

@interface XXUnknownSuperclass (ForceDecode)
+(id)decodedImageWithImage:(id)image;
@end

@interface XXUnknownSuperclass (WebCache)
-(id)imageURLStorage;
-(void)sd_cancelBackgroundImageLoadForState:(unsigned)state;
-(void)sd_setBackgroundImageLoadOperation:(id)operation forState:(unsigned)state;
-(void)sd_cancelImageLoadForState:(unsigned)state;
-(void)sd_setImageLoadOperation:(id)operation forState:(unsigned)state;
-(void)sd_setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options completed:(id)completed;
-(void)sd_setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image completed:(id)completed;
-(void)sd_setBackgroundImageWithURL:(id)url forState:(unsigned)state completed:(id)completed;
-(void)sd_setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options;
-(void)sd_setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image;
-(void)sd_setBackgroundImageWithURL:(id)url forState:(unsigned)state;
-(void)sd_setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options completed:(id)completed;
-(void)sd_setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image completed:(id)completed;
-(void)sd_setImageWithURL:(id)url forState:(unsigned)state completed:(id)completed;
-(void)sd_setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options;
-(void)sd_setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image;
-(void)sd_setImageWithURL:(id)url forState:(unsigned)state;
-(id)sd_imageURLForState:(unsigned)state;
-(id)sd_currentImageURL;
@end

@interface XXUnknownSuperclass (WebCacheDeprecated)
-(void)cancelBackgroundImageLoadForState:(unsigned)state;
-(void)cancelCurrentImageLoad;
-(void)setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options completed:(id)completed;
-(void)setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image completed:(id)completed;
-(void)setBackgroundImageWithURL:(id)url forState:(unsigned)state completed:(id)completed;
-(void)setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options;
-(void)setBackgroundImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image;
-(void)setBackgroundImageWithURL:(id)url forState:(unsigned)state;
-(void)setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options completed:(id)completed;
-(void)setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image completed:(id)completed;
-(void)setImageWithURL:(id)url forState:(unsigned)state completed:(id)completed;
-(void)setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image options:(unsigned)options;
-(void)setImageWithURL:(id)url forState:(unsigned)state placeholderImage:(id)image;
-(void)setImageWithURL:(id)url forState:(unsigned)state;
-(id)imageURLForState:(unsigned)state;
-(id)currentImageURL;
@end

@interface XXUnknownSuperclass (GIF)
+(id)sd_animatedGIFNamed:(id)named;
+(float)sd_frameDurationAtIndex:(unsigned)index source:(CGImageSourceRef)source;
+(id)sd_animatedGIFWithData:(id)data;
-(id)sd_animatedImageByScalingAndCroppingToSize:(CGSize)size;
@end

@interface XXUnknownSuperclass (MultiFormat)
+(int)sd_exifOrientationToiOSOrientation:(int)orientation;
+(int)sd_imageOrientationFromImageData:(id)imageData;
+(id)sd_imageWithData:(id)data;
@end

@interface XXUnknownSuperclass (HighlightedWebCache)
-(void)sd_cancelCurrentHighlightedImageLoad;
-(void)sd_setHighlightedImageWithURL:(id)url options:(unsigned)options progress:(id)progress completed:(id)completed;
-(void)sd_setHighlightedImageWithURL:(id)url options:(unsigned)options completed:(id)completed;
-(void)sd_setHighlightedImageWithURL:(id)url completed:(id)completed;
-(void)sd_setHighlightedImageWithURL:(id)url options:(unsigned)options;
-(void)sd_setHighlightedImageWithURL:(id)url;
@end

@interface XXUnknownSuperclass (HighlightedWebCacheDeprecated)
-(void)cancelCurrentHighlightedImageLoad;
-(void)setHighlightedImageWithURL:(id)url options:(unsigned)options progress:(id)progress completed:(id)completed;
-(void)setHighlightedImageWithURL:(id)url options:(unsigned)options completed:(id)completed;
-(void)setHighlightedImageWithURL:(id)url completed:(id)completed;
-(void)setHighlightedImageWithURL:(id)url options:(unsigned)options;
-(void)setHighlightedImageWithURL:(id)url;
@end

@interface XXUnknownSuperclass (WebCache)
-(void)removeActivityIndicator;
-(void)addActivityIndicator;
-(int)getIndicatorStyle;
-(void)setIndicatorStyle:(int)style;
-(BOOL)showActivityIndicatorView;
-(void)setShowActivityIndicatorView:(BOOL)view;
-(void)setActivityIndicator:(id)indicator;
-(id)activityIndicator;
-(void)sd_cancelCurrentAnimationImagesLoad;
-(void)sd_cancelCurrentImageLoad;
-(void)sd_setAnimationImagesWithURLs:(id)urls;
-(id)sd_imageURL;
-(void)sd_setImageWithPreviousCachedImageWithURL:(id)url placeholderImage:(id)image options:(unsigned)options progress:(id)progress completed:(id)completed;
-(void)sd_setImageWithURL:(id)url placeholderImage:(id)image options:(unsigned)options progress:(id)progress completed:(id)completed;
-(void)sd_setImageWithURL:(id)url placeholderImage:(id)image options:(unsigned)options completed:(id)completed;
-(void)sd_setImageWithURL:(id)url placeholderImage:(id)image completed:(id)completed;
-(void)sd_setImageWithURL:(id)url completed:(id)completed;
-(void)sd_setImageWithURL:(id)url placeholderImage:(id)image options:(unsigned)options;
-(void)sd_setImageWithURL:(id)url placeholderImage:(id)image;
-(void)sd_setImageWithURL:(id)url;
@end

@interface XXUnknownSuperclass (WebCacheDeprecated)
-(void)setAnimationImagesWithURLs:(id)urls;
-(void)cancelCurrentImageLoad;
-(void)cancelCurrentArrayLoad;
-(void)sd_setImageWithPreviousCachedImageWithURL:(id)url andPlaceholderImage:(id)image options:(unsigned)options progress:(id)progress completed:(id)completed;
-(void)setImageWithURL:(id)url placeholderImage:(id)image options:(unsigned)options progress:(id)progress completed:(id)completed;
-(void)setImageWithURL:(id)url placeholderImage:(id)image options:(unsigned)options completed:(id)completed;
-(void)setImageWithURL:(id)url placeholderImage:(id)image completed:(id)completed;
-(void)setImageWithURL:(id)url completed:(id)completed;
-(void)setImageWithURL:(id)url placeholderImage:(id)image options:(unsigned)options;
-(void)setImageWithURL:(id)url placeholderImage:(id)image;
-(void)setImageWithURL:(id)url;
-(id)imageURL;
@end

@interface XXUnknownSuperclass (WebCacheOperation)
-(void)sd_removeImageLoadOperationWithKey:(id)key;
-(void)sd_cancelImageLoadOperationWithKey:(id)key;
-(void)sd_setImageLoadOperation:(id)operation forKey:(id)key;
-(id)operationDictionary;
@end

@interface XXUnknownSuperclass (STKAudioPlayer)
-(id)peek;
-(id)dequeue;
-(void)skipQueueWithQueue:(id)queue;
-(void)skipQueue:(id)queue;
-(void)enqueue:(id)enqueue;
@end

@interface XXUnknownSuperclass (TLYSwizzlingHelpers)
+(void)tly_swizzleInstanceMethod:(SEL)method withReplacement:(SEL)replacement;
+(void)tly_swizzleClassMethod:(SEL)method withReplacement:(SEL)replacement;
@end

@interface XXUnknownSuperclass (ShyNavBar)
@property(retain, nonatomic) TLYShyNavBarManager* shyNavBarManager;
+(void)load;
-(id)_internalShyNavBarManager;
-(void)setShyNavBarManager:(id)manager viewController:(id)controller;
-(BOOL)isShyNavBarManagerPresent;
-(void)tly_swizzledViewWillDisappear:(BOOL)tly_swizzledView;
-(void)tly_swizzledViewDidLayoutSubviews;
-(void)tly_swizzledViewWillAppear:(BOOL)tly_swizzledView;
@end

@interface XXUnknownSuperclass (Helpers)
-(void)tly_setInsets:(UIEdgeInsets)insets;
@end

@interface XXUnknownSuperclass (BetterLayoutGuides)
@property(readonly, assign, nonatomic) id<UILayoutSupport> tly_bottomLayoutGuide;
@property(readonly, assign, nonatomic) id<UILayoutSupport> tly_topLayoutGuide;
@end

@interface XXUnknownSuperclass (Toast)
-(CGPoint)cs_centerPointForPosition:(id)position withToast:(id)toast;
-(void)hideToastActivity;
-(void)makeToastActivity:(id)activity;
-(void)cs_handleToastTapped:(id)tapped;
-(void)cs_toastTimerDidFinish:(id)cs_toastTimer;
-(id)cs_toastQueue;
-(id)cs_activeToasts;
-(id)toastViewForMessage:(id)message title:(id)title image:(id)image style:(id)style;
-(void)cs_hideToast:(id)toast fromTap:(BOOL)tap;
-(void)cs_hideToast:(id)toast;
-(void)cs_showToast:(id)toast duration:(double)duration position:(id)position;
-(void)hideToast:(id)toast;
-(void)hideToasts;
-(void)showToast:(id)toast duration:(double)duration position:(id)position completion:(id)completion;
-(void)showToast:(id)toast;
-(void)makeToast:(id)toast duration:(double)duration position:(id)position title:(id)title image:(id)image style:(id)style completion:(id)completion;
-(void)makeToast:(id)toast duration:(double)duration position:(id)position style:(id)style;
-(void)makeToast:(id)toast duration:(double)duration position:(id)position;
-(void)makeToast:(id)toast;
@end

@interface XXUnknownSuperclass (VKError)
@property(readonly, assign, nonatomic) VKError* vkError;
+(id)errorWithVkError:(id)vkError;
-(id)copyWithVkError:(id)vkError;
@end

@interface XXUnknownSuperclass (VKSMD5)
-(id)vks_md5;
@end

@interface XXUnknownSuperclass (LastControllerBar)
-(int)preferredStatusBarStyle;
@end

@interface XXUnknownSuperclass (VKController)
-(void)vks_viewControllerDidDismiss;
-(void)vks_viewControllerWillDismiss;
-(void)vks_presentViewControllerThroughDelegate;
@end

@interface XXUnknownSuperclass (RoundedImage)
-(id)vks_roundCornersImage:(float)image resultSize:(CGSize)size;
-(void)vks_addRoundedRectToPath:(CGContextRef)path rect:(CGRect)rect width:(float)width height:(float)height toCorners:(int)corners;
@end

