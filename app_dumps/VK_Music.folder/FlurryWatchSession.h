/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "FlurryWatchConnectivityDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "FlurryDataSenderDelegate.h"

@class NSDate, NSString, NSDictionary, NSMutableDictionary, NSMutableArray;

@interface FlurryWatchSession : XXUnknownSuperclass <FlurryDataSenderDelegate, FlurryWatchConnectivityDelegate> {
	BOOL _eventLogComplete;
	NSString* _userID;
	NSString* _apiKey;
	NSString* _appVersion;
	int _serializationVersion;
	NSDictionary* _watchIDs;
	NSDate* _startTime;
	NSDate* _endTime;
	float _accuracy;
	NSMutableDictionary* _eventCounts;
	NSMutableArray* _eventLog;
	NSMutableArray* _errors;
	int _totalErrorCount;
	NSMutableDictionary* _sessionParams;
	int _gender;
	NSDate* _age;
	NSString* _locale;
	NSString* _timeZone;
	int _watchEventThreshold;
	int _watchDurationThreshold;
	long long _totalPauseIntervalMillis;
	double _latitude;
	double _longitude;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int watchDurationThreshold;
@property(assign, nonatomic) int watchEventThreshold;
@property(retain, nonatomic) NSString* timeZone;
@property(retain, nonatomic) NSString* locale;
@property(retain, nonatomic) NSDate* age;
@property(assign, nonatomic) int gender;
@property(retain, nonatomic) NSMutableDictionary* sessionParams;
@property(assign, nonatomic) int totalErrorCount;
@property(retain, nonatomic) NSMutableArray* errors;
@property(assign, nonatomic) BOOL eventLogComplete;
@property(retain, nonatomic) NSMutableArray* eventLog;
@property(retain, nonatomic) NSMutableDictionary* eventCounts;
@property(assign, nonatomic) float accuracy;
@property(assign, nonatomic) double longitude;
@property(assign, nonatomic) double latitude;
@property(assign, nonatomic) long long totalPauseIntervalMillis;
@property(retain) NSDate* endTime;
@property(retain) NSDate* startTime;
@property(retain) NSDictionary* watchIDs;
@property(assign, nonatomic) int serializationVersion;
@property(copy) NSString* userID;
@property(copy) NSString* appVersion;
@property(copy) NSString* apiKey;
+(id)initialTimestampFilePath;
+(id)oldInitialTimestampFilePathUptilAgentVersion109;
+(id)currentWatchAutoIncrementFilePath;
+(id)currentWatchIDsFilePath;
+(id)currentWatchSessionFilePath;
+(void)loadWatchDisableWatchConnectivity;
+(void)loadWatchSessionIfOnDisk;
+(BOOL)createAndLoadWatchSession;
+(id)currentWatchSession;
+(id)sessionWithApiKey:(id)apiKey startTime:(id)time;
+(id)getAgentVersionWithBuild;
+(void)load;
+(void)initReachabilty;
+(id)queue;
-(void).cxx_destruct;
-(BOOL)flurryUserInfo:(id)info;
-(void)disableWatchConnectivity;
-(BOOL)didReceiveUserInfo:(id)info;
-(BOOL)isFlurryUserInfo:(id)info;
-(void)dealloc;
-(long long)sessionLength;
-(long long)timeIntervalSinceSessionStart:(id)start;
-(BOOL)sentReportSuccessful;
-(id)initialTimestamp;
-(id)dataForSessions:(id)sessions;
-(id)data;
-(void)printSessionPrivateLogs;
-(void)appendNetworkStatusToData:(id)data;
-(void)appendCookiesToData:(id)data;
-(void)appendSessions:(id)sessions toData:(id)data;
-(void)appendDevicePropertiesToData:(id)data;
-(id)systemVersion;
-(BOOL)appendReportedIDsToData:(id)data;
-(BOOL)appendEventLogToData:(id)data;
-(BOOL)appendEventCountToData:(id)data;
-(void)appendSessionParamsToData:(id)data;
-(void)getSessionParametersAtPhase:(int)phase;
-(int)updateIfTrackedAndChangedPropertyValue:(id)value forPropertyKey:(id)propertyKey;
-(void)sendSessionsToServer;
-(void)clearWatchSessionOnDisk;
-(void)saveWatchIDsToDisk;
-(void)saveWatchSessionToDisk;
-(int)putEventIntoLog:(id)log;
-(int)recordError:(id)error message:(id)message exceptionString:(id)string errorType:(int)type liveReport:(id)report;
-(int)recordWatchError:(id)error message:(id)message error:(id)error3 liveReport:(id)report;
-(int)recordWatchError:(id)error message:(id)message exception:(id)exception liveReport:(id)report;
-(int)recordError:(id)error message:(id)message error:(id)error3 liveReport:(id)report;
-(int)recordError:(id)error message:(id)message exception:(id)exception liveReport:(id)report;
-(int)recordEvent:(id)event withParameters:(id)parameters timed:(BOOL)timed;
-(int)recordWatchEvent:(id)event withParameters:(id)parameters;
-(int)sanityCheckEventName:(id)name parameters:(id)parameters;
-(BOOL)hasWatchSessionExpired;
-(int)totalEventCount;
-(id)watchIDGuidAsBytes;
-(id)watchIdGUID;
-(id)watchIdIDFV;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)resetEventLogs;
-(id)dataForSending:(id)sending;
-(void)endWatchSession;
-(void)finishWatchEvent;
-(void)finishSession;
-(void)resetSessionData;
-(id)initWithAPIKey:(id)apikey appVersion:(id)version startDate:(id)date;
-(void)loadWatchDurationThreshold;
-(void)loadWatchEventThreshold;
-(void)loadWatchUserID;
-(void)loadWatchAppVersion;
-(void)loadWatchDebug;
-(void)loadWatchIDsFromDisk;
@end

