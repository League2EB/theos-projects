/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "NSURLConnectionDataDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "NSURLConnectionDelegate.h"
#import "NSSecureCoding.h"
#import "NSCopying.h"
#import "VK_Music-Structs.h"

@class NSSet, NSOutputStream, NSURLRequest, NSURLResponse, NSError, NSData, NSURLCredential, AFSecurityPolicy, NSObject, NSDictionary, NSRecursiveLock, NSURLConnection, NSString, NSInputStream;
@protocol OS_dispatch_queue, OS_dispatch_group;

@interface AFURLConnectionOperation : XXUnknownSuperclass <NSURLConnectionDelegate, NSURLConnectionDataDelegate, NSSecureCoding, NSCopying> {
	BOOL _shouldUseCredentialStorage;
	NSOutputStream* _outputStream;
	NSSet* _runLoopModes;
	NSURLRequest* _request;
	NSURLResponse* _response;
	NSError* _error;
	NSData* _responseData;
	NSURLCredential* _credential;
	AFSecurityPolicy* _securityPolicy;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
	NSDictionary* _userInfo;
	int _state;
	NSRecursiveLock* _lock;
	NSURLConnection* _connection;
	NSString* _responseString;
	unsigned _responseStringEncoding;
	unsigned _backgroundTaskIdentifier;
	id _uploadProgress;
	id _downloadProgress;
	id _authenticationChallenge;
	id _cacheResponse;
	id _redirectResponse;
	long long _totalBytesRead;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) NSURLCredential* credential;
@property(assign, nonatomic) BOOL shouldUseCredentialStorage;
@property(retain, nonatomic) NSSet* runLoopModes;
@property(copy, nonatomic) id redirectResponse;
@property(copy, nonatomic) id cacheResponse;
@property(copy, nonatomic) id authenticationChallenge;
@property(copy, nonatomic) id downloadProgress;
@property(copy, nonatomic) id uploadProgress;
@property(assign, nonatomic) unsigned backgroundTaskIdentifier;
@property(assign, nonatomic) long long totalBytesRead;
@property(assign, nonatomic) unsigned responseStringEncoding;
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) NSData* responseData;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic) int state;
@property(assign, nonatomic, setter=af_setDownloadProgressAnimated:) BOOL af_downloadProgressAnimated;
@property(copy, nonatomic) id downloadProgress;
@property(assign, nonatomic, setter=af_setUploadProgressAnimated:) BOOL af_uploadProgressAnimated;
@property(copy, nonatomic) id uploadProgress;
+(BOOL)supportsSecureCoding;
+(id)batchOfRequestOperations:(id)requestOperations progressBlock:(id)block completionBlock:(id)block3;
+(id)networkRequestThread;
+(void)networkRequestThreadEntryPoint:(id)point;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)cancelConnection;
-(void)cancel;
-(void)finish;
-(void)operationDidStart;
-(void)start;
-(BOOL)isConcurrent;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isReady;
-(void)setCompletionBlock:(id)block;
-(void)setRedirectResponseBlock:(id)block;
-(void)setCacheResponseBlock:(id)block;
-(void)setWillSendRequestForAuthenticationChallengeBlock:(id)sendRequestForAuthenticationChallengeBlock;
-(void)setDownloadProgressBlock:(id)block;
-(void)setUploadProgressBlock:(id)block;
-(void)resume;
-(BOOL)isPaused;
-(void)operationDidPause;
-(void)pause;
-(void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)executeAsBackgroundTaskWithExpirationHandler;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

