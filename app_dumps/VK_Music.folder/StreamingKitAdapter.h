/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "STKAudioPlayerDelegate.h"
#import "PlayerProtocol.h"

@class STKDataSource, VK_NotificationObserver, STKAudioPlayer, VK_TrackModel, NSString;
@protocol PlayerDelegate;

__attribute__((visibility("hidden")))
@interface StreamingKitAdapter : XXUnknownSuperclass <STKAudioPlayerDelegate, PlayerProtocol> {
	VK_NotificationObserver* _routeObserver;
	STKAudioPlayer* _audioPlayer;
	id<PlayerDelegate> _delegate;
	VK_TrackModel* _lastTrack;
	STKDataSource* _lastDataSource;
}
@property(readonly, assign, nonatomic) double currentTime;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) id currentItem;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<PlayerDelegate> delegate;
@property(retain, nonatomic) STKAudioPlayer* audioPlayer;
@property(retain, nonatomic) STKDataSource* lastDataSource;
@property(retain, nonatomic) VK_TrackModel* lastTrack;
-(void).cxx_destruct;
-(void)handleRouteChange:(id)change;
-(void)createStreamingKitPlayer;
-(void)delegateErrorNotification:(int)notification;
-(void)audioPlayer:(id)player unexpectedError:(int)error;
-(void)audioPlayer:(id)player didFinishPlayingQueueItemId:(id)anId withReason:(int)reason andProgress:(double)progress andDuration:(double)duration;
-(void)audioPlayer:(id)player stateChanged:(int)changed previousState:(int)state;
-(void)audioPlayer:(id)player didFinishBufferingSourceWithQueueItemId:(id)queueItemId;
-(void)audioPlayer:(id)player didStartPlayingQueueItemId:(id)anId;
-(id)restoreDataSourceForTrack:(id)track;
-(void)storeDataSource:(id)source forTrack:(id)track;
-(void)playDataSource:(id)source forTrack:(id)track;
-(void)playTrack:(id)track withUrl:(id)url andOperationQueue:(id)queue;
-(id)prefetchOperationForTrack:(id)track withUrl:(id)url andOperationQueue:(id)queue;
-(id)cachedDataSourceForUrl:(id)url andOperationQueue:(id)queue;
-(id)cryptoDataSourceForTrack:(id)track;
-(BOOL)isPlayingState:(int)state;
-(BOOL)isPlaying;
-(void)seekToTime:(double)time;
-(void)resume;
-(void)reset;
-(void)stop;
-(BOOL)getPaused;
-(void)pause;
-(void)play;
-(id)init;
@end

