/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "STKDataSourceDelegate.h"
#import "VK_Music-Structs.h"

@class NSMutableArray, NSThread, NSObject, STKQueueEntry, NSConditionLock, NSArray, NSRunLoop, NSString;
@protocol STKAudioPlayerDelegate;

@interface STKAudioPlayer : XXUnknownSuperclass <STKDataSourceDelegate> {
	BOOL muted;
	char* readBuffer;
	int readBufferSize;
	int internalState;
	float volume;
	float peakPowerDb[2];
	float averagePowerDb[2];
	BOOL meteringEnabled;
	BOOL equalizerOn;
	BOOL equalizerEnabled;
	XXStruct_YzVsxB options;
	NSMutableArray* converterNodes;
	OpaqueAUGraph* audioGraph;
	long eqNode;
	long mixerNode;
	long outputNode;
	long eqInputNode;
	long eqOutputNode;
	long mixerInputNode;
	long mixerOutputNode;
	OpaqueAudioComponentInstance* eqUnit;
	OpaqueAudioComponentInstance* mixerUnit;
	OpaqueAudioComponentInstance* outputUnit;
	unsigned long eqBandCount;
	int waitingForDataAfterSeekFrameCount;
	unsigned long framesRequiredToStartPlaying;
	unsigned long framesRequiredToPlayAfterRebuffering;
	unsigned long framesRequiredBeforeWaitingForDataAfterSeekBecomesPlaying;
	STKQueueEntry* currentlyPlayingEntry;
	STKQueueEntry* currentlyReadingEntry;
	NSMutableArray* upcomingQueue;
	NSMutableArray* bufferingQueue;
	int pcmBufferSpinLock;
	int internalStateLock;
	unsigned long pcmBufferTotalFrameCount;
	unsigned long pcmBufferFrameStartIndex;
	unsigned long pcmBufferUsedFrameCount;
	unsigned long pcmBufferFrameSizeInBytes;
	AudioBuffer* pcmAudioBuffer;
	AudioBufferList pcmAudioBufferList;
	OpaqueAudioConverter* audioConverterRef;
	AudioStreamBasicDescription audioConverterAudioStreamBasicDescription;
	BOOL deallocating;
	BOOL discontinuous;
	NSArray* frameFilters;
	NSThread* playbackThread;
	NSRunLoop* playbackThreadRunLoop;
	OpaqueAudioFileStreamID* audioFileStream;
	NSConditionLock* threadStartedLock;
	NSConditionLock* threadFinishedCondLock;
	OpaqueAudioFileID* recordAudioFileId;
	unsigned long recordFilePacketPosition;
	OpaqueAudioConverter* recordAudioConverterRef;
	unsigned long recordOutputBufferSize;
	char* recordOutputBuffer;
	unsigned long recordPacketsPerBuffer;
	unsigned long recordPacketSize;
	AudioStreamPacketDescription* recordPacketDescriptions;
	id stopBackBackgroundTaskBlock;
	int seekVersion;
	int seekLock;
	int currentEntryReferencesLock;
	opaque_pthread_mutex_t playerMutex;
	opaque_pthread_cond_t playerThreadReadyCondition;
	opaque_pthread_mutex_t mainThreadSyncCallMutex;
	opaque_pthread_cond_t mainThreadSyncCallReadyCondition;
	BOOL waiting;
	double requestedSeekTime;
	BOOL disposeWasRequested;
	BOOL seekToTimeWasRequested;
	int stopReason;
	int _state;
	id<STKAudioPlayerDelegate> _delegate;
	int _stateBeforePaused;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign) id<STKAudioPlayerDelegate> delegate;
@property(readonly, assign) int stopReason;
@property(readonly, assign) XXStruct_YzVsxB options;
@property(assign) int state;
@property(readonly, assign) NSObject* mostRecentlyQueuedStillPendingItem;
@property(readonly, assign) unsigned pendingQueueCount;
@property(readonly, assign) NSArray* pendingQueue;
@property(readonly, assign) NSArray* frameFilters;
@property(assign) BOOL equalizerEnabled;
@property(assign) BOOL meteringEnabled;
@property(readonly, assign) double progress;
@property(readonly, assign) double duration;
@property(assign) BOOL muted;
@property(assign) float volume;
@property(assign) int stateBeforePaused;
@property(assign) int internalState;
+(id)dataSourceFromURL:(id)url;
+(void)initialize;
-(void).cxx_destruct;
-(void)addFrameFilter:(id)filter withName:(id)name afterFilterWithName:(id)name3;
-(void)addFrameFilterWithName:(id)name afterFilterWithName:(id)name2 block:(id)block;
-(void)removeFrameFilterWithName:(id)name;
-(void)appendFrameFilterWithName:(id)name block:(id)block;
-(float)averagePowerInDecibelsForChannel:(unsigned)channel;
-(float)peakPowerInDecibelsForChannel:(unsigned)channel;
-(void)handleRecordingOfAudioPackets:(unsigned long)audioPackets audioBuffer:(AudioBuffer*)buffer;
-(void)handleAudioPackets:(const void*)packets numberBytes:(unsigned long)bytes numberPackets:(unsigned long)packets3 packetDescriptions:(AudioStreamPacketDescription*)descriptions;
-(void)stopAudioUnitWithReason:(int)reason;
-(BOOL)startAudioGraph;
-(BOOL)audioGraphIsRunning;
-(void)connectGraph;
-(void)createAudioGraph;
-(void)setOutputCallbackForFirstNode:(long)firstNode firstUnit:(OpaqueAudioComponentInstance*)unit;
-(void)connectNodes:(long)nodes desNode:(long)node srcUnit:(OpaqueAudioComponentInstance*)unit desUnit:(OpaqueAudioComponentInstance*)unit4;
-(long)createConverterNode:(AudioStreamBasicDescription)node desFormat:(AudioStreamBasicDescription)format;
-(void)setGain:(float)gain forEqualizerBand:(int)equalizerBand;
-(void)createEqUnit;
-(void)createMixerUnit;
-(void)createOutputUnit;
-(void)createAudioConverter:(AudioStreamBasicDescription*)converter;
-(void)destroyAudioConverter;
-(id)currentlyPlayingQueueItemId;
-(void)dispose;
-(void)closeRecordAudioFile;
-(void)unmute;
-(void)mute;
-(void)stopThread;
-(void)stop;
-(void)resetPcmBuffers;
-(void)resume;
-(void)pause;
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
-(void)processSeekToTime;
-(void)startInternal;
-(BOOL)processRunloop;
-(void)requeueBufferingEntries;
-(void)playbackThreadQueueMainThreadSyncBlock:(id)block;
-(void)dispatchSyncOnMainThread:(id)thread;
-(void)processFinishPlayingIfAnyAndPlayingNext:(id)next withNext:(id)next2;
-(void)setCurrentlyReadingEntry:(id)entry andStartPlaying:(BOOL)playing clearQueue:(BOOL)queue;
-(void)setCurrentlyReadingEntry:(id)entry andStartPlaying:(BOOL)playing;
-(void)audioQueueFinishedPlaying:(id)playing;
-(void)createPlaybackThread;
-(void)seekToTime:(double)time;
-(void)wakeupPlaybackThread;
-(BOOL)invokeOnPlaybackThread:(id)thread;
-(void)unexpectedError:(int)error;
-(double)currentTimeInFrames;
-(void)handlePropertyChangeForFileStream:(OpaqueAudioFileStreamID*)fileStream fileStreamPropertyID:(unsigned long)anId ioFlags:(unsigned*)flags;
-(void)queueDataSource:(id)source withQueueItemId:(id)queueItemId;
-(void)queueURL:(id)url withQueueItemId:(id)queueItemId;
-(void)queueURL:(id)url;
-(void)queue:(id)queue withQueueItemId:(id)queueItemId;
-(void)queue:(id)queue;
-(void)setDataSource:(id)source withQueueItemId:(id)queueItemId;
-(void)playDataSource:(id)source withQueueItemID:(id)queueItemID;
-(void)playDataSource:(id)source;
-(void)playURL:(id)url withQueueItemID:(id)queueItemID;
-(void)playURL:(id)url;
-(void)play:(id)play withQueueItemID:(id)queueItemID;
-(void)play:(id)play;
-(void)clearQueue;
-(void)stopSystemBackgroundTask;
-(void)startSystemBackgroundTask;
-(void)dealloc;
-(void)destroyAudioResources;
-(id)initWithOptions:(XXStruct_YzVsxB)options;
-(id)init;
-(void)logInfo:(id)info;
-(void)setInternalState:(int)state ifInState:(id)state2;
@end

