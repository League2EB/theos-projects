/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct CLLocationCoordinate2D {
	double latitude;
	double longitude;
} CLLocationCoordinate2D;

typedef struct {
	int load;
	CGSize space;
	BOOL doc;
} XXStruct_UOIMaD;

typedef struct CGContext* CGContextRef;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct opaqueCMSampleBuffer opaqueCMSampleBuffer;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} XXStruct_pwHToB;

typedef struct {
	int deleteSection;
	int reloadSection;
	int insertSection;
	int deleteRow;
	int reloadRow;
	int insertRow;
} XXStruct_X102JB;

typedef struct {
	XXStruct_pwHToB start;
	XXStruct_pwHToB duration;
} XXStruct_yD8eWC;

typedef struct __CTFrame* CTFrameRef;

typedef struct {
	CGSize size;
	unsigned columns;
	unsigned rows;
	float horizontalSpacing;
	float verticalSpacing;
	float emojiSize;
} XXStruct_0R9wYB;

typedef struct {
	int count;
	BOOL can_post;
} XXStruct_86WktA;

typedef struct {
	int count;
	BOOL user_likes;
	BOOL can_like;
} XXStruct_uR0cxB;

typedef struct {
	int totalBytesRead;
	int totalBytesExpectedToRead;
} XXStruct_xAnk1C;

typedef struct tm_zip_s {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} tm_zip_s;

typedef struct {
	tm_zip_s _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} XXStruct_z_NMMB;

typedef struct {
	int type;
	int size;
	BOOL outline;
} XXStruct_m5P4pB;

typedef struct CCCubeCell {
	unsigned hitCount;
	double redAcc;
	double greenAcc;
	double blueAcc;
} CCCubeCell;

typedef struct opaqueCMFormatDescription opaqueCMFormatDescription;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	CGSize minSize;
	CGSize maxSize;
} XXStruct_JC2WWA;

typedef struct {
	CLLocationCoordinate2D center;
	CLLocationCoordinate2D span;
} XXStruct_zkbX1B;

typedef struct {
	BOOL playerItemPrepared;
	BOOL shouldPlay;
	BOOL readyToPlay;
	BOOL startedPlaying;
	BOOL stalled;
	BOOL seeking;
} XXStruct_1vgcKB;

typedef struct CGPath* CGPathRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct sqlite3 sqlite3;

typedef struct Thread Thread;

typedef struct ViECaptureBuffer ViECaptureBuffer;

typedef struct MaskObserverProxy MaskObserverProxy;

typedef struct CriticalSection CriticalSection;

typedef struct MaskEngine2Observer MaskEngine2Observer;

typedef struct VideoFrame VideoFrame;

typedef struct MaskEngine2 {
	/*function-pointer*/ void** _field1;
	Thread* _field2;
	ViECaptureBuffer* _field3;
	MaskObserverProxy* _field4;
	CriticalSection* _field5;
	MaskEngine2Observer* _field6;
	VideoFrame* _field7;
} MaskEngine2;

typedef struct VideoData {
	char* _field1;
	unsigned _field2;
	unsigned _field3;
	bool _field4;
	bool _field5;
	unsigned _field6;
} VideoData;

typedef struct {
	int FPS;
	int currentFPS;
	int currentSecond;
} XXStruct_32J64A;

typedef struct _opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct _opaque_pthread_cond_t {
	long __sig;
	BOOL __opaque[24];
} opaque_pthread_cond_t;

typedef struct CGImage* CGImageRef;

typedef struct __CTLine* CTLineRef;

typedef struct SwitchItemEditRows {
	int title;
	int description;
	int adminsOnly;
	int comments;
	int total;
} SwitchItemEditRows;

typedef struct {
	CGRect _field1;
	CGRect _field2;
	CGRect _field3;
} XXStruct_SIyEID;

typedef struct MarketSorting_t {
	unsigned sort;
	BOOL isDescending;
} MarketSorting_t;

typedef struct OpaqueAudioQueue OpaqueAudioQueue;

typedef struct AudioQueueBuffer {
	unsigned _field1;
	void* _field2;
	unsigned _field3;
	void* _field4;
	unsigned _field5;
	AudioStreamPacketDescription* _field6;
	unsigned _field7;
} AudioQueueBuffer;

typedef struct VKOpusEnc* VKOpusEncRef;

typedef struct AudioStreamPacketDescription AudioStreamPacketDescription;

typedef struct VKOpusDec* VKOpusDecRef;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct {
	id _field1;
	unsigned short _field2;
} XXStruct_c19r_A;

@protocol NSObject
@optional
@property(readonly, copy) NSString* debugDescription;
@required
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(NSZone*)zone;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(id)self;
-(Class)class;
-(BOOL)isEqual:(id)equal;
@end

@protocol MBContactPickerModelProtocol <NSObject>
@optional
@property(readonly, assign, nonatomic) UIImage* contactImage;
@property(readonly, copy, nonatomic) NSString* subtitle;
@required
@property(assign, nonatomic) float renderWidth;
@property(readonly, copy, nonatomic) NSString* name;
@end

@protocol ConfirmationCodeHandler <NSObject>
-(BOOL)handleConfirmationCode:(id)code;
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)application:(id)application userDidAcceptCloudKitShareWithMetadata:(id)user;
-(void)application:(id)application didUpdateUserActivity:(id)activity;
-(void)application:(id)application didFailToContinueUserActivityWithType:(id)type error:(id)error;
-(BOOL)application:(id)application continueUserActivity:(id)activity restorationHandler:(id)handler;
-(BOOL)application:(id)application willContinueUserActivityWithType:(id)type;
-(void)application:(id)application didDecodeRestorableStateWithCoder:(id)coder;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(id)application:(id)application viewControllerWithRestorationIdentifierPath:(id)restorationIdentifierPath coder:(id)coder;
-(BOOL)application:(id)application shouldAllowExtensionPointIdentifier:(id)identifier;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationShouldRequestHealthAuthorization:(id)application;
-(void)application:(id)application handleWatchKitExtensionRequest:(id)request reply:(id)reply;
-(void)application:(id)application handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(void)application:(id)application performActionForShortcutItem:(id)shortcutItem completionHandler:(id)handler;
-(void)application:(id)application performFetchWithCompletionHandler:(id)completionHandler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification completionHandler:(id)handler;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didRegisterUserNotificationSettings:(id)settings;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url options:(id)options;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)applicationDidFinishLaunching:(id)application;
@end

@protocol MainControllerDelegate <NSObject>
-(void)mainControllerLogout;
@end

@protocol StatsManagerDelegate <NSObject>
-(void)statsManager:(id)manager didRegisterEvent:(id)event;
@end

@protocol UITableViewDataSource <NSObject>
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
@optional
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(id)indexPathForPreferredFocusedViewInTableView:(id)tableView;
-(void)tableView:(id)view didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)animationCoordinator;
-(BOOL)tableView:(id)view shouldUpdateFocusInContext:(id)context;
-(BOOL)tableView:(id)view canFocusRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didUnhighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didHighlightRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForFooterInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
@end

@protocol FBAuthRequest <NSObject>
@property(readonly, assign, nonatomic) NSString* apiVersion;
@property(readonly, assign, nonatomic) NSArray* permissions;
@property(readonly, assign, nonatomic) NSString* appId;
-(id)authParameters;
@end

@protocol FBAuthStrategy <NSObject>
-(void)attemptAuth:(id)auth handler:(id)handler;
@end

@protocol StatsEvent <NSObject>
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol StatsData <NSCopying, NSObject>
-(id)request;
-(id)JSONRepresentation;
-(BOOL)hasEvents;
-(void)registerEvent:(id)event batch:(BOOL)batch;
@end

@protocol VKLinkable <NSObject>
+(id)linkIcon;
-(id)linkText;
@end

@protocol VKTitleable <NSObject>
-(BOOL)disclosure;
-(id)title;
@end

@protocol VKSource <VKLinkable, VKTitleable>
@property(readonly, assign, nonatomic) BOOL verified;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) int deactivated;
@property(readonly, assign, nonatomic) int sex;
@property(readonly, retain, nonatomic) NSString* photo;
@property(readonly, retain, nonatomic) NSString* name;
@property(readonly, retain, nonatomic) NSNumber* source_id;
@end

@protocol VKCommentSource <VKSource>
@property(assign, nonatomic) BOOL selected;
@end

@protocol UIGestureRecognizerDelegate <NSObject>
@optional
-(BOOL)gestureRecognizer:(id)recognizer shouldReceivePress:(id)press;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
@end

@protocol DraggableAttachment <NSObject>
@property(readonly, assign, nonatomic) float maxZoomScale;
@property(readonly, assign, nonatomic) float minZoomScale;
@property(assign, nonatomic) float rotation;
@property(assign, nonatomic) float zoomScale;
@property(readonly, assign, nonatomic) BOOL horizontalPanAllowed;
@property(readonly, assign, nonatomic) BOOL verticalPanAllowed;
@property(readonly, assign, nonatomic) BOOL pannable;
@property(readonly, assign, nonatomic) BOOL rotatable;
@property(readonly, assign, nonatomic) BOOL zoomable;
@property(readonly, assign, nonatomic) UIView* view;
@optional
-(BOOL)canBeginInteractions;
-(void)didEndInteractions;
-(void)willBeginInteractions;
@end

@protocol AudioBlockCellWithCollectionViewItemCell <NSObject>
+(CGSize)cellSize;
@end

@protocol AudioOwnerProtocol <VKSource>
@property(copy, nonatomic) NSString* photo_200;
@end

@protocol VKRequestValue <NSObject>
-(id)code;
@end

@protocol ActionDialogProvider <NSObject>
-(void)showInViewController:(id)viewController;
-(id)dialogTextFieldAtIndex:(int)index;
-(void)addTextFieldWithPlaceholder:(id)placeholder text:(id)text secured:(BOOL)secured;
-(void)addButtonWithTitle:(id)title block:(id)block preferred:(BOOL)preferred;
-(void)addButtonWithTitle:(id)title block:(id)block;
-(void)setDestructiveButtonWithTitle:(id)title block:(id)block;
-(void)setCancelButtonWithTitle:(id)title block:(id)block;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol ModelUpdateHandler <NSObject>
-(void)process:(id)process;
@end

@protocol ModelObserver <NSObject>
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
@end

@protocol MessagesListModelObserver <ModelObserver>
-(void)messagesListModelUpdatedAllMessages;
@end

@protocol ModelRenderContext <NSObject>
-(id)userInfo;
-(CGSize)maxSize;
@end

@protocol UICollectionViewDataSource <NSObject>
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
@optional
-(id)collectionView:(id)view indexPathForIndexTitle:(id)indexTitle atIndex:(int)index;
-(id)indexTitlesForCollectionView:(id)collectionView;
-(void)collectionView:(id)view moveItemAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)collectionView:(id)view canMoveItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
@end

@protocol UICollectionViewDelegate <UIScrollViewDelegate>
@optional
-(CGPoint)collectionView:(id)view targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset;
-(id)collectionView:(id)view targetIndexPathForMoveFromItemAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(id)indexPathForPreferredFocusedViewInCollectionView:(id)collectionView;
-(void)collectionView:(id)view didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)animationCoordinator;
-(BOOL)collectionView:(id)view shouldUpdateFocusInContext:(id)context;
-(BOOL)collectionView:(id)view canFocusItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view transitionLayoutForOldLayout:(id)oldLayout newLayout:(id)layout;
-(void)collectionView:(id)view performAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view canPerformAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view shouldShowMenuForItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingSupplementaryView:(id)view2 forElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplaySupplementaryView:(id)view2 forElementKind:(id)elementKind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldDeselectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didUnhighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didHighlightItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldHighlightItemAtIndexPath:(id)indexPath;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField reason:(int)reason;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol UITextFieldDelegateImproved <UITextFieldDelegate>
-(void)textFieldDidChange:(id)textField;
@end

@protocol MBContactCollectionViewDelegateFlowLayout
-(void)collectionView:(id)view willChangeContentSizeTo:(CGSize)to;
@end

@protocol UITextInputTraits <NSObject>
@optional
@property(copy, nonatomic) NSString* textContentType;
@property(assign, nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) int keyboardAppearance;
@property(assign, nonatomic) int keyboardType;
@property(assign, nonatomic) int spellCheckingType;
@property(assign, nonatomic) int autocorrectionType;
@property(assign, nonatomic) int autocapitalizationType;
@end

@protocol UIKeyInput <UITextInputTraits>
@property(readonly, assign, nonatomic) BOOL hasText;
-(void)deleteBackward;
-(void)insertText:(id)text;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)textAttachment inRange:(NSRange)range;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)textAttachment inRange:(NSRange)range interaction:(int)interaction;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range interaction:(int)interaction;
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
@end

@protocol VKMNavDelegate <NSObject>
-(void)runAction:(id)action;
-(id)actionContext;
-(id)navContext;
-(BOOL)route:(id)route;
-(id)navigation;
-(id)mainModel;
@end

@protocol InputPanelViewDelegate <NSObject>
-(void)inputPanelViewDidChangeHeight:(id)inputPanelView;
@end

@protocol ExtraInputPanelViewDelegate <VKMNavDelegate, InputPanelViewDelegate>
-(void)extraInputPanelViewDidAttemptToSend:(id)extraInputPanelView;
-(void)extraInputPanelView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context shouldClearText:(BOOL)text;
@optional
-(id)extraInputPanelStickersGiftContext:(id)context;
@end

@protocol UIAdaptivePresentationControllerDelegate <NSObject>
@optional
-(void)presentationController:(id)controller willPresentWithAdaptiveStyle:(int)adaptiveStyle transitionCoordinator:(id)coordinator;
-(id)presentationController:(id)controller viewControllerForAdaptivePresentationStyle:(int)adaptivePresentationStyle;
-(int)adaptivePresentationStyleForPresentationController:(id)presentationController traitCollection:(id)collection;
-(int)adaptivePresentationStyleForPresentationController:(id)presentationController;
@end

@protocol UIPopoverPresentationControllerDelegate <UIAdaptivePresentationControllerDelegate>
@optional
-(void)popoverPresentationController:(id)controller willRepositionPopoverToRect:(inout CGRect*)rect inView:(inout id*)view;
-(void)popoverPresentationControllerDidDismissPopover:(id)popoverPresentationController;
-(BOOL)popoverPresentationControllerShouldDismissPopover:(id)popoverPresentationController;
-(void)prepareForPopoverPresentation:(id)popoverPresentation;
@end

@protocol LayoutAwareViewDelegate <NSObject>
-(void)layoutAwareViewDidLayout:(id)layoutAwareView;
@end

@protocol LandscapePresenterDelegate <NSObject>
-(void)landscapePresenterDidCompleteRotation:(id)landscapePresenter;
-(void)landscapePresenterWillPerformRotation:(id)landscapePresenter;
@end

@protocol VKMNavProxyDelegate <NSObject>
-(id)currentNavDelegate;
@end

@protocol VKSelectorDelegate <VKMNavProxyDelegate>
@optional
-(void)selector:(id)selector didSelectOption:(id)option;
-(BOOL)selector:(id)selector willSelectOption:(id)option;
-(void)selectorDidChangeOptions:(id)selector;
@end

@protocol VKSelectorDropdownPresentationDelegate <NSObject>
@optional
-(void)selectorDropdownPresentationDidDismiss:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationWillDismiss:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationDidPresent:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationWillPresent:(id)selectorDropdownPresentation animated:(BOOL)animated;
@end

@protocol RecordPanelDelegate
-(float)keyboardHeight:(id)height;
-(void)endDismissingPushToTalkInRecordPanel:(id)recordPanel;
-(int)beginPresentingPushToTalkWithInterfaceOrientationInRecordPanel:(id)recordPanel;
-(void)recordPanel:(id)panel readyToSendOpusRecord:(id)sendOpusRecord;
@end

@protocol SendingModelObserver <ModelObserver>
-(void)pendingReset;
-(void)pendingSent:(id)sent;
-(void)pendingRemoved:(id)removed;
-(void)pendingUpdated:(id)updated reload:(id)reload;
-(void)pendingAdded:(id)added;
@end

@protocol UsersModelObserver <ModelObserver>
-(void)users:(id)users typingInDialog:(id)dialog;
@end

@protocol ScrollToTopDetectionViewDelegate <NSObject>
-(void)scrollToTopDetectionViewDidScrollToTop:(id)scrollToTopDetectionView;
@end

@protocol VKLPSUpdateVisitor <NSObject>
-(BOOL)readStateForMessage:(id)message withPeer:(id)peer incoming:(BOOL)incoming context:(id)context;
-(void)messagesCounter:(id)counter;
-(void)user:(id)user typingInChat:(id)chat context:(id)context;
-(void)user:(id)user online:(BOOL)online flags:(unsigned)flags context:(id)context;
-(void)chatUpdated:(id)updated user:(BOOL)user context:(id)context;
-(void)message:(id)message restored:(BOOL)restored read:(id)read did:(id)did uid:(id)uid date:(id)date title:(id)title body:(id)body att:(BOOL)att randomId:(id)anId context:(id)context;
-(void)readUpdatePeer:(id)peer beforeMid:(id)mid incoming:(BOOL)incoming context:(id)context;
-(void)messageRemoved:(id)removed context:(id)context;
-(void)messageUpdated:(id)updated read:(BOOL)read context:(id)context;
@end

@protocol UsersCacheHandler <NSObject>
@property(readonly, retain) NSDictionary* users;
-(void)sourcesCacheLoadUsers:(id)users;
-(void)sourcesCacheAddUsersSync:(id)sync;
@end

@protocol VKAPIAppActivity <NSObject>
@property(readonly, retain, nonatomic) VKAPIAppActivity* domain;
@end

@protocol VKMImageLoaderDelegate <NSObject>
-(void)loader:(id)loader complete:(id)complete;
@optional
-(void)loader:(id)loader progress:(float)progress;
@end

@protocol ModelRenderDelegate <NSObject>
-(id)model:(id)model componentRenderContextForObject:(id)object context:(id)context;
-(id)model:(id)model componentForObject:(id)object withContext:(id)context;
-(id)renderContextForModel:(id)model;
-(id)model:(id)model renderObject:(id)object withContext:(id)context;
@end

@protocol SearchModel <NSObject>
@property(readonly, assign, nonatomic) int searchRenderContext;
@property(readonly, retain, nonatomic) NSArray* searchScopes;
@property(readonly, assign, nonatomic) int searchScope;
@property(readonly, copy, nonatomic) NSString* searchQuery;
-(void)clearResults;
-(void)searchWithScope:(int)scope;
-(void)searchWithQuery:(id)query;
@end

@protocol VKMSearchControllerDelegate <NSObject>
-(void)searchControllerDidChangedActive:(id)searchController;
-(void)searchControllerChangedActive:(id)active;
-(void)VKMSearchCustomizeResultsTableView:(id)view;
-(id)currentIndex;
@end

@protocol UISearchControllerDelegate <NSObject>
@optional
-(void)presentSearchController:(id)controller;
-(void)didDismissSearchController:(id)controller;
-(void)willDismissSearchController:(id)controller;
-(void)didPresentSearchController:(id)controller;
-(void)willPresentSearchController:(id)controller;
@end

@protocol WKScriptMessageHandler <NSObject>
-(void)userContentController:(id)controller didReceiveScriptMessage:(id)message;
@end

@protocol VKMessage <NSObject>
-(void)updatedFromMessage:(id)message;
-(BOOL)justSent;
-(BOOL)incoming;
-(unsigned)date;
-(id)body;
-(id)mid;
@end

@protocol VKPhotoSized <NSObject>
@property(assign, nonatomic) int sizeType;
@end

@protocol VKAudioMessagePlayerDelegate <NSObject>
-(void)audioMessagePlayerChangingCurrentTime:(id)time;
-(void)audioMessagePlayerStateChanged:(id)changed;
@end

@protocol VMSessionDelegate <NSObject>
@end

@protocol VMPlayingSessionDelegate <VMSessionDelegate>
-(void)playingSessionDidChangeSpeakerToDefault:(id)playingSession;
-(void)playingSessionWillChangeSpeakerToDefault:(id)playingSession;
-(void)playingSessionDidChangeSpeakerToEar:(id)playingSession;
-(void)playingSessionWillChangeSpeakerToEar:(id)playingSession;
-(void)playingSessionExternalAudioDeviceDisconnected:(id)disconnected;
-(void)playingSessionApplicationResignActiveOrInterrupted:(id)interrupted;
@end

@protocol NSDiscardableContent
-(BOOL)isContentDiscarded;
-(void)discardContentIfPossible;
-(void)endContentAccess;
-(BOOL)beginContentAccess;
@end

@protocol NSCacheDelegate <NSObject>
@optional
-(void)cache:(id)cache willEvictObject:(id)object;
@end

@protocol VKSelectorOption <NSObject>
-(id)icon;
-(id)title;
@end

@protocol VKSelectorOptionViewController <VKSelectorOption>
-(id)viewControllerWithMainModel:(id)mainModel;
@end

@protocol MessageRendererDelegate <NSObject>
-(id)messageNavigation;
@end

@protocol MKAnnotation <NSObject>
@optional
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@required
@property(readonly, assign, nonatomic) CLLocationCoordinate2D coordinate;
@optional
-(void)setCoordinate:(CLLocationCoordinate2D)coordinate;
@end

@protocol MKMapViewDelegate <NSObject>
@optional
-(void)mapView:(id)view didAddOverlayViews:(id)views;
-(id)mapView:(id)view viewForOverlay:(id)overlay;
-(void)mapView:(id)view didAddOverlayRenderers:(id)renderers;
-(id)mapView:(id)view rendererForOverlay:(id)overlay;
-(void)mapView:(id)view didChangeUserTrackingMode:(int)mode animated:(BOOL)animated;
-(void)mapView:(id)view annotationView:(id)view2 didChangeDragState:(unsigned)state fromOldState:(unsigned)oldState;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapViewDidStopLocatingUser:(id)mapView;
-(void)mapViewWillStartLocatingUser:(id)mapView;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)mapView:(id)view didAddAnnotationViews:(id)views;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapViewDidFinishRenderingMap:(id)mapView fullyRendered:(BOOL)rendered;
-(void)mapViewWillStartRenderingMap:(id)mapView;
-(void)mapViewDidFailLoadingMap:(id)mapView withError:(id)error;
-(void)mapViewDidFinishLoadingMap:(id)mapView;
-(void)mapViewWillStartLoadingMap:(id)mapView;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
@end

@protocol StickerPopupDelegate <NSObject>
-(id)stickerPopup:(id)popup imageInsteadOfActivityIndicatorForIndexPath:(id)indexPath;
-(id)stickerPopup:(id)popup stickerBaseUrlForIndexPath:(id)indexPath;
-(id)stickerPopup:(id)popup stickerIdForIndexPath:(id)indexPath;
@end

@protocol VKOpusPlayerDelegate
-(void)opusPlayerChangingCurrentTime:(id)time;
-(void)opusPlayerDidFinishPlaying:(id)opusPlayer;
@end

@protocol TimerTargetDelegate <NSObject>
-(void)timerTargetFired:(id)fired;
@end

@protocol UISearchDisplayDelegate <NSObject>
@optional
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
@end

@protocol UISearchResultsUpdating <NSObject>
-(void)updateSearchResultsForSearchController:(id)searchController;
@end

@protocol VKMLoaderDelegate <NSObject>
-(void)loaderUpdated:(id)updated;
@end

@protocol MOCTLabelDelegate <NSObject>
-(void)moctlabel:(id)moctlabel linkClicked:(id)clicked;
@end

@protocol RoundedProgressOverlayViewDelegate <NSObject>
-(void)progressViewDidCancel:(id)progressView;
@end

@protocol MBProgressHUDDelegate <NSObject>
@optional
-(void)hudWasHidden:(id)hidden;
@end

@protocol VKSelectorOptionsProvider <NSObject>
-(id)options;
@end

@protocol VKSelector <NSObject>
-(id)optionsProvider;
-(id)selectedOption;
@end

@protocol MultiImageLoaderDelegate <NSObject>
-(void)multiImageLoader:(id)loader complete:(id)complete;
@end

@protocol MessagesModelObserver <ModelObserver>
-(void)modelUpdatedDialogsData:(id)data;
@end

@protocol VKWebAppContainerControllerDelegate
-(void)container:(id)container didFailWithError:(id)error;
@end

@protocol VKWebAppScriptInitMessageDelegate <NSObject>
-(void)didReceiveInitMessageHandler:(id)handler;
@end

@protocol ModelCacheHandler <NSObject>
@property(retain, nonatomic) Index* index;
-(void)handleUpdatedIndex:(id)index;
-(void)loadIndex:(id)index;
@end

@protocol VKAPNSHandlerDelegate <NSObject>
-(void)apnsHandler:(id)handler runAction:(id)action;
-(void)apnsHandler:(id)handler showNotification:(id)notification;
-(void)apnsHandler:(id)handler modalController:(id)controller animated:(BOOL)animated;
-(void)apnsHandler:(id)handler openController:(id)controller;
@end

@protocol VKClientDelegate <NSObject>
-(void)client:(id)client requestedTokenConfirmationWithComplete:(id)complete;
-(void)client:(id)client requestedValidation:(id)validation complete:(id)complete;
-(void)client:(id)client requestedCaptcha:(id)captcha complete:(id)complete;
-(void)clientEncounteredAuthProblem:(id)problem;
@optional
-(void)client:(id)client requestedConfirmation:(id)confirmation complete:(id)complete;
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)navigationControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)navigationControllerSupportedInterfaceOrientations:(id)orientations;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol VKMNavRoot <UINavigationControllerDelegate>
-(void)logout:(BOOL)logout;
-(void)handleAudioMessage:(id)message;
-(void)playNextAudios:(id)audios context:(int)context playlistIden:(id)iden;
-(void)handleAudio:(id)audio list:(id)list toggle:(BOOL)toggle context:(int)context playlistIden:(id)iden;
-(void)rootModalDismiss:(BOOL)dismiss;
-(void)rootModal:(id)modal animated:(BOOL)animated;
-(id)rootNavContext;
-(void)selectorSelected:(id)selected;
-(void)panEnable:(BOOL)enable;
-(id)mainModel;
-(id)root;
-(BOOL)isRootNav:(id)nav;
@end

@protocol IIViewDeckControllerDelegate <NSObject>
@optional
-(void)viewDeckControllerDidShowCenterView:(id)viewDeckController animated:(BOOL)animated;
-(void)viewDeckControllerDidCloseTopView:(id)viewDeckController animated:(BOOL)animated;
-(BOOL)viewDeckControllerWillCloseTopView:(id)viewDeckController animated:(BOOL)animated;
-(void)viewDeckControllerDidOpenTopView:(id)viewDeckController animated:(BOOL)animated;
-(BOOL)viewDeckControllerWillOpenTopView:(id)viewDeckController animated:(BOOL)animated;
-(void)viewDeckControllerDidCloseRightView:(id)viewDeckController animated:(BOOL)animated;
-(BOOL)viewDeckControllerWillCloseRightView:(id)viewDeckController animated:(BOOL)animated;
-(void)viewDeckControllerDidOpenRightView:(id)viewDeckController animated:(BOOL)animated;
-(BOOL)viewDeckControllerWillOpenRightView:(id)viewDeckController animated:(BOOL)animated;
-(void)viewDeckControllerDidCloseLeftView:(id)viewDeckController animated:(BOOL)animated;
-(BOOL)viewDeckControllerWillCloseLeftView:(id)viewDeckController animated:(BOOL)animated;
-(void)viewDeckControllerDidOpenLeftView:(id)viewDeckController animated:(BOOL)animated;
-(BOOL)viewDeckControllerWillOpenLeftView:(id)viewDeckController animated:(BOOL)animated;
-(void)viewDeckController:(id)controller didBounceWithClosingController:(id)closingController;
-(void)viewDeckController:(id)controller slideOffsetChanged:(float)changed;
-(void)viewDeckController:(id)controller didPanToOffset:(float)offset;
-(void)viewDeckController:(id)controller applyShadow:(id)shadow withBounds:(CGRect)bounds;
@end

@protocol NotificationsManagerDelegate <NSObject>
-(void)notificationsManager:(id)manager selectedEvent:(id)event;
@end

@protocol MasksPageControllerDelegate <NSObject>
-(void)masksPageController:(id)controller didMoveToPageAtIndex:(unsigned)index;
-(void)masksPageController:(id)controller willMoveToPageAtIndex:(unsigned)index;
-(void)masksPageController:(id)controller didSelectMask:(id)mask;
@end

@protocol CLLocationManagerDelegate <NSObject>
@optional
-(void)locationManager:(id)manager didVisit:(id)visit;
-(void)locationManager:(id)manager didFinishDeferredUpdatesWithError:(id)error;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(void)locationManager:(id)manager didStartMonitoringForRegion:(id)region;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)locationManager:(id)manager monitoringDidFailForRegion:(id)monitoring withError:(id)error;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didExitRegion:(id)region;
-(void)locationManager:(id)manager didEnterRegion:(id)region;
-(void)locationManager:(id)manager rangingBeaconsDidFailForRegion:(id)rangingBeacons withError:(id)error;
-(void)locationManager:(id)manager didRangeBeacons:(id)beacons inRegion:(id)region;
-(void)locationManager:(id)manager didDetermineState:(int)state forRegion:(id)region;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
@end

@protocol KeyboardAppearanceEventHandler <NSObject>
-(void)keyboardAppearanceObserver:(id)observer handleKeyboardAppearanceEventWithInfo:(id)info previouslyTrackedAppearanceInfo:(id)info3;
@end

@protocol UIViewControllerTransitioningDelegate <NSObject>
@optional
-(id)presentationControllerForPresentedViewController:(id)presentedViewController presentingViewController:(id)controller sourceViewController:(id)controller3;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
@end

@protocol UIViewControllerAnimatedTransitioning <NSObject>
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@optional
-(void)animationEnded:(BOOL)ended;
-(id)interruptibleAnimatorForTransition:(id)transition;
@end

@protocol VKLongPollServiceDelegate <NSObject>
-(void)processLPSUpdates:(id)updates;
@end

@protocol AudioPlaylistDetailModelDelegate <NSObject>
-(void)audioPlaylistDetailModel:(id)model didDeleteAudioPlaylist:(id)playlist;
-(void)audioPlaylistDetailModelDidUpdatePlaylist:(id)audioPlaylistDetailModel;
@end

@protocol VKImageFilterContext <NSObject>
-(CGSize)resultSize;
-(id)image;
@end

@protocol VKImageFilter <NSObject>
-(id)infoString;
-(id)process:(id)process;
@end

@protocol TextKitLabelInteractiveDefaultBehaviorDelegate <VKMNavProxyDelegate>
@end

@protocol StoryFullscreenViewModelProvider <NSObject>
-(id)storyFullscreenViewModelForIdentity:(id)identity;
@end

@protocol StoryFullscreenViewModel <NSObject>
@property(assign, nonatomic) BOOL can_comment;
@property(readonly, assign, nonatomic) int viewsCount;
@property(readonly, assign, nonatomic) NSDate* date;
@property(readonly, assign, nonatomic) float progress;
@property(readonly, assign, nonatomic) double videoStoryDuration;
@property(readonly, assign, nonatomic) AVURLAsset* videoStoryAsset;
@property(readonly, assign, nonatomic) NSURL* videoStoryFileURL;
@property(readonly, assign, nonatomic) NSString* videoStoryFirstFrameURL;
@property(readonly, assign, nonatomic) NSString* photoStoryImageURL;
@property(readonly, assign, nonatomic) UIImage* lowResPreviewImage;
@property(readonly, assign, nonatomic) id<VKSource> source;
@property(readonly, assign, nonatomic) unsigned storyType;
@property(readonly, assign, nonatomic) unsigned storyState;
@property(readonly, assign, nonatomic) StoryIdentity* storyIden;
@end

@protocol TrackingBoundsView <NSObject>
@property(assign, nonatomic) float trackingBoundsPercentsVisible;
@end

@protocol ViewControllerAppearanceStateHandler <NSObject>
@property(assign, nonatomic) int viewControllerVisibility;
@end

@protocol AudioCellDelegate <VKMNavDelegate>
-(void)audioCellSelectedAudio:(id)audio cell:(id)cell quick:(BOOL)quick;
@end

@protocol VKMLiveSearchControllerDelegate <VKMSearchControllerDelegate>
-(int)VKMLiveSearchSkipSections;
-(void)VKMLiveSearchWillEndSearch;
-(void)VKMLiveSearchWillBeginSearch;
-(void)VKMLiveSearchWillDisplayCell:(id)vkmliveSearch indexPath:(id)path inTable:(id)table;
-(void)VKMLiveSearchHandleDeselectCell:(id)cell;
-(BOOL)VKMLiveSearchHandleCell:(id)cell select:(BOOL)select;
@end

@protocol ThumbnailViewDelegate <NSObject>
-(void)thumbnailView:(id)view selected:(id)selected;
@optional
-(id)thumbnailViewNavDelegate;
@end

@protocol IVKMCell <NSObject, ThumbnailViewDelegate>
@property(assign, nonatomic) __weak id<VKMNavDelegate> delegate;
@property(readonly, retain, nonatomic) VKRenderable* domain;
+(void)prerender:(id)prerender;
-(void)refresh;
-(BOOL)selected;
-(void)detach;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)addOpaque:(id)opaque;
@end

@protocol StickerSelectionViewDelegate <NSObject>
-(void)stickerSelectionView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context;
@end

@protocol EmojiInputDelegate <NSObject>
-(void)emojiSelectionView:(id)view didSelectEmoji:(id)emoji;
@end

@protocol ExtrasInputViewDelegate <StickerSelectionViewDelegate, EmojiInputDelegate>
-(id)extrasInputViewStickersGiftContext:(id)context;
-(void)extrasInputViewDidChangeTab:(id)extrasInputView;
@end

@protocol StickerSuggestionsViewDelegate <NSObject>
-(void)stickerSuggestionsView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context promoted:(BOOL)promoted;
@end

@protocol VKSourceStatus <NSObject>
-(int)statusMask;
-(id)statusForSource:(id)source;
@end

@protocol VKChildDomain
@property(retain, nonatomic) VKIdentity* parentIden;
@end

@protocol VKTextCopy <NSObject>
-(id)textCopy;
@end

@protocol VKThumbnailable <NSObject>
-(id)thumbnailUrl;
@end

@protocol VKAttachment <NSObject>
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
@end

@protocol VKVideoPlayerViewDelegate <NSObject>
-(void)videoPlayerPositionUpdated:(id)updated;
-(void)videoPlayerFailedForDisplay:(id)display;
-(void)videoPlayerReadyToKeepUp:(id)keepUp;
-(void)videoPlayerIsStalling:(id)stalling;
-(void)videoPlayerDidDisplayVideoLayer:(id)videoPlayer;
-(BOOL)videoPlayerCanStartPlaying:(id)playing;
@end

@protocol VKThumbnailView <NSObject>
@property(readonly, assign, nonatomic) UIImage* image;
@property(assign, nonatomic) int renderedSize;
@property(retain, nonatomic) VKDomain<VKThumbnailable>* domain;
@end

@protocol VKMGifLoaderDelegate <NSObject>
-(void)gifLoader:(id)loader complete:(id)complete;
-(void)gifLoader:(id)loader reportProgress:(double)progress;
@end

@protocol UIBarPositioningDelegate <NSObject>
@optional
-(int)positionForBar:(id)bar;
@end

@protocol UIToolbarDelegate <UIBarPositioningDelegate>
@end

@protocol MOScrollPagingMediatorDelegate <NSObject>
-(void)pagingMediator:(id)mediator renderPage:(int)page;
-(BOOL)pagingMediatorShouldResetForScrollResize:(id)pagingMediator;
@end

@protocol VKProfile <NSObject>
@property(assign, nonatomic) int access_mode;
-(void)profileBlocksForOwner:(BOOL)owner block:(id)block;
-(void)profileUserStatus:(id)status;
-(int)profileMode;
-(id)profileStatus;
-(id)profileSubtitle;
-(id)profileName;
-(BOOL)verified;
-(id)profilePhoto;
@end

@protocol ActionOptionsProviderContext <NSObject>
-(id)session;
-(id)actionContext;
-(int)renderContext;
@end

@protocol VKImage <VKThumbnailable>
@property(readonly, assign, nonatomic) float ratio;
@property(readonly, retain, nonatomic) NSMutableDictionary* variants;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
@optional
-(int)fullVariantType;
-(id)messagesFilterForSize:(CGSize)size isFirst:(BOOL)first isLast:(BOOL)last;
@end

@protocol VKBrowsableImage <VKImage>
-(BOOL)isVideo;
@end

@protocol VKPhotoEdit <NSObject>
-(id)photoEditDescription;
-(id)photoEditTitle;
-(id)photoEditThumbnail;
@end

@protocol PhotoSeletionDelegate <NSObject>
-(void)photoRowCell:(id)cell selectedPhoto:(id)photo;
@end

@protocol MasksCacheDelegate <NSObject>
-(void)masksCache:(id)cache cleanedMasksWithIden:(id)iden;
@end

@protocol VKAPTabViewControllerProtocol <NSObject>
-(id)scrollView;
@optional
-(void)vkApMinimized;
-(void)vkApExpanded;
@end

@protocol ActionOptionsProvider <NSObject>
-(void)showOptionsWithContext:(id)context runActionIfSingle:(BOOL)single;
-(void)showOptionsWithContext:(id)context;
-(BOOL)hasOptionsWithContext:(id)context;
@end

@protocol WizardStepInfo <NSObject>
-(void)prepareViewControllerWithCompletion:(id)completion;
-(BOOL)isAvailable;
@end

@protocol VKProfileContentBlockViewDelegate <NSObject>
-(void)profileContentBlockViewShowAll:(id)all;
-(void)profileContentBlockView:(id)view didSelectItem:(id)item;
@end

@protocol StickerSelectionViewDataSource <NSObject>
-(id)stickerSelectionViewBaseUrl:(id)url;
-(id)stickerSelectionViewStickerIds:(id)ids;
@optional
-(id)stickerSelectionViewProductId:(id)anId;
@end

@protocol CoalescedPerformerDelegate <NSObject>
-(void)coalescedPerformerDidFire:(id)coalescedPerformer;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol VKTextPage <NSObject>
-(id)URLForTextPage;
@end

@protocol VideoPlayStats <NSObject>
-(void)progress:(double)progress;
-(void)toggleFullscreen:(BOOL)fullscreen;
-(void)toggleVolume:(BOOL)volume;
-(void)complete;
-(void)resume;
-(void)pause;
-(void)play:(BOOL)play;
@end

@protocol VideoStatsContextDelegate <NSObject>
-(void)videoStatsProvider:(id)provider qualityResult:(int)result;
-(id)videoStatsProviderSession:(id)session;
@end

@protocol CommentSourcePickerDelegate <NSObject>
-(void)commentSourcePickerController:(id)controller didSelectSource:(id)source;
@end

@protocol PopupWindowController <NSObject>
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
@end

@protocol SKRequestDelegate <NSObject>
@optional
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
@end

@protocol SKProductsRequestDelegate <SKRequestDelegate>
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

@protocol UIScrollViewAccessibilityDelegate <UIScrollViewDelegate>
@optional
-(id)accessibilityScrollStatusForScrollView:(id)scrollView;
@end

@protocol VKVideoStatsProvider <NSObject>
-(id)statsForVideo:(id)video;
@end

@protocol AudioAttachmentDelegate <NSObject>
-(void)audioView:(id)view selectedAudio:(id)audio;
@end

@protocol UISearchBarDelegate <UIBarPositioningDelegate>
@optional
-(void)searchBar:(id)bar selectedScopeButtonIndexDidChange:(int)selectedScopeButtonIndex;
-(void)searchBarResultsListButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarBookmarkButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
@end

@protocol PageCellWithTableViewDidSelectAudioDelegate <NSObject>
-(void)pageCellWithTableView:(id)tableView didSelectAudio:(id)audio;
@end

@protocol ExtraInputPanelViewPhotoEditorModeDelegate <NSObject>
-(void)extraInputViewDidCancel:(id)extraInputView;
-(void)extraInputView:(id)view didSelectEmojiImage:(id)image emojiString:(id)string;
-(void)extraInputView:(id)view didSelectStickerImage:(id)image stickerId:(id)anId;
@end

@protocol ApplicationModelDelegate <NSObject>
-(id)actionContextForApplicationModel:(id)applicationModel;
@end

@protocol PhotoHostViewDelegate <NSObject>
-(void)photoHost:(id)host didPlayGif:(id)gif;
-(void)photoHostViewDidZoom:(id)photoHostView;
@end

@protocol NavWindowPresenterController <NSObject>
@property(readonly, retain, nonatomic) NavWindowPresenter* windowPresenter;
-(void)markAppearFromThumbnail;
-(void)markAppearAnimated;
-(void)windowPresenterAnimateOut:(id)anOut animateWindow:(BOOL)window complete:(id)complete;
-(void)windowPresenterAnimateIn:(id)anIn complete:(id)complete;
@end

@protocol NavWindowPresenterContext <NSObject>
-(BOOL)hasThumbnails;
@end

@protocol AutoplayedVideoViewDelegate <NSObject>
-(id)navDelegate;
-(void)videoViewBecameHidden:(id)hidden;
-(BOOL)videoViewToggleFullscreen:(id)fullscreen;
-(void)videoViewDidStartPlaying:(id)videoView;
-(void)videoViewDidFinishLoading:(id)videoView;
@end

@protocol UIPageViewControllerDataSource <NSObject>
-(id)pageViewController:(id)controller viewControllerAfterViewController:(id)controller2;
-(id)pageViewController:(id)controller viewControllerBeforeViewController:(id)controller2;
@optional
-(int)presentationIndexForPageViewController:(id)pageViewController;
-(int)presentationCountForPageViewController:(id)pageViewController;
@end

@protocol UIPageViewControllerDelegate <NSObject>
@optional
-(int)pageViewControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)pageViewControllerSupportedInterfaceOrientations:(id)orientations;
-(int)pageViewController:(id)controller spineLocationForInterfaceOrientation:(int)interfaceOrientation;
-(void)pageViewController:(id)controller didFinishAnimating:(BOOL)animating previousViewControllers:(id)controllers transitionCompleted:(BOOL)completed;
-(void)pageViewController:(id)controller willTransitionToViewControllers:(id)viewControllers;
@end

@protocol MasksSectionControllerDelegate <NSObject>
-(void)masksSectionController:(id)controller didSelectMask:(id)mask;
@end

@protocol PromotedApplicationsModelDelegate <ModelObserver>
@optional
-(void)model:(id)model didDeleteAdsItem:(id)item;
@end

@protocol MTRGInstreamAudioAdPlayer <NSObject>
@property(assign, nonatomic) float volume;
@property(assign, nonatomic) __weak id<MTRGInstreamAudioAdPlayerDelegate> adPlayerDelegate;
@property(readonly, assign, nonatomic) double adAudioTimeElapsed;
@property(readonly, assign, nonatomic) double adAudioDuration;
-(void)stopAdAudio;
-(void)resumeAdAudio;
-(void)pauseAdAudio;
-(void)playAdAudioWithUrl:(id)url;
@end

@protocol MaskLoaderObserver
-(void)maskLoader:(id)loader masksCacheCleanedMaskWithIden:(id)iden;
-(void)maskLoader:(id)loader canceledLoadingMask:(id)mask;
-(void)maskLoader:(id)loader finishLoadingMask:(id)mask;
-(void)maskLoader:(id)loader failedLoadingMask:(id)mask;
-(void)maskLoader:(id)loader loadingMask:(id)mask updatedProgress:(id)progress;
-(void)maskLoader:(id)loader startLoadingMask:(id)mask;
-(void)maskLoader:(id)loader changeCurrentMask:(id)mask;
@end

@protocol VKRenderable <NSObject>
-(id)prerender;
@end

@protocol VMPushToTalkDelegate <NSObject>
-(void)pushToTalkControllerActionBlankTap:(id)talkControllerActionBlankTap;
-(void)pushToTalkControllerActionCancel:(id)talkControllerActionCancel;
-(void)pushToTalkControllerActionSend:(id)talkControllerActionSend;
@end

@protocol VMRaiseToRecordActivatorDelegate <NSObject>
-(BOOL)shouldRaiseToRecordRecognizeAttemptAtThisTime:(id)thisTime;
-(void)raiseToRecordActivatorDidRecognizedAttempt:(id)raiseToRecordActivator;
@end

@protocol VMRecordingDelegate <NSObject>
-(void)recording:(id)recording updateVolume:(float)volume time:(double)time;
-(void)recordingGetInterruptedOrExceededLimitOrGettingAwayFromEar:(id)ear;
@end

@protocol DomainEvent <NSObject>
+(int)domainType;
@end

@protocol CommentPostSourceDelegate <NSObject>
-(void)commentPostSourceController:(id)controller didSelectSource:(id)source;
@end

@protocol VKSwitchEditItemContext <NSObject>
@optional
-(void)setUploadByAdminsOnly:(BOOL)only;
-(id)uploadByAdminsOnlyTitle;
-(BOOL)uploadByAdminsOnly;
-(void)setCommentsDisabled:(BOOL)disabled;
-(id)commentsDisabledTitle;
-(BOOL)commentsDisabled;
@end

@protocol NewsSectionCellDelegate <NSObject>
-(void)newsSectionCellDidChangeValue:(id)newsSectionCell;
@end

@protocol ExtrasTabBarDelegate <NSObject>
@optional
-(BOOL)extrasTabBar:(id)bar shouldSelectItem:(id)item;
-(void)extrasTabBar:(id)bar didSelectItem:(id)item animated:(BOOL)animated;
@end

@protocol StickerSelectionViewPhotoEditorModeDelegate <NSObject>
-(void)stickerSelectionView:(id)view didSelectStickerWithImage:(id)image stickerId:(id)anId;
@end

@protocol LargeEmojiSelectionViewDelegate <NSObject>
-(void)largeEmojiSelectionView:(id)view didSelectEmojiWithImage:(id)image emojiString:(id)string;
@end

@protocol ExtrasTabBarScrollingDelegate <NSObject>
-(void)extrasInputScrollViewWillAppear:(id)extrasInputScrollView;
-(void)extrasInputScrollViewWillEndDragging:(id)extrasInputScrollView withVelocity:(CGPoint)velocity;
-(void)extrasInputScrollViewDidScroll:(id)extrasInputScrollView;
@end

@protocol StickerSelectionViewScrollingDelegate <NSObject>
-(void)stickerSelectionViewScrollViewWillEndDragging:(id)stickerSelectionViewScrollView withVelocity:(CGPoint)velocity;
-(void)stickerSelectionViewScrollViewDidScroll:(id)stickerSelectionViewScrollView;
@end

@protocol UIInputViewAudioFeedback <NSObject>
@optional
@property(readonly, assign, nonatomic) BOOL enableInputClicksWhenVisible;
@end

@protocol PagingViewDataSource <NSObject>
-(id)pagingView:(id)view viewForPage:(int)page;
@end

@protocol PagingViewDelegate <NSObject>
-(void)pagingView:(id)view scrollingProgress:(float)progress fromPage:(int)page toPage:(int)page4;
-(void)pagingView:(id)view didChangeCurrentPage:(int)page;
@end

@protocol SketchPreviewControllerDelegate <NSObject>
@optional
-(void)sketchPreviewController:(id)controller confirmSendingGraffitiDoc:(id)doc;
-(void)sketchPreviewController:(id)controller confirmSendingImage:(id)image;
@end

@protocol StoryEditorEditableTextAttachmentDelegate <NSObject>
-(void)storyEditorEditableTextAttachmentDidEndEditing:(id)storyEditorEditableTextAttachment;
-(void)storyEditorEditableTextAttachmentWillBeginEditing:(id)storyEditorEditableTextAttachment;
@end

@protocol StoryEditorDraggableAttachmentsContainerViewDelegate <NSObject>
@optional
-(void)draggableAttachmentsContainerViewDidEndInteractions:(id)draggableAttachmentsContainerView;
-(void)draggableAttachmentsContainerViewWillBeginInteractions:(id)draggableAttachmentsContainerView;
@end

@protocol StickersPickerViewControllerDelegate <NSObject>
-(void)stickersPickerViewController:(id)controller didFinishWithEmojiImage:(id)emojiImage emojiString:(id)string;
-(void)stickersPickerViewController:(id)controller didFinishWithStickerImage:(id)stickerImage stickerId:(id)anId;
@optional
-(void)stickersPickerViewControllerDidCancel:(id)stickersPickerViewController;
@end

@protocol StoryEditorItemPreview <NSObject>
@property(readonly, assign, nonatomic) id<StoryEditorItem> item;
@optional
-(void)setMuted:(BOOL)muted;
-(void)didDisappear;
-(void)willDisappear;
-(void)didAppear;
-(void)willAppear;
@end

@protocol StoryEditorItem <NSObject>
@optional
-(BOOL)muteSupported;
-(BOOL)musicSupported;
-(BOOL)drawingSupported;
-(BOOL)textAttachmentsSupported;
-(BOOL)stickersAttachmentsSupported;
@end

@protocol ExtrasInputViewStickersTab <StickerSelectionViewDataSource>
@property(readonly, retain, nonatomic) ExtrasTabBarItem* tabBarItem;
@end

@protocol CALayerDelegate <NSObject>
@optional
-(id)actionForLayer:(id)layer forKey:(id)key;
-(void)layoutSublayersOfLayer:(id)layer;
-(void)layerWillDraw:(id)layer;
-(void)drawLayer:(id)layer inContext:(CGContextRef)context;
-(void)displayLayer:(id)layer;
@end

@protocol SketchBrushViewControllerDelegate <NSObject>
-(void)sketchBrushControllerDidEndChangingColor:(id)sketchBrushController;
-(void)sketchBrushController:(id)controller changeColor:(id)color;
-(void)sketchBrushController:(id)controller changeBrush:(float)brush;
@end

@protocol SketchDrawViewDelegate <NSObject>
-(void)sketchDrawViewDidClearAll:(id)sketchDrawView;
-(void)sketchDrawViewDidUndo:(id)sketchDrawView;
-(void)sketchDrawViewDidDraw:(id)sketchDrawView;
@end

@protocol VMVoiceMessagePlayerObserver <ModelObserver>
-(void)voiceMessagePlayerChangingCurrentTime:(id)time;
-(void)voiceMessagePlayerUpdated:(id)updated;
@end

@protocol VMSeekingViewDelegate <NSObject>
-(void)seekingView:(id)view endSeekingWithProgress:(float)progress;
-(void)seekingView:(id)view seekingToProgress:(float)progress;
-(float)seekingViewBeganSeekingAndAskingForCurrentProgress:(id)currentProgress;
@end

@protocol MTRGInstreamAudioAdDelegate <NSObject>
-(void)onNoAdWithReason:(id)reason instreamAudioAd:(id)ad;
-(void)onLoadWithInstreamAudioAd:(id)instreamAudioAd;
@optional
-(void)onLeaveApplicationWithInstreamAudioAd:(id)instreamAudioAd;
-(void)onDismissModalWithInstreamAudioAd:(id)instreamAudioAd;
-(void)onShowModalWithInstreamAudioAd:(id)instreamAudioAd;
-(void)onCompleteWithSection:(id)section instreamAudioAd:(id)ad;
-(void)onBannerTimeLeftChange:(double)change duration:(double)duration instreamAudioAd:(id)ad;
-(void)onBannerComplete:(id)complete instreamAudioAd:(id)ad;
-(void)onBannerStart:(id)start instreamAudioAd:(id)ad;
-(void)onErrorWithReason:(id)reason instreamAudioAd:(id)ad;
@end

@protocol VKPlaceDescription <NSObject>
-(id)placeDescription;
-(id)placeTitle;
@end

@protocol MasksSectionModelProtocol <NSObject>
@property(retain, nonatomic) MasksSectionsLocationInfo* locationInfo;
@property(retain, nonatomic) NSNumber* sectionId;
@end

@protocol VKRemoteAsset <NSObject>
-(id)url;
@end

@protocol VKUploadingImage <VKImage>
@property(readonly, retain, nonatomic) UploadEditAttachment* attachment;
@end

@protocol FullScreenVideoPlayerControlsViewDelegate <NSObject>
-(void)fullScreenVideoPlayerControlsView:(id)view handleErrorOverlayRetryButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleReplayButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleShareButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleCommentsButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleLikeButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsViewDidEndScrubbing:(id)fullScreenVideoPlayerControlsView;
-(void)fullScreenVideoPlayerControlsView:(id)view didScrubToValue:(float)value;
-(void)fullScreenVideoPlayerControlsViewWillBeginScrubbing:(id)fullScreenVideoPlayerControlsView;
-(void)fullScreenVideoPlayerControlsView:(id)view handlePauseButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handlePlayButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleMoreButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleAddButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleCloseButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleOpenInLiveAppButtonTap:(id)liveAppButtonTap;
@end

@protocol PanGestureDrivenDismissableTransitionViewController <NSObject>
-(BOOL)canBeginPanGestureDismissTransition;
-(id)viewForDismissTransitionAnimation;
-(id)viewForDismissTransitionPanGesture;
@optional
-(void)didFinishPanGestureDismissTransition;
-(void)willFinishPanGestureDismissTransition;
-(void)didFinishCancelPanGestureDismissTransition;
-(void)willCancelPanGestureDismissTransition;
-(void)didUpdatePanGestureDismissTransition:(float)transition;
-(void)willBeginPanGestureDismissTransition;
@end

@protocol VKVideoPlayerHolder <NSObject>
@property(readonly, assign, nonatomic) VKVideoPlayer* videoPlayer;
-(void)deattachCurrentVideoPlayer;
-(void)attachVideoPlayer:(id)player;
@end

@protocol ActionSheetProvider <ActionDialogProvider>
-(void)showFromBarButtonItem:(id)barButtonItem inViewController:(id)viewController animated:(BOOL)animated;
-(void)showFromRect:(CGRect)rect inViewController:(id)viewController animated:(BOOL)animated;
-(void)setActionSheetStyle:(int)style;
@end

@protocol EKEventEditViewDelegate <NSObject>
-(void)eventEditViewController:(id)controller didCompleteWithAction:(int)action;
@optional
-(id)eventEditViewControllerDefaultCalendarForNewEvents:(id)newEvents;
@end

@protocol InputPanelViewTextViewDelegate <UITextViewDelegate>
-(void)inputPanelViewTextViewAttemptToSend:(id)send;
-(void)inputPanelViewTextViewAttemptToBecomeFirstResponder:(id)becomeFirstResponder;
@optional
-(void)inputPanelViewTextViewResignFirstResponder:(BOOL)responder;
-(void)inputPanelViewTextViewBecomeFirstResponder:(BOOL)responder;
@end

@protocol AudioMessageAttachmentDelegate <NSObject>
-(void)audioMessageView:(id)view selectedAudioMessage:(id)message;
@end

@protocol SnapperViewDelegate
-(void)snapperView:(id)view shouldOpenAttach:(id)attach;
@end

@protocol PostInteractionStats <NSObject>
-(void)action:(int)action context:(id)context;
@end

@protocol AudioStats <NSObject>
-(void)playAudio:(id)audio ref:(id)ref;
@end

@protocol PhotoStats <NSObject>
-(void)openImage:(id)image ref:(id)ref;
@end

@protocol SnippetStats <NSObject>
-(void)tapLinkAttachment:(id)attachment ref:(id)ref;
-(void)tapSnippetButton:(id)button ref:(id)ref;
-(void)tapSnippet:(id)snippet ref:(id)ref;
@end

@protocol FeedPostInteractionStats <PostInteractionStats, AudioStats, PhotoStats, SnippetStats>
@end

@protocol MBProgressHUDCustomView <NSObject>
@optional
-(void)setProgress:(float)progress;
@end

@protocol AnimatingIndicator <NSObject>
-(BOOL)isAnimating;
-(void)stopAnimating;
-(void)startAnimating;
@end

@protocol StoryFeedPreviewAvatarCellViewModel <NSObject>
@property(readonly, copy, nonatomic) NSString* avatarPhotoURL;
@property(readonly, copy, nonatomic) NSString* sourceName;
@property(readonly, assign, nonatomic) unsigned cellState;
@end

@protocol VKAudioTableViewCellDelegate
-(void)vkAudioTableViewCellSelectedItem:(id)item cell:(id)cell;
@end

@protocol SKStoreProductViewControllerDelegate <NSObject>
@optional
-(void)productViewControllerDidFinish:(id)productViewController;
@end

@protocol ExternalAppSupport <NSObject>
-(BOOL)isAvailable;
@end

@protocol AFMultipartFormData
-(void)appendString:(id)string;
-(void)appendData:(id)data;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name error:(id*)error;
-(void)appendPartWithFileData:(id)fileData name:(id)name fileName:(id)name3 mimeType:(id)type;
-(void)appendPartWithFormData:(id)formData name:(id)name;
-(void)appendPartWithHeaders:(id)headers body:(id)body;
@end

@protocol MOTextViewLimit <NSObject>
-(float)heightLimitForTextView:(id)textView;
@end

@protocol URLInteropHandler <NSObject>
-(BOOL)handleOpenURL:(id)url;
-(BOOL)openURL:(id)url handler:(id)handler;
@end

@protocol SKPaymentTransactionObserver <NSObject>
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
@optional
-(void)paymentQueue:(id)queue updatedDownloads:(id)downloads;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueue:(id)queue removedTransactions:(id)transactions;
@end

@protocol VideoPlayerScrubberDelegate <NSObject>
-(void)videoPlayerScrubberDidEndScrubbing:(id)videoPlayerScrubber;
-(void)videoPlayerScrubberWillBeginScrubbing:(id)videoPlayerScrubber;
@end

@protocol ColorPaletteViewDelegate <NSObject>
-(void)colorPaletteView:(id)view didSelectColor:(id)color;
@end

@protocol MTStatusBarOverlayDelegate <NSObject>
@optional
-(void)statusBarOverlayDidClearMessageQueue:(id)statusBarOverlay;
-(void)statusBarOverlayDidSwitchFromOldMessage:(id)statusBarOverlay toNewMessage:(id)newMessage;
-(void)statusBarOverlayDidHide;
-(void)statusBarOverlayDidRecognizeGesture:(id)statusBarOverlay;
@end

@protocol NHandlerBannerDelegate <NSObject>
-(void)bannerHandlerSelected:(id)selected;
@end

@protocol UICollectionViewDelegateFlowLayout <UICollectionViewDelegate>
@optional
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(int)section;
-(float)collectionView:(id)view layout:(id)layout minimumInteritemSpacingForSectionAtIndex:(int)index;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(UIEdgeInsets)collectionView:(id)view layout:(id)layout insetForSectionAtIndex:(int)index;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
@end

@protocol NSURLSessionDelegate <NSObject>
@optional
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>
@optional
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didFinishCollectingMetrics:(id)metrics;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)URLSession:(id)session task:(id)task needNewBodyStream:(id)stream;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
@end

@protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>
@optional
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didBecomeStreamTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didBecomeDownloadTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
@end

@protocol VKAVGifConverterDelegate <NSObject>
-(void)gifConverter:(id)converter didFailedForGifWithURL:(id)url withError:(id)error;
-(void)gifConverter:(id)converter didFinishConvertingGifWithURL:(id)url resultFileURL:(id)url3 size:(CGSize)size;
@optional
-(void)gifConverter:(id)converter reportedDownloadProgress:(float)progress;
@end

@protocol MainNewsFeedModelObserver <ModelObserver>
-(void)mainNewsFeedModel:(id)model didChangeDeferredUpdate:(id)update;
-(void)mainNewsFeedModelUnsyncedCountChangedFromValue:(id)value toValue:(id)value2;
@end

@protocol VKTitleableColor <VKTitleable>
-(id)titleColor;
-(id)titleFont;
-(float)titleOffsetX;
@end

@protocol Component5StateListener <NSObject>
@optional
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)component:(id)component willUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
@end

@protocol StoreProductItemCell <NSObject>
-(float)imageWidth;
@end

@protocol UIViewControllerInteractiveTransitioning <NSObject>
@optional
@property(readonly, assign, nonatomic) BOOL wantsInteractiveStart;
@property(readonly, assign, nonatomic) int completionCurve;
@property(readonly, assign, nonatomic) float completionSpeed;
@required
-(void)startInteractiveTransition:(id)transition;
@end

@protocol NotificationHandler <NSObject>
-(void)clearImmediatly;
-(void)handle:(id)handle;
@end

@protocol PersistentStatsData <StatsData>
-(void)loadFromJSONRepresentation:(id)jsonrepresentation;
@end

@protocol StoreStockItemViewDelegate <NSObject>
-(void)stockItemViewGiftButtonPressed:(id)pressed;
@end

@protocol NotificationBannerWindowDelegate <NSObject>
-(void)notificationBannerWindowDidHide;
@end

@protocol LocationCellDelegate <VKMNavDelegate>
-(id)currentLocation;
@end

@protocol VMSession <NSObject>
@property(assign, nonatomic) __weak id<VMSessionDelegate> delegate;
-(void)deactivate;
-(void)activate;
@end

@protocol TextKitLabelDelegate <NSObject>
@optional
-(void)textKitLabel:(id)label didLongPressAttribute:(id)attribute;
-(BOOL)textKitLabel:(id)label shouldLongPressAttribute:(id)attribute;
-(void)textKitLabel:(id)label didSelectAttribute:(id)attribute;
-(BOOL)textKitLabel:(id)label shouldSelectAttribute:(id)attribute;
-(BOOL)textKitLabel:(id)label shouldHighlightAttribute:(id)attribute;
-(void)textKitLabel:(id)label longPressedUrl:(id)url;
-(void)textKitLabel:(id)label selectedUrl:(id)url;
@end

@protocol VKRemoteAction <NSObject>
-(void)runInContext:(id)context completion:(id)completion;
-(id)url;
-(int)remoteActionType;
@end

@protocol IVideoUploadContext <NSObject>
@optional
@property(readonly, retain, nonatomic) VKVideo* video;
@required
@property(assign, nonatomic) int target;
@property(readonly, assign, nonatomic) float videoDuration;
@property(assign, nonatomic) long long totalBytesUploaded;
@property(retain, nonatomic) NSData* uploadResumeData;
@property(readonly, retain, nonatomic) NSURL* fileURL;
@end

@protocol WKNavigationDelegate <NSObject>
@optional
-(void)webViewWebContentProcessDidTerminate:(id)webViewWebContentProcess;
-(void)webView:(id)view didReceiveAuthenticationChallenge:(id)challenge completionHandler:(id)handler;
-(void)webView:(id)view didFailNavigation:(id)navigation withError:(id)error;
-(void)webView:(id)view didFinishNavigation:(id)navigation;
-(void)webView:(id)view didCommitNavigation:(id)navigation;
-(void)webView:(id)view didFailProvisionalNavigation:(id)navigation withError:(id)error;
-(void)webView:(id)view didReceiveServerRedirectForProvisionalNavigation:(id)provisionalNavigation;
-(void)webView:(id)view didStartProvisionalNavigation:(id)navigation;
-(void)webView:(id)view decidePolicyForNavigationResponse:(id)navigationResponse decisionHandler:(id)handler;
-(void)webView:(id)view decidePolicyForNavigationAction:(id)navigationAction decisionHandler:(id)handler;
@end

@protocol MBContactCollectionViewDelegate <NSObject>
@optional
-(void)contactCollectionView:(id)view didEnterCustomText:(id)text;
-(void)contactCollectionView:(id)view didRemoveContacts:(id)contacts;
-(void)contactCollectionView:(id)view didRemoveContact:(id)contact;
-(void)contactCollectionView:(id)view didAddContact:(id)contact;
-(void)contactCollectionView:(id)view didSelectContact:(id)contact;
-(BOOL)contactCollectionView:(id)view shouldRemoveContact:(id)contact;
-(BOOL)contactCollectionView:(id)view shouldAddContact:(id)contact;
-(void)contactCollectionView:(id)view didEnterCustomContact:(id)contact;
-(void)contactCollectionView:(id)view entryTextDidChange:(id)entryText;
-(void)contactCollectionView:(id)view willChangeContentSizeTo:(CGSize)to;
@end

@protocol ABUnknownPersonViewControllerDelegate <NSObject>
-(void)unknownPersonViewController:(id)controller didResolveToPerson:(const void*)person;
@optional
-(BOOL)unknownPersonViewController:(id)controller shouldPerformDefaultActionForPerson:(const void*)person property:(int)property identifier:(int)identifier;
@end

@protocol NSCoding
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@protocol GoogleOauthClientConfiguration <NSObject>
-(id)clientSecret;
-(id)clientIdentifier;
-(id)redirectUri;
@end

@protocol PhotoTagsOverlayViewDelegate <NSObject>
-(CGRect)photoTagsOverlayView:(id)view rectForTag:(id)tag;
-(id)photoTagsOverlayView:(id)view tagAtPoint:(CGPoint)point;
-(void)photoTagsOverlayView:(id)view didSelectTag:(id)tag;
@end

@protocol SearchPeopleStatusSelectionViewControllerDelegate <NSObject>
-(void)statusSelectionViewController:(id)controller didSelectStatus:(int)status;
@end

@protocol CameraManagerDelegate <NSObject>
@optional
-(void)cameraManager:(id)manager changedMaskLoaded:(BOOL)loaded;
-(void)cameraManager:(id)manager didFinishRecordingToOutputFileAtURL:(id)url error:(id)error;
-(void)cameraManager:(id)manager didStarRecordingToOutputFileAtURL:(id)url;
-(void)cameraManager:(id)manager didFailCapturePhotoWithError:(id)error;
-(void)cameraManager:(id)manager didProcessCapturedPhoto:(id)photo metadata:(id)metadata;
-(void)cameraManagerDidCapturePhoto:(id)cameraManager;
-(void)cameraManagerWillCapturePhoto:(id)cameraManager;
@end

@protocol StoryMediaPickerViewControllerDelegate <NSObject>
-(void)storyMediaPickerViewController:(id)controller didFinishWithAsset:(id)asset;
@end

@protocol MasksContainerControllerDelegate <NSObject>
-(void)masksContainerController:(id)controller didSelectMask:(id)mask;
@end

@protocol CameraPreviewViewDelegate <NSObject>
-(void)cameraPreviewViewAttemptToFlipCamera:(id)flipCamera;
-(void)cameraPreviewView:(id)view attemptToFocusAtPoint:(CGPoint)point;
-(void)cameraPreviewView:(id)view attemptToZoomWithScale:(float)scale;
@end

@protocol MaskLoaderDimProgressViewDelegate <NSObject>
-(void)maskLoaderDimProgressViewBlankTap:(id)tap;
-(void)maskLoaderDimProgressViewPressCancel:(id)cancel;
@end

@protocol MaskAssetsLoaderDelegate <NSObject>
-(void)maskAssetsLoaderCanceled:(id)canceled;
-(void)maskAssetsLoaderFailed:(id)failed;
-(void)maskAssetsLoaderFinished:(id)finished;
-(void)maskAssetsLoaderUpdatedProgress:(id)progress;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol MFMessageComposeViewControllerDelegate <NSObject>
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@protocol NSURLConnectionDelegate <NSObject>
@optional
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
@end

@protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
@optional
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
@end

@protocol AVAssetResourceLoaderDelegate <NSObject>
@optional
-(void)resourceLoader:(id)loader didCancelAuthenticationChallenge:(id)challenge;
-(BOOL)resourceLoader:(id)loader shouldWaitForResponseToAuthenticationChallenge:(id)authenticationChallenge;
-(void)resourceLoader:(id)loader didCancelLoadingRequest:(id)request;
-(BOOL)resourceLoader:(id)loader shouldWaitForRenewalOfRequestedResource:(id)requestedResource;
-(BOOL)resourceLoader:(id)loader shouldWaitForLoadingOfRequestedResource:(id)requestedResource;
@end

@protocol SearchPeopleFilterContainer <NSObject>
-(void)clearFilter;
-(void)applyFilter:(id)filter;
@end

@protocol SearchPeopleFiltersViewDelegate <NSObject>
-(void)searchPeopleFiltersViewDidClearFilter:(id)searchPeopleFiltersView;
@end

@protocol VKLookupSourceLocationDelegate
-(void)lookupSourceLocation:(id)location didBecomeAuthorized:(BOOL)authorized;
@end

@protocol ExtrasTabBarTabController <NSObject>
@property(assign, nonatomic) __weak id<ExtrasTabBarScrollingDelegate> scrollingDelegate;
-(void)extrasTabBarActiveTabSelected;
@end

@protocol MCNearbyServiceAdvertiserDelegate <NSObject>
-(void)advertiser:(id)advertiser didReceiveInvitationFromPeer:(id)peer withContext:(id)context invitationHandler:(id)handler;
@optional
-(void)advertiser:(id)advertiser didNotStartAdvertisingPeer:(id)peer;
@end

@protocol MCNearbyServiceBrowserDelegate <NSObject>
-(void)browser:(id)browser lostPeer:(id)peer;
-(void)browser:(id)browser foundPeer:(id)peer withDiscoveryInfo:(id)discoveryInfo;
@optional
-(void)browser:(id)browser didNotStartBrowsingForPeers:(id)peers;
@end

@protocol MCSessionDelegate <NSObject>
-(void)session:(id)session didFinishReceivingResourceWithName:(id)name fromPeer:(id)peer atURL:(id)url withError:(id)error;
-(void)session:(id)session didStartReceivingResourceWithName:(id)name fromPeer:(id)peer withProgress:(id)progress;
-(void)session:(id)session didReceiveStream:(id)stream withName:(id)name fromPeer:(id)peer;
-(void)session:(id)session didReceiveData:(id)data fromPeer:(id)peer;
-(void)session:(id)session peer:(id)peer didChangeState:(int)state;
@optional
-(void)session:(id)session didReceiveCertificate:(id)certificate fromPeer:(id)peer certificateHandler:(id)handler;
@end

@protocol VKAPContentViewControllerSizeDelegate <NSObject>
-(void)VKAPTabsContentViewControllerShouldChangeCenter:(CGPoint)vkaptabsContentViewController;
@end

@protocol VKAPModelDelegate <NSObject>
-(void)vkapModelSelectedLimit:(id)limit;
-(void)vkapModelNeedDismissPicker:(id)picker;
-(void)vkapModelNeedUpdateToolbar:(id)toolbar;
-(void)vkapModel:(id)model shouldUpdateTitle:(id)title;
-(void)vkapModel:(id)model didChangeTab:(int)tab;
@end

@protocol VKNearbyBrowserDelegate <NSObject>
-(void)nearbyBrowser:(id)browser didFailWithError:(id)error;
-(void)nearbyBrowser:(id)browser didFoundUser:(id)user;
@end

@protocol FeedVideoViewDelegate <VKVideoStatsProvider>
-(BOOL)shouldStartAutoplayForVideo:(id)video;
-(void)feedVideoViewRetry:(id)retry;
-(void)feedVideoViewDidTap:(id)feedVideoView;
@end

@protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didDropSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol AVCaptureAudioDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol MovieRecorderDelegate <NSObject>
-(void)movieRecorderDidFinishRecording:(id)movieRecorder;
-(void)movieRecorder:(id)recorder didFailWithError:(id)error;
-(void)movieRecorderDidFinishPreparing:(id)movieRecorder;
@end

@protocol MaskEngineWrapper2Delegate <NSObject>
-(void)maskEngineWrapper2:(id)a2 changedMaskLoaded:(BOOL)loaded;
-(void)maskEngineWrapper2:(id)a2 pixelBufferReady:(char*)ready width:(unsigned)width height:(unsigned)height backCamera:(BOOL)camera photo:(BOOL)photo timestampMs:(unsigned)ms;
-(void)maskEngineWrapper2:(id)a2 maskLoadStatusChanged:(id)changed maskLoadStatus:(unsigned)status;
-(void)maskEngineWrapper2:(id)a2 renderLoadStatusChanged:(BOOL)changed;
-(void)maskEngineWrapper2:(id)a2 modelLoadStatusChanged:(BOOL)changed;
@end

@protocol NSMutableCopying
-(id)mutableCopyWithZone:(NSZone*)zone;
@end

@protocol KVOChangeHandler <NSObject>
-(void)handleKVOChange:(id)change;
@end

@protocol VideoPlayerToFullScreenTransitionDelegate <NSObject>
-(void)didEndTransitionToFullScreen;
-(void)willBeginTransitionToFullScreen;
@end

@protocol VideoPlayerFromFullScreenTransitionVideoViewDestination <NSObject>
-(void)setManuallyPausedVideo:(BOOL)video;
-(void)performExtraChangesAlongTransitionAnimatinFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)didCancelTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)didEndTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)willEndTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)willBeginTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(CGRect)animationDestinationFrameInView:(id)view;
-(BOOL)isValidForFromFullScreenTransitionWithVideo:(id)video;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol TimePickerControllerDelegate <NSObject>
-(void)timePickerCancel:(id)cancel;
-(void)timePicker:(id)picker selectedTime:(id)time;
@end

@protocol StoryCameraViewControllerDelegate <NSObject>
-(void)storyCameraViewController:(id)controller setShouldShowHoldToRecordTip:(BOOL)showHoldToRecordTip;
-(BOOL)shouldShowHoldToRecordTipForStoryCameraViewController:(id)storyCameraViewController;
-(void)storyCameraViewController:(id)controller didRecordAsset:(id)asset mask:(id)mask;
-(void)storyCameraViewController:(id)controller didCapturePhoto:(id)photo metadata:(id)metadata mask:(id)mask;
-(void)storyCameraViewControllerDidCancel:(id)storyCameraViewController;
@end

@protocol StoryEditorPreviewViewControllerDelegate <NSObject>
-(void)storyEditorPreviewViewControllerDidFinish:(id)storyEditorPreviewViewController;
@end

@protocol StoryEditorSendViewControllerDelegate <NSObject>
-(void)storyEditorSendViewController:(id)controller sendStoryTo:(id)to;
@end

@protocol ProfileModelHelper <NSObject>
+(id)withModel:(id)model item:(id)item;
-(id)generateInfoIndex;
@end

@protocol PHPhotoLibraryChangeObserver <NSObject>
-(void)photoLibraryDidChange:(id)photoLibrary;
@end

@protocol VMRecordingSessionDelegate <VMSessionDelegate>
-(void)recordingSessionGetAwayFromEar:(id)ear;
-(void)recordingSessionGetCloseToEar:(id)ear;
-(void)recordingSessionApplicationResignActiveOrInterrupted:(id)interrupted;
@end

@protocol VKGifAVReaderDelegate <NSObject>
-(void)gifAVReader:(id)reader didFailedWithError:(id)error;
-(void)gifAVReader:(id)reader didFetchData:(id)data withProgress:(float)progress;
-(void)gifAVReader:(id)reader didFoundTotalGifBytes:(long long)bytes;
@end

@protocol VKGifAVDecoderDelegate <NSObject>
-(void)gifDecoderDidFinishDecoding:(id)gifDecoder;
-(BOOL)gifDecoder:(id)decoder didDecodeFrame:(id)frame;
@end

@protocol VKGifAVWriterDelegate <NSObject>
-(void)gifWriter:(id)writer didFinishedWithFileURL:(id)fileURL videoSize:(CGSize)size;
@end

@protocol PrivacyUsersSelectionControllerDelegate
-(void)usersSelectionControllerDidCancel:(id)usersSelectionController;
-(void)usersSelectionController:(id)controller didSelectObjects:(id)objects;
@end

@protocol VKMCollectionViewCellRenderer <NSObject>
-(id)collectionView:(id)view cellForObject:(id)object atIndexPath:(id)indexPath;
-(void)registerToCollectionView:(id)collectionView;
-(BOOL)canRenderObject:(id)object;
@end

@protocol PostBodyTextLabelBehaviorDelegate <TextKitLabelInteractiveDefaultBehaviorDelegate>
-(void)postBodyTextlabelBehavior:(id)behavior didRouteUrl:(id)url;
-(id)postIdentityForInteractiveLabelBehavior:(id)interactiveLabelBehavior;
@end

@protocol SocialButtonsDataSource <NSObject>
-(void)actionShare:(id)share;
-(void)actionComment:(id)comment;
-(void)actionLike:(id)like;
-(BOOL)shared;
-(BOOL)liked;
-(int)numberOfViews;
-(int)numberOfShares;
-(int)numberOfComments;
-(int)numberOfLikes;
-(BOOL)canShowViews;
-(BOOL)canShare;
-(BOOL)canComment;
-(BOOL)canLike;
@end

@protocol StoryEditorRenderingTask <NSObject>
@property(readonly, copy, nonatomic) NSString* localIdentifier;
@property(readonly, assign, nonatomic) NSURL* resultURL;
-(void)saveToCameraRollOnCompletion;
-(void)cancel;
-(void)onRenderingCompletion:(id)completion;
-(void)startRendering;
@end

@protocol TapContext <NSObject>
-(id)renderContext;
-(id)navDelegate;
-(id)sender;
@end

@protocol TapableComponentHandler <NSObject>
-(void)handleTapWithContext:(id)context;
@end

@protocol Component5Delegate <NSObject>
-(id)view;
@end

@protocol VKRenderedTextSettingsWriter
-(void)setMaximumSize:(CGSize)size;
-(void)setMinimumSize:(CGSize)size;
-(void)setAlignment:(int)alignment;
-(void)setMinimumNumberOfLines:(unsigned)lines;
-(void)setMaximumNumberOfLines:(unsigned)lines;
@end

@protocol VKConfigurationWriter <NSObject>
-(void)removeObjectForKey:(id)key;
-(void)setBool:(BOOL)aBool forKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
@end

@protocol VKConfigurationReader <NSObject>
-(id)dictionary;
-(BOOL)boolForKey:(id)key;
-(id)stringForKey:(id)key;
-(id)objectForKey:(id)key;
@end

@protocol AuthToken <NSObject>
@property(readonly, copy, nonatomic) NSString* token;
@property(readonly, retain, nonatomic) NSNumber* userID;
@end

@protocol SketchControllerDelegate <NSObject>
-(void)cancelSketchController:(id)controller;
-(void)sketchController:(id)controller imageReadyToSend:(id)send;
@end

@protocol MBContactPickerDelegate <MBContactCollectionViewDelegate>
@optional
-(void)contactsShouldUpdateSearchTable:(id)contacts withSearchQuery:(id)searchQuery;
-(id)contactsPickerCustomSearchController:(id)controller;
-(id)customFilterPredicate:(id)predicate;
-(void)contactPicker:(id)picker didEnterCustomText:(id)text;
-(void)didHideFilteredContactsForContactPicker:(id)contactPicker;
-(void)didShowFilteredContactsForContactPicker:(id)contactPicker;
-(void)contactPicker:(id)picker didUpdateContentHeightTo:(float)to;
@end

@protocol MBContactPickerDataSource <NSObject>
@optional
-(id)selectedContactModelsForContactPicker:(id)contactPicker;
-(id)contactModelsForContactPicker:(id)contactPicker;
@end

@protocol InlineFriendsControllerDelegate
-(void)inlineFriendsController:(id)controller didSelectFriend:(id)aFriend;
@end

@protocol PaymentsPopupViewDelegate <NSObject>
-(void)paymentViewShouldClose;
@end

@protocol StoryFullscreenViewControllerDelegate <NSObject>
-(void)storyFullscreenViewControllerDidHideCurrentStorySource:(id)storyFullscreenViewController;
-(void)storyFullscreenViewControllerDidStartPlayingCurrentStory:(id)storyFullscreenViewController;
-(void)storyFullscreenViewController:(id)controller didDeleteCurrentStory:(id)story;
-(void)storyFullscreenViewControllerDidEndShowingSendMessagePopup:(id)storyFullscreenViewController;
-(void)storyFullscreenViewControllerWillShowSendMessagePopup:(id)storyFullscreenViewController;
-(void)storyFullscreenViewControllerDidPlayCurrentStoryToEnd:(id)storyFullscreenViewController;
@end

@protocol StoryFullscreenViewControllerDataSource <NSObject>
-(id)storyFullscreenViewController:(id)controller provideVideoPlayerForVideoURL:(id)videoURL;
@end

@protocol AppItemCellWithSize <NSObject>
+(float)interitemSpace;
+(UIEdgeInsets)sectionInset;
+(CGSize)cellSize;
@end

@protocol VideoUploadTaskDelegate <NSObject>
@optional
-(id)videoUploadTaskLocalTaskTargetOwnerId:(id)anId;
-(void)videoUploadTask:(id)task totalBytesSent:(long long)sent totalBytesExpected:(long long)expected;
-(void)videoUploadTask:(id)task finishedWithResponse:(id)response;
-(void)videoUploadTask:(id)task didSuspendedWithError:(id)error;
@end

@protocol MarketCollectionsAdapter <NSObject>
-(BOOL)shouldApplyDecoration;
-(CGSize)sizeForItemAtIndexPath:(id)indexPath;
-(id)viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)referenceSizeForFooterInSection:(int)section;
-(CGSize)referenceSizeForHeaderInSection:(int)section;
-(id)itemAtIndexPath:(id)indexPath;
-(id)cellForItemAtIndexPath:(id)indexPath;
@end

@protocol MarketSizedCell <NSObject>
+(CGSize)cellSizeWithDomain:(id)domain widthConstraint:(float)constraint;
@end

@protocol ShopProductDetailContactVendorFooterDelegate <NSObject>
-(void)shopProductDetailContactVendorFooterDidTapContactVendor:(id)shopProductDetailContactVendorFooter;
@end

@protocol GroupedCollectionViewLayoutDelegate <NSObject>
@optional
-(BOOL)shouldApplyDecorationForLayout:(id)layout;
-(BOOL)shouldExtendContentSizeBySpacingForGroupedCollectionViewLayout:(id)groupedCollectionViewLayout;
-(float)intersectionSpacingForGroupedCollectionViewLayout:(id)groupedCollectionViewLayout;
@end

@protocol MarketCollectionsControllerDefaults <NSObject>
-(void)showAllButtonTappedForSection:(int)section;
-(float)defaultHeaderFooterHeight;
-(id)defaultViewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)defaultReferenceSizeForFooterInSection:(int)section;
-(id)defaultCellForItemAtIndexPath:(id)indexPath;
@end

@protocol MarketSearchBarPanelDelegate <NSObject>
-(void)marketSearchBarPanel:(id)panel searchingOptionSelected:(id)selected previousSelectedOption:(id)option;
-(void)marketSearchBarPanelCancelButtonClicked:(id)clicked;
-(void)marketSearchBarPanel:(id)panel textDidChange:(id)text;
@end

@protocol UIImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
@end

@protocol VKPPAlbumsListDelegate <NSObject>
-(void)VKAPAlbumsListDidSelectAlbumWithAssetCollection:(id)vkapalbumsList;
@end

@protocol VKPPAssetPresenter <NSObject>
-(CGAffineTransform)assetTransform;
-(void)handleAssetPresented:(BOOL)presented;
-(id)viewForPresentedAsset;
@end

@protocol IGLResource <NSObject>
-(void)unload;
@end

@protocol IGLTexture <IGLResource>
-(void)readImage:(id)image;
-(void)loadWithSize:(CGSize)size;
-(CGSize)size;
-(unsigned)texture;
@end

@protocol MRTracker <NSObject>
@property(readonly, assign, nonatomic) MRTrackerParams* params;
@property(readonly, assign, nonatomic) BOOL isInitialized;
@property(assign, nonatomic) BOOL isEnabled;
-(void)trackLevelAchievedWithLevel:(id)level eventParams:(id)params;
-(void)trackLevelAchievedWithLevel:(id)level;
-(void)trackLevelAchieved;
-(void)trackPurchaseWithProduct:(id)product transaction:(id)transaction eventParams:(id)params;
-(void)trackPurchaseWithProduct:(id)product transaction:(id)transaction;
-(void)trackRegistrationEventWithParams:(id)params;
-(void)trackRegistrationEvent;
-(void)trackInviteEventWithParams:(id)params;
-(void)trackInviteEvent;
-(void)trackLoginEventWithParams:(id)params;
-(void)trackLoginEvent;
-(void)trackEventWithName:(id)name eventParams:(id)params;
-(void)trackEventWithName:(id)name;
-(void)setup;
@end

@protocol SFSafariViewControllerDelegate <NSObject>
@optional
-(void)safariViewController:(id)controller didCompleteInitialLoad:(BOOL)load;
-(void)safariViewControllerDidFinish:(id)safariViewController;
-(id)safariViewController:(id)controller activityItemsForURL:(id)url title:(id)title;
@end

@protocol MTRGURLRequestProtocol <NSObject>
-(void)redirectRequestWithUrl:(id)url completionBlock:(id)block;
-(void)downloadRequestWithRequest:(id)request toFilePath:(id)filePath completionBlock:(id)block;
-(void)uploadRequestWithRequest:(id)request fromData:(id)data completionBlock:(id)block;
-(void)dataRequestWithRequest:(id)request completionBlock:(id)block;
@end

@protocol NSXMLParserDelegate <NSObject>
@optional
-(void)parser:(id)parser validationErrorOccurred:(id)occurred;
-(void)parser:(id)parser parseErrorOccurred:(id)occurred;
-(id)parser:(id)parser resolveExternalEntityName:(id)name systemID:(id)anId;
-(void)parser:(id)parser foundCDATA:(id)cdata;
-(void)parser:(id)parser foundComment:(id)comment;
-(void)parser:(id)parser foundProcessingInstructionWithTarget:(id)target data:(id)data;
-(void)parser:(id)parser foundIgnorableWhitespace:(id)whitespace;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndMappingPrefix:(id)prefix;
-(void)parser:(id)parser didStartMappingPrefix:(id)prefix toURI:(id)uri;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parser:(id)parser foundExternalEntityDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4;
-(void)parser:(id)parser foundInternalEntityDeclarationWithName:(id)name value:(id)value;
-(void)parser:(id)parser foundElementDeclarationWithName:(id)name model:(id)model;
-(void)parser:(id)parser foundAttributeDeclarationWithName:(id)name forElement:(id)element type:(id)type defaultValue:(id)value;
-(void)parser:(id)parser foundUnparsedEntityDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4 notationName:(id)name5;
-(void)parser:(id)parser foundNotationDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4;
-(void)parserDidEndDocument:(id)parser;
-(void)parserDidStartDocument:(id)parser;
@end

@protocol MTRGInstreamAdPlayerDelegate <NSObject>
-(void)onAdVideoComplete;
-(void)onAdVideoErrorWithReason:(id)reason;
-(void)onAdVideoStop;
-(void)onAdVideoResume;
-(void)onAdVideoPause;
-(void)onAdVideoStart;
@end

@protocol MTRGNavigationHelperDelegate <NSObject>
-(void)willLeaveApplicationWithHelper:(id)helper;
-(void)didInAppFinishedWithHelper:(id)helper;
-(void)didInAppStartedWithHelper:(id)helper;
@optional
-(void)needCloseFullscreenViewWithHelper:(id)helper needAnimation:(BOOL)animation;
-(void)didCloseFullecreenControllerWithHelper:(id)helper;
@end

@protocol MTRGInstreamAudioAdPlayerDelegate <NSObject>
-(void)onAdAudioComplete;
-(void)onAdAudioErrorWithReason:(id)reason;
-(void)onAdAudioStop;
-(void)onAdAudioResume;
-(void)onAdAudioPause;
-(void)onAdAudioStart;
@end

@protocol MTRGInstreamAdAudioEngineDelegate <NSObject>
-(void)audioAdEngineOnBannerTimeLeftChange:(double)change duration:(double)duration;
-(void)audioAdEngineOnErrorWithReason:(id)reason;
-(void)audioAdEngineOnSectionComplete;
-(void)audioAdEngineOnBannerComplete:(id)complete;
-(void)audioAdEngineOnStartWithBanner:(id)banner;
-(void)audioAdEngineOnLeaveApplication;
-(void)audioAdEngineOnDismissModal;
-(void)audioAdEngineOnShowModal;
@end

@protocol MTRGVideoViewDelegate <NSObject>
-(void)onAirPlayActiveChangedWithUrl:(id)url airPlayVideoActive:(BOOL)active videoView:(id)view;
-(void)onResumptionWithUrl:(id)url videoView:(id)view;
-(void)onSuspenseWithUrl:(id)url videoView:(id)view;
-(void)onClickWithUrl:(id)url videoView:(id)view;
-(void)onProgressWithUrl:(id)url time:(double)time duration:(double)duration videoView:(id)view;
-(void)onErrorWithUrl:(id)url error:(id)error videoView:(id)view;
-(void)onCompleteWithUrl:(id)url videoView:(id)view;
-(void)onStartWithUrl:(id)url duration:(double)duration videoView:(id)view;
@end

@protocol MTRGInstreamAdPlayer <NSObject>
@property(assign, nonatomic) float volume;
@property(readonly, assign, nonatomic) UIView* adPlayerView;
@property(assign, nonatomic) __weak id<MTRGInstreamAdPlayerDelegate> adPlayerDelegate;
@property(readonly, assign, nonatomic) double adVideoTimeElapsed;
@property(readonly, assign, nonatomic) double adVideoDuration;
-(void)stopAdVideo;
-(void)resumeAdVideo;
-(void)pauseAdVideo;
-(void)playAdVideoWithUrl:(id)url;
@end

@protocol MTRGInstreamAdVideoEngineDelegate <NSObject>
-(void)videoAdEngineOnBannerTimeLeftChange:(double)change duration:(double)duration;
-(void)videoAdEngineOnErrorWithReason:(id)reason;
-(void)videoAdEngineOnSectionComplete;
-(void)videoAdEngineOnBannerComplete:(id)complete;
-(void)videoAdEngineOnStartWithBanner:(id)banner;
-(void)videoAdEngineOnLeaveApplication;
-(void)videoAdEngineOnDismissModal;
-(void)videoAdEngineOnShowModal;
@end

@protocol IMTRGDataValue
-(BOOL)isDictionary;
-(BOOL)isArray;
-(BOOL)isString;
-(id)asDataDictionaryWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asDataArrayWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asDictionaryWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asArrayWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asStringWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asDataDictionary;
-(id)asDataArray;
-(id)asDictionary;
-(BOOL)asBoolWithDefValue:(BOOL)defValue;
-(id)asBoolean;
-(id)asNumber;
-(id)asArray;
-(id)asString;
@end

@protocol IMTRGDataArray
-(id)items;
-(void)enumerateWithBlock:(id)block;
-(unsigned)count;
@end

@protocol IMTRGDataDictionary
-(void)enumerateWithBlock:(id)block;
-(id)dataDictionaryValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)dataArrayValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)arrayValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)dictionaryValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)numberValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)stringValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)asDictionary;
-(BOOL)checkDataDictionaryValueForKey:(id)key dataDictValue:(id*)value;
-(BOOL)checkDataArrayValueForKey:(id)key dataArrayValue:(id*)value;
-(BOOL)checkArrayValueForKey:(id)key arrayValue:(id*)value;
-(BOOL)checkDictionaryValueForKey:(id)key dictValue:(id*)value;
-(BOOL)checkNumberValueForKey:(id)key numberValue:(id*)value;
-(BOOL)checkStringValueForKey:(id)key strValue:(id*)value;
-(id)dataDictArrayForKey:(id)key;
-(id)dataDictionaryValueForKey:(id)key;
-(id)dataArrayValueForKey:(id)key;
-(id)arrayValueForKey:(id)key;
-(id)dictionaryValueForKey:(id)key;
-(double)doubleValueForKey:(id)key defValue:(double)value;
-(BOOL)boolValueForKey:(id)key defValue:(BOOL)value;
-(id)booleanValueForKey:(id)key;
-(id)numberValueForKey:(id)key;
-(id)stringValueForKey:(id)key;
@end

@protocol __ARCLiteIndexedSubscripting__
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

@protocol __ARCLiteKeyedSubscripting__
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
@end

__attribute__((visibility("hidden")))
@interface MBContactModel : XXUnknownSuperclass <MBContactPickerModelProtocol> {
	NSString* _name;
	NSString* _subtitle;
	UIImage* _contactImage;
	float _renderWidth;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float renderWidth;
@property(retain, nonatomic) UIImage* contactImage;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* name;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKPlayersPool : XXUnknownSuperclass {
	NSDictionary* _playersPool;
	int _playersMade;
	int _playersReused;
}
+(id)dispatchQueueForState;
+(id)instance;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarning;
-(void)reusePlayer:(id)player withType:(int)type;
-(id)playerWithType:(int)type;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKAVVideoPlayerView : XXUnknownSuperclass {
	BOOL _looped;
	BOOL _pausedByParent;
	BOOL _isDisplaying;
	AVPlayerLayer* _playerLayer;
	int _outputType;
	id<VKVideoPlayerViewDelegate> _delegate;
	int _state;
	AVPlayer* _player;
	NSObject<OS_dispatch_queue>* _stateQueue;
	AVPlayerItem* _currentItem;
	AVAsset* _loadingAsset;
	id _playerPeriodicObserver;
	NSURL* _currentURL;
}
@property(assign, nonatomic) BOOL looped;
@property(assign, nonatomic) __weak id<VKVideoPlayerViewDelegate> delegate;
@property(readonly, assign, nonatomic) int outputType;
@property(readonly, assign, nonatomic) AVPlayerLayer* playerLayer;
@property(assign, nonatomic) BOOL isDisplaying;
@property(assign, nonatomic) BOOL pausedByParent;
@property(copy) NSURL* currentURL;
@property(retain, nonatomic) AVPlayer* player;
@property(retain, nonatomic) id playerPeriodicObserver;
@property(retain, nonatomic) AVAsset* loadingAsset;
@property(retain, nonatomic) AVPlayerItem* currentItem;
@property(assign, nonatomic) int state;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* stateQueue;
-(void).cxx_destruct;
-(BOOL)isFailed;
-(BOOL)isReadyForDisplay;
-(void)playerItemDidReachEnd:(id)playerItem;
-(void)preroll;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)unregisterForKVOWithItem:(id)item;
-(void)registerForKVOWithItem:(id)item;
-(void)playerReady:(id)ready;
-(void)__displayPlayerIfNeeded:(id)needed;
-(void)displayPlayerIfNeeded:(id)needed;
-(void)replaceURL:(id)url;
-(id)autoloadedKeys;
-(void)togglePlay;
-(void)dropPlayer;
-(void)drop;
-(BOOL)empty;
-(id)videoGravity;
-(void)setVideoGravity:(id)gravity;
-(BOOL)isPlaying;
-(void)stop;
-(void)play;
-(void)reuse;
-(void)registerTimeObserverIfNeeded;
-(void)layoutSublayersOfLayer:(id)layer;
-(void)onMainQueue:(id)queue;
-(void)onQueue:(id)queue;
-(id)initWithFrame:(CGRect)frame type:(int)type;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VMInteroperabilityManager : XXUnknownSuperclass {
	BOOL _musicPlayerWasPlayingBefore;
	VKAudioQueuePlayer* _musicPlayer;
}
@property(assign, nonatomic) BOOL musicPlayerWasPlayingBefore;
@property(retain, nonatomic) VKAudioQueuePlayer* musicPlayer;
-(void).cxx_destruct;
-(void)resumeExternal;
-(void)pauseExternal;
-(id)initWithMusicPlayer:(id)musicPlayer;
@end

__attribute__((visibility("hidden")))
@interface AppDelegate : XXUnknownSuperclass <UIApplicationDelegate, MainControllerDelegate> {
	int applicationPushNotifications;
	UIWindow* _mainWindow;
	VKMMainController* _main;
	NSData* _apnsToken;
	VKCountersUpdater* _counter;
	NSURL* _pendingURL;
	NSString* _pendingBundle;
	LandingPageController* _landing;
}
@property(retain, nonatomic) UIWindow* window;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKMMainController* main;
@property(retain, nonatomic) UIWindow* mainWindow;
@property(retain, nonatomic) LandingPageController* landing;
@property(retain, nonatomic) NSString* pendingBundle;
@property(retain, nonatomic) NSURL* pendingURL;
@property(retain, nonatomic) VKCountersUpdater* counter;
@property(retain, nonatomic) NSData* apnsToken;
-(void).cxx_destruct;
-(void)mainControllerLogout;
-(void)login:(id)login startup:(BOOL)startup;
-(BOOL)interceptURL:(id)url;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification completionHandler:(id)handler;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didRegisterUserNotificationSettings:(id)settings;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)handlePendingURL;
-(void)application:(id)application performActionForShortcutItem:(id)shortcutItem completionHandler:(id)handler;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface VideoQualitySelector : XXUnknownSuperclass {
	NSMutableArray* _options;
}
@property(retain, nonatomic) NSMutableArray* options;
-(void).cxx_destruct;
-(int)selectedQuality;
-(void)renderVideo:(id)video quality:(int)quality;
@end

__attribute__((visibility("hidden")))
@interface ExternalAdsStatsManager : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* processingQueue;
	int pendingRequests;
	NSString* _userAgentString;
	NSOperationQueue* _operationQueue;
	NSMutableSet* _onceIds;
}
@property(retain, nonatomic) NSString* userAgentString;
@property(retain, nonatomic) NSMutableSet* onceIds;
@property(retain) NSOperationQueue* operationQueue;
-(void).cxx_destruct;
-(void)registerAdData:(id)data event:(int)event;
-(BOOL)registerAdsAuto:(id)auto event:(int)event;
-(BOOL)registerAdsOnce:(id)once event:(int)event;
-(BOOL)registerAds:(id)ads event:(int)event once:(BOOL)once;
-(void)registerStats:(id)stats;
-(void)processUrl:(id)url;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKClient : AFHTTPClient {
	BOOL tokenInvalidated;
	id<VKClientDelegate> _delegate;
@private
	NSString* _token;
@protected
	NSMutableArray* _pending;
	NSMutableDictionary* _queuesPool;
}
@property(assign, nonatomic) __weak id<VKClientDelegate> delegate;
@property(readonly, retain, nonatomic) NSMutableDictionary* queuesPool;
@property(readonly, retain, nonatomic) NSMutableArray* pending;
@property(retain, nonatomic) NSString* token;
+(id)loginClient;
+(id)sessionClient:(id)client;
-(void).cxx_destruct;
-(BOOL)isBusyQueue:(id)queue;
-(id)process:(id)process key:(id)key;
-(void)processWithoutThrottle:(id)throttle onOperationCreated:(id)created;
-(id)process:(id)process;
-(id)process:(id)process queue:(id)queue;
-(void)handleNonPending:(id)pending;
-(void)handlePending:(id)pending queue:(id)queue;
-(void)processAllPending:(BOOL)pending queue:(id)queue;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)updateToken:(id)token;
-(void)dealloc;
-(id)initWithBaseURL:(id)baseURL;
@end

__attribute__((visibility("hidden")))
@interface VKAPI : XXUnknownSuperclass {
}
+(id)requestForSearchMessages:(id)searchMessages offset:(int)offset count:(int)count owner:(id)owner success:(id)success failure:(id)failure;
+(id)requestForSearchDialogs:(id)searchDialogs success:(id)success failure:(id)failure;
+(id)requestForTypingInDialog:(id)dialog success:(id)success failure:(id)failure;
+(id)requestForUploadToServer:(id)server data:(id)data fieldName:(id)name fileName:(id)name4 additionalParameters:(id)parameters;
+(id)requestForUploadToServer:(id)server data:(id)data fieldName:(id)name fileName:(id)name4;
+(id)requestForMessagesWithMID:(id)mid success:(id)success failure:(id)failure;
+(id)requestForMessagesInDialog:(id)dialog offset:(int)offset count:(int)count startMID:(int)mid success:(id)success failure:(id)failure;
+(id)requestForChatWithDialogId:(id)dialogId success:(id)success failure:(id)failure;
+(id)requestForHistoryWithDid:(id)requestForHistoryWith count:(int)count offset:(int)offset startMID:(int)mid;
+(id)addDialogId:(id)anId toParameters:(id)parameters;
+(id)requestForDialogsExtWithOffset:(int)offset count:(int)count startMID:(int)mid success:(id)success failure:(id)failure;
+(id)requestForOwners:(id)owners success:(id)success failure:(id)failure;
+(id)requiredFieldsForMessages;
+(id)requiredGroupFields;
+(id)didFromLPS:(id)lps;
+(BOOL)isSingleUserLPS:(id)lps;
+(id)pointCoordinatesFromGeoData:(id)geoData;
+(id)validMultiDialogData:(id)data;
+(id)validMessageData:(id)data;
+(id)validDialogData:(id)data;
+(id)validGroupData:(id)data;
+(id)validUserData:(id)data;
+(id)midFromMessageData:(id)messageData;
+(BOOL)isRead:(id)read;
+(id)expectOKSuccess:(id)success failure:(id)failure;
+(BOOL)is1Response:(id)response;
+(id)expectDictionarySuccess:(id)success failure:(id)failure;
+(id)expectArrayWithCountSuccess:(id)countSuccess failure:(id)failure;
+(id)expectArraySuccess:(id)success failure:(id)failure;
+(void)setUpAPIRequest:(id)request caching:(BOOL)caching;
+(id)authURL;
+(id)apiURL;
+(void)setup;
@end

__attribute__((visibility("hidden")))
@interface VKSession : XXUnknownSuperclass <StatsManagerDelegate> {
	BOOL _pendingIntroAfterSignup;
	BOOL _stickersGlobalPromotion;
	NSString* _token;
	NSNumber* _userId;
	NSString* _APNSToken;
	NSURL* _userDataDirectoryURL;
	VKPushSettings* _pushSettings;
	VKMStore* _store;
	VKClient* _client;
	VKStats* _stats;
	VKGroupState* _groups;
	NotificationsManager* _notifications;
	VKConnectivityState* _connectivity;
	ActivityModel* _weakActivity;
	VKDB* _db;
	VKOnlineStore* _online;
	CommonStatsManager* _statsManager;
	AdsStatsManager* _adsStatsManager;
	ExternalAdsStatsManager* _externalAdsStatsManager;
	ViewPostStatsManager* _viewPostStatsManager;
	StoreStockManager* _storeStockManager;
	StickersRecentModel* _stickersRecentModel;
	VideoUploadManager* _videoUploadManager;
	id _pendingProfileAsset;
	NSString* _pendingFacebookToken;
	int _lastKnownMainNewsfeedModelMode;
	int _forcedMainNewsfeedModelMode;
	int _stickersStoreNewItems;
	NSString* _stickersVersionHash;
	int _pendingAuthEventType;
	NSArray* _domains;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int pendingAuthEventType;
@property(retain, nonatomic) NSString* stickersVersionHash;
@property(assign, nonatomic) int stickersStoreNewItems;
@property(assign, nonatomic) BOOL stickersGlobalPromotion;
@property(assign, nonatomic) int forcedMainNewsfeedModelMode;
@property(assign, nonatomic) int lastKnownMainNewsfeedModelMode;
@property(assign, nonatomic) BOOL pendingIntroAfterSignup;
@property(retain, nonatomic) NSString* pendingFacebookToken;
@property(retain, nonatomic) id pendingProfileAsset;
@property(readonly, retain, nonatomic) VideoUploadManager* videoUploadManager;
@property(readonly, retain, nonatomic) StickersRecentModel* stickersRecentModel;
@property(readonly, retain, nonatomic) StoreStockManager* storeStockManager;
@property(readonly, retain, nonatomic) ViewPostStatsManager* viewPostStatsManager;
@property(readonly, retain, nonatomic) ExternalAdsStatsManager* externalAdsStatsManager;
@property(readonly, retain, nonatomic) AdsStatsManager* adsStatsManager;
@property(readonly, retain, nonatomic) CommonStatsManager* statsManager;
@property(readonly, retain, nonatomic) VKOnlineStore* online;
@property(readonly, retain, nonatomic) VKDB* db;
@property(assign, nonatomic) ActivityModel* weakActivity;
@property(readonly, retain, nonatomic) VKConnectivityState* connectivity;
@property(readonly, retain, nonatomic) NotificationsManager* notifications;
@property(readonly, retain, nonatomic) VKGroupState* groups;
@property(readonly, retain, nonatomic) VKStats* stats;
@property(readonly, retain, nonatomic) VKClient* client;
@property(readonly, retain, nonatomic) VKMStore* store;
@property(readonly, retain, nonatomic) NSURL* userDataDirectoryURL;
@property(retain, nonatomic) NSString* APNSToken;
@property(readonly, copy, nonatomic) NSNumber* userId;
@property(copy, nonatomic) NSString* token;
@property(retain, nonatomic) VKPushSettings* pushSettings;
@property(readonly, retain, nonatomic) NSArray* domains;
+(id)storedSession;
+(void)store:(id)store;
+(id)sessionWithUserId:(id)userId andToken:(id)token;
+(BOOL)open:(id)open;
-(void).cxx_destruct;
-(void)statsManager:(id)manager didRegisterEvent:(id)event;
-(void)setSessionUser:(id)user;
-(void)trackAuthEventForUser:(id)user withType:(int)type;
-(void)changePushSettings:(id)settings;
-(void)updateToken:(id)token;
-(id)actionDomainForType:(int)type;
-(int)adminLevelFor:(id)aFor;
-(BOOL)isAdminFor:(id)aFor;
-(BOOL)isOwner:(id)owner;
-(void)dealloc;
-(id)initWithUserId:(id)userId andToken:(id)token;
-(BOOL)routeFeedAds:(id)ads;
-(BOOL)routeFeedAds:(id)ads item:(id)item;
-(BOOL)routeFeedAds:(id)ads item:(id)item card:(id)card;
-(BOOL)routeToActivity:(id)activity context:(int)context;
-(BOOL)routeToRequest:(id)request context:(int)context;
-(BOOL)routeToApp:(id)app url:(id)url source:(id)source context:(int)context;
-(BOOL)routeToAppId:(id)appId platfromId:(id)anId installed:(BOOL)installed installUrl:(id)url url:(id)url5 source:(id)source requestName:(id)name context:(int)context;
-(void)openAppStoreForProductId:(id)productId source:(id)source;
-(BOOL)routeSnapper:(id)snapper;
@end

__attribute__((visibility("hidden")))
@interface CommentSourceSelfCell : CommentSourceCellBase {
	UIImageView* _image;
	UILabel* _titleLabel;
}
@property(readonly, retain, nonatomic) UILabel* titleLabel;
@property(readonly, retain, nonatomic) UIImageView* image;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutSubviews;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ForcedSeparatorCell : XXUnknownSuperclass {
	UIEdgeInsets _forcedSeparatorInsets;
}
@property(assign, nonatomic) UIEdgeInsets forcedSeparatorInsets;
-(CGRect)_topSeparatorFrame;
-(CGRect)_separatorFrame;
@end

__attribute__((visibility("hidden")))
@interface ProfilePhotoAndNameCell : ForcedSeparatorCell <UITableViewDataSource, UITableViewDelegate> {
	UIControl* _photoControl;
	UITextField* _firstNameField;
	UITextField* _lastNameField;
	VKMImageView* _photoImageView;
	UIButton* _photoButton;
	UITableView* _tableView;
	NSArray* _cells;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* cells;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UITextField* lastNameField;
@property(retain, nonatomic) UITextField* firstNameField;
@property(retain, nonatomic) UIControl* photoControl;
@property(retain, nonatomic) UIButton* photoButton;
@property(retain, nonatomic) VKMImageView* photoImageView;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)actionPhoto:(id)photo;
-(void)renderPhotoURL:(id)url;
-(void)renderPhotoAsset:(id)asset;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface CoreDataFacade : XXUnknownSuperclass {
	NSManagedObjectModel* _model;
	NSPersistentStoreCoordinator* _coordinator;
}
@property(readonly, retain, nonatomic) NSPersistentStoreCoordinator* coordinator;
@property(readonly, retain, nonatomic) NSManagedObjectModel* model;
-(void).cxx_destruct;
-(id)createContext;
-(id)initWithModelFile:(id)modelFile andStoreURL:(id)url setNoBackup:(BOOL)backup;
@end

__attribute__((visibility("hidden")))
@interface FBBasicAuthRequest : XXUnknownSuperclass <FBAuthRequest> {
	NSString* _appId;
	NSArray* _permissions;
	NSString* _apiVersion;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* apiVersion;
@property(retain, nonatomic) NSArray* permissions;
@property(retain, nonatomic) NSString* appId;
+(id)requestWithAppId:(id)appId permissions:(id)permissions apiVersion:(id)version;
+(id)requestWithAppId:(id)appId permissions:(id)permissions;
-(void).cxx_destruct;
-(id)authParameters;
@end

__attribute__((visibility("hidden")))
@interface FBAuthResponse : XXUnknownSuperclass {
	NSString* _token;
	NSArray* _permissions;
}
@property(retain, nonatomic) NSArray* permissions;
@property(retain, nonatomic) NSString* token;
+(id)responseWithCallbackURL:(id)callbackURL error:(id*)error;
+(id)responseWithToken:(id)token permissions:(id)permissions;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface FBSystemAuthStrategy : XXUnknownSuperclass <FBAuthStrategy> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)attemptAuth:(id)auth handler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface FBURLInteropAuthStrategy : XXUnknownSuperclass <FBAuthStrategy> {
	id<URLInteropHandler> _interopHandler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) id<URLInteropHandler> interopHandler;
-(void).cxx_destruct;
-(id)targetURLForRequest:(id)request;
-(void)attemptAuth:(id)auth handler:(id)handler;
-(id)initWithInteropHandler:(id)interopHandler;
@end

__attribute__((visibility("hidden")))
@interface FBNativeAppAuthStrategy : FBURLInteropAuthStrategy {
}
-(id)targetURLForRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface FBSafariAuthStrategy : FBURLInteropAuthStrategy {
}
-(id)targetURLForRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface FacebookFacade : XXUnknownSuperclass {
}
+(void)requestAuthorization:(id)authorization handler:(id)handler;
+(id)sharedInteropHandler;
@end

__attribute__((visibility("hidden")))
@interface FileUtils : XXUnknownSuperclass {
}
+(id)generateRandomTemporaryDirectoryFilePathForURL:(id)url;
+(BOOL)removeItemAtPathIfExists:(id)pathIfExists;
+(long long)sizeOfFileAtURL:(id)url;
+(BOOL)ensureDirectoryPath:(id)path attributes:(id)attributes;
+(BOOL)addSkipBackupAttributeToItemAtURL:(id)url;
+(id)pathToUserDirectory:(unsigned)userDirectory;
@end

__attribute__((visibility("hidden")))
@interface VKMStore : XXUnknownSuperclass {
	NSNumber* _uid;
	VKMFetchContext* _fetch;
	VKMUpdateContext* _update;
	CoreDataFacade* _coreDataFacade;
}
@property(retain, nonatomic) VKMUpdateContext* update;
@property(retain, nonatomic) VKMFetchContext* fetch;
@property(retain, nonatomic) NSNumber* uid;
@property(retain, nonatomic) CoreDataFacade* coreDataFacade;
-(void)dealloc;
-(id)initWithUID:(id)uid fileUrl:(id)url;
@end

__attribute__((visibility("hidden")))
@interface ViewPostEvent : XXUnknownSuperclass <StatsEvent> {
	NSString* _postId;
	StatsRef* _ref;
	NSString* _track_code;
	double _duration;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) NSString* track_code;
@property(readonly, copy, nonatomic) StatsRef* ref;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, copy, nonatomic) NSString* postId;
+(id)post:(id)post duration:(double)duration ref:(id)ref;
+(id)postId:(id)anId duration:(double)duration ref:(id)ref trackCode:(id)code;
-(void).cxx_destruct;
-(id)initWithPostId:(id)postId duration:(double)duration ref:(id)ref trackCode:(id)code;
@end

__attribute__((visibility("hidden")))
@interface ViewPostStatsData : XXUnknownSuperclass <StatsData> {
	NSMutableArray* _events;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableArray* events;
-(void).cxx_destruct;
-(id)request;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)hasEvents;
-(id)JSONRepresentation;
-(void)viewPostWithId:(id)anId duration:(double)duration ref:(id)ref trackCode:(id)code;
-(void)viewPost:(id)post duration:(double)duration ref:(id)ref;
-(void)registerEvent:(id)event batch:(BOOL)batch;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ViewPostStatsManager : StatsManager {
}
-(void)viewPost:(id)post duration:(double)duration ref:(id)ref;
-(void)viewPostId:(id)anId duration:(double)duration ref:(id)ref trackCode:(id)code;
@end

__attribute__((visibility("hidden")))
@interface AudioAudiosBlockTableCell : AudioCell {
}
@property(retain, nonatomic) VKAudio* domain;
+(float)height;
+(float)coverSide;
-(void)togglePlayPause:(id)pause;
-(void)update;
-(void)actionAccessoryButton:(id)button;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface CommentPostSourceModel : ListModel {
}
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(BOOL)shouldLoad:(id)load;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMStoreContext : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* queue;
	NSNumber* _owner;
	NSManagedObjectContext* _context;
	NSEntityDescription* _user;
	NSEntityDescription* _dialog;
	NSEntityDescription* _message;
}
@property(retain, nonatomic) NSEntityDescription* message;
@property(retain, nonatomic) NSEntityDescription* dialog;
@property(retain, nonatomic) NSEntityDescription* user;
@property(retain, nonatomic) NSManagedObjectContext* context;
@property(readonly, copy, nonatomic) NSNumber* owner;
-(void).cxx_destruct;
-(void)merge:(id)merge;
-(void)fetchTest;
-(void)updateTest;
-(id)userWithUID:(id)uid;
-(id)lookupMessages:(id)messages;
-(id)getHeadForDialog:(id)dialog;
-(id)getMessageWithMID:(id)mid inDialog:(id)dialog;
-(id)listMessagesNotDeletedInDialog:(id)dialog after:(id)after;
-(id)listMessagesWithPredicate:(id)predicate;
-(id)listUnreadMessagesWithPeerId:(id)peerId untilMid:(id)mid incoming:(BOOL)incoming;
-(id)listMessagesWithMIDs:(id)mids;
-(id)requestMessagesPrefetching;
-(id)requestMessages;
-(id)lookupDialogsWithPredicate:(id)predicate;
-(id)lookupDialogs:(id)dialogs;
-(id)listDialogsWithDialogIds:(id)dialogIds;
-(id)requestDialogsPrefetching;
-(id)requestDialogs;
-(id)lookupUsersByUIDs:(id)uids;
-(id)requestUsers;
-(id)createDialogWithId:(id)anId senderUID:(id)uid messageData:(id)data;
-(id)createDialogWithSenderUID:(id)senderUID dialogData:(id)data;
-(id)createMessageWithData:(id)data preview:(BOOL)preview notNilSenderUID:(id)uid notNilDialog:(id)dialog;
-(id)createUserWithUID:(id)uid;
-(id)fetch:(id)fetch properties:(id)properties;
-(id)fetch:(id)fetch;
-(BOOL)save;
-(void)exec:(id)exec complete:(id)complete;
-(void)useContext:(id)context;
-(id)initWithQueue:(id)queue owner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface DeleteAreaView : XXUnknownSuperclass {
	UIImageView* _backgroundImageView;
	UIImageView* _iconImageView;
	UIColor* _colorDefaultState;
	UIImage* _iconDefaultState;
	UIColor* _colorActiveState;
	UIImage* _iconActiveState;
}
@property(retain, nonatomic) UIImage* iconActiveState;
@property(retain, nonatomic) UIColor* colorActiveState;
@property(retain, nonatomic) UIImage* iconDefaultState;
@property(retain, nonatomic) UIColor* colorDefaultState;
@property(retain, nonatomic) UIImageView* iconImageView;
@property(retain, nonatomic) UIImageView* backgroundImageView;
-(void).cxx_destruct;
-(void)setActive:(BOOL)active animated:(BOOL)animated;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorDraggableAttachmentsContainerView : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	BOOL _deleteAttachmentOnRelease;
	id<StoryEditorDraggableAttachmentsContainerViewDelegate> _delegate;
	UIRotationGestureRecognizer* _rotationGesture;
	UIPinchGestureRecognizer* _pinchGesture;
	UIPanGestureRecognizer* _panGesture;
	UIView* _attachmentsContainer;
	NSMutableArray* _attachments;
	id<DraggableAttachment> _currentDraggableAttachment;
	DeleteAreaView* _deleteAreaView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<StoryEditorDraggableAttachmentsContainerViewDelegate> delegate;
@property(assign, nonatomic) BOOL deleteAttachmentOnRelease;
@property(retain, nonatomic) DeleteAreaView* deleteAreaView;
@property(retain, nonatomic) id<DraggableAttachment> currentDraggableAttachment;
@property(retain, nonatomic) NSMutableArray* attachments;
@property(retain, nonatomic) UIView* attachmentsContainer;
@property(retain, nonatomic) UIPanGestureRecognizer* panGesture;
@property(retain, nonatomic) UIPinchGestureRecognizer* pinchGesture;
@property(retain, nonatomic) UIRotationGestureRecognizer* rotationGesture;
-(void).cxx_destruct;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleRotationGestureChange:(id)change;
-(void)handlePinchGestureChange:(id)change;
-(void)handlePanGestureChange:(id)change;
-(void)actionGesture:(id)gesture;
-(void)setDeleteAreaActive:(BOOL)active animated:(BOOL)animated;
-(void)updateDeleteAreaStateForLocation:(CGPoint)location;
-(void)setDeleteAreaHidden:(BOOL)hidden animated:(BOOL)animated animationDelay:(double)delay completion:(id)completion;
-(void)setCurrentDraggableAttachmentToNilIfNoGesturesRunning;
-(void)drawAttachmentsLayerInRect:(CGRect)rect;
-(id)attachmentsCopy;
-(void)removeDraggableAttachment:(id)attachment;
-(void)addDraggableAttachment:(id)attachment;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorDraggableImageView : XXUnknownSuperclass <DraggableAttachment> {
	float _zoomScale;
	float _rotation;
	id _userInfo;
	float _minZoomScale;
	float _maxZoomScale;
}
@property(assign, nonatomic) float rotation;
@property(assign, nonatomic) float zoomScale;
@property(readonly, assign, nonatomic) BOOL horizontalPanAllowed;
@property(readonly, assign, nonatomic) BOOL verticalPanAllowed;
@property(readonly, assign, nonatomic) BOOL pannable;
@property(readonly, assign, nonatomic) BOOL rotatable;
@property(readonly, assign, nonatomic) BOOL zoomable;
@property(readonly, assign, nonatomic) UIView* view;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float maxZoomScale;
@property(assign, nonatomic) float minZoomScale;
@property(retain, nonatomic) id userInfo;
-(void).cxx_destruct;
-(id)initWithImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface AudioImageAndTitleItemCollectionCell : VKMCollectionCell <AudioBlockCellWithCollectionViewItemCell> {
	VKMImageView* _imageView;
	UILabel* _titleLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) VKMImageView* imageView;
+(CGSize)cellSize;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKAudioGroup : VKGroup <AudioOwnerProtocol> {
	NSString* _photo_200;
}
@property(readonly, assign, nonatomic) BOOL verified;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) int deactivated;
@property(readonly, assign, nonatomic) int sex;
@property(readonly, retain, nonatomic) NSString* photo;
@property(readonly, retain, nonatomic) NSString* name;
@property(readonly, retain, nonatomic) NSNumber* source_id;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* photo_200;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogController : VKMLiveController {
}
@property(retain, nonatomic) AudioCatalogModel* model;
-(int)VKMLiveAudioContext;
-(id)VKMControllerStatsRef;
-(void)model:(id)model updated:(id)updated;
-(void)actionSearch:(id)search;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface GraffitiHistoryItem : VKDomainDerived {
}
@property(retain, nonatomic) VKDoc* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKRequestValue : XXUnknownSuperclass <VKRequestValue> {
	id _value;
	int _type;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) id value;
+(id)array:(id)array;
+(id)expression:(id)expression;
+(id)string:(id)string;
+(id)boolean:(BOOL)boolean;
+(id)number:(id)number;
+(id)value:(id)value type:(int)type;
-(void).cxx_destruct;
-(id)code;
-(id)initWithValue:(id)value type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface VKRequestArgsBuilder : XXUnknownSuperclass {
	NSMutableDictionary* _args;
}
@property(retain, nonatomic) NSMutableDictionary* args;
+(id)builder;
+(id)builder:(id)builder;
-(void).cxx_destruct;
-(id)build;
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(id)initWithArgs:(id)args;
@end

__attribute__((visibility("hidden")))
@interface VKExecuteCodeProvider : XXUnknownSuperclass {
	NSCache* _cache;
}
@property(retain, nonatomic) NSCache* cache;
+(id)provider;
-(void).cxx_destruct;
-(id)executeNamed:(id)named;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKRequest : XXUnknownSuperclass {
	NSString* _method;
	NSDictionary* _parameters;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSDictionary* parameters;
@property(retain, nonatomic) NSString* method;
+(id)executeNamed:(id)named args:(id)args;
+(id)executeNamed:(id)named argsDict:(id)dict;
+(id)executeCode:(id)code singleResult:(id)result;
+(id)executeCode:(id)code result:(id)result args:(id)args;
+(id)executeCode:(id)code result:(id)result;
+(id)execute:(id)execute args:(id)args success:(id)success failure:(id)failure;
+(id)execute:(id)execute args:(id)args handler:(id)handler;
+(id)execute:(id)execute args:(id)args;
+(id)execute:(id)execute;
+(id)executeParams:(id)params args:(id)args;
+(id)method:(id)method parameters:(id)parameters success:(id)success failure:(id)failure;
+(id)method:(id)method parameters:(id)parameters;
+(id)method:(id)method parameters:(id)parameters handler:(id)handler;
+(id)requestWithIdentifiers:(id)identifiers serviceType:(int)type params:(id)params;
+(id)requestWithIdentifiers:(id)identifiers serviceType:(int)type myIdentifier:(id)identifier params:(id)params;
+(id)lookupFriendsRequestFields;
+(id)countriesRequestWithCount:(unsigned)count needAll:(BOOL)all;
+(id)allCountriesRequest;
+(id)commonCountriesRequest;
+(id)searchPeopleRequestWithFilters:(id)filters parameters:(id)parameters;
+(id)searchPeopleRequestFields;
+(id)nearbyRequestWithParams:(id)params fields:(id)fields;
-(void).cxx_destruct;
-(id)buildCode;
-(id)failure:(id)failure success:(id)success;
-(id)success:(id)success failure:(id)failure;
-(id)handler:(id)handler;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsLinksController : VKMLiveController {
}
-(float)VKMTableCellSeparatorInsetForIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface BlocksAlertView : XXUnknownSuperclass <ActionDialogProvider, UIAlertViewDelegate> {
	NSMutableArray* _blocks;
	id _dismiss;
	id _cancel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id cancel;
@property(copy, nonatomic) id dismiss;
+(id)title:(id)title message:(id)message cancel:(id)cancel block:(id)block;
+(id)showAlertViewWithTitle:(id)title message:(id)message style:(int)style cancelButtonTitle:(id)title4 otherButtonTitles:(id)titles dismiss:(id)dismiss cancel:(id)cancel;
+(id)showAlertViewWithTitle:(id)title message:(id)message cancelButtonTitle:(id)title3 otherButtonTitles:(id)titles dismiss:(id)dismiss cancel:(id)cancel;
-(void).cxx_destruct;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)showInViewController:(id)viewController;
-(id)dialogTextFieldAtIndex:(int)index;
-(void)addTextFieldWithPlaceholder:(id)placeholder text:(id)text secured:(BOOL)secured;
-(void)addButtonWithTitle:(id)title block:(id)block preferred:(BOOL)preferred;
-(void)addButtonWithTitle:(id)title block:(id)block;
-(void)setDestructiveButtonWithTitle:(id)title block:(id)block;
-(void)setCancelButtonWithTitle:(id)title block:(id)block;
-(id)initWithTitle:(id)title message:(id)message;
-(id)initWithTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface VKNumberFormatter : XXUnknownSuperclass {
	BOOL _groupingEnabled;
	BOOL _shortenThousands;
	BOOL _displaysZero;
	NSNumberFormatter* _numberFormatter;
}
@property(assign, nonatomic) BOOL displaysZero;
@property(assign, nonatomic) BOOL shortenThousands;
@property(assign, nonatomic) BOOL groupingEnabled;
@property(retain, nonatomic) NSNumberFormatter* numberFormatter;
+(id)prettyFormatter;
-(void).cxx_destruct;
-(id)attributedStringFromNumber:(id)number numberAttributes:(id)attributes withSuffixKey:(id)suffixKey suffixAttributes:(id)attributes4;
-(id)suffixForNumber:(id)number key:(id)key;
-(id)stringFromNumber:(id)number withSuffixKey:(id)suffixKey;
-(id)stringFromNumber:(id)number;
-(id)stringForObjectValue:(id)objectValue;
-(id)attributedStringForObjectValue:(id)objectValue withDefaultAttributes:(id)defaultAttributes;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StringUtil : XXUnknownSuperclass {
}
+(id)votesCount:(unsigned)count format:(id)format;
+(id)urlHost:(id)host;
+(id)hexString:(id)string;
+(BOOL)isEmptyText:(id)text;
+(id)preview:(id)preview words:(int)words marker:(id)marker;
+(id)translit:(id)translit toRu:(BOOL)ru;
+(id)coordinatesLat:(double)lat long:(double)aLong;
+(id)parametersFromURL:(id)url;
+(id)parametersFromQueryString:(id)queryString;
+(BOOL)isRichBody:(id)body;
+(id)stringByReplacingNewlinesWithSpaces:(id)spaces;
+(id)strippedBodyString:(id)string;
+(id)strippedSearchString:(id)string;
+(id)resultStringFor:(int)aFor;
+(id)resultStringFor:(int)aFor inDomain:(int)domain;
+(id)stringForNumberOfUsers:(int)users total:(int)total;
+(id)birthdayToday:(BOOL)today;
+(id)university:(id)university withGraduation:(int)graduation;
+(id)commentsLast:(int)last of:(int)of;
+(id)formattedPhoneNumber:(id)number;
+(id)formatDurationStyleFull:(int)full;
+(id)formatDuration:(int)duration withSameAmountOfCharsAsInDuration:(int)duration2;
+(id)formatDuration:(int)duration;
+(id)withShortName:(id)shortName key:(id)key;
+(id)fullNameWithFirstName:(id)firstName andLastName:(id)name andNickname:(id)nickname;
+(id)shortNameWithFirstName:(id)firstName andLastName:(id)name;
+(id)fullNameWithFirstName:(id)firstName andLastName:(id)name;
+(id)formatGroupedCount:(unsigned)count hideZero:(BOOL)zero;
+(id)groupedNumberFormatter;
+(id)formatNumberNoZero:(unsigned)zero;
+(id)formatNumber:(unsigned)number;
+(unsigned)roundedNumber:(unsigned)number;
+(void)testAll;
+(void)test:(id)test;
+(id)kind:(int)kind key:(id)key;
+(id)count:(unsigned)count format:(id)format;
+(id)countAcc:(id)acc;
+(id)counted:(unsigned)counted key:(id)key zeroCounted:(BOOL)counted3;
+(id)counted:(unsigned)counted key:(id)key;
+(id)count:(unsigned)count key:(id)key groped:(BOOL)groped;
+(id)count:(unsigned)count key:(id)key pretty:(BOOL)pretty;
+(id)count:(unsigned)count key:(id)key;
@end

__attribute__((visibility("hidden")))
@interface BadgeNumberFormatter : XXUnknownSuperclass {
}
-(id)stringFromNumber:(id)number;
@end

__attribute__((visibility("hidden")))
@interface VKAudioPlaylistAlbum : VKDomain {
	NSString* _title;
	VKAudioThumb* _thumb;
}
@property(retain, nonatomic) VKAudioThumb* thumb;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)pickSingleImageUrlForSize:(CGSize)size scale:(float)scale;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FriendsIndexBuilder : XXUnknownSuperclass {
}
+(id)requestsItemFromIndex:(id)index;
+(void)updateBuilder:(id)builder withRequestsItem:(id)requestsItem;
+(id)updatedIndex:(id)index withRequestsItem:(id)requestsItem withLists:(id)lists;
+(id)usersEnumeratorForIndex:(id)index;
+(id)updateInfoForChangesFromIndex:(id)index toIndex:(id)index2;
+(void)insertUser:(id)user builder:(id)builder;
+(id)build:(id)build important:(BOOL)important index:(BOOL)index requestsItem:(id)item withLists:(id)lists;
+(int)friendsExtraSectionsCount;
@end

__attribute__((visibility("hidden")))
@interface IndexRestriction : XXUnknownSuperclass {
	NSCharacterSet* _locale;
	NSCharacterSet* _language;
	NSCharacterSet* _latin;
	NSCharacterSet* _cyrillic;
	NSCharacterSet* _combined;
}
@property(retain, nonatomic) NSCharacterSet* combined;
@property(retain, nonatomic) NSCharacterSet* cyrillic;
@property(retain, nonatomic) NSCharacterSet* latin;
@property(retain, nonatomic) NSCharacterSet* language;
@property(retain, nonatomic) NSCharacterSet* locale;
-(void).cxx_destruct;
-(int)compareSectionKeys:(id)keys :(id)arg2;
-(id)sectionKeyForLastName:(id)lastName;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface IndexUpdate : XXUnknownSuperclass {
}
+(id)indexUpdate;
-(void)applyForCollectionView:(id)collectionView shouldReload:(BOOL)reload reload:(id)reload3;
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
@end

__attribute__((visibility("hidden")))
@interface PrependingIndexUpdate : IndexUpdate {
}
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
@end

__attribute__((visibility("hidden")))
@interface PrependingIndexUpdateHeaderView : PrependingIndexUpdate {
}
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
@end

__attribute__((visibility("hidden")))
@interface ScrollToIndexUpdate : IndexUpdate {
	NSIndexPath* _scrollToPath;
}
@property(retain, nonatomic) NSIndexPath* scrollToPath;
-(void).cxx_destruct;
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
-(id)usePath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface ScrollToTopIndexUpdate : IndexUpdate {
}
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
@end

__attribute__((visibility("hidden")))
@interface MessagesListModel : StoreUpdateModel <ModelUpdateHandler> {
	BOOL fetching;
	BOOL updating;
	BOOL merging;
	BOOL fetchedAll;
	BOOL updatedAll;
	int fetch_page;
	int update_page;
	NSNumber* _discovered;
	NSNumber* _firstPageMID;
	NSNumber* _refetchMID;
	NSNumber* _reupdateMID;
	NSNumber* _lastFetchMID;
	NSNumber* _lastUpdateMID;
	MessagesUpdate* _lastUpdate;
	NSObject* _resetMarker;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSObject* resetMarker;
@property(retain, nonatomic) MessagesUpdate* lastUpdate;
@property(retain, nonatomic) NSNumber* lastUpdateMID;
@property(retain, nonatomic) NSNumber* lastFetchMID;
@property(retain, nonatomic) NSNumber* reupdateMID;
@property(retain, nonatomic) NSNumber* refetchMID;
@property(retain, nonatomic) NSNumber* firstPageMID;
@property(retain, nonatomic) NSNumber* discovered;
-(void).cxx_destruct;
-(BOOL)updatedAllMessages;
-(void)discoveredMid:(id)mid;
-(void)activate;
-(void)touch;
-(void)reset;
-(void)process:(id)process;
-(void)invalidateRenderedIndex;
-(void)indexUpdate:(id)update remove:(id)remove add:(id)add allowAppend:(BOOL)append pending:(BOOL)pending complete:(id)complete;
-(id)messageDataFromData:(id)data;
-(BOOL)reportsPendingUpdate;
-(void)updateStoreWithData:(id)data messages:(id)messages previousMID:(id)mid lastPage:(BOOL)page complete:(id)complete;
-(void)loadMessagesWithOffset:(int)offset count:(int)count startMID:(int)mid success:(id)success failure:(id)failure;
-(void)fetchMessagesAfterMID:(id)mid limit:(int)limit complete:(id)complete;
-(id)added:(id)added;
-(id)removed:(id)removed;
-(id)updated:(id)updated;
-(id)initWithSession:(id)session index:(id)index;
-(void)reset_;
@end

__attribute__((visibility("hidden")))
@interface CreateChatModel : ModelAction {
	NSString* _chatTitle;
	NSArray* _users;
	id _chat;
}
@property(retain, nonatomic) id chat;
@property(retain, nonatomic) NSArray* users;
@property(copy, nonatomic) NSString* chatTitle;
+(int)domainType;
-(void).cxx_destruct;
-(id)resultMessage;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface DialogsController : VKMTableController <MessagesListModelObserver> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) DialogsListModel* model;
+(void)clearDialog:(id)dialog context:(id)context success:(id)success;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dialogWithUsers:(id)users title:(id)title;
-(void)createDialog:(id)dialog;
-(void)actionTeaserButton:(id)button;
-(id)VKMScrollViewCreateTeaserView;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(void)messagesListModelUpdatedAllMessages;
-(int)VKMControllerModalAutoClosePosition;
-(void)VKMTableUpdatedIndex;
-(void)VKMScrollViewReset;
-(void)VKMTableDiscovered:(id)discovered cell:(id)cell;
-(int)VKMTableSearchMode;
-(id)VKMTableCreateSearchController:(id)controller;
-(void)hideSearch;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithMain:(id)main;
@end

__attribute__((visibility("hidden")))
@interface ModelUpdate : XXUnknownSuperclass {
	Index* _old;
	IndexUpdate* _table;
}
@property(retain, nonatomic) IndexUpdate* table;
@property(retain, nonatomic) Index* old;
+(id)update;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ModelRenderContext : XXUnknownSuperclass <ModelRenderContext> {
	NSDictionary* _userInfo;
	int _renderContext;
	CGSize _maxSize;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int renderContext;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(assign, nonatomic) CGSize maxSize;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface RendererStrategy : XXUnknownSuperclass {
	NSMutableDictionary* _renderers;
}
-(id)renderObject:(id)object;
-(void)registerRender:(Class)render block:(id)block;
@end

__attribute__((visibility("hidden")))
@interface DomainEventObserver : XXUnknownSuperclass {
	NSMutableSet* _domains;
	NSMutableSet* _events;
	NSMutableDictionary* _dispatchTable;
	id _target;
}
@property(readonly, assign, nonatomic) id target;
@property(readonly, assign, nonatomic) NSMutableDictionary* dispatchTable;
@property(readonly, assign, nonatomic) NSMutableSet* events;
@property(readonly, assign, nonatomic) NSMutableSet* domains;
+(id)observerForTarget:(id)target session:(id)session configuration:(id)configuration;
-(void)dispatchDomainEvent:(id)event;
-(void)registerEvent:(Class)event selector:(SEL)selector session:(id)session;
-(id)initWithTarget:(id)target;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface Model : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* queue;
	BOOL _loading;
	id<ModelRenderDelegate> _renderDelegate;
	VKSession* _session;
	NSPointerArray* _observers;
	Index* _index;
	NSDate* _lastUpdateDate;
	NSDictionary* _eventsDispatch;
}
@property(readonly, assign, nonatomic) BOOL loading;
@property(retain) Index* index;
@property(readonly, retain, nonatomic) NSPointerArray* observers;
@property(readonly, retain, nonatomic) VKSession* session;
@property(assign) id<ModelRenderDelegate> renderDelegate;
@property(retain, nonatomic) NSDate* lastUpdateDate;
@property(retain, nonatomic) NSDictionary* eventsDispatch;
+(void)updateBuilder:(id)builder enumerateIdentity:(id)identity withBlock:(id)block;
+(void)updateBuilder:(id)builder enumerateIdentityWithBlock:(id)block;
+(void)updateBuilder:(id)builder enumerateObjectsOfClass:(Class)aClass withBlock:(id)block;
+(void)updateBuilder:(id)builder enumerateObjectsWithBlock:(id)block;
+(id)with:(id)with;
-(void)performBlock:(id)block;
-(void)invalidateRenderedIndex;
-(id)componentRenderContextForObject:(id)object context:(id)context;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)renderObject:(id)object withContext:(id)context;
-(id)renderedObject:(id)object withContext:(id)context;
-(id)renderObject:(id)object;
-(id)renderObject:(id)object withComponent:(id)component context:(id)context;
-(id)renderObject:(id)object withComponent:(id)component;
-(id)prerenderContext;
-(id)defaultPrerenderContext;
-(Class)renderContextClass;
-(void)appear;
-(void)activate;
-(void)touch;
-(void)reset;
-(BOOL)requireViewed;
-(void)viewed:(id)viewed;
-(void)discovered:(id)discovered;
-(void)storeLastUpdate;
-(void)changeIndex:(id)index withUpdate:(id)update;
-(void)enqueue:(id)enqueue;
-(void)changeLoading:(BOOL)loading;
-(void)notifyUpdated:(id)updated;
-(void)notify:(SEL)notify o1:(id)a1 o2:(id)a2;
-(void)notify:(SEL)notify object:(id)object;
-(void)notify:(SEL)notify;
-(void)removeModelObserver:(id)observer;
-(void)addModelObserver:(id)observer;
-(void)dealloc;
-(BOOL)isSameModel:(id)model;
-(void)dispatchDomainEvent:(id)event;
-(BOOL)isForegroundModelForEventContext:(id)eventContext;
-(id)initWithSession:(id)session;
-(void)registerForEvents:(id)events;
-(id)editingActionForIndex:(id)index withIndexPath:(id)indexPath;
-(int)editingStyleForForTable:(id)table index:(id)index indexPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface MessagesModel : StoreUpdateModel <ModelUpdateHandler> {
	BOOL processingRead;
	DialogsListModel* _dialogs;
	UsersModel* _users;
	ActivityModel* _activity;
	NSMutableDictionary* _chats;
	NSMutableDictionary* _sending;
	NSMutableSet* _readQueue;
	NSMutableDictionary* _pendingEvents;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ActivityModel* activity;
@property(readonly, retain, nonatomic) UsersModel* users;
@property(readonly, retain, nonatomic) DialogsListModel* dialogs;
@property(retain, nonatomic) NSMutableDictionary* pendingEvents;
@property(readonly, retain, nonatomic) NSMutableSet* readQueue;
@property(readonly, retain, nonatomic) NSMutableDictionary* sending;
@property(readonly, retain, nonatomic) NSMutableDictionary* chats;
-(void).cxx_destruct;
-(void)clearSendingForDialog:(id)dialog;
-(id)sendingForDialog:(id)dialog;
-(void)unregisterChatModel:(id)model;
-(void)registerChatModel:(id)model;
-(id)chatModelForDialog:(id)dialog;
-(void)markMessageRead:(id)read;
-(void)touchRead;
-(void)markMessageIdsAsRead:(id)read completion:(id)completion;
-(void)markDialogAsRead:(id)read untilMid:(id)mid completion:(id)completion;
-(void)loadDialog:(id)dialog;
-(void)process:(id)process;
-(void)notificationUserUpdated:(id)updated;
-(void)handleDeliveryErrorInDialog:(id)dialog;
-(void)handleIncomingMessages:(id)messages;
-(BOOL)messageReadyForNotification:(id)notification;
-(void)showNotification:(id)notification;
-(void)reloadMessagesNew:(id)aNew;
-(void)deleteMessages:(id)messages;
-(void)deleteDialog:(id)dialog;
-(void)reloadDialogs:(id)dialogs;
-(void)dealloc;
-(id)initWithSession:(id)session usersModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface DialogUpdate : XXUnknownSuperclass {
	NSNumber* _did;
	NSMutableSet* _messagesUpdated;
	NSMutableSet* _messagesAdded;
	NSMutableSet* _messagesRemoved;
	NSMutableSet* _messagesRestored;
	NSArray* _modelUpdated;
	NSArray* _modelAdded;
}
@property(retain, nonatomic) NSArray* modelAdded;
@property(retain, nonatomic) NSArray* modelUpdated;
@property(readonly, retain, nonatomic) NSMutableSet* messagesRestored;
@property(readonly, retain, nonatomic) NSMutableSet* messagesRemoved;
@property(readonly, retain, nonatomic) NSMutableSet* messagesAdded;
@property(readonly, retain, nonatomic) NSMutableSet* messagesUpdated;
@property(readonly, retain, nonatomic) NSNumber* did;
-(void).cxx_destruct;
-(id)initWithDID:(id)did;
@end

__attribute__((visibility("hidden")))
@interface MessagesUpdate : StoreUpdate {
	int unread;
	NSMutableSet* _dialogsDataUpdated;
	NSMutableSet* _dialogsUpdated;
	NSMutableSet* _headsRemoved;
	NSMutableSet* _headsUpdatedDialogs;
	NSArray* _modelUpdated;
	NSArray* _modelAdded;
	NSDictionary* _modelDataUpdated;
	NSMutableDictionary* _messages;
	NSNumber* _lastMID;
	NSMutableSet* _dialogsUpdateHeads;
	UsersUpdate* _usersUpdate;
	NSMutableSet* _dialogsReload;
	NSMutableSet* _messagesReloadNew;
	NSMutableSet* _justSent;
	NSMutableDictionary* _justSentInc;
	NSMutableDictionary* _justSentOut;
}
@property(retain, nonatomic) NSMutableDictionary* justSentOut;
@property(retain, nonatomic) NSMutableDictionary* justSentInc;
@property(readonly, retain, nonatomic) NSMutableSet* justSent;
@property(readonly, retain, nonatomic) NSMutableSet* messagesReloadNew;
@property(readonly, retain, nonatomic) NSMutableSet* dialogsReload;
@property(retain, nonatomic) UsersUpdate* usersUpdate;
@property(readonly, retain, nonatomic) NSMutableSet* dialogsUpdateHeads;
@property(retain, nonatomic) NSNumber* lastMID;
@property(readonly, retain, nonatomic) NSMutableDictionary* messages;
@property(retain, nonatomic) NSDictionary* modelDataUpdated;
@property(retain, nonatomic) NSArray* modelAdded;
@property(retain, nonatomic) NSArray* modelUpdated;
@property(readonly, retain, nonatomic) NSMutableSet* headsUpdatedDialogs;
@property(readonly, retain, nonatomic) NSMutableSet* headsRemoved;
@property(readonly, retain, nonatomic) NSMutableSet* dialogsUpdated;
@property(readonly, retain, nonatomic) NSMutableSet* dialogsDataUpdated;
-(void).cxx_destruct;
-(id)updateForDialog:(id)dialog;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LoadingFooterView : XXUnknownSuperclass {
	UIActivityIndicatorView* _anim;
	UILabel* _label;
}
@property(readonly, retain, nonatomic) UILabel* label;
@property(readonly, retain, nonatomic) UIActivityIndicatorView* anim;
-(void).cxx_destruct;
-(void)useText:(id)text;
-(void)setLoading:(BOOL)loading;
-(void)layoutSubviews;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBContactCollectionView : XXUnknownSuperclass <UICollectionViewDataSource, UICollectionViewDelegate, UITextFieldDelegateImproved, MBContactCollectionViewDelegateFlowLayout, UIKeyInput, UITextInputTraits> {
	BOOL _allowsTextInput;
	BOOL _showPrompt;
	BOOL _editingMode;
	NSMutableArray* _selectedContacts;
	id<MBContactCollectionViewDelegate> _contactDelegate;
	int _cellHeight;
	NSString* _prompt;
	MBContactCollectionViewContactCell* _prototypeCell;
	MBContactCollectionViewPromptCell* _promptCell;
	NSString* _searchText;
}
@property(readonly, assign, nonatomic) BOOL hasText;
@property(copy, nonatomic) NSString* textContentType;
@property(assign, nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) int keyboardAppearance;
@property(assign, nonatomic) int keyboardType;
@property(assign, nonatomic) int spellCheckingType;
@property(assign, nonatomic) int autocorrectionType;
@property(assign, nonatomic) int autocapitalizationType;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL showPrompt;
@property(assign, nonatomic) BOOL allowsTextInput;
@property(copy, nonatomic) NSString* prompt;
@property(assign, nonatomic) int cellHeight;
@property(assign, nonatomic) __weak id<MBContactCollectionViewDelegate> contactDelegate;
@property(retain, nonatomic) NSMutableArray* selectedContacts;
@property(assign, nonatomic) BOOL editingMode;
@property(readonly, assign, nonatomic) NSIndexPath* entryCellIndexPath;
@property(retain, nonatomic) NSString* searchText;
@property(retain, nonatomic) MBContactCollectionViewPromptCell* promptCell;
@property(retain, nonatomic) MBContactCollectionViewContactCell* prototypeCell;
@property(readonly, assign, nonatomic) NSIndexPath* indexPathOfSelectedCell;
+(id)contactCollectionViewWithFrame:(CGRect)frame;
-(void).cxx_destruct;
-(void)prerender:(id)prerender;
-(id)inputDelegate;
-(id)selectedTextRange;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidChange:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidBeginEditing:(id)textField;
-(void)reloadModelCells;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(void)collectionView:(id)view willChangeContentSizeTo:(CGSize)to;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldHighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(void)scrollToEntryAnimated:(BOOL)entryAnimated onComplete:(id)complete;
-(BOOL)entryIsVisible;
-(void)removeFocusFromEntry;
-(void)setFocusOnEntry;
-(int)selectedContactIndexFromRow:(int)row;
-(int)selectedContactIndexFromIndexPath:(id)indexPath;
-(int)entryCellIndex;
-(BOOL)isContactCell:(id)cell;
-(BOOL)isPromptCell:(id)cell;
-(BOOL)isEntryCell:(id)cell;
-(void)batchRemoveContacts:(id)contacts withCompletion:(id)completion;
-(void)removeFromSelectedContacts:(int)selectedContacts withCompletion:(id)completion;
-(void)resetLastInput;
-(void)addToSelectedContacts:(id)selectedContacts withCompletion:(id)completion;
-(void)insertText:(id)text;
-(void)deleteBackward;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(float)maxContentWidth;
-(void)setup;
-(void)forceRelayout;
-(void)reloadData;
-(void)handleWidthChangeFrom:(float)from to:(float)to;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame collectionViewLayout:(id)layout;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface DialogsListModel : MessagesListModel {
}
-(id)messageDataFromData:(id)data;
-(void)updateStoreWithData:(id)data messages:(id)messages previousMID:(id)mid lastPage:(BOOL)page complete:(id)complete;
-(void)loadMessagesWithOffset:(int)offset count:(int)count startMID:(int)mid success:(id)success failure:(id)failure;
-(void)fetchMessagesAfterMID:(id)mid limit:(int)limit complete:(id)complete;
-(id)added:(id)added;
-(id)removed:(id)removed;
-(id)updated:(id)updated;
-(BOOL)reportsPendingUpdate;
-(BOOL)isSameModel:(id)model;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VKAudioArtist : VKDomain {
	NSString* _name;
}
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MOScrollPagingMediator : XXUnknownSuperclass {
	BOOL disableAnimation;
	UIScrollView* _scrollView;
	UIPageControl* _pageControl;
	int _currentScrollPage;
	unsigned _reusablePages;
	id<MOScrollPagingMediatorDelegate> _delegate;
	UIScrollView* _parallaxScrollView;
	CGAffineTransform _parallaxTransform;
}
@property(retain, nonatomic) UIScrollView* parallaxScrollView;
@property(assign, nonatomic) CGAffineTransform parallaxTransform;
@property(assign, nonatomic) __weak id<MOScrollPagingMediatorDelegate> delegate;
@property(assign, nonatomic) unsigned reusablePages;
@property(readonly, assign, nonatomic) int currentScrollPage;
@property(retain, nonatomic) UIPageControl* pageControl;
@property(retain, nonatomic) UIScrollView* scrollView;
-(void).cxx_destruct;
-(void)reset;
-(void)actionPageChange:(id)change;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)notifyRender;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMStoreUtils : XXUnknownSuperclass {
}
+(BOOL)updatedDialog:(id)dialog withData:(id)data;
+(BOOL)updatedDialog:(id)dialog withTitle:(id)title photo:(id)photo;
+(BOOL)updatedMessage:(id)message preview:(BOOL)preview withDialogOrMessageData:(id)dialogOrMessageData;
+(void)restoreDeleted:(id)deleted;
+(void)markDeleted:(id)deleted;
+(BOOL)updateUser:(id)user withData:(id)data force:(BOOL)force;
@end

__attribute__((visibility("hidden")))
@interface ChatControllerMenuOptionsProvider : VKSelectorOptionsProviderSimple {
	id<VKSelectorOption> _attachmentsOption;
	id<VKSelectorOption> _toggleNotificationsOption;
	id<VKSelectorOption> _chatSettingsOption;
	id<VKSelectorOption> _clearHistoryOption;
}
@property(readonly, retain, nonatomic) id<VKSelectorOption> clearHistoryOption;
@property(readonly, retain, nonatomic) id<VKSelectorOption> chatSettingsOption;
@property(readonly, retain, nonatomic) id<VKSelectorOption> toggleNotificationsOption;
@property(readonly, retain, nonatomic) id<VKSelectorOption> attachmentsOption;
-(void).cxx_destruct;
-(id)initWithAttachmentsOption:(id)attachmentsOption toggleNotificationsOption:(id)option chatSettingsOption:(id)option3 clearHistoryOption:(id)option4;
@end

__attribute__((visibility("hidden")))
@interface RootView : XXUnknownSuperclass {
	ExtraInputPanelView* _inputPanelView;
}
@property(retain, nonatomic) ExtraInputPanelView* inputPanelView;
-(void).cxx_destruct;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface ChatController : VKMTableController <UITextViewDelegate, ExtraInputPanelViewDelegate, UIPopoverPresentationControllerDelegate, LayoutAwareViewDelegate, UIGestureRecognizerDelegate, LandscapePresenterDelegate, VKSelectorDelegate, VKSelectorDropdownPresentationDelegate, RecordPanelDelegate, SendingModelObserver, UsersModelObserver, ScrollToTopDetectionViewDelegate, MessagesListModelObserver> {
	BOOL multi;
	BOOL selfdialog;
	float offset;
	BOOL toggled;
	BOOL keyboard;
	BOOL skipReport;
	BOOL orientationLock;
	BOOL nextReset;
	BOOL skipInsets;
	BOOL _forceInput;
	BOOL _fromPush;
	BOOL _dropOldAttachments;
	BOOL _shouldSkipStoringDrafts;
	BOOL _lockForKeyboard;
	NSNumber* _did;
	NSArray* _forceAttachments;
	NSString* _preEnteredText;
	VKMImageButton* _headerImage;
	Component5HostView* _componentTitleView;
	RecordExtraInputPanelView* _inputPanel;
	StatsRef* _vkmeStatsRef;
	SendingModel* _sending;
	NSMutableArray* _typing;
	NSMutableArray* _cells;
	NSMutableDictionary* _drafts;
	NSMutableDictionary* _selected;
	RootView* _root;
	LandscapePresenter* _landscape;
	ScrollToTopDetectionView* _scrollToTopDetection;
	UIView* _editToolbar;
	UIButton* _editDelete;
	UIButton* _editForward;
	UIBarButtonItem* _headerButtonItem;
	NSString* _messageBody;
	WrapAttachmentsLayout* _attachmentsLayout;
	LayoutAwareView* _layoutAwareHeaderContainer;
	int _nextOrientation;
	VKSelectorDropdownPresentation* _quickMenu;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) StatsRef* vkmeStatsRef;
@property(retain, nonatomic) Component5HostView* componentTitleView;
@property(retain, nonatomic) VKMImageButton* headerImage;
@property(assign, nonatomic) BOOL shouldSkipStoringDrafts;
@property(copy, nonatomic) NSString* preEnteredText;
@property(retain, nonatomic) NSArray* forceAttachments;
@property(assign, nonatomic) BOOL dropOldAttachments;
@property(assign, nonatomic) BOOL fromPush;
@property(assign, nonatomic) BOOL forceInput;
@property(readonly, retain, nonatomic) NSNumber* did;
@property(retain, nonatomic) ChatListModel* model;
@property(assign, nonatomic) BOOL lockForKeyboard;
@property(retain, nonatomic) VKSelectorDropdownPresentation* quickMenu;
@property(assign, nonatomic) int nextOrientation;
@property(retain, nonatomic) LayoutAwareView* layoutAwareHeaderContainer;
@property(retain, nonatomic) WrapAttachmentsLayout* attachmentsLayout;
@property(retain, nonatomic) NSString* messageBody;
@property(retain, nonatomic) UIBarButtonItem* headerButtonItem;
@property(retain, nonatomic) UIButton* editForward;
@property(retain, nonatomic) UIButton* editDelete;
@property(retain, nonatomic) UIView* editToolbar;
@property(retain, nonatomic) ScrollToTopDetectionView* scrollToTopDetection;
@property(retain, nonatomic) LandscapePresenter* landscape;
@property(retain, nonatomic) RecordExtraInputPanelView* inputPanel;
@property(retain, nonatomic) RootView* root;
@property(readonly, retain, nonatomic) NSMutableDictionary* selected;
@property(readonly, retain, nonatomic) NSMutableDictionary* drafts;
@property(retain, nonatomic) NSMutableArray* cells;
@property(readonly, retain, nonatomic) NSMutableArray* typing;
@property(readonly, retain, nonatomic) SendingModel* sending;
+(void)muteChatWithId:(id)anId time:(int)time session:(id)session success:(id)success failure:(id)failure;
-(void).cxx_destruct;
-(void)selectorDidChangeOptions:(id)selector;
-(void)selector:(id)selector didSelectOption:(id)option;
-(void)landscapePresenterDidCompleteRotation:(id)landscapePresenter;
-(void)landscapePresenterWillPerformRotation:(id)landscapePresenter;
-(void)toggleChatNotifications;
-(void)selectorDropdownPresentationDidDismiss:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationWillDismiss:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationWillPresent:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)closeQuickMenuIfPossible;
-(void)openQuickMenu;
-(void)actionChatMenu:(id)menu;
-(BOOL)isChatParticipant;
-(void)chatRefreshTitle;
-(void)chatRefreshTitleActive:(BOOL)active;
-(id)chatActivityComponent;
-(id)chatTitleText;
-(id)componentTitleForOrientation:(int)orientation active:(BOOL)active;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(id)pendingAtIndexPath:(id)indexPath;
-(id)messageAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(CGPoint)tableView:(id)view newContentOffsetAfterUpdate:(id)update context:(void*)context;
-(void)actionEditForward:(id)forward;
-(void)addForwardedMessages:(id)messages;
-(void)deleteMessagesWithMids:(id)mids;
-(void)actionEditDelete:(id)aDelete;
-(void)handleCellSelectMessage:(id)message;
-(void)handleCellDeleteMessage:(id)message;
-(void)handleCellReplyMessage:(id)message;
-(void)handleCell:(id)cell pendingWarning:(id)warning;
-(void)messagesListModelUpdatedAllMessages;
-(void)model:(id)model updated:(id)updated;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)VKMTableUpdatedIndex;
-(void)VKMTableDiscovered:(id)discovered cell:(id)cell;
-(void)VKMScrollViewReset;
-(id)messageCellAtPath:(id)path;
-(void)users:(id)users typingInDialog:(id)dialog;
-(id)typingRemovesForJustSent:(id)justSent;
-(id)removedTypingWithCondition:(id)condition;
-(void)reportTyping;
-(void)pendingReset;
-(void)pendingSent:(id)sent;
-(void)pendingRemoved:(id)removed;
-(void)pendingUpdated:(id)updated reload:(id)reload;
-(void)pendingAdded:(id)added;
-(id)extraInputPanelStickersGiftContext:(id)context;
-(void)extraInputPanelViewDidAttemptToSend:(id)extraInputPanelView;
-(void)extraInputPanelView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context shouldClearText:(BOOL)text;
-(void)sendImmediatelyAttachs:(id)attachs;
-(void)send:(id)send;
-(id)createVideoUploadContextWithAsset:(id)asset;
-(id)attachedLocation;
-(void)toggle:(id)toggle;
-(void)toggleModernWithSender:(id)sender;
-(void)gestureAttachmentsTapped:(id)tapped;
-(void)becomeFirstResponderAfterAttach;
-(void)notificationAttachmentsUpdated:(id)updated;
-(void)changeToggled:(BOOL)toggled;
-(void)addAttachments:(id)attachments;
-(void)updateAttachmentsLayout;
-(void)updateForAttachmentsCount;
-(void)updateSend;
-(BOOL)canSend;
-(BOOL)canAddPendingMessage;
-(BOOL)p2pAvailable;
-(void)headerImageSelected:(id)selected;
-(void)headerSelected;
-(id)childViewControllerForStatusBarHidden;
-(BOOL)prefersStatusBarHidden;
-(void)layoutAwareViewDidLayout:(id)layoutAwareView;
-(void)updateForOrientaton:(int)orientaton;
-(void)updateScrollIndicatorInsets:(UIEdgeInsets)insets;
-(void)updateBar:(int)bar animated:(BOOL)animated;
-(void)restoreKeyboard;
-(void)notificationAppActive:(id)active;
-(void)notificationKeyboard:(id)keyboard;
-(void)removeInputView;
-(void)hideKeyboard;
-(void)VKMActivateAfterWindowDismiss;
-(BOOL)VKMDeactivateForWindowPresentation;
-(void)changeText:(id)text;
-(void)textViewDidChange:(id)textView;
-(float)keyboardHeight:(id)height;
-(void)recordPanel:(id)panel readyToSendOpusRecord:(id)sendOpusRecord;
-(void)endDismissingPushToTalkInRecordPanel:(id)recordPanel;
-(int)beginPresentingPushToTalkWithInterfaceOrientationInRecordPanel:(id)recordPanel;
-(void)inputPanelViewDidChangeHeight:(id)inputPanelView;
-(void)animate:(double)animate options:(unsigned)options;
-(void)VKMControllerChromeInsetsApply;
-(void)scrollToBottom:(BOOL)bottom;
-(void)scrollToTopDetectionViewDidScrollToTop:(id)scrollToTopDetectionView;
-(void)updateEditSelected;
-(void)updateEditingState:(BOOL)state;
-(void)clearHistory;
-(void)endEditing;
-(id)VKMControllerStatsRef;
-(void)checkFromPush;
-(void)checkHideMenu;
-(void)VKMControllerPrePush;
-(void)VKMControllerAppear;
-(void)VKMControllerStatusBarUpdate:(BOOL)update;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(Class)VKMTableViewClass;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)loadView;
-(unsigned)supportedInterfaceOrientations;
-(void)dropCells;
-(void)dealloc;
-(id)initWithMain:(id)main andDialog:(id)dialog caching:(BOOL)caching;
@end

__attribute__((visibility("hidden")))
@interface ChatListModel : MessagesListModel {
	BOOL checking;
	NSNumber* _did;
	NSDate* _till;
}
@property(readonly, retain, nonatomic) NSNumber* did;
@property(retain, nonatomic) NSDate* till;
-(void).cxx_destruct;
-(void)typing;
-(void)touchTyping;
-(id)messageDataFromData:(id)data;
-(void)updateStoreWithData:(id)data messages:(id)messages previousMID:(id)mid lastPage:(BOOL)page complete:(id)complete;
-(void)loadMessagesWithOffset:(int)offset count:(int)count startMID:(int)mid success:(id)success failure:(id)failure;
-(void)fetchMessagesAfterMID:(id)mid limit:(int)limit complete:(id)complete;
-(id)added:(id)added;
-(id)removed:(id)removed;
-(id)updated:(id)updated;
-(BOOL)isSameModel:(id)model;
-(id)initWithDialogId:(id)dialogId session:(id)session usersModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface FeedAutoplayedComponentNode : Component5Node {
	VKImageVariant* _variant;
}
@property(retain, nonatomic) VKImageVariant* variant;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface FeedAutoplayedComponent : Component5 {
}
+(Class)nodeClass;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKLongPollService : XXUnknownSuperclass {
	int state;
	int tryNumber;
	BOOL _dropped;
	id<VKLongPollServiceDelegate> _delegate;
	VKClient* _client;
	NSOperationQueue* _pollQueue;
	NSString* _server;
	NSString* _key;
	NSNumber* _ts;
}
@property(assign, nonatomic) id<VKLongPollServiceDelegate> delegate;
@property(assign, nonatomic) BOOL dropped;
@property(retain, nonatomic) NSNumber* ts;
@property(retain, nonatomic) NSString* key;
@property(retain, nonatomic) NSString* server;
@property(readonly, retain, nonatomic) NSOperationQueue* pollQueue;
@property(readonly, retain, nonatomic) VKClient* client;
-(void)drop;
-(void)touch;
-(void)reach:(id)reach;
-(void)connect;
-(void)poll;
-(void)dropConnection;
-(void)becomeNotConnected;
-(void)cancelTimeout;
-(void)reconnectIfNeeded;
-(void)dealloc;
-(id)initWithClient:(id)client;
@end

__attribute__((visibility("hidden")))
@interface VKReachability : XXUnknownSuperclass {
}
+(id)sharedAPIReachability;
@end

__attribute__((visibility("hidden")))
@interface PostExtraResponseRenderer : Renderer {
	UIButton* _buttonPublish;
	UIButton* _buttonDecline;
}
@property(retain, nonatomic) UIButton* buttonDecline;
@property(retain, nonatomic) UIButton* buttonPublish;
@property(retain, nonatomic) VKPostExtraResponse* domain;
+(void)prepareLayout:(id)layout;
-(void).cxx_destruct;
-(void)actionDecline:(id)decline;
-(void)actionPublish:(id)publish;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface VKPostExtraResponse : VKDomainDerived {
}
@property(retain, nonatomic) VKPost* domain;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface RatingComponent : Component5 {
}
+(id)rating:(float)rating total:(unsigned)total;
@end

__attribute__((visibility("hidden")))
@interface VKLikesPreviewSource : VKDomain {
	id<VKSource> _source;
	NSString* _first_name_dat;
	NSString* _last_name_dat;
}
@property(copy, nonatomic) NSString* last_name_dat;
@property(copy, nonatomic) NSString* first_name_dat;
@property(retain, nonatomic) id<VKSource> source;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AdvertisementComponentState : XXUnknownSuperclass {
	BOOL _borders;
	VKFeedAdsItem* _adsItem;
	VKFeedAds* _ads;
	unsigned _descriptionMinimumNumberOfLines;
	unsigned _descriptionMaximumNumberOfLines;
}
@property(readonly, assign, nonatomic) BOOL borders;
@property(readonly, assign, nonatomic) unsigned descriptionMaximumNumberOfLines;
@property(readonly, assign, nonatomic) unsigned descriptionMinimumNumberOfLines;
@property(readonly, assign, nonatomic) VKFeedAds* ads;
@property(readonly, assign, nonatomic) VKFeedAdsItem* adsItem;
+(id)ads:(id)ads item:(id)item fixedNumberOfLines:(unsigned)lines borders:(BOOL)borders;
+(id)ads:(id)ads item:(id)item maximumNumberOfLines:(unsigned)lines borders:(BOOL)borders;
-(void).cxx_destruct;
-(id)initWithAds:(id)ads item:(id)item minimumNumberOfLines:(unsigned)lines maximumNumberOfLines:(unsigned)lines4 borders:(BOOL)borders;
@end

__attribute__((visibility("hidden")))
@interface AdvertisementComponent : Component5 {
}
+(id)componentWithSettings:(id)settings;
+(id)componentWithAds:(id)ads itemFixedSize:(id)size borders:(BOOL)borders;
+(id)componentWithAds:(id)ads item:(id)item borders:(BOOL)borders;
@end

__attribute__((visibility("hidden")))
@interface VKMToolbarController : VKMEditableController {
	UIToolbar* _toolbar;
	UISegmentedControl* _segment;
}
@property(readonly, retain, nonatomic) UISegmentedControl* segment;
@property(readonly, retain, nonatomic) UIToolbar* toolbar;
-(void).cxx_destruct;
-(void)update;
-(unsigned)numberOfSegments;
-(BOOL)isToolbarHidden;
-(id)titleForSegmentAtIndex:(unsigned)index;
-(void)segmentedControlChanged:(id)changed;
-(void)VKMTableUpdatedIndex;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface VKLPSUpdateParser : XXUnknownSuperclass {
	BOOL checked;
	NSArray* _updates;
	NSNumber* _owner;
	NSNumberFormatter* _formatter;
}
@property(retain, nonatomic) NSNumberFormatter* formatter;
@property(retain, nonatomic) NSNumber* owner;
@property(retain, nonatomic) NSArray* updates;
+(BOOL)hasAttachments:(id)attachments;
-(void).cxx_destruct;
-(void)accept:(id)accept context:(id)context;
-(id)senderUIDFromLPS:(id)lps fullFlags:(unsigned)flags att:(id)att;
-(id)initWithUpdates:(id)updates owner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface VKMStoreUpdateData : XXUnknownSuperclass <VKLPSUpdateVisitor> {
	NSMutableSet* _dids;
	NSMutableSet* _mids;
	NSMutableSet* _uids;
	NSMutableDictionary* _inReadUpdates;
	NSMutableDictionary* _outReadUpdates;
	NSMutableDictionary* _dialogs;
	NSMutableDictionary* _messages;
	NSNumber* _lastMID;
	NSNumber* _counter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSNumber* counter;
@property(retain, nonatomic) NSNumber* lastMID;
@property(retain, nonatomic) NSMutableDictionary* messages;
@property(retain, nonatomic) NSMutableDictionary* dialogs;
@property(retain, nonatomic) NSMutableDictionary* outReadUpdates;
@property(retain, nonatomic) NSMutableDictionary* inReadUpdates;
@property(retain, nonatomic) NSMutableSet* uids;
@property(retain, nonatomic) NSMutableSet* mids;
@property(retain, nonatomic) NSMutableSet* dids;
+(id)data;
+(id)dataWithMessages:(id)messages inDialog:(id)dialog owner:(id)owner;
+(id)dataWithDialogs:(id)dialogs owner:(id)owner;
-(void).cxx_destruct;
-(BOOL)readStateForMessage:(id)message withPeer:(id)peer incoming:(BOOL)incoming context:(id)context;
-(void)messagesCounter:(id)counter;
-(void)user:(id)user typingInChat:(id)chat context:(id)context;
-(void)user:(id)user online:(BOOL)online flags:(unsigned)flags context:(id)context;
-(void)chatUpdated:(id)updated user:(BOOL)user context:(id)context;
-(void)message:(id)message restored:(BOOL)restored read:(id)read did:(id)did uid:(id)uid date:(id)date title:(id)title body:(id)body att:(BOOL)att randomId:(id)anId context:(id)context;
-(void)readUpdatePeer:(id)peer beforeMid:(id)mid incoming:(BOOL)incoming context:(id)context;
-(void)messageRemoved:(id)removed context:(id)context;
-(void)messageUpdated:(id)updated read:(BOOL)read context:(id)context;
-(BOOL)hasUpdates;
@end

__attribute__((visibility("hidden")))
@interface UsersModel : StoreUpdateModel <ModelUpdateHandler, UsersCacheHandler> {
	NSDictionary* _users;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain) NSDictionary* users;
-(void).cxx_destruct;
-(void)process:(id)process;
-(void)sourcesCacheLoadUsers:(id)users;
-(void)sourcesCacheAddUsersSync:(id)sync;
-(void)update:(id)update;
-(void)updateActivity:(id)activity;
-(void)processSyncAdd:(id)add online:(id)online online_mobile:(id)mobile offline:(id)offline usersLookup:(id)lookup;
@end

__attribute__((visibility("hidden")))
@interface FeedbackSettingsController : VKMTableController {
	int feedbackDisabledMask;
}
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)actionSwitch:(id)aSwitch;
-(BOOL)VKMScrollViewDisablePTR;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppActivity : VKDomain <VKAPIAppActivity> {
	BOOL _allowSelection;
	NSNumber* _app_id;
	NSNumber* _user_id;
	int _type;
	NSDictionary* _data;
	NSString* _text_format;
	NSDictionary* _text_parameters;
	unsigned _date;
	VKAPIApp* _app;
	VKUser* _user;
}
@property(readonly, retain, nonatomic) VKAPIAppActivity* domain;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL allowSelection;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) VKAPIApp* app;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) NSDictionary* text_parameters;
@property(retain, nonatomic) NSString* text_format;
@property(retain, nonatomic) NSDictionary* data;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSNumber* user_id;
@property(retain, nonatomic) NSNumber* app_id;
+(void)initialize;
-(void).cxx_destruct;
-(Class)rendererClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppActivityAll : VKRenderable {
	NSNumber* _appID;
	unsigned _count;
}
@property(readonly, assign, nonatomic) unsigned count;
@property(readonly, retain, nonatomic) NSNumber* appID;
+(id)allActivitiesWithCount:(unsigned)count appID:(id)anId;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppActivityWithAppIcon : VKDomainDerived <VKAPIAppActivity> {
	BOOL _showAppIcon;
}
@property(readonly, retain, nonatomic) VKAPIAppActivity* domain;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL showAppIcon;
+(id)from:(id)from showAppIcon:(BOOL)icon;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKAudioTableViewCell : XXUnknownSuperclass <VKMImageLoaderDelegate> {
	VKAudioQueuePlayerItem* _item;
	id<VKAudioTableViewCellDelegate> _delegate;
	AudioOverlayButton* _playPauseButton;
	VKCircleProgressView* _progressView;
	id _observer;
	VKAudioQueuePlayer* _player;
	VKMImageLoader* _loader;
	id<VKImageFilter> _filter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKAudioTableViewCellDelegate> delegate;
@property(readonly, assign, nonatomic) VKAudioQueuePlayerItem* item;
@property(retain, nonatomic) id<VKImageFilter> filter;
@property(retain, nonatomic) VKMImageLoader* loader;
@property(retain, nonatomic) VKAudioQueuePlayer* player;
@property(retain, nonatomic) id observer;
@property(retain, nonatomic) VKCircleProgressView* progressView;
@property(retain, nonatomic) AudioOverlayButton* playPauseButton;
-(void).cxx_destruct;
-(void)dealloc;
-(void)applyItem:(id)item;
-(void)update;
-(void)loader:(id)loader complete:(id)complete;
-(void)playerChangedItem:(id)item;
-(void)playerUpdated:(id)updated;
-(void)updatePlayPauseButton:(BOOL)button;
-(void)updateProgressForProgressView:(float)progressView;
-(float)progressForTime:(XXStruct_pwHToB)time;
-(void)createTimeObserver;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(void)togglePlayPause:(id)pause;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier player:(id)player;
@end

__attribute__((visibility("hidden")))
@interface UsersUpdate : StoreUpdate {
	NSSet* _updated;
	ActivityUpdate* _activity;
}
@property(retain, nonatomic) ActivityUpdate* activity;
@property(retain, nonatomic) NSSet* updated;
+(id)update;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKSubscriptionInfoPopupView : XXUnknownSuperclass {
	UIButton* _actionButton;
	UIButton* _cancelButton;
}
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UIButton* actionButton;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame titleText:(id)text subtitleText:(id)text3 buttonIcon:(id)icon buttonText:(id)text5;
@end

__attribute__((visibility("hidden")))
@interface VKStats : XXUnknownSuperclass {
	NSURL* _fileUrl;
	NSMutableDictionary* _data;
}
@property(retain, nonatomic) NSMutableDictionary* data;
@property(readonly, retain, nonatomic) NSURL* fileUrl;
-(void).cxx_destruct;
-(void)checkAndStoreValue:(id)value forKey:(id)key;
-(BOOL)richAlertStyleForKey:(id)key;
-(int)alertStyleForKey:(id)key;
-(void)removeAllValues;
-(id)mutableArray:(id)array;
-(id)dictionary:(id)dictionary;
-(void)enume:(int)enume for:(id)aFor;
-(int)enume:(id)enume;
-(id)array:(id)array;
-(id)string:(id)string;
-(void)now:(id)now;
-(BOOL)date:(id)date older:(double)older;
-(id)date:(id)date;
-(void)minimizedBool:(BOOL)aBool for:(id)aFor;
-(void)yes:(BOOL)yes for:(id)aFor;
-(BOOL)is:(id)is;
-(id)number:(id)number;
-(id)value:(id)value;
-(void)set:(id)set for:(id)aFor;
-(void)clear:(id)clear;
-(BOOL)has:(id)has;
-(void)stored:(id)stored;
-(void)resignActive:(id)active;
-(void)store;
-(void)restore;
-(void)dealloc;
-(id)initWithData:(id)data;
-(id)initWithFileUrl:(id)fileUrl;
@end

__attribute__((visibility("hidden")))
@interface StoreUpdate : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface AudioBlock : VKRenderable {
	NSNumber* _blockId;
	NSString* _title;
	NSString* _subtitle;
	NSString* _source;
	float _contentOffsetXForRestoringInReusableCell;
}
@property(assign, nonatomic) float contentOffsetXForRestoringInReusableCell;
@property(readonly, assign, nonatomic) NSArray* items;
@property(copy, nonatomic) NSString* source;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* blockId;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface SkethHistoryCollectionCell : VKMCollectionCell {
	VKMImageView* _itemImage;
}
@property(retain, nonatomic) GraffitiHistoryItem* domain;
@property(readonly, assign, nonatomic) VKMImageView* itemImage;
-(void).cxx_destruct;
-(void)delete:(id)aDelete;
-(void)setHighlighted:(BOOL)highlighted;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKMController : XXUnknownSuperclass <VKMNavDelegate, VKMNavProxyDelegate, ModelObserver, ModelRenderDelegate> {
	BOOL viewAppeared;
	MainModel* _main;
	Model* _model;
	UIBarButtonItem* _autocloseButton;
	int _visibility;
	VKMNavResolver* _resolver;
	int _statsContext;
	UIEdgeInsets _chromeInsets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int statsContext;
@property(assign, nonatomic) UIEdgeInsets chromeInsets;
@property(retain, nonatomic) VKMNavResolver* resolver;
@property(assign, nonatomic) int visibility;
@property(readonly, retain, nonatomic) VKSelector* vkSelector;
@property(retain, nonatomic) UIBarButtonItem* autocloseButton;
@property(retain, nonatomic) Model* model;
@property(retain, nonatomic) MainModel* main;
+(id)main:(id)main model:(id)model;
-(void).cxx_destruct;
-(BOOL)VKMControllerModalOnly;
-(id)VKMControllerStatsRef;
-(void)VKMActivateAfterWindowDismiss;
-(BOOL)VKMDeactivateForWindowPresentation;
-(id)model:(id)model componentRenderContextForObject:(id)object context:(id)context;
-(id)model:(id)model componentForObject:(id)object withContext:(id)context;
-(id)renderContextForModel:(id)model;
-(id)model:(id)model renderObject:(id)object withContext:(id)context;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(int)VKMControllerModalAutoClosePosition;
-(BOOL)VKMControllerModalAutoClose;
-(void)VKMControllerPrePhotoFeed;
-(void)VKMControllerPrePush;
-(void)VKMLimitBackButtonLength:(int)length;
-(void)VKMShowSheet:(id)sheet;
-(BOOL)VKMIdenticalController:(id)controller;
-(void)_setNavigationControllerContentInsetAdjustment:(UIEdgeInsets)adjustment;
-(void)VKMControllerChromeInsetsApply;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)VKMControllerChromeInsetsCheck;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)VKMControllerChrome;
-(id)childViewControllerForStatusBarStyle;
-(int)preferredStatusBarStyle;
-(BOOL)prefersStatusBarHidden;
-(void)VKMControllerStatusBarUpdate:(BOOL)update;
-(void)VKMNavigationBarUpdateBackground:(id)background;
-(void)VKMNavigationBarUpdateBackground;
-(void)VKMNavigationBarUpdate;
-(id)VKMNavigationBarTintColor;
-(id)VKMNavigationBarBarTintColor;
-(id)VKMNavigationBarBackground;
-(BOOL)VKMNavigationBarTranslucent;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(BOOL)VKMControllerStatusBarHidden;
-(BOOL)VKMControllerCustomized;
-(void)VKMControllerAppear;
-(void)VKMControllerTouch;
-(id)mainModel;
-(void)runAction:(id)action;
-(id)actionContext;
-(id)navContext;
-(BOOL)route:(id)route;
-(id)navigation;
-(id)currentNavDelegate;
-(CGRect)VKMControllerViewport;
-(void)VKMDismissModalSelfAnimated;
-(void)VKMDismissModalSelf:(BOOL)aSelf;
-(void)changeModel:(id)model;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)didReceiveMemoryWarning;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)updateCommonAppearance:(BOOL)appearance;
-(void)viewWillAppear:(BOOL)view;
-(id)addStatsContext:(int)context;
-(id)setupBackTitle:(id)title;
-(id)setupTitle:(id)title;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface Index : XXUnknownSuperclass {
	NSArray* _index;
	NSArray* _sections;
	NSArray* _indexSections;
	unsigned _count;
}
@property(assign, nonatomic) unsigned count;
@property(retain, nonatomic) NSArray* indexSections;
@property(retain, nonatomic) NSArray* sections;
@property(retain, nonatomic) NSArray* index;
+(id)indexWithItem:(id)item;
+(id)listAppend:(id)append to:(id)to;
+(id)listAdd:(id)add append:(BOOL)append to:(id)to;
+(id)section:(int)section add:(id)add append:(BOOL)append to:(id)to;
+(id)indexWithSections:(id)sections count:(BOOL)count;
+(id)indexByAppedingSections:(id)sections toIndex:(id)index;
+(id)indexByPrepedingSections:(id)sections toIndex:(id)index;
+(id)sections:(unsigned)sections titles:(BOOL)titles build:(id)build;
+(id)single:(id)single;
+(id)enums:(unsigned)enums when:(id)when;
-(void).cxx_destruct;
-(id)enumerator;
-(id)indexByRemovingEmptySections;
-(id)map:(id)map;
-(id)mapSections:(id)sections;
-(void)enumerate:(id)enumerate;
-(void)enumerateFromIndexPath:(id)indexPath withBlock:(id)block;
-(id)item;
-(id)filteredIndex:(id)index;
-(id)first;
-(void)offsetCount:(int)count;
-(void)calcCount;
-(BOOL)notEmpty;
-(unsigned)sectionForSectionIndex:(unsigned)sectionIndex;
-(id)safeObjectAtIndexPath:(id)indexPath;
-(id)objectAtIndexPath:(id)indexPath;
-(id)sectionTitleAtIndex:(int)index;
-(id)safeSectionAtIndex:(int)index;
-(id)sectionAtIndex:(int)index;
@end

__attribute__((visibility("hidden")))
@interface IndexBuilder : XXUnknownSuperclass {
	Index* _index;
}
@property(retain, nonatomic) Index* index;
+(id)builder:(BOOL)builder;
+(id)builderWithIndex:(id)index;
-(void).cxx_destruct;
-(id)section:(int)section add:(id)add;
-(id)add:(id)add;
-(id)add:(id)add title:(id)title;
-(id)buildIndex;
@end

__attribute__((visibility("hidden")))
@interface IndexSection : XXUnknownSuperclass {
	NSArray* _items;
	NSString* _title;
}
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, copy, nonatomic) NSArray* items;
+(id)sectionWithItems:(id)items title:(id)title;
+(id)sectionWithItems:(id)items;
-(void).cxx_destruct;
-(id)initWithItems:(id)items title:(id)title;
-(id)initWithItems:(id)items;
@end

__attribute__((visibility("hidden")))
@interface ChatTableView : XXUnknownSuperclass {
	BOOL _needUpdateOffsets;
	NSDictionary* _rectsForVisibleRows;
}
@property(retain, nonatomic) NSDictionary* rectsForVisibleRows;
-(void).cxx_destruct;
-(CGPoint)vk_newContentOffsetAfterUpdates;
-(void)_setupCellAnimations;
-(void)_endCellAnimationsWithContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ActionButtonProperties : XXUnknownSuperclass {
	UIImage* _backgroundImageForNormalState;
	UIImage* _backgroundImageForHighlightedState;
	UIFont* _titleFont;
	UIColor* _titleColor;
}
@property(retain, nonatomic) UIColor* titleColor;
@property(retain, nonatomic) UIFont* titleFont;
@property(retain, nonatomic) UIImage* backgroundImageForHighlightedState;
@property(retain, nonatomic) UIImage* backgroundImageForNormalState;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKMUI : XXUnknownSuperclass {
}
+(void)setupShadowForLayer:(id)layer color:(id)color radius:(float)radius;
+(void)setupShadowForLayer:(id)layer color:(id)color radius:(float)radius offset:(CGSize)offset;
+(void)setupShadowForLayer:(id)layer color:(id)color radius:(float)radius offset:(CGSize)offset opacity:(float)opacity;
+(id)topMostWindow;
+(BOOL)windowIsUtility:(id)utility;
+(void)hideStatusBar:(BOOL)bar animation:(int)animation inApplicationContext:(id)applicationContext;
+(void)tableViewCell:(id)cell forceSeparatorInset:(UIEdgeInsets)inset;
+(id)tableViewForCell:(id)cell;
+(void)navigationItem:(id)item useRightBarButtonItem:(id)item2;
+(void)alignNavTitleSubview:(id)subview desiredWidth:(float)width;
+(void)bump:(id)bump;
+(void)twitch:(id)twitch;
+(void)shake:(id)shake;
+(void)animateWithKeyboard:(id)keyboard delay:(double)delay options:(unsigned)options animations:(id)animations completion:(id)completion;
+(id)sample:(id)sample image:(id)image;
+(int)countSubviews:(id)subviews;
+(id)debugAlign:(id)align inWindow:(id)window;
+(void)debugScrollToTopInWindow:(id)window;
+(void)dumpView:(id)view;
+(void)hint:(id)hint;
+(id)labelWithText:(id)text textColor:(id)color font:(id)font;
+(id)actionButtonOfPriority:(unsigned)priority title:(id)title target:(id)target action:(SEL)action;
+(id)actionButtonPropertiesOfPriority:(unsigned)priority;
+(id)actionButtonFont;
+(void)addLightBlurBackgroundForView:(id)view;
+(id)lightBlurView;
+(id)searchBarWithDarkStyle:(BOOL)darkStyle;
+(id)menuSectionHeader:(id)header;
+(id)sectionHeaderLabel:(CGRect)label;
+(id)sectionSeparator;
+(id)sectionSeparator:(id)separator borders:(id)borders;
+(id)separator:(id)separator host:(id)host bottom:(BOOL)bottom;
+(id)separator:(id)separator host:(id)host bottom:(BOOL)bottom nohighlight:(BOOL)nohighlight inset:(float)inset;
+(id)blueSelectedBackground;
+(id)loadingAnimation:(BOOL)animation;
+(id)onlineView;
+(void)profileButton:(id)button renderSelected:(BOOL)selected;
+(id)profileButton:(BOOL)button;
+(id)composeBarButtonItem:(id)item action:(SEL)action;
+(id)plusBarButtonItem:(id)item action:(SEL)action;
+(id)actionsButton:(id)button action:(SEL)action;
+(id)doneButton:(id)button action:(SEL)action;
+(id)barButtonImage:(id)image target:(id)target action:(SEL)action;
+(id)avatarBorder;
+(void)customizePasswordField:(id)field;
+(void)customizeSearchBarContainedInNavigationBar:(id)navigationBar;
+(void)customizeWhiteNavigationBar:(id)bar;
+(void)customizeNavigationBar:(id)bar customized:(BOOL)customized;
+(void)setupNavigationBarAppearance;
+(void)setupWithInterfaceOrientation:(int)interfaceOrientation;
@end

__attribute__((visibility("hidden")))
@interface VKMSearchBar : XXUnknownSuperclass {
}
-(void)setFrame:(CGRect)frame;
-(void)setContentInset:(UIEdgeInsets)inset;
@end

__attribute__((visibility("hidden")))
@interface VKSearchBarNoCancel : XXUnknownSuperclass {
}
-(void)setShowsCancelButton:(BOOL)button animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface DarkSearchBar : VKMSearchBar {
}
@end

__attribute__((visibility("hidden")))
@interface FixedButtonsScrollView : XXUnknownSuperclass {
}
-(BOOL)touchesShouldCancelInContentView:(id)touches;
@end

__attribute__((visibility("hidden")))
@interface VKDefaultPopupWindow : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface VKMGradientView : XXUnknownSuperclass {
}
@property(readonly, assign, nonatomic) CAGradientLayer* gradientLayer;
+(Class)layerClass;
@end

__attribute__((visibility("hidden")))
@interface VKMTableViewSearchHeaderView : XXUnknownSuperclass {
	UISegmentedControl* _scopes;
}
@property(retain, nonatomic) UISegmentedControl* scopes;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setSegments:(id)segments;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKMTableController : VKMScrollViewController <UITableViewDataSource, UITableViewDelegate, VKMSearchControllerDelegate, UISearchControllerDelegate> {
	UITableView* _tableView;
	UIColor* _separatorColor;
	VKMSearchController* _search;
	VKSearchController* _search80;
	ReusableViewsPool* _reusableViewsPool;
	VKMTableViewSearchHeaderView* _searchHeader;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) ReusableViewsPool* reusableViewsPool;
@property(retain, nonatomic) VKSearchController* search80;
@property(retain, nonatomic) VKMSearchController* search;
@property(retain, nonatomic) UIColor* separatorColor;
@property(retain, nonatomic) VKMTableViewSearchHeaderView* searchHeader;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)didDismissSearchController:(id)controller;
-(void)willDismissSearchController:(id)controller;
-(void)didPresentSearchController:(id)controller;
-(void)willPresentSearchController:(id)controller;
-(void)presentSearchController:(id)controller;
-(void)redrawSectionFooters;
-(void)redrawSectionHeaders;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)currentIndex;
-(void)VKMTablePerformDeselectOnViewWillAppear:(BOOL)vkmtablePerformDeselectOnView;
-(float)VKMTableCellSeparatorInsetForIndexPath:(id)indexPath;
-(void)model:(id)model updated:(id)updated;
-(void)scrollTable:(float)table;
-(void)actionSearchScopeChanged:(id)changed;
-(void)searchControllerDidChangedActive:(id)searchController;
-(void)searchControllerChangedActive:(id)active;
-(int)VKMControllerStatusBarStyle;
-(void)VKMSearchCustomizeResultsTableView:(id)view;
-(void)VKMTableUpdatedIndex;
-(void)VKMTableSetupSearch;
-(id)VKMTableCreateSearchController80;
-(id)VKMTableCreateSearchController:(id)controller;
-(id)VKMTableCreateSearchBar;
-(int)VKMTableSearchMode;
-(void)VKMTableDiscovered:(id)discovered cell:(id)cell;
-(void)VKMScrollViewSetFooter:(id)footer;
-(void)VKMScrollViewUpdateTeaserViewInsets;
-(id)VKMScrollView;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)__setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(Class)VKMTableViewClass;
-(int)VKMTableStyle;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderBanSource : ActionOptionsProviderActionBuilder {
	BOOL _fastBan;
	NSNumber* _sourceId;
	NSString* _title;
	NSString* _track_code;
}
@property(retain, nonatomic) NSString* track_code;
@property(readonly, assign, nonatomic) BOOL fastBan;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) NSNumber* sourceId;
+(id)sourceId:(id)anId;
+(id)source:(id)source type:(int)type;
+(id)sourceId:(id)anId title:(id)title type:(int)type;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(id)initWithSourceId:(id)sourceId;
-(id)initWithSource:(id)source type:(int)type;
-(id)initWithSourceId:(id)sourceId title:(id)title type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppScriptInitMessageHandler : XXUnknownSuperclass <WKScriptMessageHandler> {
	VKWebAppContainerController* _weakContainer;
	id<VKWebAppScriptInitMessageDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKWebAppScriptInitMessageDelegate> delegate;
@property(assign, nonatomic) __weak VKWebAppContainerController* weakContainer;
-(void).cxx_destruct;
-(void)userContentController:(id)controller didReceiveScriptMessage:(id)message;
-(id)initWithContainer:(id)container delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppScriptCloseMessageHandler : XXUnknownSuperclass <WKScriptMessageHandler> {
	VKWebAppContainerController* _weakContainer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VKWebAppContainerController* weakContainer;
-(void).cxx_destruct;
-(void)userContentController:(id)controller didReceiveScriptMessage:(id)message;
-(id)initWithContainer:(id)container;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppReportCloseMessageHandler : VKWebAppScriptCloseMessageHandler {
	ReportAction* _action;
	ActionContext* _context;
}
@property(retain, nonatomic) ActionContext* context;
@property(retain, nonatomic) ReportAction* action;
-(void).cxx_destruct;
-(void)userContentController:(id)controller didReceiveScriptMessage:(id)message;
-(id)initWithContainer:(id)container action:(id)action context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MessagesIndexSection : XXUnknownSuperclass {
	BOOL _justSentSection;
	NSMutableArray* _messages;
	id<VKMessage> _head;
	id _key;
}
@property(assign, nonatomic) BOOL justSentSection;
@property(retain, nonatomic) NSMutableArray* messages;
@property(retain, nonatomic) id key;
@property(retain, nonatomic) id<VKMessage> head;
+(id)sectionWithSection:(id)section;
+(id)sectionWithMessages:(id)messages key:(id)key;
-(void).cxx_destruct;
-(id)lastObject;
-(unsigned)indexOfObject:(id)object inSortedRange:(NSRange)sortedRange options:(unsigned)options usingComparator:(id)comparator;
-(id)objectAtIndex:(unsigned)index;
-(unsigned)count;
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(void)addObjectsFromArray:(id)array;
-(void)addObject:(id)object;
-(void)removeObjectsAtIndexes:(id)indexes;
-(id)description;
-(id)printMessages;
-(id)mid;
-(void)reset;
@end

__attribute__((visibility("hidden")))
@interface MessagesIndexSectionMisc : MessagesIndexSection {
}
+(id)misc;
-(id)mid;
@end

__attribute__((visibility("hidden")))
@interface MessagesIndex : Index {
	NSDictionary* _justSent;
	MessagesListRenderer* _renderer;
}
@property(retain, nonatomic) NSDictionary* justSent;
@property(retain, nonatomic) MessagesListRenderer* renderer;
+(id)indexWithRenderer:(id)renderer initial:(BOOL)initial;
-(void).cxx_destruct;
-(id)indexByReseting;
-(id)sectionAtIndex:(int)index;
-(id)indexWithUpdate:(id*)update updating:(id)updating removing:(id)removing addingDESC:(id)desc allowAppend:(BOOL)append pending:(BOOL)pending;
@end

__attribute__((visibility("hidden")))
@interface MessagesListRenderer : XXUnknownSuperclass {
	XXStruct_X102JB incomingStrategy_;
	XXStruct_X102JB outgoingStrategy_;
	NSNumber* _owner;
	XXStruct_X102JB _incomingStrategy;
	XXStruct_X102JB _outgoingStrategy;
}
@property(readonly, assign, nonatomic) XXStruct_X102JB outgoingStrategy;
@property(readonly, assign, nonatomic) XXStruct_X102JB incomingStrategy;
@property(readonly, retain, nonatomic) NSNumber* owner;
-(void).cxx_destruct;
-(void)prerenderr:(id)prerenderr;
-(id)sectionKeyForMessage:(id)message;
-(unsigned)miscSections;
-(id)initWithOwner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorTableViewCell : XXUnknownSuperclass {
	BOOL _insetsEmptyIcon;
}
@property(assign, nonatomic) BOOL insetsEmptyIcon;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorTableView : VKSelector <UITableViewDataSource, UITableViewDelegate> {
	BOOL _momentary;
	UITableView* _tableView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) BOOL momentary;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)optionAtIndexPath:(id)indexPath;
-(id)listedOptions;
-(void)updateSelection;
-(void)reloadData;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface DialogsRenderer : MessagesListRenderer {
}
+(void)initialize;
-(id)initWithOwner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface ChatRenderer : MessagesListRenderer {
	unsigned offset;
	BOOL _multi;
	UsersModel* _usersModel;
}
@property(retain, nonatomic) UsersModel* usersModel;
@property(assign, nonatomic) BOOL multi;
-(void).cxx_destruct;
-(void)prerenderr:(id)prerenderr;
-(id)sectionKeyForMessage:(id)message;
-(unsigned)miscSections;
-(id)initWithOwner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface VKUser : VKDomain <VKSource, MBContactPickerModelProtocol> {
	BOOL _online;
	BOOL _online_mobile;
	BOOL _verified;
	BOOL _is_friend;
	BOOL _can_write_private_message;
	NSNumber* _uid;
	NSString* _first_name;
	NSString* _last_name;
	NSString* _screen_name;
	NSString* _photo;
	int _sex;
	int _deactivated;
	NSString* _first_name_acc;
	NSString* _last_name_acc;
	NSString* _first_name_gen;
	NSString* _last_name_gen;
	NSString* _fullname;
}
@property(readonly, assign, nonatomic) UIImage* contactImage;
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(assign, nonatomic) float renderWidth;
@property(readonly, assign, nonatomic) int type;
@property(readonly, retain, nonatomic) NSString* name;
@property(readonly, retain, nonatomic) NSNumber* source_id;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* last_name_gen;
@property(retain, nonatomic) NSString* first_name_gen;
@property(retain, nonatomic) NSString* last_name_acc;
@property(retain, nonatomic) NSString* first_name_acc;
@property(assign, nonatomic) BOOL can_write_private_message;
@property(assign, nonatomic) BOOL is_friend;
@property(assign, nonatomic) BOOL verified;
@property(assign, nonatomic) BOOL online_mobile;
@property(assign, nonatomic) BOOL online;
@property(assign, nonatomic) int deactivated;
@property(assign, nonatomic) int sex;
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSString* screen_name;
@property(retain, nonatomic) NSString* last_name;
@property(retain, nonatomic) NSString* first_name;
@property(retain, nonatomic) NSNumber* uid;
@property(retain, nonatomic) NSString* fullname;
+(id)predicate:(id)predicate;
+(id)linkIcon;
-(void).cxx_destruct;
-(id)shortName;
-(BOOL)userDataEqual:(id)equal;
-(BOOL)disclosure;
-(id)title;
-(id)linkText;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
-(id)iden;
@end

__attribute__((visibility("hidden")))
@interface VKMessage : XXUnknownSuperclass <VKMessage> {
	float renderCellHeight;
	BOOL _is_deleted;
	BOOL _read_state;
	BOOL _incoming;
	BOOL _is_gift;
	BOOL _justSent;
	BOOL _justSentReported;
	NSNumber* _mid;
	VKText* _bodyText;
	unsigned _date;
	NSNumber* _sender;
	NSNumber* _messageRandomId;
	VKAttachments* _attachments;
	NSString* _geo_point;
	NSArray* _fwd;
	int _action;
	NSDictionary* _actionData;
	RenderLayout* _renderLayout;
	MOCTRender* _actionRender;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MOCTRender* actionRender;
@property(retain) RenderLayout* renderLayout;
@property(assign, nonatomic) BOOL justSentReported;
@property(assign, nonatomic) BOOL justSent;
@property(assign, nonatomic) BOOL is_gift;
@property(assign, nonatomic) BOOL incoming;
@property(retain, nonatomic) NSDictionary* actionData;
@property(assign, nonatomic) int action;
@property(retain, nonatomic) NSArray* fwd;
@property(retain, nonatomic) NSString* geo_point;
@property(retain, nonatomic) VKAttachments* attachments;
@property(retain, nonatomic) NSNumber* messageRandomId;
@property(retain, nonatomic) NSNumber* sender;
@property(assign, nonatomic) BOOL read_state;
@property(assign, nonatomic) BOOL is_deleted;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) VKText* bodyText;
@property(retain, nonatomic) NSNumber* mid;
+(id)pendingMessageWithBody:(id)body sender:(id)sender;
+(id)messageActionDataFromMessageData:(id)messageData;
+(id)messageWithAPIData:(id)apidata did:(id)did owner:(id)owner;
+(id)messageWithDialogData:(id)dialogData owner:(id)owner;
+(id)messageWithStoreData:(id)storeData owner:(id)owner;
+(id)messageCopy:(id)copy;
-(void).cxx_destruct;
-(id)sketchDoc;
-(BOOL)isSketchMessage;
-(id)messageActionUserId;
-(BOOL)isActionMessage;
-(id)attachmentString;
-(void)markRead;
-(id)body;
-(void)updatedFromMessage:(id)message;
-(void)parseFwd:(id)fwd;
-(void)setGiftsOwner:(id)owner;
-(BOOL)isAudioMessage;
-(void)parseAttachments:(id)attachments source:(id)source;
@end

__attribute__((visibility("hidden")))
@interface Brush : XXUnknownSuperclass {
	BOOL _variableSize;
	UIColor* _color;
	int _blendMode;
	float _layerAlpha;
	float _size;
}
@property(readonly, assign, nonatomic) float drawPeriod;
@property(assign, nonatomic) BOOL variableSize;
@property(assign, nonatomic) float size;
@property(assign, nonatomic) float layerAlpha;
@property(assign, nonatomic) int blendMode;
@property(retain, nonatomic) UIColor* color;
+(float)maxSize;
+(float)minSize;
-(void).cxx_destruct;
-(id)generateImageWithScale:(float)scale;
-(CGSize)brushImageSize;
-(id)initWithSize:(float)size color:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKStoriesPhotoStreamItem : VKStory <VKPhotoSized> {
	NSArray* _stories;
	int _sizeType;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int sizeType;
@property(copy, nonatomic) NSArray* stories;
+(id)itemWithStories:(id)stories;
-(void).cxx_destruct;
-(Class)cellClass;
-(void)domainOnEditCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface VMVoiceMessagePlayer : Model <VKAudioMessagePlayerDelegate, VMPlayingSessionDelegate> {
	NSNumber* _currentDialogId;
	VMSessionManager* _VMSessionManager;
	VKAudioQueuePlayer* _musicPlayer;
	VKAudioMessagePlayer* _audioMessagePlayer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSNumber* currentDialogId;
@property(retain, nonatomic) VKAudioMessagePlayer* audioMessagePlayer;
@property(retain, nonatomic) VKAudioQueuePlayer* musicPlayer;
@property(retain, nonatomic) VMSessionManager* VMSessionManager;
-(void).cxx_destruct;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)playerUpdated:(id)updated;
-(void)audioMessagePlayerChangingCurrentTime:(id)time;
-(void)audioMessagePlayerStateChanged:(id)changed;
-(BOOL)isCurrentAudioMessage:(id)message;
-(double)duration;
-(double)currentTime;
-(BOOL)isPaused;
-(BOOL)isPlaying;
-(void)seekToTime:(double)time;
-(void)pauseAndDeactivate;
-(void)pause;
-(void)resume;
-(void)playAudioMessage:(id)message;
-(void)reactivateSessionIfPaused;
-(void)playingSessionDidChangeSpeakerToDefault:(id)playingSession;
-(void)playingSessionWillChangeSpeakerToDefault:(id)playingSession;
-(void)playingSessionDidChangeSpeakerToEar:(id)playingSession;
-(void)playingSessionWillChangeSpeakerToEar:(id)playingSession;
-(void)playingSessionExternalAudioDeviceDisconnected:(id)disconnected;
-(void)playingSessionApplicationResignActiveOrInterrupted:(id)interrupted;
-(void)notificationVMSessionManagerWillChangeSessionNotification:(id)notificationVMSessionManager;
-(id)initWithSession:(id)session VMSessionManager:(id)manager musicPlayer:(id)player;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PollEditAttachment : DomainEditAttachment {
}
@property(retain, nonatomic) VKPoll* domain;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface VKDialog : VKDomain <VKMessage> {
	BOOL _multi;
	BOOL _kicked;
	BOOL _left;
	NSNumber* _did;
	VKMessage* _head;
	NSNumber* _single_user;
	NSString* _title;
	NSNumber* _admin_id;
	unsigned _users_count;
	NSArray* _active_users;
	NSString* _api_photo;
	NSString* _dialogAttachments;
	id<VKSource> _sender;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VKSource> sender;
@property(retain, nonatomic) NSString* dialogAttachments;
@property(retain, nonatomic) NSString* api_photo;
@property(assign, nonatomic) BOOL left;
@property(assign, nonatomic) BOOL kicked;
@property(retain, nonatomic) NSArray* active_users;
@property(assign, nonatomic) unsigned users_count;
@property(retain, nonatomic) NSNumber* admin_id;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* single_user;
@property(assign, nonatomic) BOOL multi;
@property(retain, nonatomic) VKMessage* head;
@property(retain, nonatomic) NSNumber* did;
+(id)dialogWithDid:(id)dialogWith;
+(id)singleUserDialog:(id)dialog;
+(id)dialogWithAPIData:(id)apidata ownder:(id)ownder;
+(id)dialogWithSearchAPIData:(id)searchAPIData;
+(id)dialogWithStoreData:(id)storeData owner:(id)owner;
-(void).cxx_destruct;
-(id)activePhotosWithUsers:(id)users mainUser:(id)user;
-(BOOL)knowsUser:(id)user;
-(void)updatedFromMessage:(id)message;
-(BOOL)justSent;
-(BOOL)incoming;
-(unsigned)date;
-(id)body;
-(id)mid;
@end

__attribute__((visibility("hidden")))
@interface VKDialogTarget : VKDomainDerived {
	BOOL _input;
	BOOL _dropOldAttachments;
	BOOL _refreshIfMulti;
	BOOL _fromPush;
	BOOL _skipStoringDrafts;
	VKUser* _user;
	NSString* _preEnteredText;
	NSArray* _attachments;
	StatsRef* _ref;
}
@property(retain, nonatomic) StatsRef* ref;
@property(assign, nonatomic) BOOL skipStoringDrafts;
@property(assign, nonatomic) BOOL fromPush;
@property(assign, nonatomic) BOOL refreshIfMulti;
@property(retain, nonatomic) NSArray* attachments;
@property(copy, nonatomic) NSString* preEnteredText;
@property(assign, nonatomic) BOOL dropOldAttachments;
@property(assign, nonatomic) BOOL input;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) VKDialog* domain;
-(void).cxx_destruct;
-(id)setupRef:(id)ref;
-(id)setupFromPush;
-(id)setupRefreshMulti;
@end

__attribute__((visibility("hidden")))
@interface VKMFetchContext : VKMStoreContext {
	id<UsersCacheHandler> _delegate;
}
@property(assign, nonatomic) __weak id<UsersCacheHandler> delegate;
-(void).cxx_destruct;
-(void)fetchMessagesForUpdate:(id)update complete:(id)complete;
-(id)loadSortedMessages:(id)messages inDialog:(id)dialog userIds:(id)ids;
-(id)loadSortedDialogs:(id)dialogs userIds:(id)ids;
-(void)fetchMessagesForDialog:(id)dialog after:(id)after limit:(int)limit complete:(id)complete;
-(id)loadMessages:(id)messages userIds:(id)ids;
-(void)fetchHeadsForDialogsAfter:(id)dialogsAfter limit:(int)limit complete:(id)complete;
-(id)loadDialogs:(id)dialogs userIds:(id)ids;
-(void)processUsersUpdate:(id)update complete:(id)complete;
-(id)fetchModelUsers:(id)users force:(BOOL)force;
-(void)checkUserIds:(id)ids;
-(id)sourceWithData:(id)data;
-(id)loadUsers:(id)users;
@end

__attribute__((visibility("hidden")))
@interface VKMUpdateContext : VKMStoreContext <VKLPSUpdateVisitor> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)readStateForMessage:(id)message withPeer:(id)peer incoming:(BOOL)incoming context:(id)context;
-(void)messagesCounter:(id)counter;
-(void)user:(id)user typingInChat:(id)chat context:(id)context;
-(void)user:(id)user online:(BOOL)online flags:(unsigned)flags context:(id)context;
-(void)chatUpdated:(id)updated user:(BOOL)user context:(id)context;
-(void)message:(id)message restored:(BOOL)restored read:(id)read did:(id)did uid:(id)uid date:(id)date title:(id)title body:(id)body att:(BOOL)att randomId:(id)anId context:(id)context;
-(void)readUpdatePeer:(id)peer beforeMid:(id)mid incoming:(BOOL)incoming context:(id)context;
-(void)messageRemoved:(id)removed context:(id)context;
-(void)messageUpdated:(id)updated read:(BOOL)read context:(id)context;
-(void)updateMessage:(id)message read:(BOOL)read context:(id)context;
-(void)updateWithLPSParser:(id)lpsparser andData:(id)data complete:(id)complete;
-(id)collectMessagesWithData:(id)data;
-(void)updateRemoveDay:(id)day;
-(void)updateMarkDialog:(id)dialog untilMid:(id)mid complete:(id)complete;
-(void)updateMarkReadMessages:(id)messages complete:(id)complete;
-(void)updateMessagesMarks:(id)marks update:(id)update;
-(void)updateDeleteMessages:(id)messages complete:(id)complete;
-(void)processRemoveMessage:(id)message update:(id)update;
-(void)updateMarkDeleteDialog:(id)dialog complete:(id)complete;
-(void)updateMessagesWithData:(id)data justSent:(id)sent preview:(BOOL)preview complete:(id)complete;
-(void)updateMessagesWithData:(id)data dialog:(id)dialog previousMID:(id)mid lastPage:(BOOL)page user:(id)user complete:(id)complete;
-(void)processMessageData:(id)data did:(id)did setHead:(BOOL)head checkHead:(BOOL)head4 justSent:(id)sent preview:(BOOL)preview withDialogData:(BOOL)dialogData updatData:(id)data8 updates:(id)updates;
-(void)updateDialogsWithData:(id)data dialogs:(id)dialogs previousMID:(id)mid lastPage:(BOOL)page complete:(id)complete;
-(void)updateDialogWithData:(id)data dialogId:(id)anId complete:(id)complete;
-(void)processDialogData:(id)data updateData:(id)data2 updates:(id)updates;
-(void)processSetHead:(id)head forDialog:(id)dialog updates:(id)updates;
-(id)predicateForMessagesListWithIds:(id)ids previousMID:(id)mid lastMID:(id)mid3 lastPage:(BOOL)page messagesForDID:(id)did;
-(void)updateOwnersWithData:(id)data complete:(id)complete;
-(void)updateUsersWithData:(id)data complete:(id)complete;
-(id)processUsersData:(id)data groupsData:(id)data2;
@end

__attribute__((visibility("hidden")))
@interface VKMStoreLPSContext : XXUnknownSuperclass {
	VKMStoreUpdateData* _data;
	MessagesUpdate* _update;
}
@property(retain, nonatomic) MessagesUpdate* update;
@property(retain, nonatomic) VKMStoreUpdateData* data;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AutoplayStats : XXUnknownSuperclass {
	BOOL _tracked;
}
-(void)trackVideoAutoplayOnce:(id)once stats:(id)stats;
-(void)trackVideoAutoplay:(id)autoplay stats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface VKMDateFormatterImpl : XXUnknownSuperclass {
	int timezoneOffset;
	double localOffset;
	double day;
	double year;
	double nextYear;
	BOOL metricSystem;
	BOOL enabledAMPM;
	BOOL _langRU;
	BOOL _langBE;
	BOOL _langUK;
	BOOL _langPT;
	BOOL _langES;
	BOOL _localeRU;
	IndexRestriction* _index;
	NSString* _language;
	int _lang;
	NSDateFormatter* _fYesterday;
	NSDateFormatter* _fYearFull;
	NSDateFormatter* _fBday;
	NSDateFormatter* _fRelative;
	NSDateFormatter* _fEventFull;
	NSDateFormatter* _fDay;
	NSDateFormatter* _fWeek;
	NSDateFormatter* _fWeekFull;
	NSDateFormatter* _fYear;
	NSDateFormatter* _fDef;
	NSDateFormatter* _fDefFull;
	NSDateFormatter* _fBirthday;
	NSNumberFormatter* _fDistance;
	NSString* _formatTimeTomorrow;
	NSString* _formatTimeToday;
	NSString* _formatTimeYesterday;
	NSString* _formatTimeFull;
	NSString* _formatTimePT1HRTomorrow;
	NSString* _formatTimePT1HRToday;
	NSString* _formatTimePT1HRYesterday;
	NSString* _formatTimePT1HRFull;
	NSString* _tokenNow;
	NSString* _tokenSecond1;
	NSString* _tokenSecond1d;
	NSString* _tokenSecond234;
	NSString* _tokenSecondN;
	NSString* _tokenMinute1;
	NSString* _tokenMinute1d;
	NSString* _tokenMinute234;
	NSString* _tokenMinuteN;
	NSString* _tokenHour1;
	NSString* _tokenHour1d;
	NSString* _tokenHour234;
	NSString* _tokenHourN;
	NSString* _formatUpdated;
	NSString* _tokenUpdatedNow;
	NSString* _formatUpdatedMasculine;
	NSString* _tokenUpdatedNowMasculine;
}
@property(retain, nonatomic) NSDateFormatter* fEventFull;
@property(retain, nonatomic) NSDateFormatter* fRelative;
@property(retain, nonatomic) NSDateFormatter* fBday;
@property(retain, nonatomic) NSDateFormatter* fYearFull;
@property(retain, nonatomic) NSDateFormatter* fYesterday;
@property(assign, nonatomic) BOOL localeRU;
@property(assign, nonatomic) BOOL langES;
@property(assign, nonatomic) BOOL langPT;
@property(assign, nonatomic) BOOL langUK;
@property(assign, nonatomic) BOOL langBE;
@property(assign, nonatomic) BOOL langRU;
@property(assign, nonatomic) int lang;
@property(retain, nonatomic) NSString* language;
@property(retain, nonatomic) IndexRestriction* index;
@property(retain, nonatomic) NSString* tokenUpdatedNowMasculine;
@property(retain, nonatomic) NSString* formatUpdatedMasculine;
@property(retain, nonatomic) NSString* tokenUpdatedNow;
@property(retain, nonatomic) NSString* formatUpdated;
@property(retain, nonatomic) NSString* tokenHourN;
@property(retain, nonatomic) NSString* tokenHour234;
@property(retain, nonatomic) NSString* tokenHour1d;
@property(retain, nonatomic) NSString* tokenHour1;
@property(retain, nonatomic) NSString* tokenMinuteN;
@property(retain, nonatomic) NSString* tokenMinute234;
@property(retain, nonatomic) NSString* tokenMinute1d;
@property(retain, nonatomic) NSString* tokenMinute1;
@property(retain, nonatomic) NSString* tokenSecondN;
@property(retain, nonatomic) NSString* tokenSecond234;
@property(retain, nonatomic) NSString* tokenSecond1d;
@property(retain, nonatomic) NSString* tokenSecond1;
@property(retain, nonatomic) NSString* tokenNow;
@property(retain, nonatomic) NSString* formatTimePT1HRFull;
@property(retain, nonatomic) NSString* formatTimePT1HRYesterday;
@property(retain, nonatomic) NSString* formatTimePT1HRToday;
@property(retain, nonatomic) NSString* formatTimePT1HRTomorrow;
@property(retain, nonatomic) NSString* formatTimeFull;
@property(retain, nonatomic) NSString* formatTimeYesterday;
@property(retain, nonatomic) NSString* formatTimeToday;
@property(retain, nonatomic) NSString* formatTimeTomorrow;
@property(retain, nonatomic) NSNumberFormatter* fDistance;
@property(retain, nonatomic) NSDateFormatter* fBirthday;
@property(retain, nonatomic) NSDateFormatter* fDefFull;
@property(retain, nonatomic) NSDateFormatter* fDef;
@property(retain, nonatomic) NSDateFormatter* fYear;
@property(retain, nonatomic) NSDateFormatter* fWeekFull;
@property(retain, nonatomic) NSDateFormatter* fWeek;
@property(retain, nonatomic) NSDateFormatter* fDay;
+(BOOL)disabledUntilActive:(id)active;
+(id)futureServerDate:(id)date;
+(id)applicationPreferredLanguage;
+(id)supportedLanguages;
-(void).cxx_destruct;
-(id)distance:(double)distance;
-(int)age:(id)age;
-(id)birthday:(id)birthday isShort:(BOOL)aShort;
-(id)from:(int)from to:(int)to;
-(id)updatedAgoWithToken:(id)token format:(id)format date:(id)date;
-(id)updatedAgoMasculine:(id)masculine;
-(id)updatedAgo:(id)ago;
-(id)briefApproxTimeAgo:(unsigned)ago;
-(id)created:(unsigned)created pretty:(BOOL)pretty;
-(id)created:(unsigned)created;
-(id)groupFounded:(unsigned)founded;
-(id)monthNames;
-(id)relativeDateTime:(id)time;
-(id)dayTime:(id)time;
-(id)sectionStringForAPIDate:(unsigned)apidate;
-(id)messageStringForAPIDate:(unsigned)apidate;
-(id)dialogStringForAPIDate:(unsigned)apidate;
-(int)serverTimeFromLocalDate:(id)localDate;
-(unsigned)fakeAPITime;
-(unsigned)localUTCOffset;
-(void)syncWithServerTime:(unsigned)serverTime;
-(id)initWithLang:(id)lang locale:(id)locale bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface VKMDateFormatter : XXUnknownSuperclass {
	VKMDateFormatterImpl* _impl;
}
@property(retain, nonatomic) VKMDateFormatterImpl* impl;
+(id)sharedFormatter;
-(void).cxx_destruct;
-(void)reset;
-(void)localeChange:(id)change;
-(void)timeChange:(id)change;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKMLoadedImage : XXUnknownSuperclass <NSDiscardableContent> {
	int counter;
	UIImage* _image;
}
@property(readonly, retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(BOOL)isContentDiscarded;
-(void)discardContentIfPossible;
-(void)endContentAccess;
-(BOOL)beginContentAccess;
-(id)initWithImage:(id)image;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMImage : XXUnknownSuperclass <NSCacheDelegate> {
	NSObject<OS_dispatch_queue>* processingQueue;
	NSCache* _memory;
	NSOperationQueue* _queue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) NSCache* memory;
@property(readonly, retain, nonatomic) NSOperationQueue* queue;
+(id)operationForImage:(id)image cacheResponse:(BOOL)response forceScale:(id)scale;
+(id)shared;
-(void).cxx_destruct;
-(void)imageWithURL:(id)url complete:(id)complete;
-(void)multiPlaylistImage:(id)image size:(float)size cornerRadius:(float)radius overlayColor:(id)color handler:(id)handler;
-(void)multidialogImage:(id)image handler:(id)handler;
-(void)load:(id)load filter:(id)filter reuse:(double)reuse;
-(void)load:(id)load type:(XXStruct_UOIMaD)type reuse:(double)reuse;
-(void)loadLocalImageWithPath:(id)path async:(BOOL)async completion:(id)completion;
-(id)localImageWithPath:(id)path;
-(void)notificationMemory:(id)memory;
-(void)dealloc;
-(id)initWithMemoryCountLimit:(unsigned)memoryCountLimit maxOperations:(int)operations;
@end

__attribute__((visibility("hidden")))
@interface ActionSheetFactory : XXUnknownSuperclass {
}
+(id)actionSheetWithTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface ActionDialogFactory : XXUnknownSuperclass {
}
+(id)dialogWithTitle:(id)title message:(id)message;
+(id)dialogWithTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface AppRenderer : Renderer {
}
@property(retain, nonatomic) VKAPIApp* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(id)rendererElements;
-(BOOL)cellSelected:(id)selected;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorOptionViewController : XXUnknownSuperclass <VKSelectorOptionViewController> {
	NSString* _title;
	UIImage* _icon;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImage* icon;
@property(retain, nonatomic) NSString* title;
+(id)optionWithTitle:(id)title icon:(id)icon;
-(void).cxx_destruct;
-(id)viewControllerWithMainModel:(id)mainModel;
-(id)initWithTitle:(id)title icon:(id)icon;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorOptionViewControllerWithBlock : VKSelectorOptionViewController {
	id _block;
}
@property(copy, nonatomic) id block;
+(id)optionWithTitle:(id)title icon:(id)icon block:(id)block;
-(void).cxx_destruct;
-(id)viewControllerWithMainModel:(id)mainModel;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(BOOL)isEqualToViewControllerOptionBlock:(id)viewControllerOptionBlock;
-(id)initWithTitle:(id)title icon:(id)icon block:(id)block;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorOptionViewControllerCacheable : XXUnknownSuperclass <VKSelectorOptionViewController> {
	id<VKSelectorOptionViewController> _option;
	VKMController* _cachedController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKMController* cachedController;
@property(retain, nonatomic) id<VKSelectorOptionViewController> option;
+(id)cachingOption:(id)option;
-(void).cxx_destruct;
-(id)viewControllerWithMainModel:(id)mainModel;
-(id)icon;
-(id)title;
-(id)initWithOption:(id)option;
@end

__attribute__((visibility("hidden")))
@interface SDAVAssetExportSession : XXUnknownSuperclass {
	NSError* _error;
	double duration;
	XXStruct_pwHToB lastSamplePresentationTime;
	BOOL _shouldOptimizeForNetworkUse;
	id<SDAVAssetExportSessionDelegate> _delegate;
	AVAsset* _asset;
	AVVideoComposition* _videoComposition;
	AVAudioMix* _audioMix;
	NSString* _outputFileType;
	NSURL* _outputURL;
	NSDictionary* _videoInputSettings;
	NSDictionary* _videoSettings;
	NSDictionary* _audioSettings;
	NSArray* _metadata;
	float _progress;
	AVAssetReader* _reader;
	AVAssetReaderVideoCompositionOutput* _videoOutput;
	AVAssetReaderAudioMixOutput* _audioOutput;
	AVAssetWriter* _writer;
	AVAssetWriterInput* _videoInput;
	AVAssetWriterInputPixelBufferAdaptor* _videoPixelBufferAdaptor;
	AVAssetWriterInput* _audioInput;
	NSObject<OS_dispatch_queue>* _inputQueue;
	id _completionHandler;
	XXStruct_yD8eWC _timeRange;
}
@property(readonly, assign, nonatomic) int status;
@property(readonly, assign, nonatomic) NSError* error;
@property(copy, nonatomic) NSArray* metadata;
@property(assign, nonatomic) BOOL shouldOptimizeForNetworkUse;
@property(assign, nonatomic) XXStruct_yD8eWC timeRange;
@property(copy, nonatomic) NSDictionary* audioSettings;
@property(copy, nonatomic) NSDictionary* videoSettings;
@property(copy, nonatomic) NSDictionary* videoInputSettings;
@property(copy, nonatomic) NSURL* outputURL;
@property(copy, nonatomic) NSString* outputFileType;
@property(copy, nonatomic) AVAudioMix* audioMix;
@property(copy, nonatomic) AVVideoComposition* videoComposition;
@property(readonly, assign, nonatomic) AVAsset* asset;
@property(assign, nonatomic) __weak id<SDAVAssetExportSessionDelegate> delegate;
@property(copy, nonatomic) id completionHandler;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* inputQueue;
@property(retain, nonatomic) AVAssetWriterInput* audioInput;
@property(retain, nonatomic) AVAssetWriterInputPixelBufferAdaptor* videoPixelBufferAdaptor;
@property(retain, nonatomic) AVAssetWriterInput* videoInput;
@property(retain, nonatomic) AVAssetWriter* writer;
@property(retain, nonatomic) AVAssetReaderAudioMixOutput* audioOutput;
@property(retain, nonatomic) AVAssetReaderVideoCompositionOutput* videoOutput;
@property(retain, nonatomic) AVAssetReader* reader;
@property(assign, nonatomic) float progress;
+(id)exportSessionWithAsset:(id)asset;
-(void).cxx_destruct;
-(void)reset;
-(void)cancelExport;
-(void)complete;
-(void)finish;
-(id)buildDefaultVideoComposition;
-(BOOL)encodeReadySamplesFromOutput:(id)output toInput:(id)input;
-(void)exportAsynchronouslyWithCompletionHandler:(id)completionHandler;
-(id)initWithAsset:(id)asset;
@end

__attribute__((visibility("hidden")))
@interface ChatCell : MessageCell <MessageRendererDelegate> {
	BOOL _callout;
	MessageRenderer* _renderer;
	UIImageView* _bg;
	UILabel* _time;
	VKMImageView* _avatar;
	UIImageView* _sent;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL callout;
@property(retain, nonatomic) UILabel* time;
@property(retain, nonatomic) UIImageView* bg;
@property(retain, nonatomic) MessageRenderer* renderer;
@property(retain, nonatomic) UIImageView* sent;
@property(retain, nonatomic) VKMImageView* avatar;
+(void)prerender:(id)prerender multi:(BOOL)multi;
+(void)initialize;
-(void).cxx_destruct;
-(id)messageNavigation;
-(void)actionMultiUserTapped:(id)tapped;
-(void)messageUpdated:(id)updated;
-(void)updateReadState;
-(CGPoint)accessoryPosition;
-(BOOL)isAccessibilityElement;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)willTransitionToState:(unsigned)state;
-(CGRect)bounds;
-(void)prepareForReuse;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setBG;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate multidialog:(BOOL)multidialog selfdialog:(BOOL)selfdialog identifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface TypedProxy : XXUnknownSuperclass {
	id _target;
	Class _targetClass;
}
+(id)proxy:(id)proxy;
-(void).cxx_destruct;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)initWithTarget:(id)target;
@end

__attribute__((visibility("hidden")))
@interface CCLocalMaximum : XXUnknownSuperclass {
	unsigned _hitCount;
	unsigned _cellIndex;
	double _red;
	double _green;
	double _blue;
	double _brightness;
}
@property(assign, nonatomic) double brightness;
@property(assign, nonatomic) double blue;
@property(assign, nonatomic) double green;
@property(assign, nonatomic) double red;
@property(assign, nonatomic) unsigned cellIndex;
@property(assign, nonatomic) unsigned hitCount;
@end

__attribute__((visibility("hidden")))
@interface SimpleMapAnnotation : XXUnknownSuperclass <MKAnnotation> {
	NSString* _title;
	NSString* _subtitle;
	CLGeocoder* _geocoder;
	CLLocationCoordinate2D _coordinate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) CLGeocoder* geocoder;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithCoordinate:(CLLocationCoordinate2D)coordinate;
@end

__attribute__((visibility("hidden")))
@interface Annotation : XXUnknownSuperclass <MKAnnotation> {
	CLLocationCoordinate2D _coordinate;
}
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
@end

__attribute__((visibility("hidden")))
@interface MapViewController : VKMController <MKMapViewDelegate> {
	BOOL overriden;
	int supportedMaps;
	int mode;
	int state;
	BOOL init;
	CLLocationCoordinate2D initLocation;
	int _thumbSize;
	CLLocationManager* _locationManager;
	MKMapView* _map;
	UIToolbar* _toolbar;
	SimpleMapAnnotation* _annotation;
	UIBarButtonItem* _buttonLocate;
	id _handler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) UIBarButtonItem* buttonLocate;
@property(retain, nonatomic) SimpleMapAnnotation* annotation;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) MKMapView* map;
@property(retain, nonatomic) CLLocationManager* locationManager;
+(id)mapViewForSelectionWithThumbSize:(int)thumbSize handler:(id)handler;
+(id)mapViewForCoordinateString:(id)coordinateString;
+(id)mapViewForCoordinate:(CLLocationCoordinate2D)coordinate;
-(void).cxx_destruct;
-(void)mapView:(id)view annotationView:(id)view2 didChangeDragState:(unsigned)state fromOldState:(unsigned)oldState;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)cancel:(id)cancel;
-(void)done:(id)done;
-(void)selectInitialAnnotation;
-(void)actionGesture:(id)gesture;
-(void)actionLocate:(id)locate;
-(void)actionAction:(id)action;
-(void)viewWillAppear:(BOOL)view;
-(void)setLocation:(CLLocationCoordinate2D)location;
-(void)focus;
-(void)viewDidLoad;
-(void)loadView;
-(void)refreshDone;
-(void)change:(id)change;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface TGLocationMapView : XXUnknownSuperclass {
	UITapGestureRecognizer* _tapGestureRecognizer;
	UILongPressGestureRecognizer* _longPressGestureRecognizer;
	BOOL _manipulationEnabled;
	id _singleTap;
}
@property(assign, nonatomic) BOOL manipulationEnabled;
@property(assign, nonatomic) BOOL tapEnabled;
@property(assign, nonatomic) BOOL longPressAsTapEnabled;
@property(copy, nonatomic) id singleTap;
-(void).cxx_destruct;
-(void)tg_handleLongPress:(id)press;
-(void)tg_handleTap:(id)tap;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MessageController : VKMController <MessageRendererDelegate> {
	NSNumber* _did;
	VKMessage* _message;
	MessageRenderer* _renderer;
	UIScrollView* _scroll;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKMessage* message;
@property(retain, nonatomic) NSNumber* did;
@property(retain, nonatomic) UIScrollView* scroll;
@property(retain, nonatomic) MessageRenderer* renderer;
-(void).cxx_destruct;
-(void)actionDialog:(id)dialog;
-(id)VKMControllerStatsRef;
-(id)messageNavigation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)VKMControllerChromeInsetsApply;
-(void)loadView;
-(id)setupMesssage:(id)messsage inDialog:(id)dialog;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SendingModel : StoreUpdateModel {
	NSMutableArray* _pending;
	NSOperationQueue* _uploadQueue;
	AttachmentsContainer* _attachmentsContainer;
	MessagesModel* _weakMessages;
	NSNumber* _did;
	NSMutableDictionary* _sent;
	NSMutableArray* _sending;
}
@property(assign, nonatomic) MessagesModel* weakMessages;
@property(readonly, retain, nonatomic) AttachmentsContainer* attachmentsContainer;
@property(readonly, retain, nonatomic) NSOperationQueue* uploadQueue;
@property(readonly, retain, nonatomic) NSMutableArray* pending;
@property(readonly, retain, nonatomic) NSMutableArray* sending;
@property(readonly, retain, nonatomic) NSMutableDictionary* sent;
@property(readonly, retain, nonatomic) NSNumber* did;
-(void).cxx_destruct;
-(void)sendMessage:(id)message completionBlock:(id)block;
-(void)sendMessage:(id)message;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(BOOL)clearSending:(id)sending;
-(BOOL)considerSameMessage:(id)message pendingMessage:(id)message2;
-(void)pendingSent:(id)sent;
-(void)pendingRetry:(id)retry;
-(void)pendingCancel:(id)cancel;
-(void)pendingAppend:(id)append completionBlock:(id)block;
-(void)pendingUpdated:(id)updated shouldReload:(BOOL)reload;
-(void)pendingUpdated:(id)updated;
-(void)touch:(id)touch completionBlock:(id)block;
-(void)dropPendingMessage:(id)message;
-(void)dropAttachment:(id)attachment;
-(void)dealloc;
-(id)initWithSession:(id)session dialog:(id)dialog;
@end

__attribute__((visibility("hidden")))
@interface BoxView : XXUnknownSuperclass {
	float _arrowX;
	UIImageView* _backgroundViewLeft;
	UIImageView* _backgroundViewRight;
}
@property(assign, nonatomic) float arrowX;
@property(retain, nonatomic) UIImageView* backgroundViewRight;
@property(retain, nonatomic) UIImageView* backgroundViewLeft;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StickerSuggestionsView : XXUnknownSuperclass <UICollectionViewDelegate, UICollectionViewDataSource, StickerPopupDelegate> {
	id<StickerSuggestionsViewDelegate> _delegate;
	float _arrowX;
	StickersLoadingManager* _stickersLoadingManager;
	BoxView* _boxView;
	UICollectionView* _collectionView;
	StickerPopup* _stickerPopup;
	NSArray* _stickersIds;
	NSSet* _availableStickersIds;
	NSString* _baseURL;
	NSString* _keyword;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float arrowX;
@property(assign, nonatomic) id<StickerSuggestionsViewDelegate> delegate;
@property(copy, nonatomic) NSString* keyword;
@property(copy, nonatomic) NSString* baseURL;
@property(retain, nonatomic) NSSet* availableStickersIds;
@property(retain, nonatomic) NSArray* stickersIds;
@property(retain, nonatomic) StickerPopup* stickerPopup;
@property(retain, nonatomic) UICollectionView* collectionView;
@property(retain, nonatomic) BoxView* boxView;
@property(retain, nonatomic) StickersLoadingManager* stickersLoadingManager;
+(float)cellSide;
-(void).cxx_destruct;
-(id)stickerPopup:(id)popup imageInsteadOfActivityIndicatorForIndexPath:(id)indexPath;
-(id)stickerPopup:(id)popup stickerBaseUrlForIndexPath:(id)indexPath;
-(id)stickerPopup:(id)popup stickerIdForIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)updateWithStickersIds:(id)stickersIds stickersInfo:(id)info keyword:(id)keyword recentStickersIds:(id)ids;
-(void)layoutSubviews;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PendingMessage : XXUnknownSuperclass {
	BOOL _loadingScheduled;
	BOOL _loadingEnabled;
	BOOL _updateCounters;
	unsigned _messageNumber;
	int _state;
	BackgroundTaskWrapper* _task;
	NSArray* _attachments;
	VKMessage* _message;
	NSString* _significantBody;
	VKStickerReferrerContext* _stickerReferrerContext;
	NSString* _ref;
	NSString* _refSource;
}
@property(retain, nonatomic) NSString* refSource;
@property(retain, nonatomic) NSString* ref;
@property(retain, nonatomic) VKStickerReferrerContext* stickerReferrerContext;
@property(retain, nonatomic) NSString* significantBody;
@property(retain, nonatomic) VKMessage* message;
@property(retain, nonatomic) NSArray* attachments;
@property(assign, nonatomic) BOOL updateCounters;
@property(assign, nonatomic) BOOL loadingEnabled;
@property(assign, nonatomic) BOOL loadingScheduled;
@property(retain, nonatomic) BackgroundTaskWrapper* task;
@property(assign, nonatomic) int state;
@property(readonly, assign, nonatomic) unsigned messageNumber;
+(id)messageWithBody:(id)body sendeer:(id)sendeer attachments:(id)attachments;
+(void)initialize;
-(void).cxx_destruct;
-(void)updateAttachments;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface PendingChatCell : ChatCell {
	PendingMessage* _pending;
	UIActivityIndicatorView* _activity;
	UIButton* _warning;
}
@property(retain, nonatomic) UIButton* warning;
@property(retain, nonatomic) UIActivityIndicatorView* activity;
@property(retain, nonatomic) PendingMessage* pending;
-(void).cxx_destruct;
-(void)attachPending:(id)pending expectedReuse:(double)reuse;
-(void)update;
-(void)actionWarning:(id)warning;
-(id)initWithDelegate:(id)delegate selfdialog:(BOOL)selfdialog reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface CaptchaController : XXUnknownSuperclass {
}
-(id)childViewControllerForStatusBarHidden;
-(id)childViewControllerForStatusBarStyle;
-(void)viewDidAppear:(BOOL)view;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)layoutCaptcha:(int)captcha;
@end

__attribute__((visibility("hidden")))
@interface CaptchaPrompt : XXUnknownSuperclass <UITextFieldDelegate> {
	NSString* _image;
	id _complete;
	UIImageView* _bg;
	UIImageView* _captcha;
	UITextField* _text;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) UITextField* text;
@property(readonly, retain, nonatomic) UIImageView* captcha;
@property(readonly, retain, nonatomic) UIImageView* bg;
@property(readonly, copy, nonatomic) id complete;
@property(readonly, retain, nonatomic) NSString* image;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)cancel:(id)cancel;
-(void)ok:(id)ok;
-(void)hide;
-(void)show;
-(void)dealloc;
-(id)initWithImage:(id)image complete:(id)complete;
@end

__attribute__((visibility("hidden")))
@interface ActivityUpdate : XXUnknownSuperclass {
	NSMutableSet* _online;
	NSMutableSet* _offline;
	NSMutableSet* _online_mobile;
	NSMutableDictionary* _typing;
	NSMutableDictionary* _rawSourceLookup;
}
@property(retain, nonatomic) NSMutableDictionary* rawSourceLookup;
@property(retain, nonatomic) NSMutableDictionary* typing;
@property(retain, nonatomic) NSMutableSet* online_mobile;
@property(retain, nonatomic) NSMutableSet* offline;
@property(retain, nonatomic) NSMutableSet* online;
+(id)update;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsInlineDomain : VKRenderable {
	NSNumber* _owner;
}
@property(assign, nonatomic) NSNumber* owner;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface TypingCell : XXUnknownSuperclass {
	UIImageView* bubble;
	VKMImageView* avatar;
	BOOL multi;
	id<VKMNavDelegate> _delegate;
	VKUser* _user;
}
@property(retain, nonatomic) VKUser* user;
@property(assign, nonatomic) __weak id<VKMNavDelegate> delegate;
-(void).cxx_destruct;
-(void)actionMultiUserTapped:(id)tapped;
-(void)attach:(id)attach;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithMulti:(BOOL)multi reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKAudioMessagePlayer : XXUnknownSuperclass <VKOpusPlayerDelegate> {
	VKAudioMessage* _audioMessage;
	unsigned _state;
	id<VKAudioMessagePlayerDelegate> _delegate;
	VKSession* _session;
	AFHTTPRequestOperation* _downloadOp;
	VKOpusPlayer* _opusPlayer;
}
@property(assign, nonatomic) __weak id<VKAudioMessagePlayerDelegate> delegate;
@property(retain, nonatomic) VKOpusPlayer* opusPlayer;
@property(retain, nonatomic) AFHTTPRequestOperation* downloadOp;
@property(retain, nonatomic) VKSession* session;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) VKAudioMessage* audioMessage;
-(void).cxx_destruct;
-(void)opusPlayerChangingCurrentTime:(id)time;
-(void)opusPlayerDidFinishPlaying:(id)opusPlayer;
-(void)switchTo:(unsigned)to;
-(void)downloadAndPlay;
-(void)actualPlay;
-(double)duration;
-(double)currentTime;
-(BOOL)isPaused;
-(BOOL)isPlaying;
-(void)seekToTime:(double)time;
-(void)stop;
-(void)pause;
-(void)play;
-(id)initWithSession:(id)session audioMessage:(id)message;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ViewComponentState : XXUnknownSuperclass {
	UIColor* _backgroundColor;
}
@property(retain, nonatomic) UIColor* backgroundColor;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ViewComponent : Component5 {
}
@property(retain, nonatomic) ViewComponentState* state;
@end

__attribute__((visibility("hidden")))
@interface ViewComponentController : Component5Controller {
}
@property(retain, nonatomic) ViewComponent* component;
@property(assign, nonatomic) __weak UIView* view;
+(id)createView;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)updateView:(id)view withState:(id)state;
@end

__attribute__((visibility("hidden")))
@interface ActivityModel : Model <TimerTargetDelegate> {
	unsigned counters[5];
	VKUserProfile* _profile;
	NSArray* _bdaysTodayFriends;
	NSArray* _bdaysTomorrowFriends;
	VKAccountInfo* _accountInfo;
	VKAccountInfoSubscriptions* _subscriptions;
	TimerTarget* _timer;
	NSNumber* _bdaysUpdated;
	NSString* _useAPNSToken;
	LocationTracker* _locationTracker;
	VKTimeout* _stickersHasNewItemsTimeout;
	AutoplayStats* _autoplayStats;
	VKMobileSupport* _vkMobileSupport;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAccountInfoSubscriptions* subscriptions;
@property(retain, nonatomic) VKAccountInfo* accountInfo;
@property(retain, nonatomic) NSArray* bdaysTomorrowFriends;
@property(retain, nonatomic) NSArray* bdaysTodayFriends;
@property(retain) VKUserProfile* profile;
@property(retain, nonatomic) VKMobileSupport* vkMobileSupport;
@property(retain, nonatomic) AutoplayStats* autoplayStats;
@property(retain, nonatomic) VKTimeout* stickersHasNewItemsTimeout;
@property(retain, nonatomic) LocationTracker* locationTracker;
@property(retain, nonatomic) NSString* useAPNSToken;
@property(retain) NSNumber* bdaysUpdated;
@property(retain, nonatomic) TimerTarget* timer;
+(BOOL)activityUpdated:(id)updated counter:(int)counter;
+(int)activityUpdate:(id)update;
-(void).cxx_destruct;
-(void)saveIntroState:(int)state;
-(unsigned)total;
-(void)safeCounter:(int)counter set:(unsigned)set;
-(void)safeUpdateCounters:(id)counters;
-(void)syncUpdateCounters:(id)counters;
-(unsigned)counterValue:(int)value;
-(void)counter:(int)counter set:(unsigned)set;
-(void)counter:(int)counter offset:(unsigned)offset;
-(BOOL)change:(int)change value:(unsigned)value;
-(void)updateTotal;
-(void)notificationDBFriends:(id)friends;
-(void)note:(int)note;
-(void)processInternalNotification:(id)notification;
-(int)updateForCountersData:(id)countersData;
-(void)checkBDays:(BOOL)days;
-(void)checkBDaysNotification:(BOOL)notification;
-(void)reloadAccountInfoWithCompleteBlock:(id)completeBlock;
-(void)touchCounters;
-(void)touchActivity;
-(void)updateAPNSToken:(id)token;
-(void)timerTargetFired:(id)fired;
-(void)dealloc;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VKAccountInfoSubscriptions : VKRenderable {
	BOOL _musicSubscriptionActive;
}
@property(assign, nonatomic) BOOL musicSubscriptionActive;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKRequestResult : XXUnknownSuperclass {
	VKRequest* _request;
	NSError* _urlError;
	int _result;
	id _response;
	NSDictionary* _errors;
}
@property(retain, nonatomic) NSDictionary* errors;
@property(retain, nonatomic) id response;
@property(assign, nonatomic) int result;
@property(retain, nonatomic) NSError* urlError;
@property(retain, nonatomic) VKRequest* request;
+(id)resultWithJSONResponse:(id)jsonresponse request:(id)request;
+(id)resultWithError:(id)error request:(id)request;
+(id)resultWithResult:(int)result request:(id)request;
-(void).cxx_destruct;
-(int)resultWithExecuteErrors;
@end

__attribute__((visibility("hidden")))
@interface VKMSearchController : XXUnknownSuperclass <UISearchDisplayDelegate, UITableViewDataSource, UITableViewDelegate> {
	BOOL disableInsetFixForIOS7;
	NSOperationQueue* _queue;
	NSArray* _results;
	ScrollSpeed* _speed;
	LoadingFooterView* _footer;
	id<VKMNavDelegate, VKMSearchControllerDelegate> _searchDelegate;
	ReusableViewsPool* _reusableViewsPool;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) ReusableViewsPool* reusableViewsPool;
@property(assign, nonatomic) __weak id<VKMNavDelegate, VKMSearchControllerDelegate> searchDelegate;
@property(retain, nonatomic) LoadingFooterView* footer;
@property(readonly, retain, nonatomic) ScrollSpeed* speed;
@property(retain, nonatomic) NSArray* results;
@property(readonly, retain, nonatomic) NSOperationQueue* queue;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)customizeSearchBar:(id)bar;
-(void)dealloc;
-(id)initWithSearchBar:(id)searchBar contentsController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface VKSearchController : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface VKSearchControllerLightSearchBar : VKSearchController {
}
-(int)preferredStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface VKSearchControllerNoCancel : XXUnknownSuperclass {
	VKSearchBarNoCancel* _vk_searchBar;
}
@property(retain, nonatomic) VKSearchBarNoCancel* vk_searchBar;
-(void).cxx_destruct;
-(int)preferredStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface SearchModelUpdater : XXUnknownSuperclass <UISearchResultsUpdating> {
	LoadingModel<SearchModel>* _model;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) LoadingModel<SearchModel>* model;
+(id)model:(id)model;
-(void).cxx_destruct;
-(void)updateSearchResultsForSearchController:(id)searchController;
-(id)initWithSearchModel:(id)searchModel;
@end

__attribute__((visibility("hidden")))
@interface CommonPhotoButton : XXUnknownSuperclass {
}
+(id)photoButtonWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AudioBlockCellHeaderView : XXUnknownSuperclass {
	NSString* _title;
	NSString* _subtitle;
	UIButton* _showAllButton;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
}
@property(retain, nonatomic) UIButton* showAllButton;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) UILabel* subtitleLabel;
@property(retain, nonatomic) UILabel* titleLabel;
+(float)heightForTitle:(id)title subtitle:(id)subtitle;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface FriendsSearchOperation : IndexSearchOperation {
}
-(void)main;
@end

__attribute__((visibility("hidden")))
@interface ScrollSpeed : XXUnknownSuperclass {
	CGPoint lastOffset;
	CGPoint lastOffsetDiff;
	double lastOffsetCapture;
	float _speed;
}
@property(readonly, assign, nonatomic) float speed;
-(double)reuseIntervalInScroll:(id)scroll;
-(void)scrolled:(id)scrolled;
@end

__attribute__((visibility("hidden")))
@interface DialogsSearchController : VKMSearchController <VKMLoaderDelegate> {
	BOOL _allowMessages;
	BOOL _shouldDismiss;
	BOOL _messages;
	MainModel* _main;
	VKMLoader* _loader;
	VKMLoader* _nextLoader;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL shouldDismiss;
@property(assign, nonatomic) BOOL allowMessages;
@property(retain, nonatomic) MainModel* main;
@property(retain, nonatomic) LoadingFooterView* footer;
@property(retain, nonatomic) VKMLoader* nextLoader;
@property(retain, nonatomic) VKMLoader* loader;
@property(assign, nonatomic) BOOL messages;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)modelAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)load:(id)load;
-(void)loaderUpdated:(id)updated;
-(void)loaded;
-(void)updateFooter;
-(void)cancel;
-(void)customizeSearchBar:(id)bar;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface DialogsSearchLoader : VKMLoader {
	NSSet* _exclude;
	NSString* _query;
}
@property(retain) NSSet* exclude;
@property(readonly, retain, nonatomic) NSString* query;
-(void).cxx_destruct;
-(id)processResultsInBackground:(id)background data:(id)data;
-(id)requestForOffset:(int)offset count:(int)count success:(id)success failure:(id)failure;
-(id)initWithMain:(id)main andQuery:(id)query;
@end

__attribute__((visibility("hidden")))
@interface AudioDashboardController : VKMLiveController {
	BOOL suppressAccessoryView;
	AudioPlaylistsInlineController* _playlistsController;
	SearchModelUpdater* _searchUpdater;
	id<VKSource> _avatarOwnerSource;
	VKMImageButton* _avatarOwnerButton;
}
@property(retain, nonatomic) AudioDashboardModel* model;
@property(retain, nonatomic) VKMImageButton* avatarOwnerButton;
@property(retain, nonatomic) id<VKSource> avatarOwnerSource;
@property(retain, nonatomic) SearchModelUpdater* searchUpdater;
@property(retain, nonatomic) AudioPlaylistsInlineController* playlistsController;
-(void).cxx_destruct;
-(void)actionAvatarOwnerButton:(id)button;
-(void)setupAvatarRightBarButtonItemWithSource:(id)source;
-(void)actionTeaserButton:(id)button;
-(void)actionAdd;
-(void)actionShowMore:(id)more;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(id)VKMControllerStatsRef;
-(int)VKMLiveAudioContext;
-(void)actionSearch:(id)search;
-(void)model:(id)model updated:(id)updated;
-(void)VKMControllerAppear;
-(void)viewDidLoad;
-(id)createPlaylistsController;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface MessagesSearchLoader : VKMLoader {
	int _count;
	NSString* _query;
	NSNumber* _owner;
	VKUser* _host;
}
@property(assign, nonatomic) int count;
@property(retain, nonatomic) VKUser* host;
@property(readonly, retain, nonatomic) NSNumber* owner;
@property(readonly, retain, nonatomic) NSString* query;
-(void).cxx_destruct;
-(id)processResultsInBackground:(id)background data:(id)data;
-(id)requestForOffset:(int)offset count:(int)count success:(id)success failure:(id)failure;
-(id)initWithMain:(id)main owner:(id)owner andQuery:(id)query;
@end

__attribute__((visibility("hidden")))
@interface VKMImageLoader : XXUnknownSuperclass {
	BOOL _loadLocalUrlAsync;
	BOOL _cached;
	NSString* _url;
	NSString* _localUrl;
	NSNumber* _forceScale;
	NSOperation* _operation;
	float _progress;
	id<VKMImageLoaderDelegate> _delegate;
	VKMLoadedImage* _lastDiscardableObject;
}
@property(assign, nonatomic) __weak id<VKMImageLoaderDelegate> delegate;
@property(assign, nonatomic) BOOL cached;
@property(assign) float progress;
@property(retain) NSOperation* operation;
@property(retain) NSNumber* forceScale;
@property(assign) BOOL loadLocalUrlAsync;
@property(retain) NSString* localUrl;
@property(retain) NSString* url;
@property(retain, nonatomic) VKMLoadedImage* lastDiscardableObject;
-(void).cxx_destruct;
-(void)clear;
-(void)reuse;
-(void)cancel;
-(void)updateProgress:(float)progress;
-(void)complete:(id)complete cached:(BOOL)cached;
-(void)notificationMemory:(id)memory;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface PagingView : XXUnknownSuperclass <UIScrollViewDelegate> {
	int _fromPage;
	id<PagingViewDataSource> _dataSource;
	id<PagingViewDelegate> _delegate;
	int _numberOfPages;
	int _currentPage;
	UIScrollView* _scrollView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) int currentPage;
@property(assign, nonatomic) int numberOfPages;
@property(assign, nonatomic) __weak id<PagingViewDelegate> delegate;
@property(assign, nonatomic) __weak id<PagingViewDataSource> dataSource;
-(void).cxx_destruct;
-(id)prepareViewForPagePosition:(int)pagePosition;
-(void)moveViewFromPosition:(int)position toPosition:(int)position2;
-(CGRect)frameForPagePosition:(int)pagePosition;
-(void)setView:(id)view forPagePosition:(int)pagePosition;
-(id)viewForPagePosition:(int)pagePosition;
-(int)viewTagForPosition:(int)position;
-(void)didChangeProgress:(float)progress fromPage:(int)page toPage:(int)page3;
-(void)didChangeCurrentPage:(int)page;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)updateSidePages;
-(void)setCurrentPage:(int)page animated:(BOOL)animated;
-(id)currentView;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface CameraCaptureButtonTip : XXUnknownSuperclass {
}
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface CameraCaptureButton : XXUnknownSuperclass {
	unsigned _captureButtonState;
	float _progress;
	UIView* _containerView;
	CAShapeLayer* _mainCircleLayer;
	CAShapeLayer* _progressCircleLayer;
}
@property(retain, nonatomic) UIView* containerView;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) unsigned captureButtonState;
@property(retain, nonatomic) CAShapeLayer* progressCircleLayer;
@property(retain, nonatomic) CAShapeLayer* mainCircleLayer;
+(id)buttonWithDefaultFrameSize;
+(float)diameterForCaptureButtonState:(unsigned)captureButtonState;
+(float)lineWidthForCaptureButtonState:(unsigned)captureButtonState;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setCaptureButtonState:(unsigned)state animated:(BOOL)animated;
-(id)bezierPathForCaptureButtonState:(unsigned)captureButtonState;
-(id)bezierPathForCaptureButtonState:(unsigned)captureButtonState progress:(float)progress;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StatsUploadHelper : XXUnknownSuperclass {
	BOOL _empty;
	id _executeConfigurationBlock;
	id _failureBlock;
	id _successBlock;
}
@property(readonly, assign, nonatomic) BOOL empty;
@property(copy, nonatomic) id successBlock;
@property(copy, nonatomic) id failureBlock;
@property(copy, nonatomic) id executeConfigurationBlock;
+(void)uploadWithSession:(id)session;
+(id)helperForSession:(id)session;
-(void).cxx_destruct;
-(void)handleExecuteSuccessWithData:(id)data;
-(void)handleExecuteFailure;
-(void)configureExectuteBuilder:(id)builder;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VKMImageButton : XXUnknownSuperclass <VKMImageLoaderDelegate> {
	VKMImageLoader* _loader;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKMImageLoader* loader;
-(void).cxx_destruct;
-(void)reuse;
-(void)loader:(id)loader complete:(id)complete;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKMImageButton2 : VKMImageButton {
	VKMImageLoader* _loader2;
	unsigned _targetState;
}
@property(assign, nonatomic) unsigned targetState;
@property(readonly, retain, nonatomic) VKMImageLoader* loader2;
-(void).cxx_destruct;
-(void)reuse;
-(void)loader:(id)loader complete:(id)complete;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface BackspaceDetectionTextField : XXUnknownSuperclass {
}
-(void)deleteBackward;
@end

__attribute__((visibility("hidden")))
@interface SignupPhoneController : SignupController <UITextFieldDelegate> {
	UITableViewCell* _cellCountry;
	UITextField* _codeField;
	UITextField* _numberField;
	UITextField* _lastNameField;
	CountryCallingCodesIndex* _index;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) CountryCallingCodesIndex* index;
@property(retain, nonatomic) UITextField* lastNameField;
@property(retain, nonatomic) UITextField* numberField;
@property(retain, nonatomic) UITextField* codeField;
@property(retain, nonatomic) UITableViewCell* cellCountry;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)actionNext:(id)next;
-(void)actionBackspace:(id)backspace;
-(void)actionLastNameFieldChanged:(id)changed;
-(void)notifyIncorrectFields:(id)fields;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)updateNextButtonAvailability;
-(void)render;
-(void)tryDetectCallingCode;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMImageView : XXUnknownSuperclass <VKMImageLoaderDelegate> {
	BOOL forced;
	int originalContentMode;
	BOOL _animated;
	VKMImageLoader* _loader;
	UIImage* _placeholder;
	NSNumber* _placeholderContentMode;
	UIColor* _placeholderBackgroundColor;
	UIImage* _highlightedPlaceholder;
	UIColor* _vkm_originalBackgroundColor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL animated;
@property(retain, nonatomic) UIImage* highlightedPlaceholder;
@property(retain, nonatomic) UIColor* placeholderBackgroundColor;
@property(retain, nonatomic) NSNumber* placeholderContentMode;
@property(retain, nonatomic) UIImage* placeholder;
@property(readonly, retain, nonatomic) VKMImageLoader* loader;
@property(retain, nonatomic) UIColor* vkm_originalBackgroundColor;
-(void).cxx_destruct;
-(void)render:(id)render filter:(id)filter reuse:(double)reuse;
-(void)render:(id)render type:(XXStruct_UOIMaD)type reuse:(double)reuse;
-(void)clear;
-(void)reuse;
-(void)loader:(id)loader complete:(id)complete;
-(void)changeImage:(id)image animated:(BOOL)animated;
-(void)setBackgroundColor:(id)color;
-(void)setContentMode:(int)mode;
-(void)dealloc;
-(BOOL)isAccessibilityElement;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKMMultiLoader : XXUnknownSuperclass <VKMImageLoaderDelegate> {
	NSArray* _urls;
	id<MultiImageLoaderDelegate> _delegate;
	NSMutableArray* _loaders;
	NSMutableDictionary* _resultImagesOrNils;
	VKMLoadedImage* _lastDiscardableObject;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<MultiImageLoaderDelegate> delegate;
@property(retain, nonatomic) NSArray* urls;
@property(retain, nonatomic) VKMLoadedImage* lastDiscardableObject;
@property(retain, nonatomic) NSMutableDictionary* resultImagesOrNils;
@property(retain, nonatomic) NSMutableArray* loaders;
-(void).cxx_destruct;
-(void)clear;
-(void)reuse;
-(void)cancel;
-(void)loadUrls:(id)urls reuse:(double)reuse;
-(void)multiImage:(id)image handler:(id)handler;
-(void)loader:(id)loader complete:(id)complete;
-(id)multiImageUrlsKey:(id)key;
-(void)notificationMemory:(id)memory;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMMultiImagePlaylistLoader : VKMMultiLoader {
	float _size;
	float _cornerRadius;
	UIColor* _overlayColor;
}
@property(retain, nonatomic) UIColor* overlayColor;
@property(assign, nonatomic) float cornerRadius;
@property(assign, nonatomic) float size;
-(void).cxx_destruct;
-(void)multiImage:(id)image handler:(id)handler;
-(id)multiImageUrlsKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface StoriesSettingsController : VKMLiveController {
	UITableViewCell* _saveStoriesSwitchCell;
	UISwitch* _saveStoriesSwitch;
	UITableViewCell* _bannedCell;
	UITableViewCell* _masksCacheClearCell;
	MasksCache* _masksCache;
}
@property(retain, nonatomic) StoriesSettingsModel* model;
@property(retain, nonatomic) MasksCache* masksCache;
@property(retain, nonatomic) UITableViewCell* masksCacheClearCell;
@property(retain, nonatomic) UITableViewCell* bannedCell;
@property(retain, nonatomic) UISwitch* saveStoriesSwitch;
@property(retain, nonatomic) UITableViewCell* saveStoriesSwitchCell;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)VKMTableStyle;
-(int)preferredStatusBarStyle;
-(int)VKMControllerModalAutoClosePosition;
-(BOOL)VKMControllerModalAutoClose;
-(int)VKMNavigationBarStyle;
-(void)viewDidLoad;
-(void)actionSaveStoriesSwitchValueChanged:(id)changed;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface SingleUserChatController : ChatController {
	BOOL updated;
	id<VKSource> _source;
	NSNumber* _uid;
}
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) NSNumber* uid;
-(void).cxx_destruct;
-(void)headerSelected;
-(void)notificationUserUpdated:(id)updated;
-(void)loadUser;
-(void)chatRefreshTitle;
-(id)chatActivityComponent;
-(id)chatTitleText;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMain:(id)main andUser:(id)user caching:(BOOL)caching;
@end

__attribute__((visibility("hidden")))
@interface ProfileInfoEditController : VKMTableController <UITextFieldDelegate, MOCTLabelDelegate> {
	BOOL datePickerVisible;
	VKProfileInfo* _profileInfo;
	ProfilePhotoAndNameCell* _cellPhotoAndName;
	SexSelectionSegmentedControl* _sexControl;
	UIDatePicker* _datePicker;
	MOCTLabel* _relationshipSectionFooterLabel;
	UITableViewHeaderFooterView* _relationshipSectionFooter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ProfileInfoModel* model;
@property(retain, nonatomic) UITableViewHeaderFooterView* relationshipSectionFooter;
@property(retain, nonatomic) MOCTLabel* relationshipSectionFooterLabel;
@property(retain, nonatomic) UIDatePicker* datePicker;
@property(retain, nonatomic) SexSelectionSegmentedControl* sexControl;
@property(retain, nonatomic) ProfilePhotoAndNameCell* cellPhotoAndName;
@property(retain, nonatomic) VKProfileInfo* profileInfo;
+(BOOL)validProfileInfo:(id)info;
-(void).cxx_destruct;
-(void)moctlabel:(id)moctlabel linkClicked:(id)clicked;
-(void)handleRelationConfirmationWithPartnerURL:(id)partnerURL;
-(void)updateRelationshipSectionFooter;
-(BOOL)selectedNewRelationPartner;
-(BOOL)selectedSomeoneFromRelationRequests;
-(BOOL)shouldShowRelationshipSectionFooter;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)isVisibleNameRequestSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)dateVisibilityRowIndex;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)actionDate:(id)date;
-(void)actionSex:(id)sex;
-(void)actionLastName:(id)name;
-(void)actionFirstName:(id)name;
-(void)actionPhoto:(id)photo;
-(void)actionDone:(id)done;
-(id)lazyDatePicker;
-(void)eraseRelationsPartnerIfNeeded;
-(void)handleProfileInfoUpdated;
-(void)model:(id)model updated:(id)updated;
-(void)VKMScrollViewRefreshLoading;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(BOOL)dark;
-(void)viewDidLoad;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface CheckmarkView : XXUnknownSuperclass {
	CAShapeLayer* _maskLayer;
}
-(void).cxx_destruct;
-(void)reset;
-(void)startCheckmarkAnimation:(float)animation;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKHUD : MBProgressHUD <RoundedProgressOverlayViewDelegate, MBProgressHUDDelegate> {
	BOOL _disableLayoutUpdatesForKeyboard;
	BOOL _willHide;
	NSOperation* _op;
	id _cancelHandler;
	NSMutableDictionary* _errors;
	NSString* _any;
	UITapGestureRecognizer* _closeGesture;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL willHide;
@property(assign, nonatomic) BOOL disableLayoutUpdatesForKeyboard;
@property(copy, nonatomic) id cancelHandler;
@property(retain, nonatomic) NSOperation* op;
@property(retain, nonatomic) UITapGestureRecognizer* closeGesture;
@property(retain, nonatomic) NSString* any;
@property(readonly, retain, nonatomic) NSMutableDictionary* errors;
+(id)hudForDialogModification:(BOOL)dialogModification;
+(void)runInBackgroundWithHUD:(id)hud;
+(void)API;
+(void)NYI;
+(void)success:(id)success;
+(void)info:(id)info;
+(void)error:(id)error;
+(void)closeAll;
+(id)hud;
+(id)hudForWindow:(id)window;
-(void).cxx_destruct;
-(void)showCancelButtonAnimated:(BOOL)animated;
-(void)showCancelButton;
-(void)cleanupCancelDelayDelay;
-(void)progressViewDidCancel:(id)progressView;
-(void)showForOperation:(id)operation;
-(void)with:(id)with run:(id)run;
-(id)any:(id)any;
-(id)on:(int)on label:(id)label;
-(void)hideWithResult:(BOOL)result message:(id)message;
-(void)hideWithResult:(BOOL)result;
-(void)hideWithErrorResult:(int)errorResult;
-(void)hideWithInfo:(id)info;
-(void)hideWithSuccess:(id)success forceVisible:(BOOL)visible;
-(void)hideWithSuccess:(id)success;
-(void)hideWithSuccess:(id)success delay:(float)delay;
-(void)hideWithSuccess;
-(void)hideWithTitle:(id)title;
-(void)hideWithError:(id)error;
-(void)setCustomView:(id)view;
-(void)hide:(BOOL)hide afterDelay:(double)delay;
-(void)hudWasHidden:(id)hidden;
-(void)actionClose:(id)close;
-(void)HUDkeyboardNotification:(id)notification;
-(void)updateFrame:(id)frame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorOptionsProviderSimple : XXUnknownSuperclass <VKSelectorOptionsProvider> {
	NSArray* _options;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* options;
+(id)options:(id)options;
-(void).cxx_destruct;
-(id)initWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface VKSelector : XXUnknownSuperclass <VKSelector> {
	id<VKSelectorDelegate> _delegate;
	NSObject<VKSelectorOptionsProvider>* _optionsProvider;
	id<VKSelectorOption> _selectedOption;
	UIView* _view;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIView* view;
@property(retain, nonatomic) id<VKSelectorOption> selectedOption;
@property(retain, nonatomic) NSObject<VKSelectorOptionsProvider>* optionsProvider;
@property(assign, nonatomic) __weak id<VKSelectorDelegate> delegate;
-(void).cxx_destruct;
-(void)didSelectOption:(id)option;
-(BOOL)willSelectOption:(id)option;
-(void)didChangeOptions;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)updateSelectedOption:(id)option;
-(void)updateSelection;
-(void)reloadData;
-(void)loadView;
-(BOOL)isViewLoaded;
-(id)options;
-(id)initWithOptionsProvider:(id)optionsProvider;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorViewController : XXUnknownSuperclass {
	VKSelector* _selector;
}
@property(readonly, assign, nonatomic) VKSelector* selector;
-(void).cxx_destruct;
-(void)loadView;
-(id)initWithSelector:(id)selector;
@end

__attribute__((visibility("hidden")))
@interface VKAPTabsCollectionViewController : XXUnknownSuperclass {
	VKAPModel* _model;
	UIView* _separator;
}
@property(retain, nonatomic) UIView* separator;
@property(retain, nonatomic) VKAPModel* model;
+(id)collectionWithModel:(id)model;
-(void).cxx_destruct;
-(BOOL)collectionView:(id)view shouldHighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(CGSize)preferredContentSize;
-(void)viewWillLayoutSubviews;
-(void)viewDidLoad;
-(void)setButtonsAlpha:(float)alpha;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderVideo : ActionOptionsProviderActionBuilder {
	VKVideoPlayerItem* _videoPlayerItem;
}
@property(readonly, assign, nonatomic) VKVideoPlayerItem* videoPlayerItem;
+(id)videoPlayerItem:(id)item;
-(void).cxx_destruct;
-(id)video;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(BOOL)canAddToMyVideos;
-(BOOL)added;
-(id)initWithVideoPlayerItem:(id)videoPlayerItem;
@end

__attribute__((visibility("hidden")))
@interface MultiChatController : ChatController <MultiImageLoaderDelegate, MessagesModelObserver> {
	BOOL updated;
	BOOL imagePending;
	VKDialog* _dialog;
	VKMMultiLoader* _multiloader;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKMMultiLoader* multiloader;
@property(retain, nonatomic) VKDialog* dialog;
-(void).cxx_destruct;
-(void)modelUpdatedDialogsData:(id)data;
-(void)headerSelected;
-(void)notificationUserUpdated:(id)updated;
-(BOOL)isChatParticipant;
-(void)loadDialogImage;
-(void)chatRefreshTitle;
-(id)chatActivityComponent;
-(id)chatTitleText;
-(void)viewDidLoad;
-(void)multiImageLoader:(id)loader complete:(id)complete;
-(void)dealloc;
-(id)initWithMain:(id)main andDialog:(id)dialog caching:(BOOL)caching;
@end

__attribute__((visibility("hidden")))
@interface TimePickerController : XXUnknownSuperclass {
	id<TimePickerControllerDelegate> _delegate;
	UITableViewCell* _selected;
	UIDatePicker* _picker;
}
@property(assign, nonatomic) __weak id<TimePickerControllerDelegate> delegate;
@property(retain, nonatomic) UIDatePicker* picker;
@property(retain, nonatomic) UITableViewCell* selected;
-(void).cxx_destruct;
-(int)preferredStatusBarStyle;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)time:(id)time;
-(void)select:(id)select;
-(void)cancel:(id)cancel;
-(void)done:(id)done;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppContainerPreloaderOperation : AsyncOperation <VKWebAppContainerControllerDelegate, VKWebAppScriptInitMessageDelegate, TimerTargetDelegate> {
	VKWebAppContainerController* _container;
	id _success;
	id _failure;
	TimerTarget* _timer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) TimerTarget* timer;
@property(copy) id failure;
@property(copy) id success;
@property(retain, nonatomic) VKWebAppContainerController* container;
-(void).cxx_destruct;
-(void)cleanUp;
-(void)failed;
-(void)timerTargetFired:(id)fired;
-(void)didReceiveInitMessageHandler:(id)handler;
-(void)container:(id)container didFailWithError:(id)error;
-(void)runAsync;
-(void)dealloc;
-(id)initWithContainer:(id)container success:(id)success failure:(id)failure;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppPreloadCoordinator : XXUnknownSuperclass {
}
+(void)preloadAndShowVKWebAppContainer:(id)container navContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PlistCacheHandler : XXUnknownSuperclass <ModelCacheHandler> {
	BOOL _prerenders;
	Index* _index;
	NSURL* _fileUrl;
	Class _domainClass;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL prerenders;
@property(retain, nonatomic) Class domainClass;
@property(retain, nonatomic) NSURL* fileUrl;
@property(retain, nonatomic) Index* index;
+(id)indexFromPlistData:(id)plistData domainClass:(Class)aClass prerender:(BOOL)prerender;
+(id)plistDataFromIndex:(id)index domainClass:(Class)aClass;
-(void).cxx_destruct;
-(void)_clear;
-(void)handleUpdatedIndex:(id)index;
-(void)loadIndex:(id)index;
@end

__attribute__((visibility("hidden")))
@interface DeckController : IIViewDeckController {
	BOOL orientationDisabled;
}
-(unsigned)supportedInterfaceOrientations;
-(void)enableOrientation;
-(void)disableOrientation;
@end

__attribute__((visibility("hidden")))
@interface VKMMainController : VKMLiveController <VKAPNSHandlerDelegate, VKClientDelegate, VKMNavRoot, IIViewDeckControllerDelegate, VKMSearchControllerDelegate, NotificationsManagerDelegate> {
	BOOL panDisabled;
	VKAPNSManager* _apns;
	id<MainControllerDelegate> _delegate;
	UINavigationController* _navMain;
	UIView* _searchCancel;
	BadgedBarButtonItem* _menuButton;
	CaptchaPrompt* _captcha;
	MainMenuPlayer* _player;
	NSArray* _menu;
	UserMenuCell* _cellUser;
	TitleMenuCell* _cellFriends;
	TitleMenuCell* _cellGroups;
	TitleMenuCell* _cellMessages;
	TitleMenuCell* _cellAnswers;
	TitleMenuCell* _cellNews;
	TitleMenuCell* _cellSettings;
	TitleMenuCell* _cellGames;
	TitleMenuCell* _cellPhotos;
	TitleMenuCell* _cellVideos;
	TitleMenuCell* _cellAudio;
	TitleMenuCell* _cellBookmarks;
	NSIndexPath* _skipSelect;
	UITableViewCell* _selected;
	NSArray* _notifications;
	MenuNotificationCell* _cellNotifications;
	VKMController* _newsfeedController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) id<MainControllerDelegate> delegate;
@property(readonly, retain, nonatomic) VKAPNSManager* apns;
@property(retain, nonatomic) VKMController* newsfeedController;
@property(retain, nonatomic) MenuNotificationCell* cellNotifications;
@property(retain, nonatomic) NSArray* notifications;
@property(retain, nonatomic) UITableViewCell* selected;
@property(retain, nonatomic) NSIndexPath* skipSelect;
@property(retain, nonatomic) TitleMenuCell* cellBookmarks;
@property(retain, nonatomic) TitleMenuCell* cellAudio;
@property(retain, nonatomic) TitleMenuCell* cellVideos;
@property(retain, nonatomic) TitleMenuCell* cellPhotos;
@property(retain, nonatomic) TitleMenuCell* cellGames;
@property(retain, nonatomic) TitleMenuCell* cellSettings;
@property(retain, nonatomic) TitleMenuCell* cellNews;
@property(retain, nonatomic) TitleMenuCell* cellAnswers;
@property(retain, nonatomic) TitleMenuCell* cellMessages;
@property(retain, nonatomic) TitleMenuCell* cellGroups;
@property(retain, nonatomic) TitleMenuCell* cellFriends;
@property(retain, nonatomic) UserMenuCell* cellUser;
@property(retain, nonatomic) NSArray* menu;
@property(retain, nonatomic) MainMenuPlayer* player;
@property(retain, nonatomic) CaptchaPrompt* captcha;
@property(retain, nonatomic) BadgedBarButtonItem* menuButton;
@property(retain, nonatomic) UIView* searchCancel;
@property(retain, nonatomic) UINavigationController* navMain;
@property(retain, nonatomic) HintsSearchDisplayController* search;
+(id)rootMainControllerForSession:(id)session;
+(id)rootMainController;
-(void)openNewPost;
-(void)addPhotoShouldManageMenu:(BOOL)addPhoto;
-(void)activateQuickSearch;
-(void)dynamicFontChanged;
-(void)resetInitial;
-(void)checkPendingUpload;
-(void)deattach;
-(void)attach:(BOOL)attach;
-(void)logout:(BOOL)logout;
-(id)unregisterDevice;
-(void)useAPNSToken:(id)token;
-(id)deck;
-(void)apnsHandler:(id)handler runAction:(id)action;
-(void)apnsHandler:(id)handler showNotification:(id)notification;
-(void)apnsHandler:(id)handler modalController:(id)controller animated:(BOOL)animated;
-(void)apnsHandler:(id)handler openController:(id)controller;
-(void)actionShowAudioPlayer:(id)player;
-(void)actionPhoto:(id)photo;
-(void)playNextAudios:(id)audios context:(int)context playlistIden:(id)iden;
-(void)handleAudio:(id)audio list:(id)list toggle:(BOOL)toggle context:(int)context playlistIden:(id)iden;
-(void)handleAudioMessage:(id)message;
-(id)rootNavContext;
-(void)selectorSelected:(id)selected;
-(void)actionBadge:(id)badge;
-(void)rootModalDismiss:(BOOL)dismiss;
-(void)rootModal:(id)modal animated:(BOOL)animated;
-(void)panEnable:(BOOL)enable;
-(id)root;
-(BOOL)isRootNav:(id)nav;
-(id)actionContext;
-(id)topViewController;
-(id)navContext;
-(BOOL)route:(id)route;
-(id)navigation;
-(void)VKMSearchCustomizeResultsTableView:(id)view;
-(id)currentIndex;
-(void)searchControllerDidChangedActive:(id)searchController;
-(void)searchControllerChangedActive:(id)active;
-(void)updateSearch:(BOOL)search;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)revealLeft:(id)left;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)handleCellSelect:(id)select badge:(BOOL)badge reset:(BOOL)reset;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDeckControllerDidCloseLeftView:(id)viewDeckController animated:(BOOL)animated;
-(BOOL)viewDeckControllerWillOpenLeftView:(id)viewDeckController animated:(BOOL)animated;
-(void)playerChangedItem:(id)item;
-(void)playerUpdated:(id)updated;
-(void)cancelAudio;
-(void)hidePlayer;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)notificationReachability:(id)reachability;
-(void)notificationAppActive:(id)active;
-(void)notificationActivity:(id)activity;
-(void)touchTop;
-(void)updateNotifications;
-(void)updateMenuButton;
-(void)handleActivityUpdate:(int)update;
-(void)client:(id)client requestedTokenConfirmationWithComplete:(id)complete;
-(void)client:(id)client requestedConfirmation:(id)confirmation complete:(id)complete;
-(void)client:(id)client requestedValidation:(id)validation complete:(id)complete;
-(void)client:(id)client requestedCaptcha:(id)captcha complete:(id)complete;
-(void)clientEncounteredAuthProblem:(id)problem;
-(void)notificationsManager:(id)manager selectedEvent:(id)event;
-(void)dismissModals:(id)modals;
-(void)pushSafe:(id)safe animated:(BOOL)animated;
-(void)openMenu:(BOOL)menu;
-(void)closeMenu:(BOOL)menu;
-(void)closeMenu:(BOOL)menu completed:(id)completed;
-(id)VKMTableCreateSearchController:(id)controller;
-(id)VKMTableCreateSearchBar;
-(int)VKMTableSearchMode;
-(BOOL)VKMScrollViewDisablePTR;
-(BOOL)dark;
-(void)VKMControllerStatusBarUpdate:(BOOL)update;
-(void)resetMenu;
-(void)rebuildMenu;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderPost : ActionOptionsProviderActionBuilder {
	BOOL _share;
	BOOL _control;
	BOOL _publish;
	BOOL _popOndelete;
	VKPost* _post;
}
@property(readonly, assign, nonatomic) BOOL popOndelete;
@property(readonly, assign, nonatomic) BOOL publish;
@property(readonly, assign, nonatomic) BOOL control;
@property(readonly, assign, nonatomic) BOOL share;
@property(readonly, assign, nonatomic) VKPost* post;
+(id)optionsForDetailPost:(id)detailPost;
+(id)optionsForPost:(id)post;
+(id)publishOptionsForPost:(id)post;
+(id)shareOptionsForPost:(id)post;
+(id)optionsForPost:(id)post share:(BOOL)share control:(BOOL)control publish:(BOOL)publish popOnDelete:(BOOL)aDelete;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioCellBase : VKMCell <ModelObserver> {
	VKAudioQueuePlayer* _player;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<AudioCellDelegate> delegate;
@property(retain, nonatomic) VKAudioQueuePlayer* player;
-(void).cxx_destruct;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)reportQuick:(BOOL)quick;
-(BOOL)isPlayingAudio;
-(BOOL)isCurrentAudio;
-(id)audio;
-(void)update;
-(void)playerChangedItem:(id)item;
-(void)playerUpdated:(id)updated;
-(BOOL)selected;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioCellPlayableBase : AudioCellBase {
	VKCircleProgressView* _progressView;
	id _observer;
}
@property(retain, nonatomic) id observer;
@property(retain, nonatomic) VKCircleProgressView* progressView;
-(void).cxx_destruct;
-(void)togglePlayPause:(id)pause;
-(void)playerChangedItem:(id)item;
-(void)update;
-(void)updateProgressForProgressView:(float)progressView;
-(float)progressForTime:(XXStruct_pwHToB)time;
-(void)createTimeObserver;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioCellPlayableExtraBase : AudioCellPlayableBase {
	UILabel* _durationLabel;
}
@property(retain, nonatomic) UILabel* durationLabel;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)createSubviews;
@end

__attribute__((visibility("hidden")))
@interface AudioCell : AudioCellPlayableExtraBase {
	float _imageInsetLeft;
	float _imageInsetRight;
	AudioOverlayButton* _playPauseButton;
	VKMImageView* _image;
}
@property(retain, nonatomic) AudioOverlayButton* playPauseButton;
@property(assign, nonatomic) float imageInsetRight;
@property(assign, nonatomic) float imageInsetLeft;
@property(retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(id)pickAudioImageUrl;
-(id)audio;
-(void)updatePlayPauseButton:(BOOL)button;
-(void)update;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AudioCellSearch : AudioCell {
	UIImageView* _hqImage;
}
@property(retain, nonatomic) VKAudioSearch* domain;
@property(retain, nonatomic) UIImageView* hqImage;
-(void).cxx_destruct;
-(id)audio;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AudioCellAttach : AudioCell {
}
@property(retain, nonatomic) VKAudioAttach* domain;
-(id)audio;
-(BOOL)selected;
@end

__attribute__((visibility("hidden")))
@interface AudioCellAttachSearch : AudioCellAttach {
	UIImageView* _hqImage;
}
@property(retain, nonatomic) UIImageView* hqImage;
-(void).cxx_destruct;
-(id)audio;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)createSubviews;
@end

__attribute__((visibility("hidden")))
@interface AudioCellCompact : AudioCellPlayableExtraBase {
	UILabel* _trackNumberLabel;
	UIButton* _playPauseButton;
}
@property(retain, nonatomic) VKAudioMinimized* domain;
@property(retain, nonatomic) UIButton* playPauseButton;
@property(retain, nonatomic) UILabel* trackNumberLabel;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(id)audio;
-(void)update;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MasksContainerController : VKMController <UICollectionViewDataSource, UICollectionViewDelegate, ModelObserver, MasksPageControllerDelegate, CLLocationManagerDelegate> {
	id<MasksContainerControllerDelegate> _delegate;
	MasksSectionsModel* _sectionsModel;
	UICollectionView* _sectionsCollectionView;
	MasksPageController* _pageController;
	MaskLoader* _maskLoader;
	CLLocationManager* _locationManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<MasksContainerControllerDelegate> delegate;
@property(retain, nonatomic) CLLocationManager* locationManager;
@property(retain, nonatomic) MaskLoader* maskLoader;
@property(retain, nonatomic) MasksPageController* pageController;
@property(retain, nonatomic) UICollectionView* sectionsCollectionView;
@property(retain, nonatomic) MasksSectionsModel* sectionsModel;
+(id)backgroundColor;
-(void).cxx_destruct;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)setupLocationManager;
-(void)requestLocationAuthorizationAndLocation;
-(void)selectSection:(id)section;
-(void)masksPageController:(id)controller didMoveToPageAtIndex:(unsigned)index;
-(void)masksPageController:(id)controller willMoveToPageAtIndex:(unsigned)index;
-(void)masksPageController:(id)controller didSelectMask:(id)mask;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)viewDidLoad;
-(id)initWithMain:(id)main sectionsModel:(id)model maskLoader:(id)loader;
@end

__attribute__((visibility("hidden")))
@interface SendMessagePopupViewController : XXUnknownSuperclass <KeyboardAppearanceEventHandler, UIViewControllerTransitioningDelegate> {
	BOOL _emptyMessageBodyAllowed;
	BOOL _hidesStatusBar;
	UIImage* _attachmentImage;
	UIView* _backdropView;
	SendMessagePopupView* _popupView;
	KeyboardAppearanceObserver* _keyboardAppearanceObserver;
	id _cancelAction;
	id _sendAction;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL emptyMessageBodyAllowed;
@property(retain, nonatomic) UIImage* attachmentImage;
@property(copy, nonatomic) id sendAction;
@property(copy, nonatomic) id cancelAction;
@property(assign, nonatomic) BOOL hidesStatusBar;
@property(retain, nonatomic) KeyboardAppearanceObserver* keyboardAppearanceObserver;
@property(retain, nonatomic) SendMessagePopupView* popupView;
@property(retain, nonatomic) UIView* backdropView;
+(id)sendMessagePopupViewControllerWithCancelAction:(id)cancelAction sendAction:(id)action;
-(void).cxx_destruct;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(void)keyboardAppearanceObserver:(id)observer handleKeyboardAppearanceEventWithInfo:(id)info previouslyTrackedAppearanceInfo:(id)info3;
-(void)handleSendButtonTap;
-(void)handleCancelButtonTap;
-(void)handleBackdropTap;
-(void)layoutPopupViewWithKeyboardAppearanceInfo:(id)keyboardAppearanceInfo;
-(void)showInViewController:(id)viewController;
-(BOOL)prefersStatusBarHidden;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface SendMessagePopupView : XXUnknownSuperclass <UITextViewDelegate> {
	BOOL _emptyMessageBodyAllowed;
	UIBarButtonItem* _cancelButtonItem;
	UIBarButtonItem* _sendButtonItem;
	UITextView* _textView;
	UIImage* _attachmentImage;
	UIImageView* _backgroundImageView;
	UIToolbar* _headerToolBar;
	UIImageView* _attachmentImageView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL emptyMessageBodyAllowed;
@property(retain, nonatomic) UIImage* attachmentImage;
@property(readonly, assign, nonatomic) UIBarButtonItem* sendButtonItem;
@property(readonly, assign, nonatomic) UIBarButtonItem* cancelButtonItem;
@property(retain, nonatomic) UIImageView* attachmentImageView;
@property(retain, nonatomic) UITextView* textView;
@property(retain, nonatomic) UIToolbar* headerToolBar;
@property(retain, nonatomic) UIImageView* backgroundImageView;
-(void).cxx_destruct;
-(void)textViewDidChange:(id)textView;
-(void)updateSendButtonEnabledState;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SendMessagePopupTransitionController : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	BOOL _appear;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL appear;
-(void)animateDismissWithContext:(id)context;
-(void)animateAppearWithContext:(id)context;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

__attribute__((visibility("hidden")))
@interface StickerSuggestionsCell : XXUnknownSuperclass {
	VKMImageView* _imageView;
}
@property(retain, nonatomic) VKMImageView* imageView;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MainModel : Model <VKLongPollServiceDelegate> {
	VKLongPollService* _lps;
	UsersModel* _users;
	MessagesModel* _messages;
	ActivityModel* _activity;
	VKAudioQueuePlayer* _player;
	VMVoiceMessagePlayer* _voiceMessagePlayer;
	StoreActiveModel* _stickersModel;
	StickersSuggestionsModel* _stickersSuggestionsModel;
	StoriesModel* _storiesModel;
	PhotoEditorStickersModel* _photoEditorStickersModel;
	VMSessionManager* _VMSessionManager;
	CountrySelectionModel* _countrySelectionModel;
	CommentPostSourceModel* _commentPostSourceModel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VMSessionManager* VMSessionManager;
@property(readonly, assign, nonatomic) PhotoEditorStickersModel* photoEditorStickersModel;
@property(readonly, assign, nonatomic) StoriesModel* storiesModel;
@property(readonly, assign, nonatomic) StickersSuggestionsModel* stickersSuggestionsModel;
@property(readonly, assign, nonatomic) StoreActiveModel* stickersModel;
@property(readonly, assign, nonatomic) VMVoiceMessagePlayer* voiceMessagePlayer;
@property(readonly, assign, nonatomic) VKAudioQueuePlayer* player;
@property(readonly, assign, nonatomic) ActivityModel* activity;
@property(readonly, assign, nonatomic) MessagesModel* messages;
@property(readonly, assign, nonatomic) UsersModel* users;
@property(readonly, assign, nonatomic) VKLongPollService* lps;
@property(retain, nonatomic) CommentPostSourceModel* commentPostSourceModel;
@property(retain, nonatomic) CountrySelectionModel* countrySelectionModel;
-(void).cxx_destruct;
-(id)lazyCommentPostSourceModel;
-(id)lazyCountrySelectionModel;
-(void)processLPSUpdates:(id)updates;
-(void)dealloc;
-(id)initWithSession:(id)session;
-(id)storiesBannedSourcesController;
-(id)storySettingsController;
-(id)storyViewersControllerWithStoryIdentity:(id)storyIdentity;
-(id)storyFullscreenControllerWithUsersStories:(id)usersStories startPageIndex:(int)index;
-(id)paymentsPopupController;
-(id)sendGiftControllerForStickers:(id)stickers context:(id)context;
-(id)sendGiftControllerForObject:(id)object context:(id)context;
-(id)sendGiftControllerWithModel:(id)model;
-(id)userGiftsController:(id)controller statContext:(id)context;
-(id)giftsCatalogSectionController:(id)controller;
-(id)giftsCatalogForUser:(id)user statContext:(id)context;
-(id)attachGiftsCatalogWithContext:(id)context;
-(id)giftsCatalogWithContext:(id)context;
-(id)selectCity:(id)city inCountry:(id)country;
-(id)selectCountry:(id)country;
-(id)applicationScreenForAppWithID:(id)anId installed:(BOOL)installed fromPush:(BOOL)push;
-(id)appsWithFilter:(unsigned)filter ofGenreID:(id)genreID title:(id)title fromPush:(BOOL)push;
-(id)appsActivityForApplication:(id)application;
-(id)appsInvitesForApplication:(id)application;
-(id)appsRequestsForApplication:(id)application;
-(id)appsDashboard;
-(id)storeStockItem:(id)item product:(id)product productName:(id)name someStickerId:(id)anId referrerContext:(id)context;
-(id)storeManage:(int)manage;
-(id)store:(int)store section:(int)section context:(id)context source:(id)source;
-(id)store:(int)store;
-(id)accountBanned;
-(id)pollVoters:(id)voters;
-(id)checkinsInPlace:(id)place;
-(id)place:(id)place item:(id)item;
-(id)photoBrowserSingle:(id)single;
-(id)photoBrowser:(id)browser;
-(id)videoPlayer:(id)player createPlayer:(BOOL)player2;
-(id)videoPlayerIden:(id)iden createPlayer:(BOOL)player;
-(id)shares:(id)shares;
-(id)likesFriends:(id)friends;
-(id)likes:(id)likes;
-(id)likes:(id)likes filter:(int)filter;
-(id)detail:(id)detail input:(BOOL)input playbackTime:(XXStruct_pwHToB)time;
-(id)detail:(id)detail input:(BOOL)input;
-(id)comment:(id)comment;
-(id)videoAlbums:(id)albums albumContext:(id)context withClass:(Class)aClass needSystem:(BOOL)system;
-(id)videoAlbums:(id)albums albumContext:(id)context;
-(id)primaryVideo;
-(id)videoAlbumWithContext:(id)context class:(Class)aClass;
-(id)attachVideoAlbumWithContext:(id)context;
-(id)videoAlbumWithContext:(id)context;
-(id)audioCatalog;
-(id)audioList:(id)list multi:(BOOL)multi playlist:(id)playlist audioSelection:(id)selection playlistFilterIden:(id)iden;
-(id)audioList:(id)list multi:(BOOL)multi playlist:(id)playlist playlistFilterIden:(id)iden;
-(id)audioList:(id)list multi:(BOOL)multi playlistFilterIden:(id)iden;
-(id)audioDashboard:(id)dashboard;
-(id)attachAudio;
-(id)photoAlbumsEdit:(id)edit;
-(id)photoAlbumEdit:(id)edit;
-(id)photoAlbum:(id)album;
-(id)audioSearchResults:(id)results query:(id)query scope:(int)scope;
-(id)audioSearch:(id)search query:(id)query scope:(int)scope;
-(id)audioSearch:(id)search;
-(id)audioPlaylistsForAudioAttach:(id)audioAttach multi:(BOOL)multi audioSelection:(id)selection filterIden:(id)iden;
-(id)audioPlaylistsAttach:(id)attach filterIden:(id)iden;
-(id)audioPlaylists:(id)playlists filter:(int)filter;
-(id)audioPlaylists:(id)playlists;
-(id)audioPlaylistsModel:(id)model;
-(id)audioPlaylists:(id)playlists model:(id)model;
-(id)audioPlaylistsTitleForFilter:(int)filter;
-(id)selectorPlaylists:(id)playlists;
-(id)audioPlaylist:(id)playlist;
-(id)playlistsCreate;
-(id)p2pDetailed:(id)detailed needUpdate:(BOOL)update;
-(id)p2p;
-(id)attachP2PWithDialogId:(id)dialogId;
-(id)subscriptionCachePromoWithSource:(id)source;
-(id)subscriptionPromoSuccess;
-(id)subscriptionPromo;
-(id)advancedSearchWithFilter:(id)filter;
-(id)recommendedPages:(int)pages;
-(id)findFriends:(int)friends;
-(id)introWizardForMask:(int)mask;
-(id)lookupAddressBook:(id)book;
-(id)lookupFacebookFriendsWithToken:(id)token;
-(id)pushSourceController;
-(id)privacyUsersSelectionController:(id)controller;
-(id)privacyEditController:(id)controller whiteBar:(BOOL)bar;
-(id)settings:(int)settings;
-(id)settings;
-(id)marketCollectionScreenForCollectionWithGroup:(id)group statsContext:(id)context;
-(id)marketProductScreenForProductWithGroup:(id)group statsContext:(id)context;
-(id)marketLandingPageForGroupID:(id)groupID;
-(id)favProducts;
-(id)favLinks;
-(id)favPosts;
-(id)favVideo;
-(id)favPhotos;
-(id)favUsers;
-(id)selectorFaves;
-(id)wallExtra:(id)extra;
-(id)newsSections;
-(id)newsSources;
-(id)newsSearch:(id)search;
-(id)searchTrends;
-(id)wallSearchWithQuery:(id)query;
-(id)wallSearch:(id)search domain:(id)domain;
-(id)wallSearch:(id)search ownerId:(id)anId;
-(id)wallSearchWithModel:(id)model;
-(id)newsComments;
-(id)audioSimilar:(id)similar;
-(id)selectorAudio;
-(id)selectorFeedback;
-(id)selectorContainerControllerWithOptions:(id)options;
-(id)newsFeedback;
-(id)newsPhotos;
-(id)newsSuggestions;
-(id)promotedFeedList:(id)list;
-(id)newsFeedList:(id)list;
-(id)newsfeedSettings;
-(id)newsFeed;
-(id)newsFeedWithMode:(int)mode;
-(id)selectorNews:(BOOL)news;
-(id)messagesAttachmentsLinks:(id)links;
-(id)messagesAttachmentsDocs:(id)docs;
-(id)messagesAttachmentsAudio:(id)audio;
-(id)messagesAttachmentsVideos:(id)videos;
-(id)messagesAttachmentsPhotos:(id)photos;
-(id)messagesAttachmentsSelector:(id)selector;
-(id)usersSelectionWithOptions:(int)options filterPredicate:(id)predicate;
-(id)usersSelection:(BOOL)selection dialog:(BOOL)dialog allowClear:(BOOL)clear filterPredicate:(id)predicate;
-(id)usersSelection:(BOOL)selection dialog:(BOOL)dialog allowClear:(BOOL)clear;
-(id)message:(id)message inDialog:(id)dialog;
-(id)messagesDialogEdit:(id)edit;
-(id)messagesDialogTarget:(id)target;
-(id)messagesDialogs;
-(id)groupCatalog:(id)catalog;
-(id)groupCatalogSelectorWithInfo:(id)info;
-(id)groupRequests;
-(id)selectorGroups;
-(id)photos:(id)photos userOnly:(BOOL)only class:(Class)aClass;
-(id)attachPhotos:(id)photos userOnly:(BOOL)only;
-(id)photos:(id)photos userOnly:(BOOL)only;
-(id)friendLists;
-(id)friendsSuggestions;
-(id)friendsAllRequests;
-(id)friendsRequests:(BOOL)requests;
-(id)friendsBirthdays:(id)birthdays;
-(id)selectorFriends;
-(id)topic:(id)topic gid:(id)gid tid:(id)tid offset:(int)offset;
-(id)board:(id)board;
-(id)members:(id)members;
-(id)docs:(id)docs withClass:(Class)aClass;
-(id)attachDocsVC:(id)vc;
-(id)docs:(id)docs;
-(id)notes:(id)notes;
-(id)profilePages:(id)pages;
-(id)subscriptions:(id)subscriptions followers:(BOOL)followers;
-(id)groups:(id)groups admin:(int)admin search:(BOOL)search needInvites:(BOOL)invites;
-(id)friends:(id)friends list:(id)list mutual:(BOOL)mutual requests:(BOOL)requests;
-(id)profileInfo;
-(id)selectorGroup:(id)group;
-(id)selectorProfile:(id)profile statsContext:(id)context;
-(id)selectorProfileWithUser:(id)user statsContext:(id)context;
-(id)selectorProfile:(id)profile;
-(id)selectorSource:(id)source;
-(id)placeSelectionWithClass:(Class)aClass canAdd:(BOOL)add;
-(id)attachPlaceSelection;
-(id)placeSelection;
-(id)ownerIfProfileController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface StoreStatusButton : DefaultHighlightButton {
	VKSession* _session;
	UIView* _weakLayoutParent;
	VKStoreStockItem* _item;
	int _downloadDisplayMode;
	float _fixedWidth;
	id<VKMNavProxyDelegate> _navProxyDelegate;
	ActivityIndicatorView* _activityView;
	int _loadingState;
	VKStoreProductStickerReferrerContext* _referrerContext;
}
@property(assign, nonatomic) __weak id<VKMNavProxyDelegate> navProxyDelegate;
@property(assign, nonatomic) float fixedWidth;
@property(assign, nonatomic) int downloadDisplayMode;
@property(retain, nonatomic) VKStoreStockItem* item;
@property(assign, nonatomic) UIView* weakLayoutParent;
@property(retain, nonatomic) VKSession* session;
@property(retain, nonatomic) VKStoreProductStickerReferrerContext* referrerContext;
@property(assign, nonatomic) int loadingState;
@property(retain, nonatomic) ActivityIndicatorView* activityView;
+(float)buttonWidthForTitle:(id)title;
+(UIEdgeInsets)titleDefaultEdgeInsets;
+(id)titleLabelFont;
+(id)buttonWithSession:(id)session referrerContext:(id)context;
+(void)initialize;
-(void).cxx_destruct;
-(void)attach:(id)attach;
-(void)sizeToFit;
-(void)actionAction:(id)action;
-(void)reattach;
-(void)notificationLoadingProcess:(id)process;
-(void)notificationLoading:(id)loading;
-(void)notificationStore:(id)store;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MarkerBrush : Brush {
	UIBezierPath* _path;
}
@property(retain, nonatomic) UIBezierPath* path;
+(float)minSize;
+(float)maxSize;
-(void).cxx_destruct;
-(id)generateImageWithScale:(float)scale;
-(CGSize)brushImageSize;
-(float)drawPeriod;
-(id)initWithSize:(float)size color:(id)color angle:(float)angle;
-(id)initWithSize:(float)size color:(id)color;
-(id)initWithSize:(float)size color:(id)color deviceOrientation:(int)orientation;
@end

__attribute__((visibility("hidden")))
@interface MOCTRender : XXUnknownSuperclass {
	NSAttributedString* _text;
	CTFrameRef _frame;
	CGSize _limit;
	CGSize _size;
}
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGSize limit;
@property(assign, nonatomic) CTFrameRef frame;
@property(retain, nonatomic) NSAttributedString* text;
+(id)attributes:(id)attributes forLink:(id)link;
+(id)linkAttributes:(id)attributes active:(id)active;
+(id)attributesForLink:(id)link inactive:(id)inactive active:(id)active;
+(id)render:(id)render width:(float)width;
+(id)render:(id)render limit:(CGSize)limit;
-(void).cxx_destruct;
-(id)linkAtIndex:(long)index;
-(long)characterIndexAtPoint:(CGPoint)point;
-(void)drawInContext:(CGContextRef)context;
-(id)duplicateRender:(id)render;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistDetailController : VKMLiveController <AudioPlaylistDetailModelDelegate> {
	AudioPlaylistView* _playlistView;
	TeaserView* _teaserFooterView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) AudioPlaylistDetailModel* model;
@property(retain, nonatomic) TeaserView* teaserFooterView;
@property(retain, nonatomic) AudioPlaylistView* playlistView;
-(void).cxx_destruct;
-(id)VKMLiveAudioPlaylistIden;
-(id)VKMControllerStatsRef;
-(int)VKMLiveAudioContext;
-(void)audioPlaylistDetailModel:(id)model didDeleteAudioPlaylist:(id)playlist;
-(void)audioPlaylistDetailModelDidUpdatePlaylist:(id)audioPlaylistDetailModel;
-(void)actionTeaserButton:(id)button;
-(void)actionAddMusic:(id)music;
-(void)actionEditCover:(id)cover;
-(void)actionNavToArtist:(id)artist;
-(void)actionShowMore:(id)more;
-(void)actionShowActions:(id)actions;
-(void)actionExpand:(id)expand;
-(void)actionEdit:(id)edit;
-(void)actionFollow:(id)follow;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(id)accessoryViewForAudio:(id)audio;
-(id)accessoryViewForObjectAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)VKMScrollViewUpdateTeaserView;
-(void)VKMScrollViewUpdateTeaserViewInsets;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)VKMTableUpdatedIndex;
-(void)updateEditButton;
-(BOOL)canEdit;
-(void)updateTitle;
-(void)updatePlaylist;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface FeedModelStatContext : XXUnknownSuperclass {
	int _position;
	NSString* _reference;
	NSString* _type;
}
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSString* reference;
@property(assign, nonatomic) int position;
+(id)type:(id)type position:(int)position;
-(void).cxx_destruct;
-(id)initWithType:(id)type position:(int)position;
@end

__attribute__((visibility("hidden")))
@interface MenuCell : XXUnknownSuperclass {
	id _select;
	NSString* _cellStatId;
}
@property(retain, nonatomic) NSString* cellStatId;
@property(copy, nonatomic) id select;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface TitleMenuCell : MenuCell {
	UIButton* _badge;
}
@property(retain, nonatomic) UIButton* badge;
+(id)image:(id)image statId:(id)anId title:(id)title select:(id)select;
-(void).cxx_destruct;
-(void)badgeTarget:(id)target selector:(SEL)selector;
-(void)setBadgeValue:(unsigned)value;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)updateShadow;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsDocsModel : MessagesAttachmentsListModel {
}
-(id)process:(id)process;
-(id)mediaType;
-(id)countKey;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterContext : XXUnknownSuperclass <VKImageFilterContext> {
	UIImage* _image;
	CGSize _resultSize;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) CGSize resultSize;
@property(retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilter : XXUnknownSuperclass <VKImageFilter> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(Class)contextClass;
-(id)infoString;
-(id)process:(id)process;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(CGContextRef)prepareContextWithSize:(CGSize)size;
-(CGContextRef)drawingContextForContext:(id)context;
-(id)contextForImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface AudioSimilarController : VKMLiveController {
}
@property(retain, nonatomic) AudioSimilarModel* model;
-(id)VKMControllerStatsRef;
-(void)actionShowMore:(id)more;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)VKMRoute:(id)route context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FriendsSelectorMenuItem : XXUnknownSuperclass <VKSelectorOptionViewController> {
	int _type;
	VKFriendList* _list;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VKFriendList* list;
@property(readonly, assign, nonatomic) int type;
+(id)list:(id)list;
+(id)type:(int)type;
-(void).cxx_destruct;
-(id)icon;
-(id)title;
-(id)viewControllerWithMainModel:(id)mainModel;
-(id)initWithList:(id)list;
-(id)initWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface FriendsSelectorDataSource : VKSelectorModelDataSource {
	id<VKSelectorOption> _friendsOption;
	id<VKSelectorOption> _birthdaysOption;
	id<VKSelectorOption> _friendRequestsOption;
	id<VKSelectorOption> _friendListsOption;
}
@property(readonly, assign, nonatomic) id<VKSelectorOption> friendListsOption;
@property(readonly, assign, nonatomic) id<VKSelectorOption> friendRequestsOption;
@property(readonly, assign, nonatomic) id<VKSelectorOption> birthdaysOption;
@property(readonly, assign, nonatomic) id<VKSelectorOption> friendsOption;
-(void).cxx_destruct;
-(id)optionsFromIndex:(id)index;
-(id)initWithModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface FriendsSelector : VKSelectorTableView {
}
-(BOOL)willSelectOption:(id)option;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface SelectorCell : XXUnknownSuperclass {
}
-(void)badgeValue:(int)value;
-(void)prepareForReuse;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface SeparatorComponentState : XXUnknownSuperclass {
	float _width;
	UIColor* _color;
	int _type;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) UIColor* color;
@property(assign, nonatomic) float width;
+(id)defaultSeparatorState;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface SeparatorComponent : Component5 {
}
@property(retain, nonatomic) SeparatorComponentState* state;
+(id)separatorWithWidth:(float)width;
+(id)verticalSeparator;
+(id)separator;
+(id)separator:(id)separator;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface SeparatorComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak UIView* view;
@property(retain, nonatomic) SeparatorComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface NavigationButtonView : XXUnknownSuperclass {
	UIButton* _button;
	UIImageView* _arrow;
}
@property(readonly, retain, nonatomic) UIImageView* arrow;
@property(readonly, retain, nonatomic) UIButton* button;
-(void).cxx_destruct;
-(void)setTitle:(id)title;
-(void)layoutSubviews;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setArrowFlipped:(BOOL)flipped;
-(id)initButton;
@end

__attribute__((visibility("hidden")))
@interface JPSVolumeButtonHandler : XXUnknownSuperclass {
	BOOL _appIsActive;
	id _upBlock;
	id _downBlock;
	float _initialVolume;
	AVAudioSession* _session;
	MPVolumeView* _volumeView;
}
@property(copy, nonatomic) id downBlock;
@property(copy, nonatomic) id upBlock;
@property(assign, nonatomic) BOOL appIsActive;
@property(retain, nonatomic) MPVolumeView* volumeView;
@property(retain, nonatomic) AVAudioSession* session;
@property(assign, nonatomic) float initialVolume;
+(id)volumeButtonHandlerWithUpBlock:(id)upBlock downBlock:(id)block;
-(void).cxx_destruct;
-(void)setSystemVolume:(float)volume;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)applicationDidChangeActive:(id)application;
-(void)setInitialVolume;
-(void)updateInitialVolumeWithDelay;
-(void)disableVolumeHUD;
-(void)audioSessionInterrupted:(id)interrupted;
-(void)setupSession;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistView : XXUnknownSuperclass <TextKitLabelInteractiveDefaultBehaviorDelegate, MultiImageLoaderDelegate> {
	BOOL _expanded;
	VKMImageView* _cover;
	UIButton* _editCoverButton;
	UIButton* _artistButton;
	UIButton* _button;
	UIButton* _editButton;
	UIButton* _moreButton;
	UIButton* _expandButton;
	NSNumber* _artistOwnerId;
	int _artistNavType;
	id<VKMNavDelegate> _navDelegate;
	UILabel* _titleLabel;
	UILabel* _infoLabel;
	UILabel* _dateLabel;
	TextKitLabelInteractive* _descriptionLabel;
	UIView* _separatorLine;
	TextKitLabelInteractiveDefaultBehavior* _labelInteractiveDelegate;
	VKMMultiImagePlaylistLoader* _multiloader;
	UIColor* _overlayColor;
	NSString* _artistString;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
@property(assign, nonatomic) int artistNavType;
@property(retain, nonatomic) NSNumber* artistOwnerId;
@property(retain, nonatomic) UIButton* expandButton;
@property(retain, nonatomic) UIButton* moreButton;
@property(retain, nonatomic) UIButton* editButton;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UIButton* artistButton;
@property(retain, nonatomic) UIButton* editCoverButton;
@property(retain, nonatomic) VKMImageView* cover;
@property(retain, nonatomic) NSString* artistString;
@property(readonly, assign, nonatomic, getter=isExpanded) BOOL expanded;
@property(readonly, retain, nonatomic) UIColor* overlayColor;
@property(readonly, retain, nonatomic) VKMMultiImagePlaylistLoader* multiloader;
@property(retain, nonatomic) TextKitLabelInteractiveDefaultBehavior* labelInteractiveDelegate;
@property(retain, nonatomic) UIView* separatorLine;
@property(retain, nonatomic) TextKitLabelInteractive* descriptionLabel;
@property(retain, nonatomic) UILabel* dateLabel;
@property(retain, nonatomic) UILabel* infoLabel;
@property(retain, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(void)multiImageLoader:(id)loader complete:(id)complete;
-(id)currentNavDelegate;
-(void)setEditCoverVisible:(BOOL)visible animated:(BOOL)animated;
-(void)updateCover:(id)cover;
-(void)expand;
-(id)createShuffleButton;
-(id)createFollowButton;
-(id)renderedDescTextFromPlaylist:(id)playlist profileName:(id)name;
-(void)updateArtistWithPlaylist:(id)playlist profileName:(id)name;
-(void)loadCover:(id)cover;
-(float)renderPlayist:(id)playist profileName:(id)name owner:(BOOL)owner;
-(id)coverPlaceholder;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface FixedBackgroundButton : XXUnknownSuperclass {
}
-(void)forceBackgroundColor:(id)color;
-(void)setBackgroundColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VideoCell : VKMCell {
	VKMImageView* _thumbnailView;
	UIButton* _durationButton;
	UILabel* _videoTitleLabel;
	UILabel* _authorLabel;
	UILabel* _viewCountLabel;
}
@property(readonly, retain, nonatomic) UILabel* viewCountLabel;
@property(readonly, retain, nonatomic) UILabel* authorLabel;
@property(readonly, retain, nonatomic) UILabel* videoTitleLabel;
@property(readonly, retain, nonatomic) UIButton* durationButton;
@property(readonly, retain, nonatomic) VKMImageView* thumbnailView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadCell : VKMCell <RoundedProgressOverlayViewDelegate> {
	BOOL ProgressContext;
	BOOL StateContext;
	VKMImageView* _thumbnailView;
	UILabel* _videoTitleLabel;
	UILabel* _textProgressLabel;
	RoundedProgressOverlayView* _progressView;
	NSByteCountFormatter* _formatter;
	VKTimeout* _progressTimeout;
	VideoUploadEditAttachment* _attachment;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VideoUploadEditAttachment* attachment;
@property(retain, nonatomic) VKTimeout* progressTimeout;
@property(readonly, retain, nonatomic) NSByteCountFormatter* formatter;
@property(readonly, retain, nonatomic) RoundedProgressOverlayView* progressView;
@property(readonly, retain, nonatomic) UILabel* textProgressLabel;
@property(readonly, retain, nonatomic) UILabel* videoTitleLabel;
@property(readonly, retain, nonatomic) VKMImageView* thumbnailView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)progressViewDidCancel:(id)progressView;
-(void)detach;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)updateProgressWithAttach:(id)attach;
-(void)notificationThumbnail:(id)thumbnail;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VideoAddButtonComponentBuilder : XXUnknownSuperclass {
}
+(id)addButtonComponentText:(id)text leftInset:(float)inset;
@end

__attribute__((visibility("hidden")))
@interface StoriesModel : Model <StoryFullscreenViewModelProvider> {
	NSArray* _mainStories;
	NSMutableDictionary* _sources;
	NSMutableDictionary* _storyByVKIden;
	NSMutableDictionary* _storyViewModels;
	NSMutableSet* _seenStories;
	NSMutableSet* _runningMarkSeenStories;
	NSDictionary* _lastGetStoriesResponse;
	NSMutableDictionary* _viewsCountByStoryIdentifier;
	NSMutableDictionary* _uploadingStories;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSMutableDictionary* sources;
@property(retain, nonatomic) NSMutableDictionary* uploadingStories;
@property(retain, nonatomic) NSMutableDictionary* viewsCountByStoryIdentifier;
@property(retain, nonatomic) NSDictionary* lastGetStoriesResponse;
@property(retain, nonatomic) NSMutableSet* runningMarkSeenStories;
@property(retain, nonatomic) NSMutableSet* seenStories;
@property(copy, nonatomic) NSArray* mainStories;
@property(retain, nonatomic) NSMutableDictionary* storyViewModels;
@property(retain, nonatomic) NSMutableDictionary* storyByVKIden;
+(id)pickStoryVideoURLFromVideo:(id)video;
-(void).cxx_destruct;
-(id)storyFullscreenViewModelForIdentity:(id)identity;
-(void)handleUploadingStoryStateChangedNotification:(id)notification;
-(void)handleStoryEditorFinishedNotification:(id)notification;
-(void)handleSuccessfulUploadOfStory:(id)story;
-(void)removeMyStoryFromMainStories:(id)mainStories;
-(void)handleCanellationOfUploadingStory:(id)uploadingStory;
-(void)startUploadingStoryWithUploadContext:(id)uploadContext;
-(void)startHUDUploadWithContext:(id)context;
-(id)vkStoryForStoryIden:(id)storyIden;
-(id)cachedGetStoriesRequestResponseData;
-(void)cacheGetStoriesRequestResponse:(id)response;
-(id)getStoriesRequestCacheFileURL;
-(void)updateMainStories:(id)stories updateSeenStatuses:(BOOL)statuses postUpdateNotification:(BOOL)notification;
-(void)processStoriesData:(id)data postUpdateNotification:(BOOL)notification filterExpired:(BOOL)expired;
-(void)processStoriesData:(id)data;
-(void)fetchCachedStories;
-(id)addVKStory:(id)story;
-(void)addVKStories:(id)stories;
-(void)addSources:(id)sources;
-(void)updateViewsCount:(int)count forStory:(id)story;
-(id)viewsCountForStory:(id)story;
-(void)retryUploadForStory:(id)story;
-(void)loadStory:(id)story withCompletion:(id)completion;
-(void)deleteStory:(id)story withCompletion:(id)completion;
-(id)uploadingStoryForStoryIden:(id)storyIden;
-(id)sourceForStory:(id)story;
-(BOOL)isMyStory:(id)story;
-(id)myStories;
-(void)markStoryAsSeen:(id)seen fromSource:(id)source;
-(BOOL)storyIsSeen:(id)seen;
-(void)reloadMainStories;
-(void)actionStoriesSourceBan:(id)ban :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)dealloc;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface StoryIdentity : XXUnknownSuperclass <NSCopying> {
	VKIdentity* _vkIden;
	NSString* _localIdentifier;
}
@property(readonly, copy, nonatomic) NSString* localIdentifier;
@property(retain, nonatomic) VKIdentity* vkIden;
-(void).cxx_destruct;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithLocalIdentifier:(id)localIdentifier;
-(id)initWithVKIden:(id)vkiden;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenModel : XXUnknownSuperclass <StoryFullscreenViewModel> {
	BOOL _can_comment;
	StoriesModel* _storiesModel;
	StoryIdentity* _storyIden;
	unsigned _storyState;
	unsigned _storyType;
	UIImage* _lowResPreviewImage;
	NSString* _photoStoryImageURL;
	NSString* _videoStoryFirstFrameURL;
	NSURL* _videoStoryFileURL;
	AVURLAsset* _videoStoryAsset;
	float _progress;
	id<VKSource> _source;
	NSDate* _date;
	KVOObserver* _uploadingStoryKVOObserver;
	UploadingStory* _uploadingStory;
	double _videoStoryDuration;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL can_comment;
@property(readonly, assign, nonatomic) int viewsCount;
@property(readonly, assign, nonatomic) NSDate* date;
@property(readonly, assign, nonatomic) id<VKSource> source;
@property(readonly, assign, nonatomic) double videoStoryDuration;
@property(readonly, assign, nonatomic) AVURLAsset* videoStoryAsset;
@property(readonly, assign, nonatomic) NSURL* videoStoryFileURL;
@property(readonly, assign, nonatomic) NSString* videoStoryFirstFrameURL;
@property(readonly, assign, nonatomic) NSString* photoStoryImageURL;
@property(readonly, assign, nonatomic) UIImage* lowResPreviewImage;
@property(readonly, assign, nonatomic) unsigned storyType;
@property(readonly, assign, nonatomic) StoryIdentity* storyIden;
@property(assign, nonatomic) __weak StoriesModel* storiesModel;
@property(assign, nonatomic) unsigned storyState;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UploadingStory* uploadingStory;
@property(retain, nonatomic) KVOObserver* uploadingStoryKVOObserver;
-(void).cxx_destruct;
-(void)markStoryAsDeleted;
-(void)updateStoryIdentityVKIden:(id)iden;
-(void)setup;
-(id)initWithStoryIden:(id)storyIden weakStoriesModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface CountryCallingCodesIndex : XXUnknownSuperclass {
	NSDictionary* _isoToCode;
	NSDictionary* _codeToIso;
	NSDictionary* _isoToName;
	NSDictionary* _indexLookup;
	NSArray* _index;
}
@property(readonly, retain, nonatomic) NSArray* index;
@property(readonly, retain, nonatomic) NSDictionary* indexLookup;
@property(readonly, retain, nonatomic) NSDictionary* isoToName;
@property(readonly, retain, nonatomic) NSDictionary* codeToIso;
@property(readonly, retain, nonatomic) NSDictionary* isoToCode;
+(id)instance;
-(void).cxx_destruct;
-(id)initWithIsoToCodeMap:(id)codeMap;
-(id)initDefaultInstance;
@end

__attribute__((visibility("hidden")))
@interface VKAudioMessage : VKDoc {
	int _duration;
	NSArray* _waveform;
	NSString* _link_ogg;
}
@property(retain, nonatomic) NSString* link_ogg;
@property(retain, nonatomic) NSArray* waveform;
@property(assign, nonatomic) int duration;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StoreUpdateModel : Model {
	id<ModelUpdateHandler> _handler;
}
@property(assign, nonatomic) __weak id<ModelUpdateHandler> handler;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKMLiveController : VKMTableController <AudioCellDelegate, VKMLiveSearchControllerDelegate> {
	UIBarButtonItem* _editingExtraButton;
	int _renderContext;
	TeaserViewConfig* _teaserViewConfig;
	NSMutableSet* _pendingViewed;
	NSMutableArray* _cells;
	NSMutableSet* _trackingBoundsViews;
	UIBarButtonItem* _actionsButton;
	UIBarButtonItem* _originalBarButton;
	NSMutableDictionary* _visibleIndexPaths;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) TeaserViewConfig* teaserViewConfig;
@property(assign, nonatomic) int renderContext;
@property(retain, nonatomic) UIBarButtonItem* editingExtraButton;
@property(retain, nonatomic) VKMLiveSearchController* search;
@property(retain, nonatomic) LoadingModel* model;
@property(readonly, retain, nonatomic) NSMutableDictionary* visibleIndexPaths;
@property(retain, nonatomic) UIBarButtonItem* originalBarButton;
@property(retain, nonatomic) UIBarButtonItem* actionsButton;
@property(retain, nonatomic) NSMutableSet* trackingBoundsViews;
@property(retain, nonatomic) NSMutableArray* cells;
@property(retain, nonatomic) NSMutableSet* pendingViewed;
-(void).cxx_destruct;
-(void)updateViewSubviewsViewControllerVisibilityIfNeeded:(id)needed visibilityState:(int)state;
-(void)unregisterTrackingBoundsViewsFromCell:(id)cell;
-(void)registerTrackingBoundsViewsFromCell:(id)cell;
-(void)__updateVisibleCellsDisplaying;
-(void)scrollViewDidScroll:(id)scrollView;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)actionTeaserButton:(id)button;
-(id)VKMScrollViewCreateTeaserView;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(id)setupTeaserViewConfig:(id)config;
-(int)VKMLiveSearchSkipSections;
-(void)VKMLiveSearchWillBeginSearch;
-(void)VKMLiveSearchWillEndSearch;
-(void)VKMLiveSearchWillDisplayCell:(id)vkmliveSearch indexPath:(id)path inTable:(id)table;
-(void)VKMLiveSearchHandleDeselectCell:(id)cell;
-(BOOL)VKMLiveSearchHandleCell:(id)cell select:(BOOL)select;
-(id)VKMLiveAudioPlaylistIden;
-(int)VKMLiveAudioContext;
-(id)model:(id)model componentRenderContextForObject:(id)object context:(id)context;
-(void)audioCellSelectedAudio:(id)audio cell:(id)cell quick:(BOOL)quick;
-(void)updatePan;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setEditing:(BOOL)editing;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)VKMTableCreateSearchController:(id)controller;
-(int)VKMTableSearchMode;
-(void)VKMTableUpdatedIndex;
-(void)VKMScrollViewRefreshLoading;
-(void)trackingViewRemoved:(id)removed;
-(void)trackingViewAdded:(id)added;
-(id)setupRenderContext:(int)context;
-(void)dropCells;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VKMCell : XXUnknownSuperclass <IVKMCell> {
	VKRenderable* _domain;
	id<VKMNavDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKMNavDelegate> delegate;
@property(retain, nonatomic) VKRenderable* domain;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)refresh;
-(BOOL)selected;
-(void)detach;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)addOpaque:(id)opaque;
-(void)prepareForReuse;
@end

__attribute__((visibility("hidden")))
@interface VKDomain : VKRenderable {
	VKIdentity* _iden;
}
@property(retain, nonatomic) VKIdentity* iden;
+(id)domainCopy:(id)copy;
+(id)domainEditCopy:(id)copy;
+(id)domainEditCreate:(id)create;
-(void).cxx_destruct;
-(void)domainOnEditCopy:(id)copy;
-(void)domainOnEditCreate;
-(BOOL)isEqual:(id)equal;
-(BOOL)isEqualItemId:(id)anId;
-(BOOL)isEqualIdentity:(id)identity;
@end

__attribute__((visibility("hidden")))
@interface VKDomainDerived : VKRenderable {
	VKDomain* _domain;
}
@property(retain, nonatomic) VKDomain* domain;
+(id)from:(id)from;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKMNavResolverProxy : VKMNavResolver {
	id<VKMNavDelegate> _navDelegate;
}
@property(assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
+(id)resolver:(id)resolver;
-(void).cxx_destruct;
-(BOOL)route:(id)route context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ExtraInputPanelView : InputPanelView <ExtrasInputViewDelegate, StickerSuggestionsViewDelegate> {
	ExtrasInputView* _inputView;
	UIButton* _inputViewButton;
	StickerSuggestionsView* _stickerSuggestionsView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) StickerSuggestionsView* stickerSuggestionsView;
@property(assign, nonatomic) __weak id<ExtraInputPanelViewDelegate> inputPanelDelegate;
@property(retain, nonatomic) UIButton* inputViewButton;
@property(retain, nonatomic) ExtrasInputView* inputView;
-(void).cxx_destruct;
-(void)stickerSuggestionsView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context promoted:(BOOL)promoted;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)inputPanelViewTextViewResignFirstResponder:(BOOL)responder;
-(void)inputPanelViewTextViewBecomeFirstResponder:(BOOL)responder;
-(void)updateStickerSuggestionsView:(BOOL)view animated:(BOOL)animated isAutocomplete:(BOOL)autocomplete;
-(void)ensureStickerSuggestionsView;
-(id)extrasInputViewStickersGiftContext:(id)context;
-(void)extrasInputViewDidChangeTab:(id)extrasInputView;
-(void)actionToggleEmoji:(id)emoji;
-(BOOL)isExtraInputVisible;
-(void)setExtraInputVisible:(BOOL)visible;
-(void)inputPanelViewTextViewAttemptToSend:(id)send;
-(void)inputPanelViewTextViewAttemptToBecomeFirstResponder:(id)becomeFirstResponder;
-(void)ensureInputView;
-(void)emojiSelectionView:(id)view didSelectEmoji:(id)emoji;
-(void)stickerSelectionView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context;
-(BOOL)routeStickerProductId:(id)anId;
-(void)updateTextWithSelectedEmoji:(id)selectedEmoji;
-(void)updateOverlay;
-(void)updateInputViewButton;
-(void)inputEnable:(BOOL)enable;
-(CGRect)textPanelFrame;
-(void)dealloc;
-(void)createSubviews;
-(id)initForComments:(BOOL)comments;
@end

__attribute__((visibility("hidden")))
@interface ModernGeneralSettings : BaseSectionedSettingsController <CLLocationManagerDelegate> {
	UITableViewCell* _cellPhotoUploadCompressed;
	UITableViewCell* _cellLocationSettings;
	UITableViewCell* _cellGifsAutoplay;
	UITableViewCell* _cellManageStickers;
	SettingsSection* _geoSection;
	CLLocationManager* _locationManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) CLLocationManager* locationManager;
@property(retain, nonatomic) SettingsSection* geoSection;
@property(retain, nonatomic) UITableViewCell* cellManageStickers;
@property(retain, nonatomic) UITableViewCell* cellGifsAutoplay;
@property(retain, nonatomic) UITableViewCell* cellLocationSettings;
@property(retain, nonatomic) UITableViewCell* cellPhotoUploadCompressed;
-(void).cxx_destruct;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)updateLocationStatus:(int)status;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)customizeFooterForSection:(unsigned)section;
-(void)showGifAutoplayOptions;
-(void)actionOpenSettings:(id)settings;
-(void)switchUploadPhoto:(id)photo;
-(void)render;
-(void)resetSections;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenView : XXUnknownSuperclass {
	StoryFullscreenProgressView* _progressView;
	StoryHighlightableSourceView* _sourceView;
	StoryFullscreenFooterView* _footerView;
	UIImageView* _topScrimImageView;
	UIImageView* _bottomScrimImageView;
	UIImageView* _storyPreviewLowResImageView;
	UIVisualEffectView* _storyPreviewLowResBlurView;
	UIView* _storyContentView;
	UIView<AnimatingIndicator>* _loadingProgressView;
	StoryFullscreenPhotoImageView* _photoStoryImageView;
	StoryVideoPlayerView* _videoStoryView;
	VideoPlayerErrorOverlayView* _videoErrorOverlay;
	EmptyStateView* _emptyStateView;
	UIButton* _backAreaButton;
	KVOObserver* _playerKVOObserver;
}
@property(readonly, assign, nonatomic) UIButton* backAreaButton;
@property(readonly, assign, nonatomic) EmptyStateView* emptyStateView;
@property(readonly, assign, nonatomic) VideoPlayerErrorOverlayView* videoErrorOverlay;
@property(readonly, assign, nonatomic) StoryVideoPlayerView* videoStoryView;
@property(readonly, assign, nonatomic) StoryFullscreenPhotoImageView* photoStoryImageView;
@property(readonly, assign, nonatomic) UIView<AnimatingIndicator>* loadingProgressView;
@property(readonly, assign, nonatomic) UIView* storyContentView;
@property(readonly, assign, nonatomic) UIVisualEffectView* storyPreviewLowResBlurView;
@property(readonly, assign, nonatomic) UIImageView* storyPreviewLowResImageView;
@property(readonly, assign, nonatomic) UIImageView* bottomScrimImageView;
@property(readonly, assign, nonatomic) UIImageView* topScrimImageView;
@property(readonly, assign, nonatomic) StoryHighlightableSourceView* sourceView;
@property(readonly, assign, nonatomic) StoryFullscreenProgressView* progressView;
@property(retain, nonatomic) KVOObserver* playerKVOObserver;
@property(retain, nonatomic) StoryFullscreenFooterView* footerView;
-(void).cxx_destruct;
-(void)setEmptyStateImage:(id)image bodyText:(id)text;
-(void)stopLoadingAnimation;
-(void)startLoadingAnimation;
-(void)startLoadingAnimationThrottle:(BOOL)throttle;
-(void)prepareForReuse;
-(id)createProgressView;
-(void)initializeSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryHighlightableSourceView : XXUnknownSuperclass {
	NSString* _title;
	NSString* _subtitle;
	VKMImageView* _avatarImageView;
	UIButton* _closeButton;
	UILabel* _titlelLabel;
	UILabel* _subtitleLabel;
}
@property(readonly, assign, nonatomic) UIButton* closeButton;
@property(readonly, assign, nonatomic) VKMImageView* avatarImageView;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) UILabel* subtitleLabel;
@property(retain, nonatomic) UILabel* titlelLabel;
-(void).cxx_destruct;
-(id)filterForAvatarImageView;
-(void)layoutSubviews;
-(void)setHighlighted:(BOOL)highlighted;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)initializeSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenFooterView : XXUnknownSuperclass {
	unsigned _mode;
	float _uploadProgress;
	int _viewsCount;
	UIButton* _sendMessageButton;
	UIButton* _moreActionsButton;
	UIButton* _shareButton;
	UIButton* _retryUploadButton;
	UIButton* _viewsCountButton;
	RoundedProgressOverlayView* _uploadProgressView;
	UILabel* _uploadStatusLabel;
	UILabel* _failedUploadStatusLabel;
	UIVisualEffectView* _failedUploadBackgroundView;
}
@property(readonly, assign, nonatomic) UIButton* viewsCountButton;
@property(readonly, assign, nonatomic) UIButton* retryUploadButton;
@property(readonly, assign, nonatomic) UIButton* shareButton;
@property(readonly, assign, nonatomic) UIButton* moreActionsButton;
@property(readonly, assign, nonatomic) UIButton* sendMessageButton;
@property(assign, nonatomic) int viewsCount;
@property(assign, nonatomic) float uploadProgress;
@property(assign, nonatomic) unsigned mode;
@property(retain, nonatomic) UIVisualEffectView* failedUploadBackgroundView;
@property(retain, nonatomic) UILabel* failedUploadStatusLabel;
@property(retain, nonatomic) UILabel* uploadStatusLabel;
@property(retain, nonatomic) RoundedProgressOverlayView* uploadProgressView;
-(void).cxx_destruct;
-(void)setUploadStatusText:(id)text;
-(void)updateContentForMode:(unsigned)mode;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenProgressView : XXUnknownSuperclass {
	int _segmentsCount;
	int _currentSegment;
	float _currentSegmentProgress;
	NSArray* _unfilledTracksImageViews;
	NSArray* _filledTracksImageViews;
}
@property(assign, nonatomic) float currentSegmentProgress;
@property(assign, nonatomic) int currentSegment;
@property(assign, nonatomic) int segmentsCount;
@property(retain, nonatomic) NSArray* filledTracksImageViews;
@property(retain, nonatomic) NSArray* unfilledTracksImageViews;
-(void).cxx_destruct;
-(void)setCurrentSegmentProgress:(float)progress animated:(BOOL)animated duration:(double)duration;
-(void)setCurrentSegmentProgress:(float)progress animated:(BOOL)animated;
-(void)setCurrentSegmentProgress:(float)progress animatedWithDuration:(double)duration;
-(float)trackHeight;
-(void)setupShadowForTrackImageView:(id)trackImageView;
-(id)trackImageViewWithTintColor:(id)tintColor;
-(void)cleanUpTracksImageViews;
-(void)reloadTracksImageViews;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenPhotoImageView : VKMImageView {
	BOOL _imageLoaded;
	id _imageLoadedSuccessHandler;
}
@property(copy, nonatomic) id imageLoadedSuccessHandler;
@property(readonly, assign, nonatomic) BOOL imageLoaded;
-(void).cxx_destruct;
-(void)reuse;
-(void)loader:(id)loader complete:(id)complete;
@end

__attribute__((visibility("hidden")))
@interface StoreStockItemModel : ItemModel {
	VKIdentity* _product;
	NSString* _productName;
	NSNumber* _someStickerId;
}
@property(retain, nonatomic) NSNumber* someStickerId;
@property(retain, nonatomic) NSString* productName;
@property(retain, nonatomic) VKIdentity* product;
@property(readonly, retain, nonatomic) VKStoreStockItem* item;
-(void).cxx_destruct;
-(id)process:(id)process context:(id)context;
-(id)request;
-(id)withItem:(id)item;
-(id)withSomeStickerId:(id)someStickerId;
-(id)withProductName:(id)productName;
-(id)withProduct:(id)product;
@end

__attribute__((visibility("hidden")))
@interface SignupPasswordController : SignupController <UITextFieldDelegate> {
	UITextField* _passwordField;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UITextField* passwordField;
-(void).cxx_destruct;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)actionNext:(id)next;
-(void)login;
-(void)notifyIncorrectFields:(id)fields;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface CommonStatsData : BasicStatsData {
}
-(id)request;
-(int)batchLimit;
-(int)eventsLimit;
-(id)batchKey;
@end

__attribute__((visibility("hidden")))
@interface CommonStatsManager : StatsManager {
}
+(id)eventTypeForEvent:(id)event;
-(void)audioMessagePlay:(id)play;
-(void)video:(id)video autoplay:(BOOL)autoplay source:(int)source;
-(void)gif:(id)gif autoplay:(BOOL)autoplay source:(int)source;
-(void)pushNotificationWithCategory:(id)category;
-(void)showUserRecommendation:(id)recommendation;
-(void)menuClick:(id)click;
-(void)gamesAction:(id)action type:(id)type source:(id)source requestName:(id)name context:(int)context;
-(void)gamesVisit:(int)visit;
-(void)storePurchasePid:(id)pid mpid:(id)mpid result:(id)result storeError:(id)error apiError:(id)error5;
-(void)audioAd:(id)ad source:(int)source;
-(void)audio:(id)audio source:(int)source playlist:(id)playlist duration:(float)duration startTime:(double)time;
-(void)videoPlay:(id)play quality:(int)quality middle:(BOOL)middle ref:(id)ref;
-(void)openVideo:(id)video;
-(void)openOwner:(id)owner source:(int)source;
-(void)openOwner:(id)owner;
-(void)transitionFromPost:(id)post;
-(void)openPost:(id)post;
-(void)viewPost:(id)post context:(id)context;
-(void)viewFriendsRecommendationsBlock:(id)block context:(id)context;
-(void)postInteraction:(id)interaction action:(int)action context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface EmbedComponentState : XXUnknownSuperclass {
	BOOL _under;
	Component5* _container;
	Component5* _componentToEmbed;
}
@property(assign, nonatomic) BOOL under;
@property(retain, nonatomic) Component5* componentToEmbed;
@property(retain, nonatomic) Component5* container;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface EmbedComponent : Component5 {
}
+(id)embed:(id)embed inCenterOfContainer:(id)container;
+(id)embed:(id)embed in:(id)anIn;
+(id)embed:(id)embed under:(id)under;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NewsFeedModel : FeedModel {
	BOOL pendingReset;
}
+(int)newsFeedMaxPhotos;
+(id)newsFeedMethod;
-(void)handleReport:(id)report :(id)arg2;
-(void)handleGroup:(id)group :(id)arg2;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)processSourcesUpdate;
-(void)handleIgnoreItem:(id)item :(id)arg2;
-(void)handleBan:(id)ban :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)postTarget;
-(void)activate;
-(id)prerenderContext;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(BOOL)feedModelComplete:(id)complete loaded:(int)loaded;
-(id)nextFrom:(id)from data:(id)data count:(int)count;
-(id)feedRequestBuilderForContext:(id)context;
-(BOOL)canInsertPost:(id)post;
-(id)countKey;
-(int)resultDomain;
@end

__attribute__((visibility("hidden")))
@interface SubscriptionsSettingsModel : ItemModel {
	VKStoreStockSubscriptionItem* _stock;
}
@property(retain, nonatomic) VKStoreStockSubscriptionItem* stock;
-(void).cxx_destruct;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FeedSearchModel : FeedModel <SearchModel> {
	NSString* _searchQuery;
	int _searchScope;
}
@property(readonly, assign, nonatomic) int searchRenderContext;
@property(readonly, retain, nonatomic) NSArray* searchScopes;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int searchScope;
@property(copy, nonatomic) NSString* searchQuery;
-(void).cxx_destruct;
-(id)componentRenderContextForObject:(id)object context:(id)context;
-(void)clearResults;
-(void)searchWithScope:(int)scope;
-(void)searchWithQuery:(id)query;
-(id)feedStatContext;
-(id)withSearchQuery:(id)searchQuery;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(BOOL)shouldLoad:(id)load;
-(id)spawnContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface VKFeed : VKRenderable <VKSourceStatus> {
	NSNumber* _source_id;
	unsigned _date;
	int _max_photos;
	id<VKSource> _source;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VKSource> source;
@property(assign, nonatomic) int max_photos;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) NSNumber* source_id;
+(id)feed:(id)feed;
+(id)_feed:(id)feed sources:(id)sources;
+(id)feed:(id)feed sources:(id)sources;
-(void).cxx_destruct;
-(void)acceptSources:(id)sources;
-(int)statusMask;
-(id)statusForSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface VKFeedPhoto : VKFeed {
	VKList* _photos;
	NSString* _ext_id;
	NSString* _track_code;
}
@property(retain, nonatomic) NSString* track_code;
@property(retain, nonatomic) NSString* ext_id;
@property(retain, nonatomic) VKList* photos;
@property(readonly, retain, nonatomic) VKPhoto* singlePhoto;
@property(readonly, retain, nonatomic) VKIdentity* iden;
-(void).cxx_destruct;
-(id)feedPhotoType;
-(id)statusForSource:(id)source;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedWallPhoto : VKFeedPhoto {
}
-(id)feedPhotoType;
@end

__attribute__((visibility("hidden")))
@interface VKFeedPhotoTag : VKFeedPhoto {
}
-(id)feedPhotoType;
-(id)statusForSource:(id)source;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedFriend : VKFeed {
	VKList* _friends;
}
@property(retain, nonatomic) VKList* friends;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedNote : VKFeed {
	VKList* _notes;
}
@property(retain, nonatomic) VKList* notes;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedVideo : VKFeed {
	VKList* _videos;
	NSString* _track_code;
}
@property(retain, nonatomic) NSString* track_code;
@property(retain, nonatomic) VKList* videos;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAttachments : XXUnknownSuperclass {
	NSMutableArray* _attachments;
	NSMutableArray* _images;
	NSMutableArray* _audios;
	NSMutableArray* _docs;
	NSMutableArray* _audioMessages;
	NSMutableArray* _linked;
	NSMutableArray* _money;
	NSMutableArray* _stories;
	NSMutableArray* _masks;
	NSMutableArray* _gifts;
	NSMutableArray* _playlists;
	VKPoll* _poll;
	VKSnapperAttach* _snapper;
	NSMutableArray* _photo_albums;
	NSMutableArray* _snippets;
	VKMarketCollection* _marketCollection;
	VKPhotosListAttach* _photosList;
	int _count_photos;
	int _count_videos;
	int _count_audios;
	int _count_docs;
	int _count_posts;
	int _count_gifts;
	int _count_playlists;
	int _count_stickers;
	int _count_comments;
	int _count_products;
	int _count_money_transfer;
	int _count_stories;
	int _count_masks;
	int _count_links;
	int _count_audioMessages;
	int _count_sketches;
}
@property(assign, nonatomic) int count_sketches;
@property(assign, nonatomic) int count_audioMessages;
@property(assign, nonatomic) int count_links;
@property(assign, nonatomic) int count_masks;
@property(assign, nonatomic) int count_stories;
@property(assign, nonatomic) int count_money_transfer;
@property(assign, nonatomic) int count_products;
@property(assign, nonatomic) int count_comments;
@property(assign, nonatomic) int count_stickers;
@property(assign, nonatomic) int count_playlists;
@property(assign, nonatomic) int count_gifts;
@property(assign, nonatomic) int count_posts;
@property(assign, nonatomic) int count_docs;
@property(assign, nonatomic) int count_audios;
@property(assign, nonatomic) int count_videos;
@property(assign, nonatomic) int count_photos;
@property(retain, nonatomic) VKPhotosListAttach* photosList;
@property(retain, nonatomic) VKMarketCollection* marketCollection;
@property(retain, nonatomic) NSMutableArray* snippets;
@property(retain, nonatomic) NSMutableArray* photo_albums;
@property(retain, nonatomic) VKSnapperAttach* snapper;
@property(retain, nonatomic) VKPoll* poll;
@property(retain, nonatomic) NSMutableArray* playlists;
@property(retain, nonatomic) NSMutableArray* gifts;
@property(retain, nonatomic) NSMutableArray* masks;
@property(retain, nonatomic) NSMutableArray* stories;
@property(retain, nonatomic) NSMutableArray* money;
@property(retain, nonatomic) NSMutableArray* linked;
@property(retain, nonatomic) NSMutableArray* audioMessages;
@property(retain, nonatomic) NSMutableArray* docs;
@property(retain, nonatomic) NSMutableArray* audios;
@property(retain, nonatomic) NSMutableArray* images;
@property(retain, nonatomic) NSMutableArray* attachments;
+(id)attachmentsFromDomains:(id)domains;
+(int)attachmentTypeForObject:(id)object;
+(id)parseAttachments:(id)attachments source:(id)source;
+(void)initialize;
-(void).cxx_destruct;
-(void)updatePoll:(id)poll;
-(void)useVideo:(id)video;
-(void)usePhotos:(id)photos;
-(id)onlyGifs;
-(id)justPhotos;
-(BOOL)isSketchAttachment;
-(BOOL)isStickerAttachment;
-(id)singleAttachmentOfClass:(Class)aClass;
-(id)editAttachmentsParameter;
-(void)_build:(id)build;
@end

__attribute__((visibility("hidden")))
@interface VKUnknownAttachment : VKDomain {
	NSString* _type;
}
@property(retain, nonatomic) NSString* type;
+(id)parseUnknown:(id)unknown;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKAttachmentsRender : VKRenderable {
	BOOL _imagesOnly;
	BOOL _selectable;
	BOOL _padding;
	BOOL _fullscreen;
	BOOL _stickersLeftAlignment;
	VKAttachments* _attachments;
	id _photosSource;
	int _albumIndex;
	float _width;
	CGPoint _target;
}
@property(assign, nonatomic) CGPoint target;
@property(assign, nonatomic) float width;
@property(assign, nonatomic) BOOL stickersLeftAlignment;
@property(assign, nonatomic) BOOL fullscreen;
@property(assign, nonatomic) BOOL padding;
@property(assign, nonatomic) BOOL selectable;
@property(assign, nonatomic) int albumIndex;
@property(assign, nonatomic) BOOL imagesOnly;
@property(retain, nonatomic) id photosSource;
@property(retain, nonatomic) VKAttachments* attachments;
+(id)attachments:(id)attachments source:(id)source imagesOnly:(BOOL)only albumIndex:(int)index selectable:(BOOL)selectable padding:(BOOL)padding fullscreen:(BOOL)fullscreen;
-(void).cxx_destruct;
-(id)photos;
-(id)thumbnails;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistInlineDomain : VKDomainDerived {
}
@property(retain, nonatomic) VKAudioPlaylist* domain;
-(BOOL)isEqualItemId:(id)anId;
-(BOOL)isEqualIdentity:(id)identity;
-(Class)cellClass;
-(float)renderHeight;
-(float)renderWidth;
@end

__attribute__((visibility("hidden")))
@interface AudioListController : VKMLiveController {
	BOOL _multi;
	AudioSelection* _audioSelection;
	VKIdentity* _playlistFilterIden;
}
@property(retain, nonatomic) AudioListModel* model;
@property(retain, nonatomic) VKIdentity* playlistFilterIden;
@property(retain, nonatomic) AudioSelection* audioSelection;
@property(assign, nonatomic) BOOL multi;
-(void).cxx_destruct;
-(id)audioFromCell:(id)cell;
-(void)VKMLiveSearchWillDisplayCell:(id)vkmliveSearch indexPath:(id)path inTable:(id)table;
-(void)VKMLiveSearchHandleDeselectCell:(id)cell;
-(BOOL)VKMLiveSearchHandleCell:(id)cell select:(BOOL)select;
-(void)VKMLiveSearchWillEndSearch;
-(void)VKMLiveSearchWillBeginSearch;
-(void)updateSelection;
-(void)model:(id)model updated:(id)updated;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)VKMTablePerformDeselectOnViewWillAppear:(BOOL)vkmtablePerformDeselectOnView;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(int)VKMControllerModalAutoClosePosition;
-(void)handleAudioSelectionChanged:(id)changed;
-(void)twitchTitle;
-(void)updateDoneButton;
-(void)customizeTable:(id)table;
-(void)actionDone:(id)done;
-(void)viewDidLoad;
-(id)setupPlaylistFilterIden:(id)iden;
-(id)setupAudioSelection:(id)selection;
-(id)setupMulti:(BOOL)multi;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKList : XXUnknownSuperclass {
	int _count;
	NSArray* _items;
}
@property(retain, nonatomic) NSArray* items;
@property(assign, nonatomic) int count;
+(id)parsed:(id)parsed item:(id)item;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKText : XXUnknownSuperclass <VKTextCopy> {
	NSString* _rawText;
	NSString* _text;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* rawText;
+(id)textWithEdit:(id)edit;
+(id)text:(id)text allowEmpty:(BOOL)empty;
+(id)text:(id)text;
-(void).cxx_destruct;
-(id)textCopy;
-(id)textWithMentions;
@end

__attribute__((visibility("hidden")))
@interface VKTextContent : XXUnknownSuperclass {
	NSString* _html;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* html;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKBirthDate : XXUnknownSuperclass {
	NSDate* _date;
	int _visibility;
}
@property(assign, nonatomic) int visibility;
@property(retain, nonatomic) NSDate* date;
+(id)birthDateWithAPIString:(id)apistring;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKGroup : VKDomain <VKSource> {
	BOOL _verified;
	BOOL _is_member;
	BOOL _is_admin;
	BOOL _can_message;
	NSNumber* _gid;
	NSString* _name;
	NSString* _photo;
	NSString* _screen_name;
	NSString* _activity;
	int _type;
	int _is_closed;
	int _deactivated;
	unsigned _start_date;
	VKGroupMarketInfo* _marketInfo;
	int _admin_level;
	NSNumber* _source_id;
}
@property(readonly, assign, nonatomic) int sex;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int admin_level;
@property(retain, nonatomic) VKGroupMarketInfo* marketInfo;
@property(assign, nonatomic) unsigned start_date;
@property(assign, nonatomic) BOOL can_message;
@property(assign, nonatomic) BOOL is_admin;
@property(assign, nonatomic) BOOL is_member;
@property(assign, nonatomic) BOOL verified;
@property(assign, nonatomic) int deactivated;
@property(assign, nonatomic) int is_closed;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* activity;
@property(retain, nonatomic) NSString* screen_name;
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* gid;
@property(retain, nonatomic) NSNumber* source_id;
+(id)predicate:(id)predicate;
+(id)linkIcon;
-(void).cxx_destruct;
-(BOOL)disclosure;
-(id)title;
-(id)linkText;
-(id)statusString;
-(id)leaveString;
-(id)joinString;
-(id)participantKey;
-(id)typeString;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCopy:(id)copy;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface NotificationRenderer : Renderer {
}
@property(retain, nonatomic) VKNotification* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(id)rendererElements;
-(void)actionUserPhoto:(id)photo;
-(void)actionMainPhoto:(id)photo;
-(BOOL)cellSelected:(id)selected;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface NotificationGroupCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface NeonBrush : Brush {
	float _neonAlpha;
}
@property(assign, nonatomic) float neonAlpha;
+(id)centerImageWithBrushSize:(float)brushSize brushColor:(id)color bewelColor:(id)color3 scale:(float)scale;
+(id)neonGradientWithSize:(float)size innerSize:(float)size2 color:(id)color scale:(float)scale;
+(float)minSize;
+(float)maxSize;
-(id)generateImageWithScale:(float)scale;
-(id)generateImageWithoutNeonWithScale:(float)scale;
-(id)neonColor;
-(void)setColor:(id)color;
-(unsigned)drawNeonEveryNthTime;
-(CGSize)brushImageSize;
-(float)drawPeriod;
-(unsigned)singleDotDrawCount;
-(id)initWithSize:(float)size color:(id)color;
@end

__attribute__((visibility("hidden")))
@interface EmojiGridView : XXUnknownSuperclass {
	XXStruct_0R9wYB _lastDimensions;
	float _minimumHorizontalSpacing;
	float _verticalSpacing;
	float _emojiSize;
	NSArray* _emojis;
	UIImageView* _imageView;
}
@property(assign, nonatomic) float emojiSize;
@property(assign, nonatomic) float verticalSpacing;
@property(assign, nonatomic) float minimumHorizontalSpacing;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) NSArray* emojis;
-(void).cxx_destruct;
-(CGRect)frameForEmojiAtIndexPath:(id)indexPath;
-(id)emojiAtPoint:(CGPoint)point;
-(id)indexPathForEmojiAtPoint:(CGPoint)point;
-(id)emojiAtIndexPath:(id)indexPath;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)emojiGridTextureForDimensions:(XXStruct_0R9wYB)dimensions;
-(void)layoutSubviews;
-(void)setEmojiFromString:(id)string extraFlags:(id)flags;
-(XXStruct_0R9wYB)dimensionsForWidth:(float)width;
-(XXStruct_0R9wYB)currentDimensions;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryCameraToPreviewAnimatedTransitioning : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

__attribute__((visibility("hidden")))
@interface SignupController : XXUnknownSuperclass {
	AuthModel* _data;
	NSArray* _cells;
}
@property(retain, nonatomic) NSArray* cells;
@property(retain, nonatomic) AuthModel* data;
-(void).cxx_destruct;
-(int)preferredStatusBarStyle;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)notifyIncorrectFields:(id)fields;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface PhotoFeedModel : NewsFeedModel {
}
+(int)newsFeedMaxPhotos;
+(int)handlesSourcesBans;
-(id)postTarget;
-(id)prerenderContext;
-(id)feedRequestBuilderForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FixedNavigationController : XXUnknownSuperclass {
}
-(id)childForStatusBar;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarStyle;
-(id)childViewControllerForStatusBarStyle;
-(id)childViewControllerForStatusBarHidden;
-(void)notificationWindowDidBecomeKeyWindow:(id)notificationWindow;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface VKMNavigationBar : XXUnknownSuperclass {
}
-(void)_popForTouchAtPoint:(CGPoint)point;
@end

__attribute__((visibility("hidden")))
@interface VKMNavigationController : FixedNavigationController {
	BOOL _presenterTemporaryDismissed;
	int _vkm_currentOperation;
	UIWindow* _presentedWindow;
}
@property(assign, nonatomic) BOOL presenterTemporaryDismissed;
@property(retain, nonatomic) UIWindow* presentedWindow;
@property(readonly, assign, nonatomic) int vkm_currentOperation;
+(BOOL)isNavigationWithPresentedWindow:(id)presentedWindow;
-(void).cxx_destruct;
-(id)popViewControllerAnimated:(BOOL)animated;
-(unsigned)supportedInterfaceOrientations;
-(id)initWithRootViewController:(id)rootViewController;
@end

__attribute__((visibility("hidden")))
@interface VKMModalNavigationController : VKMNavigationController {
}
-(unsigned)supportedInterfaceOrientations;
@end

__attribute__((visibility("hidden")))
@interface VKAudioMoreButton : XXUnknownSuperclass {
	UIButton* _moreButton;
}
@property(retain, nonatomic) UIButton* moreButton;
-(void).cxx_destruct;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NewsSelectorMenuItem : XXUnknownSuperclass <VKSelectorOptionViewController> {
	NSString* _title;
	UIImage* _icon;
	int _type;
	VKNewsList* _newsList;
	PromotedNewsList* _promotedNewsList;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) UIImage* icon;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, retain, nonatomic) PromotedNewsList* promotedNewsList;
@property(readonly, retain, nonatomic) VKNewsList* newsList;
@property(readonly, assign, nonatomic) int type;
+(id)promotedNewsList:(id)list;
+(id)newsList:(id)list;
+(id)type:(int)type;
-(void).cxx_destruct;
-(id)viewControllerWithMainModel:(id)mainModel;
-(id)initWithPromotedNewsList:(id)promotedNewsList;
-(id)initWithNewsList:(id)newsList;
-(id)initWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface NewsSelectorModel : LoadingModel {
}
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NewsSelectorDataSource : VKSelectorModelDataSource {
	id<VKSelectorOption> _autoNewsFeedOption;
	id<VKSelectorOption> _suggestionsOption;
	id<VKSelectorOption> _newsSettingsOption;
}
@property(retain, nonatomic) id<VKSelectorOption> newsSettingsOption;
@property(retain, nonatomic) id<VKSelectorOption> suggestionsOption;
@property(retain, nonatomic) id<VKSelectorOption> autoNewsFeedOption;
-(void).cxx_destruct;
-(id)optionsFromIndex:(id)index;
-(id)initWithModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface NewsSelectorTableView : VKSelectorTableView {
}
-(BOOL)willSelectOption:(id)option;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface TopicComponent : Component5 {
}
+(id)topic:(id)topic lastComment:(id)comment;
+(id)topic:(id)topic;
@end

__attribute__((visibility("hidden")))
@interface TopicCommentComponent : Component5 {
}
+(id)comment:(id)comment teaser:(BOOL)teaser;
+(id)comment:(id)comment;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogAudiosListController : VKMLiveController {
}
-(void)actionShowMore:(id)more;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)VKMControllerStatsRef;
-(int)VKMLiveAudioContext;
@end

__attribute__((visibility("hidden")))
@interface VKNotification : VKRenderable {
	NSDictionary* _sources;
	int _type;
	unsigned _date;
	id _parent;
	id _feedback;
	VKComment* _reply;
	NSArray* _sourceIds;
	int _groupType;
}
@property(assign, nonatomic) int groupType;
@property(retain, nonatomic) NSArray* sourceIds;
@property(retain, nonatomic) VKComment* reply;
@property(retain, nonatomic) id feedback;
@property(retain, nonatomic) id parent;
@property(assign, nonatomic) unsigned date;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSDictionary* sources;
+(id)notification:(id)notification owner:(id)owner sources:(id)sources;
-(void).cxx_destruct;
-(id)selectTarget;
-(id)thumbnailTarget;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKNotificationGroup : VKRenderable {
	int _type;
	NSNumber* _sourceId;
	NSMutableArray* _items;
}
@property(retain, nonatomic) NSMutableArray* items;
@property(retain, nonatomic) NSNumber* sourceId;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKPostSource : VKDomain {
	int _type;
	int _platform;
	NSString* _platformString;
	NSString* _url;
	NSDictionary* _data;
	VKLink* _link;
}
@property(retain, nonatomic) VKLink* link;
@property(retain, nonatomic) NSDictionary* data;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* platformString;
@property(assign, nonatomic) int platform;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKPostCaption : VKRenderable {
	NSString* _text;
	NSURL* _actionUrl;
	NSString* _actionTitle;
}
@property(retain, nonatomic) NSString* actionTitle;
@property(retain, nonatomic) NSURL* actionUrl;
@property(retain, nonatomic) NSString* text;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKPost : VKDomain <VKThumbnailable, VKSourceStatus> {
	BOOL _can_publish_privacy;
	BOOL _can_delete;
	BOOL _can_edit;
	BOOL _can_pin;
	BOOL _marked_as_ads;
	BOOL _can_publish;
	BOOL _final_post;
	NSNumber* _from_id;
	unsigned _date;
	VKText* _text;
	VKGeo* _geo;
	NSNumber* _signer_id;
	VKAttachments* _attachments;
	int _sourceData;
	NSNumber* _views_count;
	int _post_type;
	NSNumber* _created_by;
	VKIdentity* _reply_post;
	NSArray* _cop_history;
	VKPost* _cop_post;
	id<VKSource> _source;
	id<VKSource> _signer;
	int _statusMask;
	VKPostSource* _post_source;
	NSString* _post_identity;
	VKAdData* _adData;
	XXStruct_86WktA _comments;
	XXStruct_uR0cxB _likes;
	XXStruct_86WktA _reposts;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAdData* adData;
@property(retain, nonatomic) NSString* post_identity;
@property(retain, nonatomic) VKPostSource* post_source;
@property(assign, nonatomic) int statusMask;
@property(retain, nonatomic) id<VKSource> signer;
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) VKPost* cop_post;
@property(retain, nonatomic) NSArray* cop_history;
@property(retain, nonatomic) VKIdentity* reply_post;
@property(assign, nonatomic) BOOL final_post;
@property(retain, nonatomic) NSNumber* created_by;
@property(assign, nonatomic) BOOL can_publish;
@property(assign, nonatomic) int post_type;
@property(assign, nonatomic) BOOL marked_as_ads;
@property(assign, nonatomic) BOOL can_pin;
@property(assign, nonatomic) BOOL can_edit;
@property(assign, nonatomic) BOOL can_delete;
@property(assign, nonatomic) BOOL can_publish_privacy;
@property(retain, nonatomic) NSNumber* views_count;
@property(assign, nonatomic) int sourceData;
@property(retain, nonatomic) VKAttachments* attachments;
@property(retain, nonatomic) NSNumber* signer_id;
@property(retain, nonatomic) VKGeo* geo;
@property(assign, nonatomic) XXStruct_86WktA reposts;
@property(assign, nonatomic) XXStruct_uR0cxB likes;
@property(assign, nonatomic) XXStruct_86WktA comments;
@property(retain, nonatomic) VKText* text;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) NSNumber* from_id;
+(void)initialize;
-(void).cxx_destruct;
-(void)updatePinned:(BOOL)pinned;
-(void)acceptSources:(id)sources;
-(void)offsetComments:(int)comments;
-(void)updateReposts:(int)reposts user:(BOOL)user;
-(void)updateLikes:(id)likes companion:(id)companion user:(BOOL)user;
-(void)updateLike:(BOOL)like;
-(id)companionPhoto;
-(id)repostTargetItem;
-(id)repostTargetIdentity;
-(id)statusForSource:(id)source;
-(id)thumbnailUrl;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCopy:(id)copy;
-(BOOL)canBeUsedAsInitialForDetail;
@end

__attribute__((visibility("hidden")))
@interface VKPostCopy : VKDomainDerived {
}
@property(retain, nonatomic) VKPost* domain;
@end

__attribute__((visibility("hidden")))
@interface VKPostCommentInput : VKDomainDerived {
}
@property(retain, nonatomic) VKPost* domain;
@end

__attribute__((visibility("hidden")))
@interface VKPostLink : VKDomainDerived <VKAttachment> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKPost* domain;
+(id)from:(id)from;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface NewsSearchTrendsModel : ListModel {
}
-(id)processWithComponent:(id)component;
-(id)request:(int)request count:(int)count;
@end

__attribute__((visibility("hidden")))
@interface VKCommentIdentity : VKIdentity {
	NSNumber* _cid;
}
@property(retain, nonatomic) NSNumber* cid;
+(id)identityForHostItem:(id)hostItem;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)isEqual:(id)equal;
-(id)itemIdentity;
-(BOOL)isEqualToIdentity:(id)identity;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VKComment : VKDomain {
	BOOL _can_edit;
	BOOL _separatorDisabled;
	BOOL _separatorFull;
	BOOL _last;
	NSNumber* _from;
	unsigned _date;
	VKText* _text;
	VKAttachments* _attachments;
	NSNumber* _reply_to_user;
	NSNumber* _reply_to_comment;
	NSString* _name_dat;
	NSString* _reply_name_dat;
	VKDomain<VKThumbnailable>* _feedbackParent;
	VKAttachmentsRender* _attachmentsRender;
	id<VKSource> _source;
	id<VKSource> _reply_source;
	XXStruct_uR0cxB _likes;
}
@property(assign, nonatomic) BOOL last;
@property(assign, nonatomic) BOOL separatorFull;
@property(assign, nonatomic) BOOL separatorDisabled;
@property(retain, nonatomic) id<VKSource> reply_source;
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) VKAttachmentsRender* attachmentsRender;
@property(retain, nonatomic) VKDomain<VKThumbnailable>* feedbackParent;
@property(retain, nonatomic) NSString* reply_name_dat;
@property(retain, nonatomic) NSString* name_dat;
@property(retain, nonatomic) NSNumber* reply_to_comment;
@property(retain, nonatomic) NSNumber* reply_to_user;
@property(assign, nonatomic) BOOL can_edit;
@property(assign, nonatomic) XXStruct_uR0cxB likes;
@property(retain, nonatomic) VKAttachments* attachments;
@property(retain, nonatomic) VKText* text;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) NSNumber* from;
@property(retain, nonatomic) VKCommentIdentity* iden;
+(id)commentromFeedback:(id)feedback parentIdentity:(id)identity overrideOwner:(id)owner;
+(int)domainCommentType;
-(void).cxx_destruct;
-(void)updateLikes:(id)likes user:(BOOL)user;
-(id)commentStatus;
-(void)acceptSources:(id)sources;
-(void)useAttachments:(id)attachments;
-(BOOL)process:(id)process context:(id)context;
-(BOOL)valid;
-(Class)rendererClass;
-(void)domainOnEditCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface VKPostComment : VKComment {
}
+(int)domainCommentType;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoComment : VKComment {
}
+(int)domainCommentType;
@end

__attribute__((visibility("hidden")))
@interface VKVideoComment : VKComment {
}
+(int)domainCommentType;
@end

__attribute__((visibility("hidden")))
@interface VKTopicComment : VKComment <VKSourceStatus> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(int)domainCommentType;
-(int)statusMask;
-(id)statusForSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface VKProductComment : VKComment {
}
+(int)domainCommentType;
@end

__attribute__((visibility("hidden")))
@interface VMSessionManager : XXUnknownSuperclass {
	VMInteroperabilityManager* _interoperability;
	id<VMSession> _session;
}
@property(retain, nonatomic) id<VMSession> session;
@property(retain, nonatomic) VMInteroperabilityManager* interoperability;
-(void).cxx_destruct;
-(BOOL)isRecordingSession;
-(BOOL)isPlayingSession;
-(BOOL)isNoSession;
-(BOOL)deactivateSessionShouldResumeInteroperability:(BOOL)deactivateSession;
-(id)acquireRecordingSessionWithDelegate:(id)delegate;
-(id)acquireRecordingSessionInBackgroundWithDelegate:(id)delegate onCompletion:(id)completion;
-(id)acquirePlayingSessionWithDelegate:(id)delegate;
-(id)initWithInteroperability:(id)interoperability;
@end

__attribute__((visibility("hidden")))
@interface VKTopic : VKDomain <VKSourceStatus, VKThumbnailable> {
	BOOL _is_closed;
	BOOL _is_fixed;
	BOOL _feedback_topic;
	NSString* _title;
	NSNumber* _created_by;
	NSNumber* _updated_by;
	unsigned _created;
	unsigned _updated;
	int _comments;
	VKText* _last_comment;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKText* last_comment;
@property(assign, nonatomic) int comments;
@property(assign, nonatomic) BOOL feedback_topic;
@property(assign, nonatomic) BOOL is_fixed;
@property(assign, nonatomic) BOOL is_closed;
@property(assign, nonatomic) unsigned updated;
@property(assign, nonatomic) unsigned created;
@property(retain, nonatomic) NSNumber* updated_by;
@property(retain, nonatomic) NSNumber* created_by;
@property(retain, nonatomic) NSString* title;
+(id)previewFromFeed:(id)feed;
-(void).cxx_destruct;
-(id)thumbnailUrl;
-(int)statusMask;
-(id)statusForSource:(id)source;
-(BOOL)process:(id)process context:(id)context;
-(BOOL)valid;
@end

__attribute__((visibility("hidden")))
@interface VKTopicLastComment : VKTopicComment {
	VKTopic* _topic;
}
@property(retain, nonatomic) VKTopic* topic;
+(id)from:(id)from;
-(void).cxx_destruct;
-(id)initWithTopic:(id)topic;
@end

__attribute__((visibility("hidden")))
@interface VKTopicAtt : VKDomainDerived {
}
@property(retain, nonatomic) VKTopic* domain;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface FeedbackModel : LoadingModel {
	int feedbackDisabledMask;
}
-(void)expandGroup:(id)group;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(BOOL)shouldLoad:(id)load;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
-(BOOL)isSameModel:(id)model;
-(void)activate;
-(void)_loadMask;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsController : VKMLiveController {
	BOOL audioPlaylistLookup;
	BOOL _multi;
	AudioSelection* _audioSelection;
}
@property(retain, nonatomic) AudioPlaylistsModel* model;
@property(retain, nonatomic) AudioSelection* audioSelection;
@property(assign, nonatomic) BOOL multi;
-(void).cxx_destruct;
-(void)actionAdd;
-(void)actionShowMore:(id)more;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)VKMTableUpdatedIndex;
-(int)VKMControllerModalAutoClosePosition;
-(void)setupNavigationItemButtons:(BOOL)buttons;
-(id)setupMulti:(BOOL)multi;
-(id)setupAudioSelection:(id)selection;
@end

__attribute__((visibility("hidden")))
@interface VKFeedComment : VKRenderable {
	int _type;
	id _item;
	NSArray* _comments;
	XXStruct_86WktA _itemComments;
}
@property(assign, nonatomic) XXStruct_86WktA itemComments;
@property(retain, nonatomic) NSArray* comments;
@property(retain, nonatomic) id item;
@property(assign, nonatomic) int type;
+(id)feedComment:(id)comment;
-(void).cxx_destruct;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface FeedCommentsModel : FeedModel {
}
-(id)feedStatContext;
-(void)handleUnsubscribe:(id)unsubscribe :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)feedModelComplete:(id)complete loaded:(int)loaded;
-(id)nextFrom:(id)from data:(id)data count:(int)count;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)renderedObject:(id)object withContext:(id)context;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(id)feedRequestBuilderForContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface ProfileModel : DefaultProfileModel {
	StatContext* _stats_context;
}
@property(readonly, retain, nonatomic) VKProfile* item;
@property(retain, nonatomic) StatContext* stats_context;
-(void).cxx_destruct;
-(void)handleGiftAdd:(id)add :(id)arg2;
-(void)handleSubscribeLiveVideo:(id)video :(id)arg2;
-(void)handleSubscribe:(id)subscribe :(id)arg2;
-(void)handleFavorites:(id)favorites :(id)arg2;
-(void)handleEditProfile:(id)profile :(id)arg2;
-(void)handlePhotoUpload:(id)upload :(id)arg2;
-(void)handleDeletePhoto:(id)photo :(id)arg2;
-(void)handleBlacklist:(id)blacklist :(id)arg2;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)handleStatus:(id)status :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)fillPhotoActions:(id)actions;
-(void)fillProfileActions:(id)actions;
-(id)safeScreenName;
-(id)friendAction:(BOOL)action;
-(id)recreateProfileIndex:(id)index;
-(id)process:(id)process context:(id)context;
-(id)request;
-(id)withStatsContext:(id)statsContext;
@end

__attribute__((visibility("hidden")))
@interface AutoplayedBaseView : XXUnknownSuperclass <VKVideoPlayerViewDelegate, VKThumbnailView, TrackingBoundsView> {
	BOOL _autoplay;
	BOOL _started;
	id<AutoplayedVideoViewDelegate> _delegate;
	VKMImageView* _previewImage;
	VKAVVideoPlayerView* _playerView;
	RoundedProgressOverlayView* _progressOverlay;
	VKDomain<VKThumbnailable>* _domain;
	int _renderedSize;
	float _trackingBoundsPercentsVisible;
	UIActivityIndicatorView* _activity;
	NSURL* _currentURL;
}
@property(readonly, assign, nonatomic) UIImage* image;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float trackingBoundsPercentsVisible;
@property(assign, nonatomic) int renderedSize;
@property(retain, nonatomic) VKDomain<VKThumbnailable>* domain;
@property(readonly, assign, nonatomic) RoundedProgressOverlayView* progressOverlay;
@property(readonly, assign, nonatomic) VKAVVideoPlayerView* playerView;
@property(readonly, assign, nonatomic) VKMImageView* previewImage;
@property(assign, nonatomic) __weak id<AutoplayedVideoViewDelegate> delegate;
@property(assign, nonatomic) BOOL started;
@property(assign, nonatomic) BOOL autoplay;
@property(retain, nonatomic) NSURL* currentURL;
@property(retain, nonatomic) UIActivityIndicatorView* activity;
-(void).cxx_destruct;
-(void)setLooped:(BOOL)looped;
-(void)play;
-(void)renderPlayerURL:(id)url;
-(void)viewTrackingBoundsDidChange:(float)viewTrackingBounds previousValue:(float)value;
-(BOOL)shouldDisplayWithPriority;
-(void)videoPlayerPositionUpdated:(id)updated;
-(void)videoPlayerReadyToKeepUp:(id)keepUp;
-(void)videoPlayerIsStalling:(id)stalling;
-(void)videoPlayerFailedForDisplay:(id)display;
-(BOOL)videoPlayerCanStartPlaying:(id)playing;
-(void)videoPlayerDidDisplayVideoLayer:(id)videoPlayer;
-(void)attach:(id)attach previewVariant:(id)variant;
-(int)previewAspectMode;
-(void)attachPreview:(id)preview;
-(void)pause;
-(void)reuse;
-(void)setupProgressThin:(BOOL)thin;
-(void)renderVideoHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)tapped:(id)tapped;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AutoplayedGifView : AutoplayedBaseView <VKMGifLoaderDelegate> {
	BOOL _forcePlay;
	VKMGifLoader* _gifLoader;
	UIView* _badgeView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL forcePlay;
@property(assign, nonatomic) __weak UIView* badgeView;
@property(readonly, assign, nonatomic) VKMGifLoader* gifLoader;
-(void).cxx_destruct;
-(void)viewTrackingBoundsDidChange:(float)viewTrackingBounds previousValue:(float)value;
-(CGSize)playerSize;
-(void)gifLoader:(id)loader complete:(id)complete;
-(void)gifLoader:(id)loader reportProgress:(double)progress;
-(void)load:(id)load;
-(void)attach:(id)attach previewVariant:(id)variant;
-(void)renderVideoHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)reuse;
-(BOOL)readyToDisplay;
-(void)tapped:(id)tapped;
-(id)initWithFrame:(CGRect)frame synchronized:(BOOL)synchronized fallback:(BOOL)fallback;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AutoplayedVideoView : AutoplayedBaseView {
	UILabel* _durationLabel;
	UIImageView* _playButton;
}
@property(retain, nonatomic) UIImageView* playButton;
@property(retain, nonatomic) UILabel* durationLabel;
-(void).cxx_destruct;
-(void)videoPlayerFailedForDisplay:(id)display;
-(void)videoPlayerPositionUpdated:(id)updated;
-(void)videoPlayerDidDisplayVideoLayer:(id)videoPlayer;
-(void)renderVideoHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)attach:(id)attach previewVariant:(id)variant;
-(void)tapped:(id)tapped;
-(int)previewAspectMode;
-(BOOL)shouldDisplayWithPriority;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NewsSection : VKRenderable {
	BOOL _enabled;
	NSString* _name;
	int _type;
}
@property(assign, nonatomic) int type;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NewsSectionCell : VKMCell {
	UISwitch* _switchView;
	id<NewsSectionCellDelegate> _newsSectionDelegate;
}
@property(assign, nonatomic) id<NewsSectionCellDelegate> newsSectionDelegate;
@property(readonly, retain, nonatomic) UISwitch* switchView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)actionSwitch:(id)aSwitch;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StoreController : VKMLiveController <UIToolbarDelegate, MOScrollPagingMediatorDelegate> {
	MOScrollPagingMediator* _scrollPagingMediator;
	UIToolbar* _toolbar;
	UISegmentedControl* _segmentedControl;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) StoreStockItemsModel* model;
@property(retain, nonatomic) UISegmentedControl* segmentedControl;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) MOScrollPagingMediator* scrollPagingMediator;
-(void).cxx_destruct;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)actionSettings:(id)settings;
-(void)actionActions:(id)actions;
-(void)actionSectionChanged:(id)changed;
-(void)switchToSection:(int)section;
-(void)actionSelectedBanner:(id)banner;
-(BOOL)pagingMediatorShouldResetForScrollResize:(id)pagingMediator;
-(void)pagingMediator:(id)mediator renderPage:(int)page;
-(BOOL)VKMControllerModalOnly;
-(void)VKMTableUpdatedIndex;
-(int)positionForBar:(id)bar;
-(void)viewDidLoad;
-(void)notificationProductPurchased:(id)purchased;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface ItemModel : LoadingModel {
}
@property(readonly, retain, nonatomic) id item;
-(void)forceItem:(id)item;
-(id)withItem:(id)item;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)process:(id)process context:(id)context;
-(id)request;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsButton : VKDomain {
}
-(float)renderHeight;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface StoreManageProductsModel : LoadingModel {
	int _productType;
}
@property(assign, nonatomic) int productType;
-(void)handleReorder:(id)reorder :(id)arg2;
-(void)handleActivate:(id)activate :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)withProductType:(int)productType;
@end

__attribute__((visibility("hidden")))
@interface VKProfile : VKDomain <VKProfile> {
	BOOL _friend_status_read;
	BOOL _can_post;
	BOOL _can_write_private_message;
	BOOL _verified;
	BOOL _blacklisted;
	BOOL _blacklisted_by_me;
	BOOL _is_favorite;
	BOOL _can_send_friend_request;
	BOOL _is_subscribed_for_posts;
	BOOL _has_photo_stream;
	int _profileMode;
	VKUser* _user;
	NSString* _photo_big;
	VKPhoto* _profile_photo;
	unsigned _last_seen;
	int _friend_status;
	NSString* _status;
	VKAudio* _statusAudio;
	NSString* _nickname;
	NSString* _first_name_ins;
	NSString* _first_name_gen;
	NSString* _last_name_gen;
	NSString* _screen_name;
	VKBirthDate* _birthDate;
	int _age;
	NSString* _city_name;
	NSString* _home_town;
	NSString* _site;
	NSString* _university_name;
	NSString* _faculty_name;
	int _graduation;
	int _relation;
	VKMultinameUser* _relation_partner;
	NSString* _mobile_phone;
	NSString* _home_phone;
	NSArray* _relatives;
	NSString* _activities;
	NSString* _interests;
	NSString* _music;
	NSString* _movies;
	NSString* _tv;
	NSString* _books;
	NSString* _games;
	NSString* _quotes;
	NSString* _about;
	NSDictionary* _data;
	int _count_albums;
	int _count_videos;
	int _count_audios;
	int _count_notes;
	int _count_friends;
	int _count_mutual_friends;
	int _count_user_photos;
	int _count_user_videos;
	int _count_followers;
	int _count_subscriptions;
	int _count_pages;
	int _count_gifts;
	int _count_photos;
	int _count_groups;
	int _count_docs;
	int _access_mode;
	NSArray* _gifts;
	VKOccupation* _occupation;
	VKProfilePersonal* _personal;
	NSArray* _career;
	NSArray* _schools;
	NSArray* _followers;
	NSArray* _mutual_friends;
	VKVideo* _lastVideo;
	VKAudio* _lastAudio;
	VKLiveVideoSettings* _liveVideoSettings;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKLiveVideoSettings* liveVideoSettings;
@property(retain, nonatomic) VKAudio* lastAudio;
@property(retain, nonatomic) VKVideo* lastVideo;
@property(retain, nonatomic) NSArray* mutual_friends;
@property(retain, nonatomic) NSArray* followers;
@property(retain, nonatomic) NSArray* schools;
@property(retain, nonatomic) NSArray* career;
@property(retain, nonatomic) VKProfilePersonal* personal;
@property(retain, nonatomic) VKOccupation* occupation;
@property(retain, nonatomic) NSArray* gifts;
@property(assign, nonatomic) BOOL has_photo_stream;
@property(assign, nonatomic) BOOL is_subscribed_for_posts;
@property(assign, nonatomic) BOOL can_send_friend_request;
@property(assign, nonatomic) BOOL is_favorite;
@property(assign, nonatomic) int access_mode;
@property(assign, nonatomic) int count_docs;
@property(assign, nonatomic) int count_groups;
@property(assign, nonatomic) int count_photos;
@property(assign, nonatomic) int count_gifts;
@property(assign, nonatomic) int count_pages;
@property(assign, nonatomic) int count_subscriptions;
@property(assign, nonatomic) int count_followers;
@property(assign, nonatomic) int count_user_videos;
@property(assign, nonatomic) int count_user_photos;
@property(assign, nonatomic) int count_mutual_friends;
@property(assign, nonatomic) int count_friends;
@property(assign, nonatomic) int count_notes;
@property(assign, nonatomic) int count_audios;
@property(assign, nonatomic) int count_videos;
@property(assign, nonatomic) int count_albums;
@property(retain, nonatomic) NSDictionary* data;
@property(retain, nonatomic) NSString* about;
@property(retain, nonatomic) NSString* quotes;
@property(retain, nonatomic) NSString* games;
@property(retain, nonatomic) NSString* books;
@property(retain, nonatomic) NSString* tv;
@property(retain, nonatomic) NSString* movies;
@property(retain, nonatomic) NSString* music;
@property(retain, nonatomic) NSString* interests;
@property(retain, nonatomic) NSString* activities;
@property(assign, nonatomic) BOOL blacklisted_by_me;
@property(assign, nonatomic) BOOL blacklisted;
@property(assign, nonatomic) BOOL verified;
@property(assign, nonatomic) BOOL can_write_private_message;
@property(assign, nonatomic) BOOL can_post;
@property(retain, nonatomic) NSArray* relatives;
@property(retain, nonatomic) NSString* home_phone;
@property(retain, nonatomic) NSString* mobile_phone;
@property(retain, nonatomic) VKMultinameUser* relation_partner;
@property(assign, nonatomic) int relation;
@property(assign, nonatomic) int graduation;
@property(retain, nonatomic) NSString* faculty_name;
@property(retain, nonatomic) NSString* university_name;
@property(copy, nonatomic) NSString* site;
@property(copy, nonatomic) NSString* home_town;
@property(retain, nonatomic) NSString* city_name;
@property(assign, nonatomic) int age;
@property(retain, nonatomic) VKBirthDate* birthDate;
@property(retain, nonatomic) NSString* screen_name;
@property(retain, nonatomic) NSString* last_name_gen;
@property(retain, nonatomic) NSString* first_name_gen;
@property(retain, nonatomic) NSString* first_name_ins;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) VKAudio* statusAudio;
@property(retain, nonatomic) NSString* status;
@property(assign, nonatomic) BOOL friend_status_read;
@property(assign, nonatomic) int friend_status;
@property(assign, nonatomic) unsigned last_seen;
@property(retain, nonatomic) VKPhoto* profile_photo;
@property(retain, nonatomic) NSString* photo_big;
@property(retain, nonatomic) VKUser* user;
@property(readonly, assign, nonatomic) int profileMode;
+(id)profilePreviewWithUser:(id)user;
-(void).cxx_destruct;
-(void)profileBlocksForOwner:(BOOL)owner block:(id)block;
-(void)profileUserStatus:(id)status;
-(id)profileStatus;
-(id)profileSubtitle;
-(id)profileName;
-(id)profilePhoto;
-(BOOL)allCounts;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface UserWallController : ProfileWallController {
	BOOL appeared;
	ProfileModel* _profile;
	PhotoStreamController* _stream;
	VKHUD* _actionHUD;
	UIBarButtonItem* _giftsButton;
}
@property(retain, nonatomic) UIBarButtonItem* giftsButton;
@property(retain, nonatomic) VKHUD* actionHUD;
@property(retain, nonatomic) PhotoStreamController* stream;
@property(retain, nonatomic) ProfileModel* profile;
-(void).cxx_destruct;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)actionGift:(id)gift;
-(void)actionProfileInfo:(id)info;
-(void)actionProfileViewAllPhotos:(id)photos;
-(void)actionShowActions:(id)actions;
-(void)actionProfileViewBlock:(id)block;
-(id)controllerForBlock:(int)block;
-(void)actionProfileViewMessage:(id)message;
-(void)actionProfileViewStatus:(id)status;
-(void)clearHUD:(BOOL)hud message:(id)message;
-(void)actionProfileViewProfilePhoto:(id)photo;
-(void)VKMScrollViewReset;
-(void)VKMControllerTouch;
-(int)VKMLiveAudioContext;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateProfile;
-(void)dealloc;
-(id)initWithMain:(id)main andProfile:(id)profile;
@end

__attribute__((visibility("hidden")))
@interface VKStoreBanner : VKRenderable {
	int _bannerType;
	VKStoreStockItem* _stock_item;
	NSString* _section;
	NSString* _photo;
}
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSString* section;
@property(retain, nonatomic) VKStoreStockItem* stock_item;
@property(assign, nonatomic) int bannerType;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface WallModelContext : FeedModelContext {
	NSMutableSet* _knownPostIds;
}
@property(retain, nonatomic) NSMutableSet* knownPostIds;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface WallModel : FeedModel {
	VKWallMode* _mode;
}
@property(retain, nonatomic) VKWallMode* mode;
@property(retain, nonatomic) WallModelContext* lastContext;
+(id)wallCode:(id)code filter:(id)filter offset:(id)offset count:(int)count;
-(void).cxx_destruct;
-(id)feedStatContext;
-(void)handlePin:(id)pin :(id)arg2;
-(void)handlePhotoUpload:(id)upload :(id)arg2;
-(void)handleDeletePhoto:(id)photo :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(void)handleWallExtra:(id)extra block:(id)block;
-(void)registerForEvents:(id)events;
-(void)resetWithOwnerOnly:(BOOL)ownerOnly;
-(id)postTarget;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(void)updateHeaderSection:(id)section withExtra:(id)extra;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(id)itemsFromData:(id)data;
-(id)groupsFromData:(id)data;
-(id)usersFromData:(id)data;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
-(int)resultDomain;
@end

__attribute__((visibility("hidden")))
@interface PhotoStreamController : StreamCollectionController <ThumbnailViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) PhotoStreamModel* model;
+(id)cellClasses;
-(void)model:(id)model updated:(id)updated;
-(void)thumbnailView:(id)view selected:(id)selected;
-(id)configureCell:(id)cell atIndexPath:(id)indexPath withModelItem:(id)modelItem;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumModel : ListModel {
	VKPhotoAlbum* _album;
}
@property(retain, nonatomic) VKPhotoAlbum* album;
@property(retain, nonatomic) AlbumPhotoFeedContext* lastContext;
+(BOOL)forceIsAdultCheck;
-(void).cxx_destruct;
-(id)indexPathForInfoCell;
-(void)updateWithContext:(id)context;
-(BOOL)isUserAlbum:(id)album;
-(BOOL)isUserAlbumForOid:(id)oid;
-(BOOL)isAlbumOfOwner:(id)owner;
-(BOOL)isOwnAlbumIdentity:(id)identity;
-(id)browsingContextForPhoto:(id)photo;
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)process:(id)process;
-(id)listFromData:(id)data;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)initialIndex;
-(id)renderObject:(id)object withContext:(id)context;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)countKey;
-(id)setupPhotoAlbum:(id)album;
@end

__attribute__((visibility("hidden")))
@interface WifiStat : XXUnknownSuperclass {
	NSString* _ssid;
	NSString* _bssid;
}
@property(readonly, assign, nonatomic) NSString* bssid;
@property(readonly, assign, nonatomic) NSString* ssid;
+(id)currentStat;
+(id)ssid:(id)ssid bssid:(id)bssid;
-(void).cxx_destruct;
-(id)description;
-(id)initWithSsid:(id)ssid bssid:(id)bssid;
@end

__attribute__((visibility("hidden")))
@interface FriendRequestsPreviewItem : VKRenderable {
	unsigned _requestsCount;
	NSArray* _requestsPhotosArray;
	NSDictionary* _requestsUidsToPhotos;
}
@property(retain, nonatomic) NSDictionary* requestsUidsToPhotos;
@property(retain, nonatomic) NSArray* requestsPhotosArray;
@property(assign, nonatomic) unsigned requestsCount;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface PhotoStreamCell : VKMCollectionCell {
	ThumbnailView* _thumbImage;
	id<ThumbnailViewDelegate> _photoDelegate;
}
@property(assign, nonatomic) __weak id<ThumbnailViewDelegate> photoDelegate;
@property(readonly, retain, nonatomic) ThumbnailView* thumbImage;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PhotoStreamStoriesCell : PhotoStreamCell {
	UIImageView* _storyIconImageView;
	UILabel* _titleLabel;
}
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIImageView* storyIconImageView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderContext : XXUnknownSuperclass <ActionOptionsProviderContext> {
	ActionContext* _actionContext;
	VKSession* _session;
	int _renderContext;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int renderContext;
@property(readonly, assign, nonatomic) VKSession* session;
@property(readonly, assign, nonatomic) ActionContext* actionContext;
+(id)session:(id)session renderContext:(int)context;
+(id)session:(id)session;
+(id)actionContext:(id)context renderContext:(int)context2;
+(id)actionContext:(id)context;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface UserInfoController : ProfileInfoController {
}
@property(retain, nonatomic) ProfileModel* model;
-(void)VKMTableUpdatedIndex;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionProfileViewProfilePhoto:(id)photo;
-(void)actionShowActions:(id)actions;
-(id)VKMControllerStatsRef;
-(void)viewDidLoad;
-(void)updateProfile;
@end

__attribute__((visibility("hidden")))
@interface MOCTLabel : XXUnknownSuperclass {
	BOOL forced;
	MOCTRender* _render;
	id<MOCTLabelDelegate> _delegate;
	NSTextCheckingResult* _activeLink;
}
@property(assign, nonatomic) __weak id<MOCTLabelDelegate> delegate;
@property(retain, nonatomic) NSTextCheckingResult* activeLink;
@property(retain, nonatomic) MOCTRender* render;
-(void).cxx_destruct;
-(unsigned long long)accessibilityTraits;
-(id)accessibilityLabel;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)linkForTouch:(id)touch;
-(void)setAttributedText:(id)text;
-(void)setText:(id)text;
-(void)render:(id)render force:(BOOL)force;
-(void)resizeAndRender:(id)render force:(BOOL)force;
-(void)activateLink:(id)link;
-(void)updateWithText:(id)text;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKProfileItemText : VKRenderable {
	int _action;
	NSString* _ico;
	NSString* _data;
	int _connectionType;
}
@property(assign, nonatomic) int connectionType;
@property(retain, nonatomic) NSString* data;
@property(retain, nonatomic) NSString* ico;
@property(assign, nonatomic) int action;
+(id)ico:(id)ico data:(id)data action:(int)action;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKProfileItemData : VKRenderable {
	NSString* _title;
	NSString* _data;
}
@property(retain, nonatomic) NSString* data;
@property(retain, nonatomic) NSString* title;
+(id)title:(id)title data:(id)data;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKProfileItemUser : VKRenderable {
	VKUser* _user;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) VKUser* user;
+(id)user:(id)user title:(id)title;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKProfileItemPage : VKRenderable {
	VKWikiPage* _page;
}
@property(retain, nonatomic) VKWikiPage* page;
+(id)page:(id)page;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface AppUtilImageSaver : XXUnknownSuperclass {
	id _handler;
}
@property(copy, nonatomic) id handler;
+(id)handler:(id)handler;
-(void).cxx_destruct;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(id)initWithHandler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface AppUtil : XXUnknownSuperclass {
}
+(void)clearSharedCookies;
+(int)supportedMapsMask;
+(int)deviceHardwareGeneration;
+(void)saveImage:(id)image handler:(id)handler;
+(void)clearNotificationsCenter;
+(id)SHA256:(id)a256;
+(id)MD5:(id)a5;
+(id)firstResponderInView:(id)view;
+(unsigned)keyboardAnimationOptions:(id)options;
+(double)keyboardAnimationDuration:(id)duration;
+(void)pasteboardCopyText:(id)text;
+(void)preservingPasteboard:(id)pasteboard;
+(float)visibleKeyboardHeight;
+(id)loadImage:(id)image ext:(id)ext;
+(id)mapUrlForCenter:(id)center width:(int)width height:(int)height marker:(BOOL)marker;
+(id)mapUrlForCenterCoordinate:(CLLocationCoordinate2D)centerCoordinate width:(int)width height:(int)height marker:(BOOL)marker;
+(id)URLForMapsLat:(double)mapsLat lng:(double)lng addr:(id)addr type:(int)type;
+(void)openCalendarDate:(id)date;
+(void)routeAddressComponents:(id)components;
+(void)copyImageToPasteboard:(id)pasteboard;
+(void)webViewDisable:(id)disable;
+(id)deviceModel;
+(void)openMail:(id)mail;
+(void)call:(id)call;
+(id)callURL:(id)url;
+(BOOL)canMakeCalls;
+(id)applicationContext;
+(void)setApplicationContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface RecommendedContactCell : LookupContactVKCell {
}
+(void)prerender:(id)prerender;
-(id)makeInviteButton;
-(float)contentHeight;
-(float)photoPaddingY;
-(float)spaceBetweenImageAndLabel;
-(float)paddingX;
@end

__attribute__((visibility("hidden")))
@interface PushSubscriptionContactCell : RecommendedContactCell {
}
-(id)makeInviteButton;
@end

__attribute__((visibility("hidden")))
@interface VKUtil : XXUnknownSuperclass {
}
+(id)installationIdentifier;
+(id)autoplayParams:(id)params;
+(id)autoplaySettingValue:(id)value;
+(id)connectionParams:(id)params;
+(id)connectionParams;
+(id)profileLongPressMenu:(id)menu url:(id)url;
+(id)urlLongPressMenu:(id)menu;
+(id)phoneLongPressMenu:(id)menu;
+(id)clientAdsParameters;
+(id)clientEnvironmentParameters;
+(id)commentReplyTextForSource:(id)source;
+(id)textWithOldMentions:(id)oldMentions;
+(id)humanizedURL:(id)url;
+(id)safeScreenName:(id)name oid:(id)oid;
+(id)strippedAPNSToken:(id)token;
+(id)trimmedSendText:(id)text;
+(id)mentionForSource:(id)source;
+(id)mentionForUser:(id)user;
+(id)sendingBodyForText:(id)text;
+(id)sendingBodyForRawText:(id)rawText;
+(id)urlSchemeForAppId:(id)appId;
+(id)URLForNote:(id)note;
+(id)URLForPage:(id)page;
+(id)escapedTitleForPage:(id)page;
+(id)eventForGroup:(id)group inStore:(id)store;
+(id)birthdayEventForProfile:(id)profile inStore:(id)store;
+(void)requestAccessEventStore:(id)store type:(unsigned)type handler:(id)handler;
+(id)dropTime:(id)time;
+(id)dropYear:(id)year;
+(BOOL)isServiceVKURL:(id)vkurl;
+(id)safeBrowserURL:(id)url ref:(id)ref;
+(id)safeBrowserURL:(id)url;
+(id)passwordRestoreURL;
+(BOOL)isVKURLDomain:(id)domain;
+(BOOL)isVKURL:(id)vkurl;
+(id)VKStringURLForLink:(id)link;
+(id)VKURLForUid:(id)uid;
+(id)VKURLForScreenNameFull:(id)screenNameFull;
+(id)VKURLForSourceId:(int)sourceId;
+(id)VKShortURLForScreenName:(id)screenName;
+(id)VKURLForScreenName:(id)screenName;
+(id)sourceIDFromURL:(id)url;
+(void)setup;
@end

__attribute__((visibility("hidden")))
@interface SourceCell : BaseUserCell <MultiImageLoaderDelegate> {
	VKMMultiLoader* _multiloader;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKMMultiLoader* multiloader;
-(void).cxx_destruct;
-(void)multiImageLoader:(id)loader complete:(id)complete;
-(void)renderDialog:(id)dialog expectedReuse:(double)reuse;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LoadingModel : Model {
	BOOL touched;
	BOOL reset;
	BOOL _cachedIndex;
	NSNumber* _owner;
	LoadingModel<SearchModel>* _searchGlobal;
	Class _searchLocal;
	ModelContext* _lastContext;
	NSString* _resultStatus;
	NSIndexPath* _discovered;
	AFHTTPRequestOperation* _op;
	id _workingContext;
}
@property(assign, nonatomic) BOOL cachedIndex;
@property(retain, nonatomic) NSIndexPath* discovered;
@property(retain, nonatomic) NSString* resultStatus;
@property(retain, nonatomic) ModelContext* lastContext;
@property(retain, nonatomic) Class searchLocal;
@property(retain, nonatomic) LoadingModel<SearchModel>* searchGlobal;
@property(retain, nonatomic) NSNumber* owner;
@property(retain, nonatomic) id workingContext;
@property(retain, nonatomic) AFHTTPRequestOperation* op;
+(unsigned)countFromContext:(id)context;
+(void)parsingFailed:(id)failed;
+(id)parseGroups:(id)groups to:(id)to session:(id)session handler:(id)handler;
+(id)parseGroups:(id)groups to:(id)to session:(id)session;
+(id)parseUsers:(id)users to:(id)to;
+(id)parseSourcesWithProfiles:(id)profiles userHandler:(id)handler groups:(id)groups session:(id)session;
+(id)parseSourcesWithProfiles:(id)profiles groups:(id)groups session:(id)session;
+(id)parseUsers:(id)users to:(id)to handler:(id)handler;
+(id)parseList:(id)list class:(Class)aClass handler:(id)handler;
+(id)parseList:(id)list inverted:(BOOL)inverted class:(Class)aClass context:(id)context count:(id)count handler:(id)handler;
-(void).cxx_destruct;
-(id)lastUpdateDate;
-(void)storeLastUpdate;
-(void)updateModel:(id)model;
-(BOOL)searchEnabledForIndex:(id)index;
-(BOOL)isEmpty;
-(unsigned)count;
-(id)countString;
-(void)clear;
-(void)cancel;
-(void)reset;
-(void)touch;
-(id)resetContext;
-(id)nextContext;
-(void)loadCachedWithContext:(id)context;
-(void)loadWithContext:(id)context;
-(void)touchWithContext:(id)context;
-(void)resetWithContext:(id)context;
-(void)discovered:(id)discovered;
-(int)resultDomain;
-(id)countKey;
-(BOOL)shouldLoad:(id)load;
-(void)cachedIndexForContext:(id)context withCompletion:(id)completion;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(int)resultForRequestResponse:(id)requestResponse;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(void)removeModelObserver:(id)observer;
-(int)ownerAdminLevel;
-(BOOL)isOwnerAdmin;
-(BOOL)isOwnerModel;
-(void)cancelOp;
-(id)owner:(id)owner;
-(void)dealloc;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface ListModel : LoadingModel {
	int _defaultPage;
}
@property(retain, nonatomic) ListModelContext* lastContext;
@property(assign, nonatomic) int defaultPage;
-(id)setupDefaultPage:(int)page;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)itemsToAppend:(id)append to:(id)to context:(id)context;
-(id)itemsToAppend:(id)append to:(id)to;
-(id)processWithComponent:(id)component;
-(id)process:(id)process;
-(id)listFromData:(id)data;
-(id)request:(int)request count:(int)count;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface ProfileFriendsModel : MultiIndexModel {
	BOOL _disableImportant;
	BOOL _allowRequests;
	BOOL _friendLists;
	NSNumber* _lid;
	NSArray* _filteringIDs;
	NSPredicate* _filterPredicate;
	NSArray* _friendsSorted;
	Index* _allFriends;
	Index* _friends;
	Index* _online;
	Index* _mutual;
}
@property(readonly, retain, nonatomic) NSPredicate* filterPredicate;
@property(readonly, copy, nonatomic) NSArray* filteringIDs;
@property(assign, nonatomic) BOOL friendLists;
@property(assign, nonatomic) BOOL allowRequests;
@property(assign, nonatomic) BOOL disableImportant;
@property(retain, nonatomic) NSNumber* lid;
@property(retain, nonatomic) Index* mutual;
@property(retain, nonatomic) Index* online;
@property(retain, nonatomic) Index* friends;
@property(retain, nonatomic) Index* allFriends;
@property(retain, nonatomic) NSArray* friendsSorted;
-(void).cxx_destruct;
-(void)handleDeleteRequests:(id)requests :(id)arg2;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)updateRequestsCount:(int)count removeUserId:(id)anId :(id)arg3;
-(void)handleChange:(id)change :(id)arg2;
-(void)removeUser:(id)user :(id)arg2;
-(void)addUser:(id)user :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)countKeyForMode:(unsigned)mode;
-(id)indexForMode:(unsigned)mode;
-(unsigned)modes;
-(void)cachedIndexForContext:(id)context withCompletion:(id)completion;
-(id)usersFilterPredicate;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestsItemToUseForCount:(unsigned)count;
-(id)requestForContext:(id)context;
-(BOOL)showRequests;
-(BOOL)hostAllFriends;
-(id)countKey;
-(id)predicate:(id)predicate;
-(id)onlyOfIDs:(id)ids;
@end

__attribute__((visibility("hidden")))
@interface VKMMultiIndexController : VKMToolbarController {
}
@property(retain, nonatomic) MultiIndexModel* model;
-(void)segmentedControlChanged:(id)changed;
-(void)switchToMode:(unsigned)mode;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(BOOL)VKMScrollViewShouldShowTeaserForMode:(unsigned)vkmscrollView;
-(id)titleForSegmentAtIndex:(unsigned)index;
-(BOOL)isToolbarHidden;
-(unsigned)numberOfSegments;
-(void)viewWillAppear:(BOOL)view;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface SearchModelContext : ListModelContext {
	NSString* _query;
}
@property(retain, nonatomic) NSString* query;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface SearchModel : ListModel <SearchModel> {
	NSString* _searchQuery;
	int _searchScope;
	int _searchRenderContext;
}
@property(readonly, retain, nonatomic) NSArray* searchScopes;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int searchRenderContext;
@property(retain, nonatomic) SearchModelContext* lastContext;
@property(assign, nonatomic) int searchScope;
@property(copy, nonatomic) NSString* searchQuery;
-(void).cxx_destruct;
-(void)clearResults;
-(void)searchWithScope:(int)scope;
-(void)searchWithQuery:(id)query;
-(id)request:(int)request count:(int)count;
-(id)spawnContext:(id)context;
-(int)searchPageSize:(BOOL)size;
-(id)parameters:(id)parameters;
-(id)method;
-(id)withRenderContext:(int)renderContext;
@end

__attribute__((visibility("hidden")))
@interface UsersSearchModel : SearchModel {
}
-(id)process:(id)process;
-(id)parameters:(id)parameters;
-(id)method;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchHistoryStorage : XXUnknownSuperclass {
	NSMutableArray* _mHistory;
}
@property(readonly, retain, nonatomic) NSArray* history;
-(void).cxx_destruct;
-(void)clear;
-(void)addSearchQuery:(id)query;
-(id)initWithHistory:(id)history;
@end

__attribute__((visibility("hidden")))
@interface AudioOwnersBlock : AudioBlock {
	NSArray* _owners;
}
@property(retain, nonatomic) NSArray* owners;
-(void).cxx_destruct;
-(id)items;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKMLiveSearchController : VKMSearchController <ModelObserver, ModelRenderDelegate> {
	NSString* _query;
	LoadingModel<SearchModel>* _model;
	Class _operationClass;
	NSMutableArray* _cells;
	int _renderContext;
	NSObject* _searchDelayMarker;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKMNavDelegate, VKMLiveSearchControllerDelegate> searchDelegate;
@property(assign, nonatomic) int renderContext;
@property(retain, nonatomic) NSMutableArray* cells;
@property(retain, nonatomic) Class operationClass;
@property(retain, nonatomic) NSString* query;
@property(retain, nonatomic) NSObject* searchDelayMarker;
@property(retain, nonatomic) LoadingModel<SearchModel>* model;
-(void).cxx_destruct;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)objectAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)windowWillAnimateRotation:(id)window;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchLocal:(id)local;
-(id)model:(id)model componentRenderContextForObject:(id)object context:(id)context;
-(id)model:(id)model componentForObject:(id)object withContext:(id)context;
-(id)renderContextForModel:(id)model;
-(id)model:(id)model renderObject:(id)object withContext:(id)context;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)indexUpdated;
-(void)updated;
-(void)cancel;
-(void)customizeSearchBar:(id)bar;
-(void)dropCells;
-(void)dealloc;
-(void)useSearchModel:(id)model;
-(id)initWithSearchBar:(id)searchBar contentsController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoDetails : XXUnknownSuperclass {
	BOOL _user_likes;
	BOOL _user_reposted;
	BOOL _missing;
	int _likes_count;
	int _comments_count;
	int _reposts_count;
	int _tags_count;
}
@property(assign, nonatomic) BOOL missing;
@property(assign, nonatomic) BOOL user_reposted;
@property(assign, nonatomic) BOOL user_likes;
@property(assign, nonatomic) int tags_count;
@property(assign, nonatomic) int reposts_count;
@property(assign, nonatomic) int comments_count;
@property(assign, nonatomic) int likes_count;
+(id)missing;
+(id)likes:(id)likes comments:(id)comments reposts:(id)reposts userReposted:(id)reposted tags:(id)tags user:(id)user;
-(void)offsetComments:(int)comments;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoTags : XXUnknownSuperclass {
	NSArray* _tags;
}
@property(retain, nonatomic) NSArray* tags;
+(id)parseTags:(id)tags;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKPhoto : VKDomain <VKBrowsableImage, VKSourceStatus> {
	BOOL _can_edit;
	BOOL _hidden;
	BOOL _hasPhotoSizes;
	NSMutableDictionary* _variants;
	float _ratio;
	NSNumber* _aid;
	NSNumber* _user_id;
	VKText* _text;
	unsigned _date;
	NSNumber* _post_id;
	VKPhotoDetails* _details;
	VKPhotoTags* _tags;
	NSNumber* _can_repost;
	NSNumber* _can_comment;
	NSNumber* _real_offset;
	VKUser* _author;
	CGRect _profilePhotoRect;
	CGRect _listPhotoRect;
	CGRect _listPhotoRectConverted;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKUser* author;
@property(readonly, assign, nonatomic) BOOL hasPhotoSizes;
@property(assign, nonatomic) CGRect listPhotoRectConverted;
@property(assign, nonatomic) CGRect listPhotoRect;
@property(assign, nonatomic) CGRect profilePhotoRect;
@property(assign, nonatomic) BOOL hidden;
@property(retain, nonatomic) NSNumber* real_offset;
@property(assign, nonatomic) BOOL can_edit;
@property(retain, nonatomic) NSNumber* can_comment;
@property(retain, nonatomic) NSNumber* can_repost;
@property(retain, nonatomic) VKPhotoTags* tags;
@property(retain, nonatomic) VKPhotoDetails* details;
@property(retain, nonatomic) NSNumber* post_id;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) VKText* text;
@property(retain, nonatomic) NSNumber* user_id;
@property(retain, nonatomic) NSNumber* aid;
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) NSMutableDictionary* variants;
+(id)pendingUploadPhoto:(float)photo;
+(id)fakePhoto:(id)photo size:(CGSize)size;
+(id)fakePhoto:(id)photo;
+(id)placeholderPhoto;
+(void)load;
-(void).cxx_destruct;
-(BOOL)isVideo;
-(int)statusMask;
-(id)statusForSource:(id)source;
-(id)messagesPlaceholder;
-(id)messagesFilterForSize:(CGSize)size isFirst:(BOOL)first isLast:(BOOL)last;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)pickVariantForSize:(CGSize)size;
-(id)pickVariantForSize:(CGSize)size scale:(float)scale;
-(id)messagesVariant;
-(id)fullVariant;
-(int)fullVariantType;
-(id)thumbnailVariant;
-(id)thumbnailUrl;
-(id)companionPostIdentity;
-(BOOL)isPlaceholderPhoto;
-(void)updatePermissionsData:(id)data;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCopy:(id)copy;
-(id)init;
-(BOOL)isEqual:(id)equal;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoSized : VKPhoto <VKPhotoSized> {
	int _sizeType;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int sizeType;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoStreamItem : VKPhotoSized {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoAlbumRowPhoto : VKPhotoSized {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoEditItem : VKDomainDerived <VKPhotoEdit> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKPhoto* domain;
-(id)photoEditDescription;
-(id)photoEditTitle;
-(id)photoEditThumbnail;
-(BOOL)isEqualItemId:(id)anId;
-(BOOL)isEqualIdentity:(id)identity;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoRow : VKRenderable {
	NSArray* _photos;
}
@property(retain, nonatomic) NSArray* photos;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoTag : VKDomain {
	NSNumber* _uid;
	NSNumber* _tag_id;
	NSNumber* _placer_id;
	NSString* _tagged_name;
	unsigned _date;
	float _x;
	float _y;
	float _x2;
	float _y2;
}
@property(assign, nonatomic) float y2;
@property(assign, nonatomic) float x2;
@property(assign, nonatomic) float y;
@property(assign, nonatomic) float x;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) NSString* tagged_name;
@property(retain, nonatomic) NSNumber* placer_id;
@property(retain, nonatomic) NSNumber* tag_id;
@property(retain, nonatomic) NSNumber* uid;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoCommentInput : VKDomainDerived {
}
@property(retain, nonatomic) VKPhoto* domain;
@end

__attribute__((visibility("hidden")))
@interface VKGeo : VKRenderable <VKLinkable, VKAttachment> {
	NSString* _title;
	VKPlace* _geoPlace;
	CLLocationCoordinate2D _coordinate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKPlace* geoPlace;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
+(id)linkIcon;
+(id)geo:(id)geo;
-(void).cxx_destruct;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(id)linkText;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKSimpleGeo : VKRenderable {
	VKGeo* _geo;
}
@property(retain, nonatomic) VKGeo* geo;
+(id)simpleGeoWithGeo:(id)geo;
-(void).cxx_destruct;
-(Class)rendererClass;
-(id)initWithGeo:(id)geo;
@end

__attribute__((visibility("hidden")))
@interface PollEditContext : EditContext {
	VKPoll* _original;
}
@property(retain, nonatomic) VKPoll* original;
@property(retain, nonatomic) VKPoll* domain;
-(void).cxx_destruct;
-(id)confirmAction:(id)action;
-(Class)editControllerClass;
@end

__attribute__((visibility("hidden")))
@interface PollEditTextCell : XXUnknownSuperclass {
	UITextView* _textView;
}
@property(retain, nonatomic) UITextView* textView;
+(void)initialize;
-(void).cxx_destruct;
-(float)heightWithText:(id)text forWidth:(float)width;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PollEditController : EditController <UITableViewDataSource, UITableViewDelegate, UITextViewDelegate> {
	float keyboardHeight;
	BOOL forced;
	UITableView* _tableView;
	PollEditTextCell* _sampleCell;
	PollEditTextCell* _titleCell;
@private
	UITableViewCell* _anonCell;
@protected
	UITableViewCell* _addCell;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PollEditContext* context;
@property(retain, nonatomic) UITableViewCell* addCell;
@property(retain, nonatomic) UITableViewCell* anonCell;
@property(retain, nonatomic) PollEditTextCell* titleCell;
@property(retain, nonatomic) PollEditTextCell* sampleCell;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)textViewDidChange:(id)textView;
-(void)scrollToCell:(id)cell focus:(BOOL)focus;
-(id)cellForTextView:(id)textView;
-(void)VKMEditDataChanged:(BOOL)changed;
-(void)removeAnswer:(id)answer;
-(void)addAnswer;
-(void)withAnswers:(id)answers;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)updateForOrientation;
-(void)notificationKeyboard:(id)keyboard;
-(void)VKMControllerChromeInsetsApply;
-(void)actionToggleAnon:(id)anon;
-(void)actionDismiss:(id)dismiss;
-(int)VKMEditDataState;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumController : VKMLiveController <PhotoSeletionDelegate> {
	BOOL updated;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PhotoAlbumModel* model;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)VKMTableUpdatedIndex;
-(void)photoRowCell:(id)cell selectedPhoto:(id)photo;
-(void)updateAlbum;
@end

__attribute__((visibility("hidden")))
@interface VMPushToTalkThumbView : XXUnknownSuperclass {
	UIButton* _sendButton;
	UIView* _body;
	UIView* _pulseView;
	UIImageView* _micImageView;
	UIImageView* _crossImageView;
}
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) UIImageView* crossImageView;
@property(retain, nonatomic) UIImageView* micImageView;
@property(retain, nonatomic) UIView* pulseView;
@property(retain, nonatomic) UIView* body;
+(id)thumbWithDiamter:(float)diamter;
+(void)initialize;
-(void).cxx_destruct;
-(void)changeToSendState;
-(void)changeRedState:(BOOL)state inside:(BOOL)inside;
-(void)updateVolume:(float)volume;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumListModel : PhotoAlbumModel {
}
+(unsigned)countFromContext:(id)context;
-(void)handleMove:(id)move :(id)arg2;
-(void)handleReorder:(id)reorder :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleUpload:(id)upload :(id)arg2;
-(void)deletePhoto:(id)photo :(id)arg2;
-(void)addPhoto:(id)photo :(id)arg2;
-(void)markIndexReset:(id)reset;
-(void)registerForEvents:(id)events;
-(id)browsingContextForPhoto:(id)photo;
-(id)rowsFromPhotos:(id)photos;
-(void)discovered:(id)discovered;
-(id)itemsToAppend:(id)append to:(id)to;
-(id)process:(id)process;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface VKAPVideoAlbumsViewController : VideoAlbumsController {
}
-(int)preferredStatusBarStyle;
-(void)VKMNavigationBarUpdate;
@end

__attribute__((visibility("hidden")))
@interface PhotoRowCell : VKMCell {
	NSArray* _previews;
}
@property(retain, nonatomic) VKPhotoRow* domain;
@property(readonly, retain, nonatomic) NSArray* previews;
+(void)prerender:(id)prerender;
+(id)renderPhotosRow:(id)row max:(int)max width:(float)width height:(float)height padding:(float)padding zoomMax:(float)max6 zoomMin:(float)min;
+(void)initialize;
-(void).cxx_destruct;
-(id)visibleThumbnails;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKVideo : VKDomain <VKImage, VKSourceStatus, VKChildDomain> {
	BOOL _can_edit;
	BOOL _can_add;
	BOOL _no_comments;
	BOOL _is_private;
	BOOL _repeat;
	BOOL _content_restricted;
	BOOL _canPlay;
	BOOL _processing;
	BOOL _converting;
	BOOL _added;
	BOOL _upcoming;
	BOOL _no_autoplay;
	BOOL _video_player_fallback;
	BOOL _live;
	VKIdentity* _parentIden;
	NSMutableDictionary* _variants;
	NSString* _title;
	int _duration;
	VKText* _descr;
	unsigned _date;
	int _views;
	VKPrivacySetting* _privacy_view;
	VKPrivacySetting* _privacy_comment;
	NSDictionary* _files;
	NSString* _player;
	NSString* _content_restricted_message;
	int _videoType;
	NSNumber* _can_repost;
	NSNumber* _can_comment;
	NSArray* _knownUserAlbums;
	id<VKSource> _source;
	int _width;
	int _height;
	NSString* _platform;
	int _platformType;
	NSMutableDictionary* _firstFrameVariants;
	VKDoc* _gifDocument;
	VKAdData* _adData;
	XXStruct_86WktA _comments;
	XXStruct_uR0cxB _likes;
	XXStruct_86WktA _reposts;
}
@property(readonly, assign, nonatomic) float ratio;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAdData* adData;
@property(assign, nonatomic, getter=isLive) BOOL live;
@property(retain, nonatomic) VKDoc* gifDocument;
@property(readonly, assign, nonatomic, getter=isGif) BOOL gif;
@property(retain, nonatomic) NSMutableDictionary* firstFrameVariants;
@property(assign, nonatomic) BOOL video_player_fallback;
@property(assign, nonatomic) BOOL no_autoplay;
@property(assign, nonatomic) BOOL upcoming;
@property(assign, nonatomic) int platformType;
@property(retain, nonatomic) NSString* platform;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) NSArray* knownUserAlbums;
@property(retain, nonatomic) NSNumber* can_comment;
@property(retain, nonatomic) NSNumber* can_repost;
@property(assign, nonatomic) BOOL added;
@property(assign, nonatomic) int videoType;
@property(assign, nonatomic) BOOL converting;
@property(assign, nonatomic) BOOL processing;
@property(assign, nonatomic) BOOL canPlay;
@property(retain, nonatomic) NSString* content_restricted_message;
@property(assign, nonatomic) BOOL content_restricted;
@property(retain, nonatomic) NSString* player;
@property(retain, nonatomic) NSDictionary* files;
@property(assign, nonatomic) BOOL repeat;
@property(assign, nonatomic) BOOL is_private;
@property(assign, nonatomic) BOOL no_comments;
@property(assign, nonatomic) BOOL can_add;
@property(assign, nonatomic) BOOL can_edit;
@property(retain, nonatomic) VKPrivacySetting* privacy_comment;
@property(retain, nonatomic) VKPrivacySetting* privacy_view;
@property(assign, nonatomic) XXStruct_86WktA reposts;
@property(assign, nonatomic) XXStruct_uR0cxB likes;
@property(assign, nonatomic) XXStruct_86WktA comments;
@property(assign, nonatomic) int views;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) VKText* descr;
@property(assign, nonatomic) int duration;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSMutableDictionary* variants;
@property(retain, nonatomic) VKIdentity* parentIden;
+(id)videoFromDoc:(id)doc;
+(id)emptyVideoForUploadTo:(id)to;
+(void)initialize;
-(void).cxx_destruct;
-(void)offsetComments:(int)comments;
-(void)updateReposts:(int)reposts user:(BOOL)user;
-(void)updateLikes:(id)likes user:(BOOL)user;
-(float)expectedAspectRatio;
-(id)messagesFilterForSize:(CGSize)size isFirst:(BOOL)first isLast:(BOOL)last;
-(int)statusMask;
-(id)statusForSource:(id)source;
-(id)imageURL;
-(id)URLForPreferedQuality:(int)preferedQuality;
-(unsigned)numberOfQualities;
-(int)qualityForPreferredQuality:(int)preferredQuality;
-(id)thumbnailUrl;
-(id)variantForSizeType:(int)sizeType checkFirstFrameVariantsFirst:(BOOL)first;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height useFirstFrameVariantsIfHas:(BOOL)has;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
-(BOOL)canPlayInline;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCreate;
-(void)domainOnEditCopy:(id)copy;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKVideoAutoplay : VKDomainDerived {
	XXStruct_pwHToB _position;
}
@property(assign, nonatomic) XXStruct_pwHToB position;
@end

__attribute__((visibility("hidden")))
@interface VMEmptyHolder : XXUnknownSuperclass {
	NSMutableSet* _holders;
}
@property(retain, nonatomic) NSMutableSet* holders;
-(void).cxx_destruct;
-(BOOL)isEmpty;
-(void)removeHolder:(id)holder;
-(void)addHolder:(id)holder;
-(id)init;
-(void)becameEmptyAction;
-(void)wasEmptyAction;
@end

__attribute__((visibility("hidden")))
@interface MaskLoader : XXUnknownSuperclass <MasksCacheDelegate> {
	WeakObservers* _observers;
	VKMask* _currentMask;
	AFHTTPRequestOperation* _op;
	MasksCache* _masksCache;
	XXStruct_xAnk1C _progressBytes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) XXStruct_xAnk1C progressBytes;
@property(retain, nonatomic) WeakObservers* observers;
@property(retain, nonatomic) MasksCache* masksCache;
@property(retain, nonatomic) AFHTTPRequestOperation* op;
@property(retain, nonatomic) VKMask* currentMask;
-(void).cxx_destruct;
-(void)masksCache:(id)cache cleanedMasksWithIden:(id)iden;
-(BOOL)isLoading;
-(void)cancel;
-(void)changeMaskAndLoadIfNeeded:(id)needed;
-(id)jsonPathForMaskIfCached:(id)maskIfCached;
-(unsigned)maskStateForMask:(id)mask;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKWallExtra : VKRenderable {
	int _type;
	int _count;
	NSNumber* _owner;
}
@property(retain, nonatomic) NSNumber* owner;
@property(assign, nonatomic) int count;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface WallExtraRenderer : Renderer {
}
@property(retain, nonatomic) VKWallExtra* domain;
+(void)prepareLayout:(id)layout;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface VKAudio : VKDomain {
	BOOL _content_restricted;
	BOOL _hq;
	BOOL _added;
	NSString* _performer;
	NSString* _title;
	int _duration;
	NSString* _url;
	NSNumber* _lyrics_id;
	NSString* _content_restricted_message;
	NSString* _content_restricted_url;
	VKAudioPlaylistAlbum* _album;
}
@property(assign, nonatomic) BOOL added;
@property(assign, nonatomic, getter=isHQ) BOOL hq;
@property(retain, nonatomic) VKAudioPlaylistAlbum* album;
@property(retain, nonatomic) NSString* content_restricted_url;
@property(retain, nonatomic) NSString* content_restricted_message;
@property(assign, nonatomic) BOOL content_restricted;
@property(retain, nonatomic) NSNumber* lyrics_id;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int duration;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* performer;
-(void).cxx_destruct;
-(BOOL)canAdd:(id)add;
-(void)updateUrl:(id)url;
-(BOOL)isEqual:(id)equal;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VKAudioMinimized : VKDomainDerived {
	BOOL _showArtist;
	unsigned _trackNumber;
}
@property(assign, nonatomic) BOOL showArtist;
@property(assign, nonatomic) unsigned trackNumber;
@property(readonly, retain, nonatomic) VKAudio* domain;
+(id)from:(id)from trackNumber:(unsigned)number showArtist:(BOOL)artist;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAudioSearch : VKDomainDerived {
}
@property(readonly, retain, nonatomic) VKAudio* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAudioAttach : VKDomainDerived {
}
@property(readonly, retain, nonatomic) VKAudio* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAudioAttachSearch : VKDomainDerived {
}
@property(readonly, retain, nonatomic) VKAudio* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface GroupsModelContext : ModelContext {
	VKGroupsCatalogInfo* _catalog;
	int _totalGroups;
	int _totalInvites;
}
@property(retain, nonatomic) VKGroupsCatalogInfo* catalog;
@property(assign, nonatomic) int totalInvites;
@property(assign, nonatomic) int totalGroups;
-(void).cxx_destruct;
-(id)titleForSection:(unsigned)section;
-(id)groupSections;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface GroupsModel : MultiIndexModel {
	BOOL _needInvites;
	Index* _groups;
	Index* _events;
	int _admin;
}
@property(assign, nonatomic) BOOL needInvites;
@property(assign, nonatomic) int admin;
@property(retain, nonatomic) Index* events;
@property(retain, nonatomic) Index* groups;
-(void).cxx_destruct;
-(void)resetInvites;
-(void)handleGroup:(id)group :(id)arg2;
-(void)deleteGroup:(id)group b:(id)b;
-(void)addGroup:(id)group b:(id)b isInvite:(BOOL)invite;
-(void)registerForEvents:(id)events;
-(id)countKeyForMode:(unsigned)mode;
-(id)indexForMode:(unsigned)mode;
-(unsigned)modes;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface GroupCell : VKMCell {
	VKMImageView* _imageLoadingView;
	UILabel* _name;
	UILabel* _status;
}
@property(readonly, retain, nonatomic) UILabel* status;
@property(readonly, retain, nonatomic) UILabel* name;
@property(retain, nonatomic) VKMImageView* imageLoadingView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)willTransitionToState:(unsigned)state;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface IndexSearchOperation : XXUnknownSuperclass {
	Index* _index;
	NSString* _query;
	NSArray* _results;
	int _skipSections;
}
@property(assign, nonatomic) int skipSections;
@property(retain, nonatomic) NSArray* results;
@property(retain, nonatomic) NSString* query;
@property(retain, nonatomic) Index* index;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MultiIndexModel : LoadingModel {
	unsigned _currentMode;
}
@property(assign, nonatomic) unsigned currentMode;
-(void)resetToMode:(unsigned)mode;
-(id)setupMode:(unsigned)mode;
-(id)countString;
-(id)indexForMode:(unsigned)mode;
-(id)countKeyForMode:(unsigned)mode;
-(unsigned)modes;
-(BOOL)hasAnyData;
@end

__attribute__((visibility("hidden")))
@interface GroupsSearchOperation : IndexSearchOperation {
}
-(void)main;
@end

__attribute__((visibility("hidden")))
@interface GroupsSearchModel : SearchModel {
}
-(id)process:(id)process;
-(id)method;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface MaskSectionCollectionCell : XXUnknownSuperclass {
	VKMaskSection* _section;
	VKMImageView* _imageView;
	UIImageView* _hasNewDotView;
}
@property(retain, nonatomic) VKMImageView* imageView;
@property(retain, nonatomic) VKMaskSection* section;
@property(retain, nonatomic) UIImageView* hasNewDotView;
+(CGSize)size;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKAdEvents : XXUnknownSuperclass {
	NSString* _iden;
	NSDictionary* _eventsMap;
}
@property(readonly, retain, nonatomic) NSDictionary* eventsMap;
@property(readonly, retain, nonatomic) NSString* iden;
+(id)iden:(id)iden events:(id)events;
-(void).cxx_destruct;
-(id)urlsForEvent:(int)event;
-(id)initWithIden:(id)iden events:(id)events;
@end

__attribute__((visibility("hidden")))
@interface VKAdData : XXUnknownSuperclass <NSCopying> {
	NSMutableDictionary* _blockEventsMap;
	NSMutableDictionary* _adEventsMap;
	NSMutableDictionary* _cardEventsMap;
	NSString* _id1;
	NSString* _id2;
	NSString* _card_id;
	NSString* _ad_data;
	NSString* _ad_data_impression;
}
@property(readonly, assign, nonatomic) VKAdEvents* cardEvents;
@property(readonly, assign, nonatomic) VKAdEvents* adEvents;
@property(readonly, assign, nonatomic) VKAdEvents* blockEvents;
@property(retain, nonatomic) NSString* ad_data_impression;
@property(retain, nonatomic) NSString* ad_data;
@property(retain, nonatomic) NSString* card_id;
@property(retain, nonatomic) NSString* id2;
@property(retain, nonatomic) NSString* id1;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)addCardEvents:(id)events;
-(void)addAdEvents:(id)events;
-(void)addBlockEvents:(id)events;
@end

__attribute__((visibility("hidden")))
@interface SpacerComponent : Component5 {
}
+(id)height:(float)height;
+(id)width:(float)width;
+(id)size:(CGSize)size;
+(id)spacer;
+(id)emptyComponent:(id)component;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface VKAPPhotoViewController : VKPPGroupController <VKAPTabViewControllerProtocol> {
	VKAPModel* _pickerModel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VKAPModel* pickerModel;
-(void).cxx_destruct;
-(id)scrollView;
-(void)updateTitleView;
@end

__attribute__((visibility("hidden")))
@interface FriendListsModel : LoadingModel {
	BOOL _needSystem;
}
@property(assign, nonatomic) BOOL needSystem;
-(id)setupSystem:(BOOL)system;
-(void)handleEdit:(id)edit :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)cachedIndexForContext:(id)context withCompletion:(id)completion;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface StickersRecentModel : XXUnknownSuperclass {
	BOOL touched;
	VKStats* _stats;
	VKClient* _client;
	NSString* _baseURL;
	NSArray* _stickerIds;
}
@property(retain, nonatomic) NSArray* stickerIds;
@property(retain, nonatomic) NSString* baseURL;
@property(readonly, retain, nonatomic) VKClient* client;
@property(readonly, retain, nonatomic) VKStats* stats;
-(void).cxx_destruct;
-(void)touch;
-(void)handleSentSticker:(id)sticker baseURL:(id)url;
-(void)_store;
-(void)_load;
-(id)initWithStats:(id)stats andClient:(id)client;
@end

__attribute__((visibility("hidden")))
@interface VKAudioPlayerModel : XXUnknownSuperclass {
	BOOL _shuffle;
	BOOL _repeat;
	int _selectedItemIndex;
	NSArray* _playerItemsStraight;
	NSArray* _playerItemsShuffled;
}
@property(assign, nonatomic) BOOL repeat;
@property(assign, nonatomic) BOOL shuffle;
@property(assign, nonatomic) int selectedItemIndex;
@property(retain, nonatomic) NSArray* playerItemsShuffled;
@property(retain, nonatomic) NSArray* playerItemsStraight;
+(id)from:(id)from context:(int)context playlistIden:(id)iden;
-(void).cxx_destruct;
-(id)nowPlayingItems;
-(int)prevIndex;
-(int)nextIndex;
-(void)shuffle:(BOOL)shuffle;
-(void)repeat:(BOOL)repeat;
-(void)select:(unsigned)select;
-(void)insertItems:(id)items afterObject:(id)object;
-(BOOL)insert:(id)insert at:(unsigned)at context:(int)context playlistIden:(id)iden;
-(BOOL)remove:(unsigned)remove;
-(BOOL)move:(unsigned)move to:(unsigned)to;
-(BOOL)selectedItemIsLast;
-(int)indexOfObject:(id)object;
-(id)objectAtIndex:(int)index;
-(id)itemSearchByAVPlayerItem:(id)item;
-(int)numberOfItems;
-(id)shuffleArray:(id)array;
-(id)playerItemsArrayFrom:(id)from context:(int)context playlistIden:(id)iden;
-(void)insertNext:(id)next context:(int)context playlistIden:(id)iden;
-(id)initWithList:(id)list context:(int)context playlistIden:(id)iden;
@end

__attribute__((visibility("hidden")))
@interface VideoStatsProvider : XXUnknownSuperclass <TimerTargetDelegate> {
	double duration;
	double pos;
	double bitrate;
	int vigoQuality;
	int seq;
	int bufNum;
	BOOL isPaused;
	BOOL isBufferFull;
	BOOL isFinished;
	double bufferingStartTime;
	unsigned long long playbackStartTime;
	int timerTicker;
	BOOL _isQualityAdviserSupported;
	BOOL _isQualityAdvised;
	id<VideoStatsContextDelegate> _delegate;
	MPMoviePlayerController* _moviePlayer;
	NSString* _host;
	TimerTarget* _vsTimer;
	NSString* _clientId;
	NSString* _vigoUserId;
	NSURLSession* _urlSession;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* host;
@property(retain, nonatomic) MPMoviePlayerController* moviePlayer;
@property(assign, nonatomic) __weak id<VideoStatsContextDelegate> delegate;
@property(assign, nonatomic) BOOL isQualityAdviserSupported;
@property(assign, nonatomic) BOOL isQualityAdvised;
@property(retain, nonatomic) NSURLSession* urlSession;
@property(copy, nonatomic) NSString* vigoUserId;
@property(copy, nonatomic) NSString* clientId;
@property(retain, nonatomic) TimerTarget* vsTimer;
-(void).cxx_destruct;
-(void)processStatsURL:(id)url withResultBlock:(id)resultBlock;
-(void)processStatsURL:(id)url;
-(void)VSTimerCallback;
-(id)VSEvent:(int)event;
-(id)VSStatus:(id)status;
-(void)timerTargetFired:(id)fired;
-(void)movieReadytoPlayDidChange:(id)movieReadytoPlay;
-(void)moviePlaybackStateDidChange:(id)moviePlaybackState;
-(void)moviePlayBackLoadStateChange:(id)change;
-(void)movieDurationAvailable:(id)available;
-(void)qualityAdvise:(id)advise;
-(void)event:(int)event;
-(void)play:(int)play;
-(void)prepare;
-(void)dropPlayer;
-(void)setPlayer:(id)player;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface FavUsersModel : MultiIndexModel {
	Index* _online;
	Index* _all;
}
@property(retain, nonatomic) Index* all;
@property(retain, nonatomic) Index* online;
-(void).cxx_destruct;
-(void)handleFavorites:(id)favorites :(id)arg2;
-(id)removeFavorite:(id)favorite updateBuilder:(id)builder;
-(id)addFavorite:(id)favorite updateBuilder:(id)builder;
-(id)editingActionForIndex:(id)index withIndexPath:(id)indexPath;
-(int)editingStyleForForTable:(id)table index:(id)index indexPath:(id)path;
-(id)countKeyForMode:(unsigned)mode;
-(id)indexForMode:(unsigned)mode;
-(unsigned)modes;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderActionBuilder : XXUnknownSuperclass <ActionOptionsProvider> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)hasOptionsWithContext:(id)context;
-(void)showOptionsWithContext:(id)context runActionIfSingle:(BOOL)single;
-(void)showOptionsWithContext:(id)context;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FavPostsModel : FeedModel {
}
-(id)feedStatContext;
-(id)postTarget;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(id)feedRequestBuilderForContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterCropPhoto : VKImageFilter {
	CGSize _size;
	CGRect _rect;
}
@property(readonly, assign, nonatomic) CGRect rect;
@property(readonly, assign, nonatomic) CGSize size;
+(id)cropToSize:(CGSize)size rect:(CGRect)rect;
-(id)infoString;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(id)contextForImage:(id)image;
-(id)initWithSize:(CGSize)size rect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface PhotoEditorStickersItem : VKDomain {
	NSString* _baseURL;
	NSArray* _stickerIds;
}
@property(retain, nonatomic) NSArray* stickerIds;
@property(retain, nonatomic) NSString* baseURL;
+(id)parse:(id)parse;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PhotoEditorStickersModel : ItemModel {
}
@property(readonly, assign, nonatomic) PhotoEditorStickersItem* item;
-(id)process:(id)process context:(id)context;
-(id)request;
@end

__attribute__((visibility("hidden")))
@interface NEventAPNS : NotificationEvent {
	NSDictionary* _payload;
}
@property(retain, nonatomic) NSDictionary* payload;
+(id)eventForPayload:(id)payload;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface StoriesBannedSourcesController : VKMMultiIndexController {
}
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface VMSamplesView : XXUnknownSuperclass {
	NSArray* _samples;
	float _progress;
	NSMutableArray* _ticksPool;
	NSArray* _ticksCache;
	float _ticksCacheWidth;
	UIImage* _tickImage;
}
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) NSArray* samples;
@property(retain, nonatomic) UIImage* tickImage;
@property(assign, nonatomic) float ticksCacheWidth;
@property(retain, nonatomic) NSArray* ticksCache;
@property(retain, nonatomic) NSMutableArray* ticksPool;
-(void).cxx_destruct;
-(id)tickImageName;
-(void)layoutSubviews;
-(id)makeTickLayer;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VMPreviewSamplesView : VMSamplesView {
}
-(id)tickImageName;
@end

__attribute__((visibility("hidden")))
@interface FullListModel : LoadingModel {
}
@end

__attribute__((visibility("hidden")))
@interface FavLinksModel : ListModel {
}
-(void)handleRemove:(id)remove :(id)arg2;
-(id)editingActionForIndex:(id)index withIndexPath:(id)indexPath;
-(int)editingStyleForForTable:(id)table index:(id)index indexPath:(id)path;
-(void)registerForEvents:(id)events;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface VKLinkButton : VKRenderable {
	NSString* _title;
	id<VKRemoteAction> _action;
}
@property(retain, nonatomic) id<VKRemoteAction> action;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKLink : VKDomain <VKChildDomain> {
	BOOL _external;
	NSString* _id;
	NSString* _url;
	NSString* _title;
	NSString* _descr;
	NSString* _caption;
	NSString* _image_src;
	NSString* _image_big;
	VKPhoto* _photo;
	NSString* _preview_page;
	NSString* _preview_url;
	VKIdentity* _parentIden;
	VKRating* _rating;
	VKShopProduct* _product;
	VKLinkButton* _button;
}
@property(assign, nonatomic, getter=isExternal) BOOL external;
@property(retain, nonatomic) VKLinkButton* button;
@property(retain, nonatomic) VKShopProduct* product;
@property(retain, nonatomic) VKRating* rating;
@property(retain, nonatomic) VKIdentity* parentIden;
@property(retain, nonatomic) NSString* preview_url;
@property(retain, nonatomic) NSString* preview_page;
@property(retain, nonatomic) VKPhoto* photo;
@property(retain, nonatomic) NSString* image_big;
@property(retain, nonatomic) NSString* image_src;
@property(retain, nonatomic) NSString* caption;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* id;
+(id)linkWithURL:(id)url;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKLinkAtt : VKDomainDerived <VKAttachment> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKLink* domain;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsInlineModel : ListModel {
	id _updated;
}
@property(copy, nonatomic) id updated;
-(void).cxx_destruct;
-(void)addPlaylist:(id)playlist source:(id)source builder:(id)builder;
-(void)handleReorderAudioPlaylists:(id)playlists :(id)arg2;
-(void)handleUpdateAudioPlaylistCover:(id)cover :(id)arg2;
-(void)handleAddAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleEditAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleDeleteAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleFollowAudioPlaylist:(id)playlist :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)update:(id)update;
@end

__attribute__((visibility("hidden")))
@interface LinkCell : VKMCell {
	ImageAttachmentView* _attachment;
}
@property(readonly, retain, nonatomic) ImageAttachmentView* attachment;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WizardStepLookupFacebook : XXUnknownSuperclass <WizardStepInfo> {
	NSString* _token;
	MainModel* _main;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) MainModel* main;
@property(readonly, assign, nonatomic) NSString* token;
+(id)stepWithMain:(id)main token:(id)token;
-(void).cxx_destruct;
-(void)prepareViewControllerWithCompletion:(id)completion;
-(BOOL)isAvailable;
-(id)initWithMain:(id)main token:(id)token;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppURLFactory : XXUnknownSuperclass {
}
+(id)reportWebAppURLWithAppId:(id)appId ownerId:(id)anId token:(id)token;
+(id)reportAdUrlWithAdData:(id)adData token:(id)token;
+(id)reportUrlWithIdentity:(id)identity ref:(id)ref token:(id)token;
@end

__attribute__((visibility("hidden")))
@interface VKPhotofeedWidgetInfo : XXUnknownSuperclass {
	VKIdentity* _photoIden;
}
@property(retain, nonatomic) VKIdentity* photoIden;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppLinkInfo : XXUnknownSuperclass {
	NSNumber* _appId;
	NSNumber* _ownerId;
	NSArray* _queryItems;
	NSString* _fragment;
}
@property(copy, nonatomic) NSString* fragment;
@property(retain, nonatomic) NSArray* queryItems;
@property(retain, nonatomic) NSNumber* ownerId;
@property(retain, nonatomic) NSNumber* appId;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKScreenNameCandidate : XXUnknownSuperclass {
	BOOL _messaging;
	NSString* _screen_name;
	NSString* _query;
	NSURL* _url;
}
@property(assign, nonatomic) BOOL messaging;
@property(retain, nonatomic) NSURL* url;
@property(retain, nonatomic) NSString* query;
@property(retain, nonatomic) NSString* screen_name;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PromotedNewsListCandidate : XXUnknownSuperclass {
	NSString* _list_id;
	NSURL* _url;
}
@property(retain, nonatomic) NSURL* url;
@property(retain, nonatomic) NSString* list_id;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKForceBrowserUrl : XXUnknownSuperclass {
	NSURL* _url;
}
@property(retain, nonatomic) NSURL* url;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface RoutingContext : XXUnknownSuperclass {
	BOOL _pathSubstituted;
	BOOL _messaging;
	NSURL* _originalURL;
	NSURL* _targetURL;
	NSDictionary* _parameters;
	NSMutableDictionary* _data;
	MainModel* _main;
	VKMNavContext* _navContext;
}
@property(retain, nonatomic) VKMNavContext* navContext;
@property(retain, nonatomic) MainModel* main;
@property(retain, nonatomic) NSMutableDictionary* data;
@property(retain, nonatomic) NSDictionary* parameters;
@property(assign, nonatomic) BOOL messaging;
@property(assign, nonatomic) BOOL pathSubstituted;
@property(retain, nonatomic) NSURL* targetURL;
@property(retain, nonatomic) NSURL* originalURL;
+(id)contextForVKURL:(id)vkurl main:(id)main navContext:(id)context;
-(void).cxx_destruct;
-(void)read:(id)read;
-(id)p:(id)p;
-(id)get:(id)get;
-(void)set:(id)set key:(id)key;
-(id)ownerOrUser:(id)user;
@end

__attribute__((visibility("hidden")))
@interface RouteNode : XXUnknownSuperclass {
	NSArray* _subnodes;
	id _blockResult;
	id _blockMatch;
}
@property(copy, nonatomic) id blockMatch;
@property(copy, nonatomic) id blockResult;
@property(retain, nonatomic) NSArray* subnodes;
+(id)node;
-(void).cxx_destruct;
-(id)nodes:(id)nodes;
-(id)result:(id)result;
-(id)match:(id)match;
-(id)apply:(id)apply;
@end

__attribute__((visibility("hidden")))
@interface RENode : RouteNode {
	NSRegularExpression* _regexp;
	id _blockRange;
}
@property(copy, nonatomic) id blockRange;
@property(retain, nonatomic) NSRegularExpression* regexp;
-(void).cxx_destruct;
-(id)rangeIdKey:(id)key;
-(id)range:(id)range;
-(id)regexp:(id)regexp parameter:(id)parameter;
@end

__attribute__((visibility("hidden")))
@interface VKLinkRouting : XXUnknownSuperclass {
	RouteNode* _root;
	NSSet* _schemes;
}
@property(retain, nonatomic) NSSet* schemes;
@property(retain, nonatomic) RouteNode* root;
+(id)identityFromString:(id)string;
+(id)linkForIdentity:(id)identity mobile:(BOOL)mobile;
+(id)shared;
-(void).cxx_destruct;
-(id)routeURL:(id)url main:(id)main navContext:(id)context;
-(id)routeLink:(id)link main:(id)main navContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AppInviteFriendsCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface AppNotificationSettingsCell : VKMCell {
@private
	UISwitch* _switchControl;
}
@property(retain, nonatomic) VKAPIAppNotificationSettings* domain;
@property(readonly, retain, nonatomic) UISwitch* switchControl;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)actionNotificationSettingsSwitched:(id)switched;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface CreateAudioPlaylistModel : Model {
}
@end

__attribute__((visibility("hidden")))
@interface SSZipArchive : XXUnknownSuperclass {
@private
	NSString* _path;
@protected
	NSString* _filename;
@private
	void* _zip;
}
@property(readonly, assign, nonatomic) BOOL close;
@property(readonly, assign, nonatomic) BOOL open;
+(id)_dateWithMSDOSFormat:(unsigned long)msdosformat;
+(id)_temporaryPathForDiscardableFile;
+(BOOL)createZipFileAtPath:(id)path withContentsOfDirectory:(id)directory keepParentDirectory:(BOOL)directory3 withPassword:(id)password andProgressHandler:(id)handler;
+(BOOL)createZipFileAtPath:(id)path withContentsOfDirectory:(id)directory keepParentDirectory:(BOOL)directory3 withPassword:(id)password;
+(BOOL)createZipFileAtPath:(id)path withContentsOfDirectory:(id)directory withPassword:(id)password;
+(BOOL)createZipFileAtPath:(id)path withFilesAtPaths:(id)paths withPassword:(id)password;
+(BOOL)createZipFileAtPath:(id)path withContentsOfDirectory:(id)directory keepParentDirectory:(BOOL)directory3;
+(BOOL)createZipFileAtPath:(id)path withContentsOfDirectory:(id)directory;
+(BOOL)createZipFileAtPath:(id)path withFilesAtPaths:(id)paths;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination preserveAttributes:(BOOL)attributes overwrite:(BOOL)overwrite password:(id)password error:(id*)error delegate:(id)delegate progressHandler:(id)handler completionHandler:(id)handler9;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination preserveAttributes:(BOOL)attributes overwrite:(BOOL)overwrite password:(id)password error:(id*)error delegate:(id)delegate;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination progressHandler:(id)handler completionHandler:(id)handler4;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination overwrite:(BOOL)overwrite password:(id)password progressHandler:(id)handler completionHandler:(id)handler6;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination overwrite:(BOOL)overwrite password:(id)password error:(id*)error delegate:(id)delegate;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination delegate:(id)delegate;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination overwrite:(BOOL)overwrite password:(id)password error:(id*)error;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination;
+(BOOL)isPasswordValidForArchiveAtPath:(id)path password:(id)password error:(id*)error;
+(BOOL)isFilePasswordProtectedAtPath:(id)path;
-(void).cxx_destruct;
-(BOOL)writeData:(id)data filename:(id)filename withPassword:(id)password;
-(BOOL)writeFileAtPath:(id)path withFileName:(id)fileName withPassword:(id)password;
-(BOOL)writeFile:(id)file withPassword:(id)password;
-(BOOL)writeFolderAtPath:(id)path withFolderName:(id)folderName withPassword:(id)password;
-(void)zipInfo:(XXStruct_z_NMMB*)info setDate:(id)date;
-(id)initWithPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface VKPrice : VKRenderable {
	NSString* _text;
	unsigned _amount;
	VKCurrency* _currency;
}
@property(retain, nonatomic) VKCurrency* currency;
@property(assign, nonatomic) unsigned amount;
@property(retain, nonatomic) NSString* text;
+(void)load;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface GroupModel : DefaultProfileModel {
}
@property(retain, nonatomic) VKGroupProfile* item;
+(id)groupFromResponse:(id)response;
+(id)requestForGroupID:(id)groupID withExtraFields:(BOOL)extraFields withMarketProducts:(BOOL)marketProducts;
-(void)handleMessagesFromGroup:(id)group :(id)arg2;
-(void)handleSubscribeLiveVideo:(id)video :(id)arg2;
-(void)handlePushSourceSubscribe:(id)subscribe :(id)arg2;
-(void)handleFavorites:(id)favorites :(id)arg2;
-(void)handleGroup:(id)group :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)profilePhotosContext;
-(void)fillGroupActions:(id)actions;
-(id)safeScreenName;
-(id)groupAction:(BOOL)action notSure:(BOOL)sure;
-(id)recreateProfileIndex:(id)index;
-(id)process:(id)process context:(id)context;
-(id)request;
-(id)ownerId;
@end

__attribute__((visibility("hidden")))
@interface VKRecommendedFriend : VKDomain {
	BOOL _friend;
	VKUser* _user;
	NSString* _descr;
	VKPhoto* _photo;
}
@property(assign, nonatomic, getter=isFriend) BOOL friend;
@property(retain, nonatomic) VKPhoto* photo;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) VKUser* user;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface Renderer : XXUnknownSuperclass <ThumbnailViewDelegate, ModelObserver> {
	NSArray* _elements;
	UIView* _host;
	NSArray* _views;
	id<VKMNavDelegate> _delegate;
	id _domain;
	VKMRendererCell* _weakCell;
	int _context;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int context;
@property(assign, nonatomic) VKMRendererCell* weakCell;
@property(retain, nonatomic) id domain;
@property(assign, nonatomic) __weak id<VKMNavDelegate> delegate;
@property(retain, nonatomic) NSArray* views;
@property(retain, nonatomic) UIView* host;
@property(retain, nonatomic) NSArray* elements;
+(id)cell:(id)cell reuse:(id)reuse context:(int)context;
+(int)cellStyle;
+(id)layout:(id)layout;
+(id)rendererElements;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
-(void).cxx_destruct;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(BOOL)cellSelected:(id)selected;
-(void)apply:(id)apply;
-(id)domainOfClass:(Class)aClass;
-(id)componentAtIndex:(int)index ofClass:(Class)aClass;
-(void)refresh;
-(void)drop;
-(void)reuse;
-(void)render:(id)render layout:(id)layout reuse:(double)reuse;
-(void)dealloc;
-(id)initWithMain:(id)main view:(id)view context:(int)context;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface RenderLayout : XXUnknownSuperclass {
	CGPoint target;
	CGSize limit;
	float padding;
	CGRect* frames;
	unsigned count;
	CGSize size;
	id* extras;
}
-(void)update;
-(void)enlarge:(unsigned)enlarge extra:(float)extra;
-(void)remove:(unsigned)remove;
-(void)move:(unsigned)move d:(float)d;
-(float)bottom:(unsigned)bottom;
-(BOOL)visible:(unsigned)visible;
-(void)add:(unsigned)add minusWidth:(float)width;
-(void)add:(unsigned)add width:(float)width;
-(void)at:(unsigned)at inset:(UIEdgeInsets)inset;
-(void)WARNBGadd:(unsigned)gadd label:(id)label font:(id)font lheight:(float)lheight fill:(BOOL)fill;
-(void)add:(unsigned)add height:(float)height offset:(float)offset;
-(void)add:(unsigned)add height:(float)height raw:(BOOL)raw;
-(void)add:(unsigned)add height:(float)height;
-(void)add:(unsigned)add size:(CGSize)size;
-(void)adjustX:(float)x;
-(void)adjust:(float)adjust;
-(void)fixed:(unsigned)fixed size:(CGSize)size;
-(void)fixed:(unsigned)fixed frame:(CGRect*)frame;
-(void)skip:(unsigned)skip;
-(void)dealloc;
-(id)initWithCount:(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface RendererElement : XXUnknownSuperclass {
	CGRect frame;
	id _setup;
	id _reuse;
	id _drop;
	id _layout;
	id _render;
	id _data;
}
@property(copy, nonatomic) id data;
@property(copy, nonatomic) id render;
@property(copy, nonatomic) id layout;
@property(copy, nonatomic) id drop;
@property(copy, nonatomic) id reuse;
@property(copy, nonatomic) id setup;
+(id)element:(CGRect)element;
-(id)withReuse:(id)reuse;
-(id)withFrame:(CGRect)frame;
-(id)withRender:(id)render;
-(id)withLayout:(id)layout;
-(id)withData:(id)data;
-(id)withSetup:(id)setup;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LabelElement : RendererElement {
	int lines;
	UIFont* _font;
}
@property(retain, nonatomic) UIFont* font;
+(id)labelFont:(id)font color:(id)color bg:(id)bg lines:(int)lines align:(int)align;
+(id)labelFont:(id)font color:(id)color bg:(id)bg lines:(int)lines;
+(id)label:(id)label frame:(CGRect)frame font:(id)font color:(id)color hl:(id)hl bg:(id)bg algin:(int)algin lbreak:(int)lbreak lines:(int)lines;
+(id)label:(id)label frame:(CGRect)frame font:(id)font color:(id)color hl:(id)hl bg:(id)bg shcolor:(id)shcolor shoffset:(CGSize)shoffset algin:(int)algin lbreak:(int)lbreak lines:(int)lines;
-(id)forceLines;
-(id)withLines:(int)lines;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface CoreTextElement : RendererElement {
	int lines;
	unsigned char textAlignment;
	NSDictionary* _attributes;
}
@property(retain, nonatomic) NSDictionary* attributes;
+(id)labelFont:(id)font color:(id)color bg:(id)bg lines:(int)lines textAlignment:(unsigned char)alignment;
+(id)labelFont:(id)font color:(id)color bg:(id)bg lines:(int)lines;
-(id)limitLines;
-(id)limitHeight:(float)height;
-(id)limitLength:(int)length preview:(int)preview;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NetImageElement : RendererElement {
	XXStruct_UOIMaD type;
}
+(id)imageType:(XXStruct_UOIMaD)type;
+(id)image:(CGRect)image mode:(int)mode bg:(id)bg type:(XXStruct_UOIMaD)type placeholder:(id)placeholder tap:(SEL)tap tag:(int)tag animate:(BOOL)animate;
@end

__attribute__((visibility("hidden")))
@interface VKTextElement : RendererElement {
}
+(id)text;
@end

__attribute__((visibility("hidden")))
@interface LinkElement : RendererElement {
}
+(id)link:(SEL)link;
@end

__attribute__((visibility("hidden")))
@interface ProfileCoverInfo : VKRenderable {
	BOOL _enabled;
	NSArray* _images;
}
@property(retain, nonatomic) NSArray* images;
@property(assign, nonatomic) BOOL enabled;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGroupAppButton : VKRenderable {
	NSNumber* _app_id;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* app_id;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGroupProfile : VKDomain <VKProfile> {
	BOOL _can_post;
	BOOL _can_see_all_posts;
	BOOL _verified;
	BOOL _is_favorite;
	BOOL _is_subscribed_for_posts;
	BOOL _is_member;
	BOOL _can_message;
	BOOL _can_create_topic;
	BOOL _can_upload_video;
	BOOL _is_messages_blocked;
	VKGroup* _group;
	int _profileMode;
	VKWikiPage* _wiki_page;
	VKPlace* _place;
	NSString* _descr;
	NSString* _city_name;
	NSString* _country_name;
	NSString* _site;
	NSString* _status;
	VKAudio* _status_audio;
	NSString* _public_date_label;
	NSString* _photo_big;
	unsigned _finish_date;
	int _count_topics;
	int _count_photos;
	int _count_videos;
	int _count_audios;
	int _count_docs;
	int _count_market;
	int _count_members;
	int _member_status;
	int _access_mode;
	int _main_section;
	ProfileCoverInfo* _cover;
	VKAudio* _lastAudio;
	VKVideo* _lastVideo;
	VKTopic* _lastTopic;
	NSArray* _contacts;
	NSArray* _links;
	VKList* _friendMembers;
	VKGroupAppButton* _app_button;
	VKLiveVideoSettings* _liveVideoSettings;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKLiveVideoSettings* liveVideoSettings;
@property(retain, nonatomic) VKGroupAppButton* app_button;
@property(retain, nonatomic) VKList* friendMembers;
@property(retain, nonatomic) NSArray* links;
@property(retain, nonatomic) NSArray* contacts;
@property(retain, nonatomic) VKTopic* lastTopic;
@property(retain, nonatomic) VKVideo* lastVideo;
@property(retain, nonatomic) VKAudio* lastAudio;
@property(retain, nonatomic) ProfileCoverInfo* cover;
@property(assign, nonatomic) int main_section;
@property(assign, nonatomic) int access_mode;
@property(assign, nonatomic) int member_status;
@property(assign, nonatomic) int count_members;
@property(assign, nonatomic) int count_market;
@property(assign, nonatomic) int count_docs;
@property(assign, nonatomic) int count_audios;
@property(assign, nonatomic) int count_videos;
@property(assign, nonatomic) int count_photos;
@property(assign, nonatomic) int count_topics;
@property(assign, nonatomic) BOOL is_messages_blocked;
@property(assign, nonatomic) BOOL can_upload_video;
@property(assign, nonatomic) BOOL can_create_topic;
@property(assign, nonatomic) BOOL can_message;
@property(assign, nonatomic) BOOL is_member;
@property(assign, nonatomic) BOOL is_subscribed_for_posts;
@property(assign, nonatomic) BOOL is_favorite;
@property(assign, nonatomic) BOOL verified;
@property(assign, nonatomic) BOOL can_see_all_posts;
@property(assign, nonatomic) BOOL can_post;
@property(assign, nonatomic) unsigned finish_date;
@property(copy, nonatomic) NSString* photo_big;
@property(copy, nonatomic) NSString* public_date_label;
@property(retain, nonatomic) VKAudio* status_audio;
@property(copy, nonatomic) NSString* status;
@property(copy, nonatomic) NSString* site;
@property(copy, nonatomic) NSString* country_name;
@property(copy, nonatomic) NSString* city_name;
@property(copy, nonatomic) NSString* descr;
@property(retain, nonatomic) VKPlace* place;
@property(retain, nonatomic) VKWikiPage* wiki_page;
@property(readonly, assign, nonatomic) int profileMode;
@property(retain, nonatomic) VKGroup* group;
-(void).cxx_destruct;
-(BOOL)canSuggest;
-(void)profileBlocksForOwner:(BOOL)owner block:(id)block;
-(void)profileUserStatus:(id)status;
-(id)profileStatus;
-(id)profileSubtitle;
-(id)profileName;
-(id)profilePhoto;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGroupContact : VKDomainDerived {
	NSString* _email;
	NSString* _phone;
	NSString* _descr;
}
@property(copy, nonatomic) NSString* descr;
@property(copy, nonatomic) NSString* phone;
@property(copy, nonatomic) NSString* email;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKRelative : VKUser {
	int _relativeType;
}
@property(assign, nonatomic) int relativeType;
@end

__attribute__((visibility("hidden")))
@interface VKOccupation : VKDomain {
	NSNumber* _id;
	int _type;
	VKGroup* _occupation_group;
	NSString* _name;
}
@property(copy, nonatomic) NSString* name;
@property(retain, nonatomic) VKGroup* occupation_group;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKProfilePersonal : VKDomain {
	NSArray* _langs;
	NSString* _religion;
	NSString* _inspired_by;
	int _political;
	int _people_main;
	int _life_main;
	int _smoking;
	int _alcohol;
}
@property(assign, nonatomic) int alcohol;
@property(assign, nonatomic) int smoking;
@property(assign, nonatomic) int life_main;
@property(assign, nonatomic) int people_main;
@property(assign, nonatomic) int political;
@property(copy, nonatomic) NSString* inspired_by;
@property(copy, nonatomic) NSString* religion;
@property(copy, nonatomic) NSArray* langs;
+(id)personalsMap;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKProfileCarrerItem : VKDomain {
	NSString* _company;
	NSString* _position;
	NSString* _city_name;
	NSNumber* _group_id;
	NSNumber* _from;
	NSNumber* _until;
	VKGroup* _source;
}
@property(retain, nonatomic) VKGroup* source;
@property(retain, nonatomic) NSNumber* until;
@property(retain, nonatomic) NSNumber* from;
@property(retain, nonatomic) NSNumber* group_id;
@property(copy, nonatomic) NSString* city_name;
@property(copy, nonatomic) NSString* position;
@property(copy, nonatomic) NSString* company;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGroupTitleView : XXUnknownSuperclass {
	UIView* _contentView;
}
@property(retain, nonatomic) UIView* contentView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(CGSize)intrinsicContentSize;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface GroupWallController : ProfileWallController <VKProfileContentBlockViewDelegate> {
	GroupModel* _profile;
	VKHUD* _actionHUD;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKHUD* actionHUD;
@property(retain, nonatomic) GroupModel* profile;
-(void).cxx_destruct;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)profileContentBlockView:(id)view didSelectItem:(id)item;
-(void)profileContentBlockViewShowAll:(id)all;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)actionProfileAppButton:(id)button;
-(void)actionProfileInfo:(id)info;
-(void)actionShowActions:(id)actions;
-(void)actionProfileViewBlock:(id)block;
-(id)controllerForBlock:(int)block;
-(void)actionProfileViewStatus:(id)status;
-(void)actionProfileViewMessage:(id)message;
-(void)actionProfileViewProfilePhoto:(id)photo;
-(void)clearHUD:(BOOL)hud;
-(id)VKMControllerStatsRef;
-(void)VKMScrollViewReset;
-(void)VKMControllerTouch;
-(void)VKMNavigationBarUpdateBackground:(id)background;
-(void)VKMNavigationBarUpdate;
-(void)scrollViewDidScroll:(id)scrollView;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(int)VKMNavigationBarStyle;
-(int)VKMLiveAudioContext;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)postOptionsEnabled;
-(id)postContext;
-(void)updateProfile;
-(id)groupProfile;
-(void)updateProfileView;
-(void)dealloc;
-(id)initWithMain:(id)main andGroup:(id)group;
@end

__attribute__((visibility("hidden")))
@interface LookupAddressbookTeaserModel : LoadingModel {
}
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LookupAddressbookFriendsView : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface LookupAddressbookTeaserView : XXUnknownSuperclass {
	TeaserView* _teaserView;
}
@property(retain, nonatomic) TeaserView* teaserView;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LookupAddressbookTeaserViewController : VKMController {
	id<TapableComponentHandler> _buttonHandler;
	Component5HostView* _componentView;
}
@property(retain, nonatomic) id<TapableComponentHandler> buttonHandler;
@property(retain, nonatomic) Component5HostView* componentView;
-(void).cxx_destruct;
-(void)model:(id)model updated:(id)updated;
-(id)componentWithUsers:(id)users count:(unsigned)count;
-(void)viewWillLayoutSubviews;
-(void)loadView;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ProfileItemPageCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ProfileItemTextCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ProfileItemDataCell : VKMCell {
	UILabel* _title;
	UILabel* _itemDataText;
}
@property(retain, nonatomic) UILabel* itemDataText;
@property(retain, nonatomic) UILabel* title;
+(void)prerender:(id)prerender;
+(void)initialize;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ProfileItemUserCell : VKMCell {
	VKMImageView* _image;
	UILabel* _name;
	UILabel* _status;
}
@property(retain, nonatomic) VKProfileItemUser* domain;
@property(readonly, retain, nonatomic) UILabel* status;
@property(readonly, retain, nonatomic) UILabel* name;
@property(readonly, retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ProfileItemContentCell : VKMCell {
	UILabel* _badge;
}
@property(retain, nonatomic) UILabel* badge;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StickerSelectionView : XXUnknownSuperclass <UICollectionViewDelegate, UICollectionViewDataSource, StickerPopupDelegate> {
	id<StickerSelectionViewDelegate> _delegate;
	id<StickerSelectionViewPhotoEditorModeDelegate> _photoEditorModeDelegate;
	id<StickerSelectionViewScrollingDelegate> _scrollingDelegate;
	id<StickerSelectionViewDataSource> _dataSource;
	StickersLoadingManager* _stickersLoadingManager;
	NSString* _emptyText;
	UIView* _headerView;
	UICollectionView* _collectionView;
	StickerPopup* _stickerPopup;
	UILabel* _emptyLabel;
	XXStruct_m5P4pB _stickerImage;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) XXStruct_m5P4pB stickerImage;
@property(readonly, retain, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) UIView* headerView;
@property(copy, nonatomic) NSString* emptyText;
@property(assign, nonatomic) id<StickerSelectionViewDataSource> dataSource;
@property(assign, nonatomic) id<StickerSelectionViewScrollingDelegate> scrollingDelegate;
@property(assign, nonatomic) id<StickerSelectionViewPhotoEditorModeDelegate> photoEditorModeDelegate;
@property(assign, nonatomic) id<StickerSelectionViewDelegate> delegate;
@property(retain, nonatomic) UILabel* emptyLabel;
@property(retain, nonatomic) StickerPopup* stickerPopup;
@property(retain, nonatomic) StickersLoadingManager* stickersLoadingManager;
@property(retain, nonatomic) UICollectionView* collectionView;
-(void).cxx_destruct;
-(void)setHeaderView:(id)view animated:(BOOL)animated;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(id)stickerPopup:(id)popup imageInsteadOfActivityIndicatorForIndexPath:(id)indexPath;
-(id)stickerPopup:(id)popup stickerBaseUrlForIndexPath:(id)indexPath;
-(id)stickerPopup:(id)popup stickerIdForIndexPath:(id)indexPath;
-(void)reloadData;
-(id)initWithFrame:(CGRect)frame collectionViewLayout:(id)layout stickersLoadingManager:(id)manager shouldShowPopup:(BOOL)popup;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface StickerSelectionViewAttachable : StickerSelectionView <StickerSelectionViewDataSource> {
	VKStoreProductSticker* _product;
	StoreStockManager* _storeStockManager;
	MainModel* _mainModel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) MainModel* mainModel;
@property(retain, nonatomic) StoreStockManager* storeStockManager;
@property(retain, nonatomic) VKStoreProductSticker* product;
-(void).cxx_destruct;
-(id)stickerSelectionViewProductId:(id)anId;
-(id)stickerSelectionViewBaseUrl:(id)url;
-(id)stickerSelectionViewStickerIds:(id)ids;
-(void)attach:(id)attach;
-(BOOL)productPurchasedAndActiveAndLoaded;
-(void)updateHeaderViewAnimated:(BOOL)animated;
-(void)notificationProductPurchased:(id)purchased;
-(void)notificationProductLoadingChanged:(id)changed;
-(id)initWithFrame:(CGRect)frame collectionViewLayout:(id)layout stickersLoadingManager:(id)manager shouldShowPopup:(BOOL)popup mainModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMLoader : XXUnknownSuperclass {
	int offset;
	int discover;
	BOOL cancelled;
	BOOL touched;
	NSObject<OS_dispatch_queue>* queue;
	BOOL _complete;
	MainModel* _main;
	NSMutableArray* _items;
	id<VKMLoaderDelegate> _delegate;
	AFHTTPRequestOperation* _op;
}
@property(assign, nonatomic) __weak id<VKMLoaderDelegate> delegate;
@property(readonly, assign, nonatomic) BOOL complete;
@property(readonly, retain, nonatomic) MainModel* main;
@property(retain, nonatomic) NSMutableArray* items;
@property(retain, nonatomic) AFHTTPRequestOperation* op;
-(void).cxx_destruct;
-(void)cancel;
-(void)discover:(int)discover;
-(void)touch;
-(void)load;
-(id)processResultsInBackground:(id)background data:(id)data;
-(id)requestForOffset:(int)offset count:(int)count success:(id)success failure:(id)failure;
-(id)initWithMain:(id)main;
@end

__attribute__((visibility("hidden")))
@interface GroupInfoController : ProfileInfoController {
}
@property(retain, nonatomic) GroupModel* model;
-(id)safeProfileItemAtIndexPath:(id)indexPath;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(void)actionProfileViewProfilePhoto:(id)photo;
-(void)actionShowActions:(id)actions;
-(void)VKMTableUpdatedIndex;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)viewDidLoad;
-(void)updateProfile;
@end

__attribute__((visibility("hidden")))
@interface NewsListFeedModel : NewsFeedModel {
	VKNewsList* _list;
}
@property(retain, nonatomic) VKNewsList* list;
+(int)handlesSourcesBans;
-(void).cxx_destruct;
-(id)feedStatContext;
-(id)feedRequestBuilderForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PromotedNewsListFeedModel : NewsFeedModel {
	PromotedNewsList* _list;
}
@property(retain, nonatomic) PromotedNewsList* list;
+(int)handlesSourcesBans;
+(id)newsFeedMethod;
-(void).cxx_destruct;
-(id)feedStatContext;
-(id)feedRequestBuilderForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMRendererCell : XXUnknownSuperclass {
	Renderer* _renderer;
}
@property(retain, nonatomic) Renderer* renderer;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMBrowserController : VKMController <UIScrollViewDelegate, CoalescedPerformerDelegate, UIWebViewDelegate> {
	float baseOffset;
	BOOL forceHeader;
	BOOL loaded;
	BOOL _keepDefaultStyle;
	BOOL _hideToolbar;
	UIWebView* _webView;
	NSMutableArray* _stack;
	VKMBrowserTarget* _target;
	UILabel* _headerTitle;
	UILabel* _headerURL;
	UILabel* _headerLoading;
	UIScrollView* _webScrollView;
	CoalescedPerformer* _performer;
	UIButton* _toolbarButton;
	UIButton* _safariButton;
	UIToolbar* _toolbar;
	UIBarButtonItem* _buttonBack;
	UIBarButtonItem* _buttonForward;
	LandscapePresenter* _landscape;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL hideToolbar;
@property(assign, nonatomic) BOOL keepDefaultStyle;
@property(retain, nonatomic) UIWebView* webView;
@property(retain, nonatomic) TextPageModel* model;
@property(retain, nonatomic) LandscapePresenter* landscape;
@property(retain, nonatomic) UIBarButtonItem* buttonForward;
@property(retain, nonatomic) UIBarButtonItem* buttonBack;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) UIButton* safariButton;
@property(retain, nonatomic) UIButton* toolbarButton;
@property(retain, nonatomic) CoalescedPerformer* performer;
@property(retain, nonatomic) UIScrollView* webScrollView;
@property(retain, nonatomic) UILabel* headerLoading;
@property(retain, nonatomic) UILabel* headerURL;
@property(retain, nonatomic) UILabel* headerTitle;
@property(retain, nonatomic) VKMBrowserTarget* target;
@property(retain, nonatomic) NSMutableArray* stack;
-(void).cxx_destruct;
-(void)actionStop;
-(void)actionReload;
-(void)actionSafari:(id)safari;
-(void)actionActions:(id)actions;
-(void)actionNavBack:(id)back;
-(void)actionClose:(id)close;
-(void)actionForward;
-(void)actionBack;
-(void)actionToolbarButton:(id)button;
-(void)targetForward;
-(void)targetBack;
-(void)reset:(id)reset;
-(void)push:(id)push;
-(void)push:(id)push load:(BOOL)load;
-(void)change:(id)change load:(BOOL)load;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)updateScrollChrome:(BOOL)chrome;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)checkLoaded;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)coalescedPerformerDidFire:(id)coalescedPerformer;
-(void)VKMControllerStatusBarUpdate:(BOOL)update;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(void)updateForOrientaton:(int)orientaton;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(unsigned)supportedInterfaceOrientations;
-(void)viewDidAppear:(BOOL)view;
-(id)VKMNavigationBarTintColor;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)clear;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface CCColorCube : XXUnknownSuperclass {
	CCCubeCell cells[27000];
}
-(char*)rawPixelDataFromImage:(id)image pixelCount:(unsigned*)count;
-(void)clearCells;
-(id)extractColorsFromImage:(id)image flags:(unsigned)flags count:(unsigned)count;
-(id)extractDarkColorsFromImage:(id)image avoidColor:(id)color count:(unsigned)count;
-(id)extractBrightColorsFromImage:(id)image avoidColor:(id)color count:(unsigned)count;
-(id)extractColorsFromImage:(id)image flags:(unsigned)flags avoidColor:(id)color;
-(id)extractColorsFromImage:(id)image flags:(unsigned)flags;
-(id)extractAndFilterMaximaFromImage:(id)image flags:(unsigned)flags;
-(id)colorsFromMaxima:(id)maxima;
-(id)performAdaptiveDistinctFilteringForMaxima:(id)maxima count:(unsigned)count;
-(id)orderByDarkness:(id)darkness;
-(id)orderByBrightness:(id)brightness;
-(id)filterMaxima:(id)maxima tooCloseToColor:(id)color;
-(id)filterDistinctMaxima:(id)maxima threshold:(float)threshold;
-(id)findAndSortMaximaInImage:(id)image flags:(unsigned)flags;
-(id)findLocalMaximaInImage:(id)image flags:(unsigned)flags;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKMGifLoader : XXUnknownSuperclass {
	BOOL _cached;
	VKDoc* _doc;
	NSURLSessionTask* _operation;
	id<VKMGifLoaderDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<VKMGifLoaderDelegate> delegate;
@property(assign) BOOL cached;
@property(retain) NSURLSessionTask* operation;
@property(retain) VKDoc* doc;
-(void).cxx_destruct;
-(void)clear;
-(void)reuse;
-(void)cancel;
-(void)complete:(id)complete;
-(void)progress:(double)progress;
@end

__attribute__((visibility("hidden")))
@interface AddressBookSyncOffer : VKRenderable {
}
@end

__attribute__((visibility("hidden")))
@interface TextPageModel : ItemModel {
	id<VKTextPage> _target;
}
@property(retain, nonatomic) VKWikiPage* item;
@property(retain, nonatomic) id<VKTextPage> target;
-(void).cxx_destruct;
-(void)loadPage:(id)page;
-(id)process:(id)process context:(id)context;
-(id)request;
@end

__attribute__((visibility("hidden")))
@interface VKWikiPage : VKDomain <VKTextPage, VKAttachment, VKChildDomain> {
	NSString* _title;
	NSString* _view_url;
	VKIdentity* _parentIden;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKIdentity* parentIden;
@property(retain, nonatomic) NSString* view_url;
@property(retain, nonatomic) NSString* title;
+(id)ownerId:(id)anId pageId:(id)anId2;
+(id)title:(id)title ownerId:(id)anId;
-(void).cxx_destruct;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(id)URLForTextPage;
-(BOOL)process:(id)process context:(id)context;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKPageContent : VKTextContent {
	BOOL _forceFont;
}
@property(assign, nonatomic) BOOL forceFont;
+(id)parseContent:(id)content;
@end

__attribute__((visibility("hidden")))
@interface VKApplication : XXUnknownSuperclass {
}
+(float)topmostWindowLevel;
+(BOOL)force:(id)force;
-(void)_setStatusBarHidden:(bool)hidden animationParameters:(id)parameters changeApplicationFlag:(bool)flag;
-(BOOL)openURL:(id)url force:(BOOL)force;
-(void)_openURL:(id)url originatingView:(id)view completionHandler:(id)handler;
-(BOOL)openURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface MovieRecorder : XXUnknownSuperclass {
	int _status;
	NSObject<OS_dispatch_queue>* _writingQueue;
	NSURL* _URL;
	AVAssetWriter* _assetWriter;
	BOOL _haveStartedSession;
	opaqueCMFormatDescription* _audioTrackSourceFormatDescription;
	NSDictionary* _audioTrackSettings;
	AVAssetWriterInput* _audioInput;
	opaqueCMFormatDescription* _videoTrackSourceFormatDescription;
	CGAffineTransform _videoTrackTransform;
	NSDictionary* _videoTrackSettings;
	AVAssetWriterInput* _videoInput;
	id<MovieRecorderDelegate> _delegate;
	NSObject<OS_dispatch_queue>* _delegateCallbackQueue;
}
+(id)cannotSetupInputError;
-(void).cxx_destruct;
-(void)teardownAssetWriterAndInputs;
-(BOOL)setupAssetWriterVideoInputWithSourceFormatDescription:(opaqueCMFormatDescription*)sourceFormatDescription transform:(CGAffineTransform)transform settings:(id)settings error:(id*)error;
-(BOOL)setupAssetWriterAudioInputWithSourceFormatDescription:(opaqueCMFormatDescription*)sourceFormatDescription settings:(id)settings error:(id*)error;
-(void)transitionToStatus:(int)status error:(id)error;
-(void)appendSampleBuffer:(opaqueCMSampleBuffer*)buffer ofMediaType:(id)mediaType;
-(void)dealloc;
-(void)finishRecording;
-(void)appendAudioSampleBuffer:(opaqueCMSampleBuffer*)buffer;
-(void)appendVideoPixelBuffer:(CVBufferRef)buffer withPresentationTime:(XXStruct_pwHToB)presentationTime;
-(void)appendVideoSampleBuffer:(opaqueCMSampleBuffer*)buffer;
-(void)prepareToRecord;
-(void)addAudioTrackWithSourceFormatDescription:(opaqueCMFormatDescription*)sourceFormatDescription settings:(id)settings;
-(void)addVideoTrackWithSourceFormatDescription:(opaqueCMFormatDescription*)sourceFormatDescription transform:(CGAffineTransform)transform settings:(id)settings;
-(id)initWithURL:(id)url delegate:(id)delegate callbackQueue:(id)queue;
@end

__attribute__((visibility("hidden")))
@interface DetailContext : ModelContext {
	BOOL _loadedComments;
	BOOL _forceClose;
	int _commentsTotal;
	int _commentsOffset;
	int _commentsPage;
	VKLikesPreview* _likes;
	VKItemDetail* _item;
	NSArray* _comments;
	int _itemStatus;
	NSMutableSet* _viewPosts;
	NSMutableSet* _knownCommentIds;
}
@property(retain, nonatomic) NSMutableSet* knownCommentIds;
@property(retain, nonatomic) NSMutableSet* viewPosts;
@property(assign, nonatomic) BOOL forceClose;
@property(assign, nonatomic) BOOL loadedComments;
@property(assign, nonatomic) int itemStatus;
@property(retain, nonatomic) NSArray* comments;
@property(retain, nonatomic) VKItemDetail* item;
@property(retain, nonatomic) VKLikesPreview* likes;
@property(assign, nonatomic) int commentsPage;
@property(assign, nonatomic) int commentsOffset;
@property(assign, nonatomic) int commentsTotal;
-(void).cxx_destruct;
-(BOOL)deleted;
-(BOOL)loaded;
-(void)markDeleted;
-(void)markUpdated;
-(void)spawnCopy:(id)copy;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DetailModel : LoadingModel {
	VKItemDetail* _initial;
	VKCommentIdentity* _initialComment;
}
@property(retain, nonatomic) VKCommentIdentity* initialComment;
@property(retain, nonatomic) VKItemDetail* initial;
@property(retain, nonatomic) DetailContext* lastContext;
+(void)buildComments:(id)comments identity:(id)identity offset:(int)offset count:(int)count;
+(void)buildItemAndSource:(id)source detail:(id)detail;
-(void).cxx_destruct;
-(void)viewed:(id)viewed;
-(BOOL)requireViewed;
-(void)handleLikeComment:(id)comment :(id)arg2;
-(void)updateBuilder:(id)builder reloadRowAtIndexPath:(id)indexPath;
-(void)updateBuilder:(id)builder reloadRowAtIndexPath:(id)indexPath withObject:(id)object;
-(void)handleEditComment:(id)comment :(id)arg2;
-(void)handleAddComment:(id)comment :(id)arg2;
-(void)handleDeleteComment:(id)comment :(id)arg2;
-(BOOL)isHostComment:(id)comment;
-(BOOL)isHostItem:(id)item;
-(void)registerForEvents:(id)events;
-(void)offsetComments:(int)comments;
-(void)fillActions:(id)actions refill:(id)refill;
-(id)companionIdentity;
-(void)loadMore;
-(BOOL)hasMore;
-(id)indexFromContext:(id)context;
-(BOOL)isValidItemDetail:(id)detail;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)parseCommentsData:(id)data detail:(id)detail total:(int*)total context:(id)context;
-(id)likesPreviewSources:(id)sources;
-(id)repostsRequest:(id)request;
-(id)likesRequest:(id)request;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)renderDetail:(id)detail;
-(id)renderLikesSectionFromContext:(id)context;
-(id)renderDetailSectionFromContext:(id)context;
-(BOOL)showLikesForItem:(id)item;
-(BOOL)canComment;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)itemComponentForDetail:(id)detail withContext:(id)context;
-(id)sourceComponentForDetail:(id)detail;
-(id)parseItem:(id)item detail:(id)detail;
-(id)sourceFor:(id)aFor data:(id)data;
-(id)countKey;
-(id)setupInitial:(id)initial;
@end

__attribute__((visibility("hidden")))
@interface VKProfileInfoItem : VKRenderable {
@private
	NSAttributedString* _title;
	NSAttributedString* _value;
@protected
	NSString* _photo;
	NSString* _textCopyTarget;
	NSString* _leftIconName;
	NSString* _rightIconName;
	id _routeTarget;
	int _fieldType;
}
@property(assign, nonatomic) int fieldType;
@property(retain, nonatomic) id routeTarget;
@property(copy, nonatomic) NSString* rightIconName;
@property(copy, nonatomic) NSString* leftIconName;
@property(copy, nonatomic) NSString* textCopyTarget;
@property(copy, nonatomic) NSString* photo;
@property(copy, nonatomic) NSAttributedString* value;
@property(copy, nonatomic) NSAttributedString* title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKProfileItemGifts : VKProfileInfoItem {
	NSArray* _gifts;
	int _total;
}
@property(assign, nonatomic) int total;
@property(retain, nonatomic) NSArray* gifts;
+(id)gifts:(id)gifts total:(int)total;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKProfileItemContent : VKProfileInfoItem {
	int _count;
}
@property(assign, nonatomic) int count;
+(id)title:(id)title count:(int)count type:(int)type;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface PhotoDetailModel : DetailModel {
}
+(void)buildItemAndSource:(id)source detail:(id)detail;
-(void)handleRepost:(id)repost :(id)arg2;
-(void)handleLike:(id)like :(id)arg2;
-(void)handleEdit:(id)edit :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)fillActions:(id)actions refill:(id)refill;
-(id)companionIdentity;
-(BOOL)canComment;
-(void)render:(id)render detail:(id)detail;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)parseItem:(id)item detail:(id)detail;
@end

__attribute__((visibility("hidden")))
@interface VKStoreStockItem : VKDomain {
	BOOL _neww;
	BOOL _can_purchase;
	BOOL _can_purchase_for;
	BOOL _free;
	VKStoreProduct* _product;
	NSString* _descr;
	NSString* _author;
	NSString* _photo;
	NSNumber* _price;
	NSString* _price_str;
	NSArray* _demo_photos;
	NSString* _background;
	NSString* _no_purchase_reason;
	NSString* _merchant_product_id;
	VKGiftsContext* _gifts_context;
	GiftsStatContext* _gifts_stat_context;
}
@property(retain, nonatomic) GiftsStatContext* gifts_stat_context;
@property(retain, nonatomic) VKGiftsContext* gifts_context;
@property(retain, nonatomic) NSString* merchant_product_id;
@property(assign, nonatomic) BOOL free;
@property(retain, nonatomic) NSString* no_purchase_reason;
@property(assign, nonatomic) BOOL can_purchase_for;
@property(assign, nonatomic) BOOL can_purchase;
@property(assign, nonatomic) BOOL neww;
@property(retain, nonatomic) NSString* background;
@property(retain, nonatomic) NSArray* demo_photos;
@property(retain, nonatomic) NSString* price_str;
@property(retain, nonatomic) NSNumber* price;
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSString* author;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) VKStoreProduct* product;
+(id)stockItemIdentityForProductIdentity:(id)productIdentity;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKStoreStockVotesItem : VKDomainDerived {
	NSString* _coinImageName;
}
@property(copy, nonatomic) NSString* coinImageName;
@property(retain, nonatomic) VKStoreStockItem* domain;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKStoreStockSubscriptionItem : VKDomainDerived {
	NSString* _management_url;
	NSString* _terms_url;
}
@property(retain, nonatomic) NSString* terms_url;
@property(retain, nonatomic) NSString* management_url;
@property(retain, nonatomic) VKStoreStockItem* domain;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistAddMusicButton : VKRenderable {
}
-(float)renderHeight;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VideoDetailModel : DetailModel {
	BOOL _commentsMode;
	XXStruct_pwHToB _startPlaybackTime;
}
@property(assign, nonatomic) XXStruct_pwHToB startPlaybackTime;
@property(assign, nonatomic) BOOL commentsMode;
+(void)buildItemAndSource:(id)source detail:(id)detail;
-(void)fillActions:(id)actions refill:(id)refill;
-(void)handleEditVideo:(id)video :(id)arg2;
-(void)handleRepost:(id)repost :(id)arg2;
-(void)handleLike:(id)like :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)showLikesForItem:(id)item;
-(BOOL)canComment;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)componentForVideo:(id)video;
-(id)parseItem:(id)item detail:(id)detail;
@end

__attribute__((visibility("hidden")))
@interface VKItemSource : VKRenderable {
	id<VKSource> _source;
	id<VKSourceStatus> _item;
	FeedModelStatContext* _statContext;
}
@property(retain, nonatomic) FeedModelStatContext* statContext;
@property(retain, nonatomic) id<VKSourceStatus> item;
@property(retain, nonatomic) id<VKSource> source;
+(id)item:(id)item source:(id)source statContext:(id)context;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKItemDetail : VKItemSource {
	VKIdentity* _identity;
}
@property(retain, nonatomic) VKIdentity* identity;
+(id)identity:(id)identity;
+(id)identity:(id)identity source:(id)source item:(id)item;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKLikesPreview : VKRenderable {
	BOOL _user_likes;
	BOOL _user_reposted;
	VKIdentity* _identity;
	NSArray* _likesUsers;
	int _likes_count;
	int _reposts_count;
}
@property(assign, nonatomic) int reposts_count;
@property(assign, nonatomic) BOOL user_reposted;
@property(assign, nonatomic) int likes_count;
@property(assign, nonatomic) BOOL user_likes;
@property(retain, nonatomic) NSArray* likesUsers;
@property(retain, nonatomic) VKIdentity* identity;
+(id)identity:(id)identity likes:(id)likes user:(id)user;
-(void).cxx_destruct;
-(id)displayNameForFirstName:(id)firstName lastName:(id)name abbreviation:(BOOL)abbreviation;
-(id)previewText;
@end

__attribute__((visibility("hidden")))
@interface VKLikesFriendsPreview : VKLikesPreview {
}
@end

__attribute__((visibility("hidden")))
@interface VKWallPostSocialButtons : VKRenderable {
}
@end

__attribute__((visibility("hidden")))
@interface VideoAutoplayEqualizerIndicatorView : XXUnknownSuperclass {
	BOOL _animating;
}
@property(assign, nonatomic) BOOL animating;
-(float)randomHeight;
-(void)animateLinesOnceWithCompletion:(id)completion;
-(void)animateLines;
-(BOOL)isAnimating;
-(void)stopAnimating;
-(void)startAnimating;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayStats : XXUnknownSuperclass <VideoPlayStats> {
	struct {
		BOOL start;
		BOOL middle;
		BOOL s3;
		BOOL p25;
		BOOL p50;
		BOOL p75;
		BOOL p95;
		BOOL p100;
	} _flags;
	BOOL _autoplay;
	VKSession* _session;
	VKVideo* _video;
	StatsRef* _ref;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) StatsRef* ref;
@property(readonly, assign, nonatomic) VKVideo* video;
@property(readonly, assign, nonatomic) VKSession* session;
@property(readonly, assign, nonatomic) BOOL autoplay;
+(id)session:(id)session video:(id)video ref:(id)ref;
-(void).cxx_destruct;
-(void)trackVideoEvent:(id)event;
-(void)trackPosition:(id)position;
-(id)trackPositionEvent:(id)event;
-(void)trackPositionNow:(id)now;
-(void)percent:(double)percent;
-(void)progress:(double)progress;
-(void)complete;
-(void)toggleFullscreen:(BOOL)fullscreen;
-(void)toggleVolume:(BOOL)volume;
-(void)resume;
-(void)pause;
-(void)play;
-(void)play:(BOOL)play;
-(void)reset;
-(id)initWithSession:(id)session video:(id)video ref:(id)ref;
@end

__attribute__((visibility("hidden")))
@interface CommentRenderer : Renderer <TextKitLabelInteractiveDefaultBehaviorDelegate> {
	UIView* _separator;
	TextKitLabelInteractiveDefaultBehavior* _textKitLabelDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKComment* domain;
@property(retain, nonatomic) TextKitLabelInteractiveDefaultBehavior* textKitLabelDelegate;
@property(retain, nonatomic) UIView* separator;
+(id)layout:(id)layout;
+(void)build:(id)build;
+(void)buildAttachments:(id)attachments;
+(void)prepareLayout:(id)layout;
+(id)rendererElements;
-(id)currentNavDelegate;
-(void)actionSource:(id)source;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
-(id)initWithMain:(id)main view:(id)view context:(int)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface CreateAudioPlaylistController : VKMTableController {
}
@property(retain, nonatomic) CreateAudioPlaylistModel* model;
-(BOOL)VKMScrollViewDisablePTR;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(void)actionDone:(id)done;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface NewLoginController : XXUnknownSuperclass <UITextFieldDelegate, ConfirmationCodeHandler> {
	BOOL justStarted;
	AuthModel* _model;
	UITextField* _phone;
	UITextField* _password;
	UIButton* _forgot;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) AuthModel* model;
@property(retain, nonatomic) UIButton* forgot;
@property(retain, nonatomic) UITextField* password;
@property(retain, nonatomic) UITextField* phone;
-(void).cxx_destruct;
-(void)showSaveCredentialSavingDialogIfNeededWithLogin:(id)login password:(id)password completion:(id)completion;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)handleConfirmationCode:(id)code;
-(void)actionLogin:(id)login;
-(void)loginWithCode:(id)code;
-(void)actionForgot:(id)forgot;
-(void)actionTextChanged:(id)changed;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)preferredStatusBarStyle;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(unsigned)supportedInterfaceOrientations;
@end

__attribute__((visibility("hidden")))
@interface AppsDashboardModel : LoadingModel {
	NSMutableArray* _modesCache;
	unsigned _numberOfInvites;
	NSArray* _genres;
	NSMutableDictionary* _numberOfElementsForSection;
}
@property(retain, nonatomic) AppsDashboardModelContext* lastContext;
@property(readonly, copy, nonatomic) NSMutableArray* modesCache;
@property(readonly, retain, nonatomic) NSMutableDictionary* numberOfElementsForSection;
@property(copy, nonatomic) NSArray* genres;
@property(assign, nonatomic) unsigned numberOfInvites;
+(id)sectionForRequests:(id)requests totalNumberOfInvites:(out unsigned*)invites;
+(id)parseAllRequests:(id)requests;
+(unsigned)extractCountFromData:(id)data;
+(id)requests;
+(id)with:(id)with;
-(void).cxx_destruct;
-(void)reset;
-(void)rebuildIndex;
-(void)reload;
-(id)genreForSection:(int)section;
-(float)headerHeightForSection:(int)section;
-(id)showAllControlTitleForSection:(int)section;
-(void)handleMarkAsRead:(id)read withBuilder:(id)builder;
-(void)handleRemoveApp:(id)app withBuilder:(id)builder;
-(void)handleDelete:(id)aDelete withBuilder:(id)builder;
-(void)registerForEvents:(id)events;
-(id)invitesSectionTitle;
-(id)processCommonSection:(int)section data:(id)data;
-(unsigned)genreIndexBySection:(int)section;
-(id)titleForSection:(int)section presentation:(unsigned)presentation;
-(id)appDomainsGroupForData:(id)data inSection:(int)section storeCount:(BOOL)count;
-(id)itemsGroupForData:(id)data presentation:(unsigned)presentation requests:(id)requests inSection:(int)section storeCount:(BOOL)count;
-(unsigned)numberOfSectionsForMode:(unsigned)mode withGenresCount:(unsigned)genresCount;
-(id)extractGenresFromData:(id)data;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)indexForUpdatingGenresPartWithData:(id)data basedOnIndex:(id)index cache:(id)cache;
-(id)indexForUpdatingRecommendedPartWithData:(id)data basedOnIndex:(id)index cache:(id)cache;
-(id)extractAllInvitesItemFromData:(id)data shownActivitiesCount:(unsigned)count;
-(id)extractAllActivitiesItemFromData:(id)data shownActivitiesCount:(unsigned)count;
-(id)parseActivities:(id)activities;
-(id)parseInvites:(id)invites;
-(id)spawnContext:(id)context;
-(id)genreRequestKeyForGenre:(id)genre;
-(id)buildRequestsForGenres:(id)genres;
-(id)requestForContext:(id)context;
-(void)storeNumberOfElements:(unsigned)elements forSection:(int)section;
-(unsigned)numberOfElementsForSection:(int)section;
-(void)sdkNotificationDidComeIn:(id)sdkNotification;
-(void)registerCustomNotifications;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AppsDashboardModelContext : ModelContext {
	BOOL _loadOnlyGenresPart;
	unsigned _mode;
}
@property(assign, nonatomic) unsigned mode;
@property(assign, nonatomic) BOOL loadOnlyGenresPart;
-(void)spawnCopy:(id)copy;
-(void)spawnSetup:(id)setup;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayer : XXUnknownSuperclass <TimerTargetDelegate, VideoStatsContextDelegate, UIWebViewDelegate, UIGestureRecognizerDelegate> {
	BOOL playbackStarted;
	BOOL makeFullscreenWhenReady;
	double lastPlaybackTime;
	VKSession* _session;
	VKVideo* _video;
	int _quality;
	id<VKMNavDelegate> _navDelegate;
	MPMoviePlayerController* _mp;
	UIButton* _play;
	UIWebView* _webView;
	NSString* _link;
	VKMImageView* _image;
	UIActivityIndicatorView* _activity;
	UIView* _labelRestrictedBackground;
	UILabel* _labelRestricted;
	TimerTarget* _timer;
	VideoStatsProvider* _vigoStatsContext;
	VideoPlayerProgressStats* _vkProgressStats;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) XXStruct_pwHToB startPlaybackTime;
@property(assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
@property(assign, nonatomic) int quality;
@property(retain, nonatomic) VKVideo* video;
@property(retain, nonatomic) VKSession* session;
@property(retain, nonatomic) VideoPlayerProgressStats* vkProgressStats;
@property(retain, nonatomic) VideoStatsProvider* vigoStatsContext;
@property(retain, nonatomic) TimerTarget* timer;
@property(retain, nonatomic) UILabel* labelRestricted;
@property(retain, nonatomic) UIView* labelRestrictedBackground;
@property(retain, nonatomic) UIActivityIndicatorView* activity;
@property(retain, nonatomic) VKMImageView* image;
@property(retain, nonatomic) NSString* link;
@property(retain, nonatomic) UIWebView* webView;
@property(retain, nonatomic) UIButton* play;
@property(retain, nonatomic) MPMoviePlayerController* mp;
-(void).cxx_destruct;
-(void)videoStatsProvider:(id)provider qualityResult:(int)result;
-(id)videoStatsProviderSession:(id)session;
-(void)loader:(id)loader complete:(id)complete;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)actionTap:(id)tap;
-(void)pauseMusic;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)render:(id)render;
-(void)timerTargetFired:(id)fired;
-(void)trackFraction:(BOOL)fraction;
-(void)play:(id)play;
-(void)animatePreview;
-(void)readyForDisplay:(id)display;
-(void)playbackDidFinish:(id)playback;
-(void)showControls:(BOOL)controls;
-(void)configureAudioSession;
-(void)notificationRotated:(id)rotated;
-(void)prepareWebView;
-(void)prepareMoviePlayer;
-(void)preparePlayButton;
-(void)dropPlayer;
-(void)prepareImage;
-(void)dealloc;
-(void)resetVideoSegmentsStats;
-(void)sendVideoSegmentsStats;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKSubscribtionDescriptionRenderer : VKRenderable {
	NSString* _subscriptionDescription;
}
@property(copy, nonatomic) NSString* subscriptionDescription;
-(void).cxx_destruct;
-(Class)cellClass;
-(id)initWithDesctiprion:(id)desctiprion;
@end

__attribute__((visibility("hidden")))
@interface VKSubscribtionInfoRenderer : VKRenderable {
	NSString* _infoTitleText;
	NSString* _infoAccessoryText;
}
@property(copy, nonatomic) NSString* infoAccessoryText;
@property(copy, nonatomic) NSString* infoTitleText;
-(void).cxx_destruct;
-(Class)cellClass;
-(id)initWithTitle:(id)title accessoryText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface VKSubscribtionPriceRenderer : VKSubscribtionInfoRenderer {
	VKStoreStockSubscriptionItem* _subscription;
}
@property(retain, nonatomic) VKStoreStockSubscriptionItem* subscription;
-(void).cxx_destruct;
-(Class)cellClass;
-(id)initWithTitle:(id)title item:(id)item;
@end

__attribute__((visibility("hidden")))
@interface VKSubscribtionActionButtonRenderer : VKRenderable {
	VKStoreStockSubscriptionItem* _subscription;
}
@property(retain, nonatomic) VKStoreStockSubscriptionItem* subscription;
-(void).cxx_destruct;
-(Class)cellClass;
-(id)initWithItem:(id)item;
@end

__attribute__((visibility("hidden")))
@interface DetailController : VKMLiveController <UITextViewDelegate, ExtraInputPanelViewDelegate, UIGestureRecognizerDelegate, CommentSourcePickerDelegate> {
	BOOL keyboard;
	float offset;
	unsigned textMin;
	unsigned textMax;
	BOOL tracked;
	BOOL _forceInput;
	DetailMoreCell* _more;
	UIActivityIndicatorView* _loading;
	AdminInputPanelView* _inputPanel;
	UITapGestureRecognizer* _gesture;
	CommentEditContext* _context;
	WrapAttachmentsLayout* _attachmentsLayout;
	UIRefreshControl* _bottomRefreshControl;
	float _inputPanelBottomOffset;
	VKHUD* _graffitiUploadingHud;
	DocsSketchUploadEditAttachment* _graffitiUploadEditAttachment;
	CommentPostSourceModel* _commentPostModel;
	NSArray* _commentSources;
	NSNumber* _savedCommentSenderId;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL forceInput;
@property(retain, nonatomic) DetailModel* model;
@property(retain, nonatomic) NSNumber* savedCommentSenderId;
@property(retain, nonatomic) NSArray* commentSources;
@property(retain, nonatomic) CommentPostSourceModel* commentPostModel;
@property(retain, nonatomic) DocsSketchUploadEditAttachment* graffitiUploadEditAttachment;
@property(retain, nonatomic) VKHUD* graffitiUploadingHud;
@property(assign, nonatomic) float inputPanelBottomOffset;
@property(retain, nonatomic) UIRefreshControl* bottomRefreshControl;
@property(retain, nonatomic) WrapAttachmentsLayout* attachmentsLayout;
@property(retain, nonatomic) CommentEditContext* context;
@property(retain, nonatomic) UITapGestureRecognizer* gesture;
@property(retain, nonatomic) AdminInputPanelView* inputPanel;
@property(retain, nonatomic) UIActivityIndicatorView* loading;
@property(retain, nonatomic) DetailMoreCell* more;
-(void).cxx_destruct;
-(void)commentSourcePickerController:(id)controller didSelectSource:(id)source;
-(void)setInputPanelHidden:(BOOL)hidden;
-(BOOL)isInputPanelHidden;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)inputPanelViewDidChangeHeight:(id)inputPanelView;
-(void)VKMTableUpdatedIndex;
-(void)updateLoading;
-(float)keyboardOffset;
-(BOOL)isKeyboardVisible;
-(void)VKMScrollViewRefreshLoading;
-(void)addAttachments:(id)attachments;
-(id)createVideoUploadContextWithAsset:(id)asset;
-(void)cleanGraffitiUploading;
-(void)startGraffitiUploading:(id)uploading;
-(void)notificationGraffitiUploadAttachment:(id)attachment;
-(void)actionAttachments:(id)attachments;
-(void)actionActions:(id)actions;
-(void)fillActions;
-(void)sendFreeStandingAttachmentDomain:(id)domain additionalContextSetup:(id)setup;
-(void)resetInputPanelReply;
-(void)actionReplyTo:(id)to;
-(void)setInputPanelCommentSender:(id)sender;
-(void)actionPickSender:(id)sender;
-(void)actionSendInline:(id)anInline;
-(void)prepareForSendingWithContext:(id)context;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)gestureAttachmentsTapped:(id)tapped;
-(void)extraInputPanelViewDidAttemptToSend:(id)extraInputPanelView;
-(void)extraInputPanelView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context shouldClearText:(BOOL)text;
-(id)commentActionContext;
-(void)notificationAttachmentsReady:(id)ready;
-(void)notificationAttachmentsUpdated:(id)updated;
-(void)updateAttachments;
-(id)VKMControllerStatsRef;
-(id)navContext;
-(CGRect)VKMControllerViewport;
-(void)VKMScrollViewHasLoaded;
-(void)VKMControllerPrePush;
-(void)viewDidLoad;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)loadView;
-(Class)VKMTableViewClass;
-(void)notificationAppActive:(id)active;
-(void)notificationKeyboard:(id)keyboard;
-(void)textViewDidChange:(id)textView;
-(void)textViewDidEndEditing:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(void)VKMControllerChromeInsetsApply;
-(void)dismissTemporaryModals:(id)modals;
-(void)hideKeyboardForced:(id)forced;
-(void)hideKeyboard;
-(void)animate:(double)animate options:(unsigned)options bottom:(BOOL)bottom;
-(void)updateSend;
-(void)updateForNewTextIsAutocomplete:(BOOL)newTextIsAutocomplete;
-(id)commentSenderIdsFilter;
-(BOOL)allowAllCommentSenders;
-(void)updateCommentSender;
-(void)model:(id)model updated:(id)updated;
-(void)modelLoadingChanged:(id)changed;
-(id)setupInput:(BOOL)input;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface Pair : XXUnknownSuperclass {
	id _first;
	id _second;
}
@property(retain, nonatomic) id second;
@property(retain, nonatomic) id first;
+(id)pair:(id)pair with:(id)with;
-(void).cxx_destruct;
-(id)initWithFirst:(id)first second:(id)second;
@end

__attribute__((visibility("hidden")))
@interface AuthModel : XXUnknownSuperclass <VKClientDelegate> {
	VKClient* _client;
	VKClient* _oauthClient;
	RMPhoneFormat* _formatter;
	NSString* _deviceTrustedHash;
	BOOL _voiceRequested;
	BOOL _forceProcessSignup;
	int _task;
	NSMutableDictionary* _data;
	NSDate* _sentCodeTime;
	id _handler;
	CaptchaPrompt* _captcha;
	UIAlertView* _lastAlertView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id handler;
@property(readonly, retain, nonatomic) VKClient* oauthClient;
@property(readonly, retain, nonatomic) VKClient* client;
@property(readonly, retain, nonatomic) RMPhoneFormat* formatter;
@property(assign, nonatomic) BOOL forceProcessSignup;
@property(assign, nonatomic) BOOL voiceRequested;
@property(retain, nonatomic) NSDate* sentCodeTime;
@property(readonly, retain, nonatomic) NSMutableDictionary* data;
@property(assign, nonatomic) int task;
@property(retain, nonatomic) UIAlertView* lastAlertView;
@property(copy, nonatomic) NSString* deviceTrustedHash;
@property(retain, nonatomic) CaptchaPrompt* captcha;
+(id)base64ReceiptString;
+(void)resetDeviceTrustedHash;
+(void)handleAuthError:(id)error block:(id)block;
+(id)secondFAAuthModelWithData:(id)data login:(id)login password:(id)password sid:(id)sid;
-(void).cxx_destruct;
-(void)oauth:(id)oauth showHUDMessage:(BOOL)message success:(id)success failure:(id)failure;
-(void)facebook:(id)facebook code:(id)code success:(id)success failure:(id)failure;
-(void)restore:(id)restore code:(id)code success:(id)success failure:(id)failure;
-(void)login:(id)login password:(id)password code:(id)code success:(id)success failure:(id)failure;
-(void)login:(id)login password:(id)password code:(id)code showHUDMessage:(BOOL)message success:(id)success failure:(id)failure;
-(id)oauthParams;
-(id)messageForOAuthError:(int)oauthError;
-(void)changePasswordWithText:(id)text success:(id)success failure:(id)failure;
-(void)confirm:(id)confirm failure:(id)failure;
-(void)acceptPhone:(BOOL)phone success:(id)success failure:(id)failure;
-(void)completeWithUserId:(id)userId token:(id)token;
-(void)showAlertView:(id)view;
-(void)clearAlertView:(BOOL)view;
-(void)client:(id)client requestedTokenConfirmationWithComplete:(id)complete;
-(void)client:(id)client requestedValidation:(id)validation complete:(id)complete;
-(void)client:(id)client requestedCaptcha:(id)captcha complete:(id)complete;
-(void)clientEncounteredAuthProblem:(id)problem;
-(id)validateRestore;
-(id)validatePasswordStage;
-(id)validateCodeStage;
-(id)validatePhoneStage;
-(id)validateNameStage;
-(id)validate:(id)validate;
-(id)formattedPhoneNumber;
-(id)rawPhoneNumber;
-(void)update:(int)update value:(id)value;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface SportScore : VKRenderable {
	NSNumber* _scoreA;
	NSNumber* _scoreB;
}
@property(readonly, assign, nonatomic) BOOL hasScore;
@property(retain, nonatomic) NSNumber* scoreB;
@property(retain, nonatomic) NSNumber* scoreA;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LikesListController : VKMToolbarController {
}
@property(retain, nonatomic) LikesModel* model;
-(void)segmentedControlChanged:(id)changed;
-(BOOL)isToolbarHidden;
-(id)titleForSegmentAtIndex:(unsigned)index;
-(unsigned)numberOfSegments;
-(void)VKMTableUpdatedIndex;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface LikesModel : LoadingModel {
	VKIdentity* _identity;
	int _filter;
	int _all;
	int _copies;
	int _friends;
}
@property(assign, nonatomic) int friends;
@property(assign, nonatomic) int copies;
@property(assign, nonatomic) int all;
@property(assign, nonatomic) int filter;
@property(retain, nonatomic) VKIdentity* identity;
+(id)likes:(id)likes filter:(int)filter extended:(BOOL)extended fields:(id)fields offset:(int)offset count:(int)count skip_own:(BOOL)own;
+(id)likes:(id)likes filter:(int)filter extended:(BOOL)extended fields:(id)fields offset:(int)offset count:(int)count;
+(id)likesListRequestBuilderForIdentity:(id)identity filter:(int)filter;
+(id)likesIdentityParameters:(id)parameters;
+(id)likesIdentityParametersDict:(id)dict;
-(void).cxx_destruct;
-(void)changeFilter:(int)filter;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
-(id)withIdentity:(id)identity;
@end

__attribute__((visibility("hidden")))
@interface VKP2PSendWebViewController : SiteActionController {
}
-(void)viewWillAppear:(BOOL)view;
-(void)configureLeftBarButtonItem;
-(void)configureNavigationItemTitleView;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface RendererBuilder : XXUnknownSuperclass {
	NSMutableArray* _elements;
}
@property(retain, nonatomic) NSMutableArray* elements;
+(id)builder;
-(void).cxx_destruct;
-(id)add:(id)add;
-(id)build;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailView : VKMImageView <UIGestureRecognizerDelegate, VKThumbnailView> {
	VKDomain<VKThumbnailable>* _domain;
	int _renderedSize;
	UITapGestureRecognizer* _recognizer;
	id<ThumbnailViewDelegate> _delegate;
}
@property(readonly, assign, nonatomic) UIImage* image;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<ThumbnailViewDelegate> delegate;
@property(retain, nonatomic) UITapGestureRecognizer* recognizer;
@property(assign, nonatomic) int renderedSize;
@property(retain, nonatomic) VKDomain<VKThumbnailable>* domain;
-(void).cxx_destruct;
-(id)navDelegate;
-(void)tapped:(id)tapped;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsView : ThumbnailView {
	BOOL ready;
	VKPhotoTags* _tags;
	UIView* _overlay;
	UIView* _viewport;
}
@property(assign, nonatomic) __weak id<PhotoTagsViewDelegate> delegate;
@property(retain, nonatomic) VKPhotoTags* tags;
@property(retain, nonatomic) UIView* viewport;
@property(retain, nonatomic) UIView* overlay;
-(void).cxx_destruct;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)highlight:(unsigned)highlight;
-(id)tagAtIndex:(unsigned)index;
-(void)selected:(id)selected;
-(void)hide:(id)hide;
-(void)setImage:(id)image;
-(void)update;
-(void)lazy;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKMaskLinkInfo : XXUnknownSuperclass {
	VKIdentity* _iden;
}
@property(retain, nonatomic) VKIdentity* iden;
-(void).cxx_destruct;
-(id)initWithIdentity:(id)identity;
@end

__attribute__((visibility("hidden")))
@interface VideoThumbnailComponent : Component5 {
}
+(id)platformWatermarkComponentForVideo:(id)video context:(id)context;
+(id)badgeTextForVideo:(id)video showPlatformIfHas:(BOOL)has;
+(id)single:(id)single;
+(id)preview:(id)preview duration:(BOOL)duration displayBigPlayIconIfFits:(BOOL)fits;
+(id)preview:(id)preview duration:(BOOL)duration filter:(id)filter placeholder:(id)placeholder displayBigPlayIconIfFits:(BOOL)fits;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerComponentState : XXUnknownSuperclass <NSCopying> {
	VKVideo* _video;
	int _quality;
}
@property(assign, nonatomic) int quality;
@property(retain, nonatomic) VKVideo* video;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerComponent : Component5 {
	XXStruct_pwHToB _startPlaybackTime;
}
@property(assign, nonatomic) XXStruct_pwHToB startPlaybackTime;
@property(retain, nonatomic) VideoPlayerComponentState* state;
+(id)video:(id)video quality:(int)quality;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerComponentController : Component5Controller {
}
+(id)createView;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)setComponent:(id)component;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VideoQualityComponentState : XXUnknownSuperclass <NSCopying> {
	int _quality;
}
@property(assign, nonatomic) int quality;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VideoQualityComponent : Component5 {
	VideoPlayerComponent* _videoPlayer;
}
@property(retain, nonatomic) VideoQualityComponentState* state;
@property(retain, nonatomic) VideoPlayerComponent* videoPlayer;
+(BOOL)shouldShowQualitySelectorForVideo:(id)video;
+(id)selectorForPlayer:(id)player;
-(void).cxx_destruct;
-(id)initWithPlayer:(id)player;
@end

__attribute__((visibility("hidden")))
@interface VideoQualityComponentController : Component5Controller {
}
+(id)createView;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)actionQuality:(id)quality;
-(void)qualityAdviceNotification:(id)notification;
-(void)setComponent:(id)component;
-(id)initWithView:(id)view context:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface StickerSelectionCell : XXUnknownSuperclass {
	VKMImageView* _imageView;
}
@property(retain, nonatomic) VKMImageView* imageView;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(void)setSelected:(BOOL)selected;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PopupWindow : XXUnknownSuperclass {
}
+(id)popupWindowForController:(id)controller windowLevel:(float)level orientationMask:(unsigned)mask;
-(void)present:(BOOL)present animated:(BOOL)animated;
-(void)setHidden:(BOOL)hidden;
-(void)setRootViewController:(id)controller;
-(id)popupWindowController;
@end

__attribute__((visibility("hidden")))
@interface PopupWindowView : XXUnknownSuperclass {
	UIView* _contentView;
	UITapGestureRecognizer* _tapToCloseGestureRecognizer;
	UIPanGestureRecognizer* _swipeToCloseGestureRecognizer;
}
@property(readonly, retain, nonatomic) UIPanGestureRecognizer* swipeToCloseGestureRecognizer;
@property(readonly, retain, nonatomic) UITapGestureRecognizer* tapToCloseGestureRecognizer;
@property(readonly, assign, nonatomic) UIView* contentView;
-(void).cxx_destruct;
-(void)present:(BOOL)present animated:(BOOL)animated animations:(id)animations completion:(id)completion;
-(void)gesturePan:(id)pan;
-(void)gestureTap:(id)tap;
-(id)popupWindow;
-(void)layoutSubviews;
-(id)initWithContentView:(id)contentView;
@end

__attribute__((visibility("hidden")))
@interface VKSubscriptionSuccessPopupViewController : VKMController <PopupWindowController> {
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	NSString* _storeCampaignToken;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* storeCampaignToken;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) PopupWindowView* view;
-(void).cxx_destruct;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)actionCancelButton:(id)button;
-(void)actionButton:(id)button;
-(id)titleText;
-(id)contentView;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface VKSubscriptionCachePopupViewController : VKSubscriptionSuccessPopupViewController {
}
-(id)titleText;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsModelContext : ListModelContext {
	BOOL _canCreatePlaylist;
}
@property(assign, nonatomic) BOOL canCreatePlaylist;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsModel : ListModel {
	BOOL _attachMode;
	int _filter;
	VKIdentity* _filterIden;
}
@property(retain, nonatomic) VKIdentity* filterIden;
@property(assign, nonatomic, getter=isAudioAttachMode) BOOL attachMode;
@property(assign, nonatomic) int filter;
+(id)requestWithOwner:(id)owner filter:(int)filter;
+(id)requestWithOwner:(id)owner;
-(void).cxx_destruct;
-(void)editPlaylist:(id)playlist builder:(id)builder;
-(void)deletePlaylist:(id)playlist builder:(id)builder;
-(void)updateUnfollowPlaylist:(id)playlist builder:(id)builder;
-(void)updateFollowPlaylist:(id)playlist withFollowedIden:(id)followedIden builder:(id)builder;
-(void)addPlaylist:(id)playlist source:(id)source builder:(id)builder;
-(void)handleReorderAudioPlaylists:(id)playlists :(id)arg2;
-(void)handleUpdateAudioPlaylistCover:(id)cover :(id)arg2;
-(void)handleEditAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleAddAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleDeleteAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleFollowAudioPlaylist:(id)playlist :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)fillActionsForBuilder:(id)builder playlist:(id)playlist;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
-(id)setupFilterWithIden:(id)iden;
-(id)setupAttachMode;
-(id)setupSearch;
-(id)setupFilter:(int)filter;
-(BOOL)isManagedPlaylistsSection;
-(id)spawnContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderAdsSource : ActionOptionsProviderActionBuilder {
	VKFeedAds* _ads;
	VKFeedAdsItem* _item;
}
@property(readonly, assign, nonatomic) VKFeedAdsItem* item;
@property(readonly, assign, nonatomic) VKFeedAds* ads;
+(id)handlerWithAds:(id)ads item:(id)item;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(id)initWithAds:(id)ads item:(id)item;
@end

__attribute__((visibility("hidden")))
@interface MOProductsRequest : XXUnknownSuperclass <SKProductsRequestDelegate> {
	id _block;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id block;
+(void)requestProductIdentifiers:(id)identifiers block:(id)block;
-(void).cxx_destruct;
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

__attribute__((visibility("hidden")))
@interface MOReceiptRefreshRequest : XXUnknownSuperclass <SKProductsRequestDelegate> {
	id _block;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id block;
+(void)refreshRequestWithBlock:(id)block;
-(void).cxx_destruct;
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

__attribute__((visibility("hidden")))
@interface VKSubscriptionItemModel : ItemModel {
}
@property(readonly, assign, nonatomic) VKStoreStockSubscriptionItem* item;
-(id)process:(id)process context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FeedModelRenderContext : ModelRenderContext {
	BOOL _photoPostWithText;
	BOOL _canIgnoreItems;
	NSDictionary* _sources;
	FeedModelStatContext* _statContext;
	unsigned _maxPhotos;
	int _banSourceType;
	FeedExtras* _feedExtras;
}
@property(copy, nonatomic) FeedExtras* feedExtras;
@property(assign, nonatomic) int banSourceType;
@property(assign, nonatomic) BOOL canIgnoreItems;
@property(assign, nonatomic) BOOL photoPostWithText;
@property(assign, nonatomic) unsigned maxPhotos;
@property(retain, nonatomic) FeedModelStatContext* statContext;
@property(retain, nonatomic) NSDictionary* sources;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface FeedModelContext : ListModelContext {
	BOOL _cache;
	BOOL _canIgnoreItems;
	id _from;
	NSIndexPath* _reloadPath;
	FeedExtras* _feedExtras;
	NSMutableDictionary* _sources;
	NSMutableDictionary* _videoPlayStats;
	NSMutableSet* _viewPosts;
}
@property(retain, nonatomic) NSMutableSet* viewPosts;
@property(retain, nonatomic) NSMutableDictionary* videoPlayStats;
@property(retain, nonatomic) NSMutableDictionary* sources;
@property(assign, nonatomic) BOOL canIgnoreItems;
@property(assign, nonatomic) BOOL cache;
@property(retain, nonatomic) FeedExtras* feedExtras;
@property(retain, nonatomic) NSIndexPath* reloadPath;
@property(retain, nonatomic) id from;
-(void).cxx_destruct;
-(void)addSources:(id)sources;
-(void)spawnCopy:(id)copy;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface FeedModel : LoadingModel {
}
@property(retain, nonatomic) FeedModelContext* lastContext;
+(void)updateBuilder:(id)builder enumerateIdentityWithBlock:(id)block;
+(void)updateBuilder:(id)builder enumeratePost:(id)post withBlock:(id)block;
+(void)updateBuilder:(id)builder enumerateAdsWithBlock:(id)block;
+(void)updateBuilder:(id)builder enumeratePostsWithBlock:(id)block;
+(int)handlesSourcesBans;
-(void)viewed:(id)viewed;
-(BOOL)requireViewed;
-(void)statsViewFriendsRecommendation:(id)recommendation atIndexPath:(id)indexPath;
-(void)statsViewPost:(id)post atIndexPath:(id)indexPath;
-(void)statsViewAds:(id)ads atIndexPath:(id)indexPath;
-(void)statsLoadedAds:(id)ads;
-(id)feedStatContext;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)handleGroup:(id)group :(id)arg2;
-(void)updateBuilder:(id)builder handleSubscribed:(BOOL)subscribed target:(id)target;
-(void)handleHideAdsBlock:(id)block :(id)arg2;
-(void)handleReportAds:(id)ads :(id)arg2;
-(void)handleHideAds:(id)ads :(id)arg2;
-(void)removeAds:(id)ads :(id)arg2;
-(void)handleHideFriendsRecommendations:(id)recommendations :(id)arg2;
-(void)handleToggleExpand:(id)expand :(id)arg2;
-(void)handlePhotoEdit:(id)edit :(id)arg2;
-(void)handlePollEdit:(id)edit :(id)arg2;
-(void)handlePollVote:(id)vote :(id)arg2;
-(void)handleDeleteComment:(id)comment :(id)arg2;
-(void)handleAddComment:(id)comment :(id)arg2;
-(void)handleRepost:(id)repost :(id)arg2;
-(void)handleLike:(id)like :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleRefresh:(id)refresh :(id)arg2;
-(void)updateBuilder:(id)builder updatePost:(id)post atIndexPath:(id)indexPath;
-(void)updateBuilder:(id)builder updatePost:(id)post atIndexPath:(id)indexPath withContext:(id)context;
-(void)updateBuilder:(id)builder refreshRowAtIndexPath:(id)indexPath withObject:(id)object;
-(void)updateBuilder:(id)builder refreshRowAtIndexPath:(id)indexPath;
-(void)updateBuilder:(id)builder reloadRowAtIndexPath:(id)indexPath;
-(void)updateBuilder:(id)builder reloadRowAtIndexPath:(id)indexPath withObject:(id)object;
-(void)registerForEvents:(id)events;
-(id)postTarget;
-(BOOL)shouldLoad:(id)load;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context append:(BOOL)append;
-(id)prerenderContext;
-(id)prerenderContextForModelContext:(id)modelContext;
-(id)spawnContext:(id)context;
-(BOOL)feedModelComplete:(id)complete loaded:(int)loaded;
-(void)updateFeedContext:(id)context withData:(id)data;
-(id)nextFrom:(id)from data:(id)data count:(int)count;
-(id)renderFeedItem:(id)item context:(id)context statContext:(id)context3;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(id)itemsFromData:(id)data;
-(id)groupsFromData:(id)data;
-(id)usersFromData:(id)data;
-(id)requestForContext:(id)context;
-(id)feedRequestBuilderForContext:(id)context;
-(id)requestFrom:(id)from count:(int)count;
-(Class)renderContextClass;
@end

__attribute__((visibility("hidden")))
@interface PagingCollectionViewFlowLayout : XXUnknownSuperclass {
}
-(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)scrollingVelocity;
-(id)centerAttributeInRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface LayerDrawer : XXUnknownSuperclass {
	Bezier* _bezier;
	UniformContext* _uniformContext;
	UIImage* _brushImage;
	UIImage* _neonBrushCentreImage;
	float _scale;
	CGRect _rect;
}
@property(assign, nonatomic) CGRect rect;
@property(assign, nonatomic) float scale;
@property(retain, nonatomic) UIImage* neonBrushCentreImage;
@property(retain, nonatomic) UIImage* brushImage;
@property(retain, nonatomic) UniformContext* uniformContext;
@property(retain, nonatomic) Bezier* bezier;
-(void).cxx_destruct;
-(id)drawBezier:(id)bezier fromPoint:(unsigned)point withUniformContext:(id)uniformContext graphicsContext:(CGContextRef)context;
-(id)drawBezier:(id)bezier fromPoint:(unsigned)point withUniformContext:(id)uniformContext bottomImage:(id)image;
-(id)drawBezier:(id)bezier;
@end

__attribute__((visibility("hidden")))
@interface UIImageAndIndex : XXUnknownSuperclass {
	UIImage* _image;
	unsigned _index;
}
@property(assign, nonatomic) unsigned index;
@property(retain, nonatomic) UIImage* image;
+(id)image:(id)image index:(unsigned)index;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface UndoHelper : XXUnknownSuperclass {
	NSArray* _history;
	NSMutableArray* _images;
	float _scale;
	CGSize _size;
}
@property(assign, nonatomic) float scale;
@property(assign, nonatomic) CGSize size;
@property(retain, nonatomic) NSMutableArray* images;
@property(retain, nonatomic) NSArray* history;
+(void)initialize;
-(void).cxx_destruct;
-(id)generateImageForIndex:(unsigned)index history:(id)history newImages:(id)images;
-(id)generateImageForIndex:(unsigned)index history:(id)history;
-(void)notificationMemoryWarning:(id)warning;
-(id)initWithSize:(CGSize)size scale:(float)scale;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface DrawView : XXUnknownSuperclass {
	CGContextRef _context;
	BOOL _touchesEndedOrCanceled;
	Brush* _brush;
	NSMutableArray* _history;
	UIImage* _cacheImage;
	NSArray* _historyForSavedState;
	UIImage* _cacheImageForSavedState;
	Bezier* _current;
	unsigned _pointsProcessed;
	LayerDrawer* _drawer;
	UniformContext* _topLayerUniformContext;
	UndoHelper* _undoHelper;
}
@property(retain, nonatomic) Brush* brush;
@property(retain, nonatomic) UndoHelper* undoHelper;
@property(assign, nonatomic) BOOL touchesEndedOrCanceled;
@property(retain, nonatomic) UniformContext* topLayerUniformContext;
@property(retain, nonatomic) LayerDrawer* drawer;
@property(assign, nonatomic) unsigned pointsProcessed;
@property(retain, nonatomic) Bezier* current;
@property(retain, nonatomic) UIImage* cacheImageForSavedState;
@property(retain, nonatomic) NSArray* historyForSavedState;
@property(retain, nonatomic) UIImage* cacheImage;
@property(retain, nonatomic) NSMutableArray* history;
-(void).cxx_destruct;
-(id)renderImageWithSize:(CGSize)size;
-(void)renderGraffiti:(id)graffiti;
-(void)drawRect:(CGRect)rect;
-(void)processTouches:(id)touches;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(CGContextRef)newContext;
-(void)restoreState;
-(void)saveState;
-(void)undo;
-(void)clear;
-(BOOL)isEmpty;
-(id)screenImage;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface KeyboardManager : XXUnknownSuperclass {
	float lastHeightForPortrait;
	float lastHeightForLandsacpe;
	BOOL _keyboardVisible;
}
@property(readonly, assign, nonatomic) BOOL keyboardVisible;
+(id)keyboardWindowView;
+(float)keyboardCoverHeight:(CGRect)height inView:(id)view;
+(float)keyboardHeightInView:(id)view;
+(id)sharedInstance;
-(float)visibleOffsetForCurrentStatusBarOrientation;
-(float)visibleOffsetForOrientation:(int)orientation;
-(float)lastHeightForCurrentStatusBarOrientation;
-(float)lastHeightForOrientation:(int)orientation;
-(id)updatedWithNotification:(id)notification;
-(void)notificationKeyboard:(id)keyboard;
-(void)updateWithNotificaiton:(id)notificaiton;
-(float*)pHeightForOrientation:(int)orientation;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKCommentSourceUser : VKUser <VKCommentSource> {
	BOOL _selected;
}
@property(readonly, assign, nonatomic) BOOL verified;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) int deactivated;
@property(readonly, assign, nonatomic) int sex;
@property(readonly, retain, nonatomic) NSString* photo;
@property(readonly, retain, nonatomic) NSString* name;
@property(readonly, retain, nonatomic) NSNumber* source_id;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL selected;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface RecommendedPagesController : VKMLiveController {
}
@property(retain, nonatomic) RecommendedPagesModel* model;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(BOOL)VKMControllerModalAutoClose;
-(void)viewDidLoad;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface HideKeyboardGestureRecognizer : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface ThumbnailGestureRecognizer : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface UITableViewMiddleObjectTracker : XXUnknownSuperclass {
	UITableView* _tableView;
	NSDate* _lastDate;
	NSIndexPath* _lastIndexPath;
}
@property(retain, nonatomic) NSIndexPath* lastIndexPath;
@property(retain, nonatomic) NSDate* lastDate;
@property(readonly, assign, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)start;
-(void)stop;
-(void)trackIndexPath:(id)path;
-(id)currentIndexPath;
-(void)didTrackIndexPath:(id)path duration:(double)duration;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)initWithTableView:(id)tableView;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface FeedController : VKMLiveController <UIScrollViewAccessibilityDelegate, VKVideoStatsProvider> {
	UITableViewMiddleObjectTracker* _midPostTracker;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UITableViewMiddleObjectTracker* midPostTracker;
-(void).cxx_destruct;
-(id)statsForVideo:(id)video;
-(BOOL)accessibilityScroll:(int)scroll;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)VKMTableStyle;
-(id)renderContextForModel:(id)model;
-(id)VKMControllerStatsRef;
-(int)VKMLiveAudioContext;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)notificationViewPostTime:(id)time;
-(void)notificationTrackerResignActive:(id)active;
-(void)statsTrackViewPostTimeForPostId:(id)postId duration:(double)duration trackCode:(id)code;
-(void)statsTrackViewPostTimeForPost:(id)post duration:(double)duration;
-(void)attachPostTracker:(id)tracker;
-(void)detachPostTracker:(id)tracker;
-(void)viewDidLoad;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailsRenderer : Renderer <AudioAttachmentDelegate> {
	NSMutableArray* _thumbs;
	NSMutableArray* _audios;
	NSMutableArray* _linked;
	NSMutableArray* _playlists;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAttachmentsRender* domain;
@property(retain, nonatomic) NSMutableArray* playlists;
@property(retain, nonatomic) NSMutableArray* linked;
@property(retain, nonatomic) NSMutableArray* audios;
@property(retain, nonatomic) NSMutableArray* thumbs;
+(id)layout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void).cxx_destruct;
-(void)audioView:(id)view selectedAudio:(id)audio;
-(void)actionAudio:(id)audio;
-(void)actionPlaylist:(id)playlist;
-(void)actionLink:(id)link;
-(void)playAudio:(id)audio toggle:(BOOL)toggle;
-(void)actionRecognizeLike:(id)like;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)setupCell:(id)cell;
-(void)render:(id)render layout:(id)layout reuse:(double)reuse;
-(void)reuse;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailsLayout : RenderLayout {
	BOOL* zooms;
	int* sizes;
}
-(void)layout:(id)layout maxw:(float)maxw maxh:(float)maxh minh:(float)minh margin:(float)margin scale:(float)scale ox:(float)ox oy:(float)oy leftAlignment:(BOOL)alignment;
-(void)dealloc;
-(id)initWithCount:(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface PersistentBackgroundLabel : XXUnknownSuperclass {
}
-(void)setBackgroundColor:(id)color;
-(void)setPersistentBackgroundColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VideoThumbnailView : ThumbnailView <RoundedProgressOverlayViewDelegate> {
	BOOL _messages;
	UILabel* _label;
	UILabel* _albumTitle;
	UILabel* _albumCount;
	UIView* _background;
	RoundedProgressOverlayView* _progressView;
	UploadEditAttachment* _uploadingAttachment;
	UIImageView* _videoPlayIcon;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL messages;
@property(retain, nonatomic) UIView* background;
@property(retain, nonatomic) UILabel* albumCount;
@property(retain, nonatomic) UILabel* albumTitle;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIImageView* videoPlayIcon;
@property(retain, nonatomic) UploadEditAttachment* uploadingAttachment;
@property(retain, nonatomic) RoundedProgressOverlayView* progressView;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)uploadStateChanged:(id)changed;
-(void)progressViewDidCancel:(id)progressView;
-(void)renderUploadingAttachment:(id)attachment;
-(void)renderThumbnail:(id)thumbnail;
-(void)reuse;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LinkRenderer : Renderer {
}
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)linkSelected:(id)selected;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface LocationTracker : XXUnknownSuperclass {
	VKTimeout* _timeout;
	LocationStat* _lastLocationStat;
	CLLocationManager* _locationManager;
}
@property(retain, nonatomic) LocationStat* lastLocationStat;
@property(retain, nonatomic) VKTimeout* timeout;
@property(retain, nonatomic) CLLocationManager* locationManager;
-(void).cxx_destruct;
-(void)storeLastLocationStat:(id)stat;
-(id)locationStat;
-(id)initWithUpdateTimeout:(double)updateTimeout;
@end

__attribute__((visibility("hidden")))
@interface PostDetailModel : DetailModel {
}
+(void)buildItemAndSource:(id)source detail:(id)detail;
+(id)postFromData:(id)data session:(id)session;
+(id)requestCodeForPost:(id)post context:(id)context;
-(void)handleRepost:(id)repost :(id)arg2;
-(void)handleLike:(id)like :(id)arg2;
-(void)handlePin:(id)pin :(id)arg2;
-(void)handleAddPost:(id)post :(id)arg2;
-(void)handlePollEdit:(id)edit :(id)arg2;
-(void)handlePollVote:(id)vote :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)fillActions:(id)actions refill:(id)refill;
-(void)changeIndex:(id)index withUpdate:(id)update;
-(BOOL)showLikesForItem:(id)item;
-(id)companionIdentity;
-(BOOL)canComment;
-(id)parseItem:(id)item detail:(id)detail;
-(id)sourceFor:(id)aFor data:(id)data;
-(id)sourceComponentForDetail:(id)detail;
-(id)renderDetailSectionFromContext:(id)context;
-(id)componentForObject:(id)object withContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchHeaderView : XXUnknownSuperclass {
	UIButton* _button;
}
@property(retain, nonatomic) UIButton* button;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchTrendsViewController : VKMLiveController {
	SearchModelUpdater* _searchUpdater;
}
@property(retain, nonatomic) SearchModelUpdater* searchUpdater;
-(void).cxx_destruct;
-(void)actionClearLocal:(id)local;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(int)VKMTableStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchHintsViewController : VKMLiveController {
}
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)VKMScrollViewIndexFromModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchViewController : VKMViewControllerContainer <UISearchControllerDelegate, UISearchBarDelegate> {
	NSNumber* _owner;
	AudioSearchTrendsViewController* _trends;
	AudioSearchHintsViewController* _hints;
	id<SearchModel> _audioSearchModel;
	SearchModelUpdater* _searchHintsUpdater;
	VKMNavResolverProxy* _navProxy;
	UISearchController* _search;
	AudioSearchHistoryVKStats* _localHistory;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) AudioSearchHistoryVKStats* localHistory;
@property(retain, nonatomic) UISearchController* search;
@property(retain, nonatomic) VKMNavResolverProxy* navProxy;
@property(retain, nonatomic) SearchModelUpdater* searchHintsUpdater;
@property(retain, nonatomic) id<SearchModel> audioSearchModel;
@property(retain, nonatomic) AudioSearchHintsViewController* hints;
@property(retain, nonatomic) AudioSearchTrendsViewController* trends;
@property(retain, nonatomic) NSNumber* owner;
+(id)main:(id)main ownerId:(id)anId;
-(void).cxx_destruct;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)search:(id)search scope:(int)scope;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)didPresentSearchController:(id)controller;
-(id)initWithMain:(id)main ownerId:(id)anId;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchResultsViewController : VKMLiveController {
}
-(id)VKMScrollViewIndexFromModel:(id)model;
-(void)actionShowMore:(id)more;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)_vkm_emptySection:(int)section;
-(id)VKMControllerStatsRef;
-(int)VKMLiveAudioContext;
-(int)VKMTableSearchMode;
-(int)VKMTableStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKNote : VKDomain <VKTextPage> {
	unsigned _date;
	VKPageContent* _text;
	NSString* _view_url;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* view_url;
@property(retain, nonatomic) VKPageContent* text;
@property(assign, nonatomic) unsigned date;
+(id)note:(id)note owner:(id)owner;
-(void).cxx_destruct;
-(id)URLForTextPage;
-(Class)rendererClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKNotePreview : VKDomainDerived <VKAttachment> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKNote* domain;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKMValidateDeviceSiteAction : VKMSiteAction {
	NSURL* _url;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSURL* url;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)complete:(int)complete;
-(void)cancel;
-(id)targetURL;
@end

__attribute__((visibility("hidden")))
@interface NotesModel : ListModel {
}
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface NoteRenderer : Renderer {
}
@property(retain, nonatomic) VKNote* domain;
+(int)cellStyle;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)renderCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface LandingPageController : XXUnknownSuperclass {
	AuthModel* _model;
	unsigned _sharedWebCredentialAvailability;
}
@property(retain, nonatomic) AuthModel* model;
@property(assign, nonatomic) unsigned sharedWebCredentialAvailability;
-(void).cxx_destruct;
-(void)actionLogIn:(id)anIn;
-(void)actionFacebook:(id)facebook;
-(void)actionSignUp:(id)up;
-(void)showLoginController;
-(int)preferredStatusBarStyle;
-(BOOL)shouldAutorotate;
-(void)tryToLoginWithLogin:(id)login password:(id)password;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SexSelectionSegmentedControl : XXUnknownSuperclass {
	int _selectedSex;
}
@property(assign, nonatomic) int selectedSex;
+(BOOL)isAllowedUserSex:(int)sex;
+(id)sexSelectionSegmentedControl;
-(id)actuallySelectedSex;
@end

__attribute__((visibility("hidden")))
@interface PageCellWithTableView : XXUnknownSuperclass <UITableViewDataSource, UITableViewDelegate> {
	NSArray* _audios;
	UITableView* _tableView;
	id<AudioCellDelegate> _audioDelegate;
	id<PageCellWithTableViewDidSelectAudioDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<PageCellWithTableViewDidSelectAudioDelegate> delegate;
@property(assign, nonatomic) __weak id<AudioCellDelegate> audioDelegate;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) NSArray* audios;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AudioAudiosPagingView : XXUnknownSuperclass <UICollectionViewDataSource, UICollectionViewDelegate, PageCellWithTableViewDidSelectAudioDelegate> {
	id<AudioCellDelegate> _delegate;
	AudioAudiosBlock* _audioBlock;
	UICollectionView* _collectionView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UICollectionView* collectionView;
@property(retain, nonatomic) AudioAudiosBlock* audioBlock;
@property(assign, nonatomic) __weak id<AudioCellDelegate> delegate;
+(float)height;
-(void).cxx_destruct;
-(void)pageCellWithTableView:(id)tableView didSelectAudio:(id)audio;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VMIdleTimerDisabledHolder : VMEmptyHolder {
}
+(id)sharedInstance;
-(void)becameEmptyAction;
-(void)wasEmptyAction;
@end

__attribute__((visibility("hidden")))
@interface ImageDecorationComponentState : XXUnknownSuperclass {
	UIImage* _image;
	Component5* _component;
	UIColor* _tintColor;
}
@property(retain, nonatomic) UIColor* tintColor;
@property(retain, nonatomic) Component5* component;
@property(retain, nonatomic) UIImage* image;
+(id)image:(id)image component:(id)component tintColor:(id)color;
+(id)image:(id)image component:(id)component;
-(void).cxx_destruct;
-(id)initWithImage:(id)image component:(id)component tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface ImageDecorationComponent : Component5 {
}
@property(retain, nonatomic) ImageDecorationComponentState* state;
+(id)image:(id)image component:(id)component tintColor:(id)color;
+(id)image:(id)image component:(id)component;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ImageDecorationComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak UIImageView* view;
@property(retain, nonatomic) ImageDecorationComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface BadgeDecorationComponent : Component5 {
}
+(id)decoratedComponent:(id)component tintColor:(id)color;
+(id)decoratedComponent:(id)component;
@end

__attribute__((visibility("hidden")))
@interface BadgeComponent : Component5 {
}
+(id)badgedComponent:(id)component icon:(id)icon text:(id)text horizontalAlignment:(int)alignment verticalAlignment:(int)alignment5 sizeConstraints:(XXStruct_JC2WWA)constraints;
+(id)icon:(id)icon text:(id)text;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface AppSettingCell : VKMCell <VKMImageLoaderDelegate> {
	VKMImageLoader* _loader;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKMImageLoader* loader;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(void)loader:(id)loader complete:(id)complete;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StickersPickerViewController : VKMController <ExtraInputPanelViewPhotoEditorModeDelegate> {
	id<StickersPickerViewControllerDelegate> _delegate;
	ExtrasInputView* _stickersPickerView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<StickersPickerViewControllerDelegate> delegate;
@property(retain, nonatomic) ExtrasInputView* stickersPickerView;
-(void).cxx_destruct;
-(void)extraInputView:(id)view didSelectStickerImage:(id)image stickerId:(id)anId;
-(void)extraInputView:(id)view didSelectEmojiImage:(id)image emojiString:(id)string;
-(void)extraInputViewDidCancel:(id)extraInputView;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)prefersStatusBarHidden;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMoneyTransfer : VKDomain {
	NSNumber* _from_id;
	NSNumber* _to_id;
	id<VKSource> _source_from;
	id<VKSource> _source_to;
	int _status;
	unsigned _apiDate;
	NSString* _comment;
	NSString* _accept_url;
	VKPrice* _amount;
}
@property(retain, nonatomic) VKPrice* amount;
@property(copy, nonatomic) NSString* accept_url;
@property(copy, nonatomic) NSString* comment;
@property(assign, nonatomic) unsigned apiDate;
@property(assign, nonatomic) int status;
@property(retain, nonatomic) id<VKSource> source_to;
@property(retain, nonatomic) id<VKSource> source_from;
@property(retain, nonatomic) NSNumber* to_id;
@property(retain, nonatomic) NSNumber* from_id;
+(id)policyURL;
+(id)landingURL;
+(id)amountFormatter;
+(id)displayNameForCurrencyWithCode:(id)code;
+(id)titleForStatus:(int)status;
-(void).cxx_destruct;
-(id)displayNameForCurrency;
-(int)routeForOwner:(id)owner;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMoneyTransferAttachment : VKDomainDerived <VKAttachment> {
	int _route;
}
@property(readonly, assign, nonatomic) int route;
@property(readonly, assign, nonatomic) VKMoneyTransfer* domain;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)transfer:(id)transfer ownerId:(id)anId;
+(id)from:(id)from;
-(BOOL)isOutgoingTransfer;
-(BOOL)isIncomingTransfer;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
@end

__attribute__((visibility("hidden")))
@interface VKPollAnswer : VKDomain {
	NSNumber* _id;
	NSString* _text;
	int _votes;
	float _rate;
	float _scale;
}
@property(assign, nonatomic) float scale;
@property(assign, nonatomic) float rate;
@property(assign, nonatomic) int votes;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
-(void)updateWithAnswer:(id)answer;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface VKPoll : VKDomain {
	BOOL _anonymous;
	BOOL _board;
	unsigned _created;
	NSString* _question;
	int _votes;
	NSNumber* _answer_id;
	NSArray* _answers;
}
@property(assign, nonatomic) BOOL board;
@property(assign, nonatomic) BOOL anonymous;
@property(retain, nonatomic) NSArray* answers;
@property(retain, nonatomic) NSNumber* answer_id;
@property(assign, nonatomic) int votes;
@property(retain, nonatomic) NSString* question;
@property(assign, nonatomic) unsigned created;
-(void).cxx_destruct;
-(id)mapAnswers;
-(int)pollDataState;
-(void)updateWithPoll:(id)poll;
-(int)maximumVotesForAnswer;
-(BOOL)answered;
-(BOOL)loaded;
-(BOOL)process:(id)process context:(id)context;
-(void)updateAnswersWithMaxRate:(float)maxRate;
-(void)domainOnEditCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface VKPollAnswerInPoll : VKDomainDerived {
	VKPollAnswer* _answer;
}
@property(retain, nonatomic) VKPollAnswer* answer;
@property(retain, nonatomic) VKPoll* domain;
+(id)poll:(id)poll answer:(id)answer;
-(void).cxx_destruct;
-(BOOL)answered;
-(BOOL)active;
@end

__attribute__((visibility("hidden")))
@interface AppVolumeIndicatorView : XXUnknownSuperclass {
	BOOL _skipVolumeChange;
	float _progress;
	id _volumeButtonBlock;
	UIVisualEffectView* _blurBackgroundView;
	UIImageView* _unfilledTrackImageView;
	UIImageView* _filledTrackImageView;
	MPVolumeView* _volumeView;
}
@property(copy, nonatomic) id volumeButtonBlock;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) BOOL skipVolumeChange;
@property(retain, nonatomic) MPVolumeView* volumeView;
@property(retain, nonatomic) UIImageView* filledTrackImageView;
@property(retain, nonatomic) UIImageView* unfilledTrackImageView;
@property(retain, nonatomic) UIVisualEffectView* blurBackgroundView;
+(id)embedInViewController:(id)viewController;
-(void).cxx_destruct;
-(void)hideAnimated:(BOOL)animated;
-(void)showAndHideAfterDelay;
-(void)handleVolumeChange:(id)change;
-(id)trackImageViewWithTintColor:(id)tintColor;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(float)trackHeight;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistInlineCell : VKMCollectionCell <MultiImageLoaderDelegate> {
	VKMImageView* _image;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	VKMMultiImagePlaylistLoader* _multiloader;
	UIColor* _overlayColor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) UIColor* overlayColor;
@property(readonly, retain, nonatomic) VKMMultiImagePlaylistLoader* multiloader;
@property(readonly, retain, nonatomic) UILabel* subtitleLabel;
@property(readonly, retain, nonatomic) UILabel* titleLabel;
@property(readonly, retain, nonatomic) VKMImageView* image;
+(UIEdgeInsets)sectionInset;
+(float)interitemSpace;
+(CGSize)cellSize;
-(void).cxx_destruct;
-(void)forceExpandedPlaylistTitle:(id)title subtitle:(id)subtitle;
-(void)multiImageLoader:(id)loader complete:(id)complete;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutSubviews;
-(void)loadPlaylistImage:(id)image expectedReuse:(double)reuse;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(CGRect)imageFrame;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioController : VKMController {
	BOOL _dragging;
	VKAudioQueuePlayer* _queuePlayer;
	AVPlayer* _player;
	AVPlayerItem* _playerItem;
	id _observer;
	UILabel* _pos;
	UISlider* _seek;
	UILabel* _time;
	UILabel* _timeLeft;
	UIButton* _pp;
	UIButton* _prev;
	UIButton* _next;
	UILabel* _actor;
	UILabel* _song;
	UIButton* _shuffle;
	UIButton* _repeat;
	UIButton* _add;
	UIButton* _broadcast;
	UIButton* _turnOffAd;
}
@property(retain, nonatomic) VKAudioQueuePlayer* queuePlayer;
@property(assign, nonatomic) BOOL dragging;
@property(retain, nonatomic) UIButton* turnOffAd;
@property(retain, nonatomic) UIButton* broadcast;
@property(retain, nonatomic) UIButton* add;
@property(retain, nonatomic) UIButton* repeat;
@property(retain, nonatomic) UIButton* shuffle;
@property(retain, nonatomic) UILabel* song;
@property(retain, nonatomic) UILabel* actor;
@property(retain, nonatomic) UIButton* next;
@property(retain, nonatomic) UIButton* prev;
@property(retain, nonatomic) UIButton* pp;
@property(retain, nonatomic) UILabel* timeLeft;
@property(retain, nonatomic) UILabel* time;
@property(retain, nonatomic) UISlider* seek;
@property(retain, nonatomic) UILabel* pos;
@property(retain, nonatomic) id observer;
@property(retain) AVPlayerItem* playerItem;
@property(retain) AVPlayer* player;
+(id)audioNavigationForController:(id)controller;
+(id)alloc;
-(void).cxx_destruct;
-(void)playerChangedItem:(id)item;
-(void)playerUpdated:(id)updated;
-(void)actionBroadcast:(id)broadcast;
-(void)actionAdd:(id)add;
-(void)actionRepeat:(id)repeat;
-(void)actionShuffle:(id)shuffle;
-(void)actionPrev:(id)prev;
-(void)actionNext:(id)next;
-(void)actionPP:(id)pp;
-(void)seekMoved:(id)moved;
-(void)seekStopped:(id)stopped;
-(void)seekStarted:(id)started;
-(void)seeked:(id)seeked;
-(void)actionPlaylist:(id)playlist;
-(void)actionShowSubscriptionPromo:(id)promo;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)VKMControllerCustomized;
-(void)done:(id)done;
-(void)updateBroadcast;
-(void)updateShuffle;
-(void)update;
-(void)updateSeek;
-(void)attach:(id)attach;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface IOS7AudioController : AudioController {
	UIImageView* _cover;
	UIView* _hostView;
}
@property(retain, nonatomic) UIView* hostView;
@property(retain, nonatomic) UIImageView* cover;
-(void).cxx_destruct;
-(void)notificationArtwork:(id)artwork;
-(void)update;
-(void)attach:(id)attach;
-(void)updateCoverImage;
-(void)viewWillLayoutSubviews;
-(void)viewDidLoad;
-(int)VKMControllerStatusBarStyle;
-(BOOL)dark;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PhotoBrowsingModel : LoadingModel {
}
@property(retain, nonatomic) PhotoFeedContext* lastContext;
-(void)handleEditPhoto:(id)photo :(id)arg2;
-(void)handleDeletePhoto:(id)photo :(id)arg2;
-(void)handleLike:(id)like :(id)arg2;
-(void)handleAddComment:(id)comment :(id)arg2;
-(void)handleDeleteComment:(id)comment :(id)arg2;
-(void)handleComment:(id)comment offset:(int)offset :(id)arg3;
-(void)registerForEvents:(id)events;
-(id)total;
-(unsigned)startingIndex;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(BOOL)loadDetails:(id)details;
-(BOOL)loadPhotos:(id)photos;
-(id)setupPhotoContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PhotoBrowsingIndexUpdate : IndexUpdate {
}
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogOwnersListController : VKMLiveController {
}
-(BOOL)VKMRoute:(id)route context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface DocsAudioMessageUploadEditAttachment : UploadEditAttachment {
}
@property(retain, nonatomic) VKAudioMessage* domain;
@property(retain, nonatomic) DocsAudioMessageUploadContext* context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAppInfoExpand : ModelAction {
}
+(int)domainType;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAPAudioAlbumViewController : AudioListController <VKAPTabViewControllerProtocol> {
	BOOL searchWorkaroundEnabled;
	id _expandParent;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAPAudioAlbumModel* model;
@property(copy, nonatomic) id expandParent;
-(void).cxx_destruct;
-(id)scrollView;
-(BOOL)VKMScrollViewDisablePTR;
-(int)VKMTableSearchMode;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(void)VKMNavigationBarUpdate;
-(void)viewWillAppear:(BOOL)view;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(id)vkm_containerController;
-(void)searchControllerDidChangedActive:(id)searchController;
-(void)searchControllerChangedActive:(id)active;
@end

__attribute__((visibility("hidden")))
@interface VMPushToTalkController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	id<VMPushToTalkDelegate> _delegate;
	int _vkm_interfaceOrientation;
	float _keyboardHeight;
	VMPushToTalkThumbView* _thumbView;
	UIView* _timerDotView;
	UILabel* _timerLabel;
	UIButton* _cancelButton;
	UIButton* _slideToCancelButton;
	float _gestureLastX;
	float _gestureLastVelocity;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float keyboardHeight;
@property(assign, nonatomic) int vkm_interfaceOrientation;
@property(assign, nonatomic) __weak id<VMPushToTalkDelegate> delegate;
@property(assign, nonatomic) float gestureLastVelocity;
@property(assign, nonatomic) float gestureLastX;
@property(retain, nonatomic) UIButton* slideToCancelButton;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UILabel* timerLabel;
@property(retain, nonatomic) UIView* timerDotView;
@property(retain, nonatomic) VMPushToTalkThumbView* thumbView;
-(void).cxx_destruct;
-(void)hideAnimatedWithCompletition:(id)completition;
-(void)showAnimated;
-(void)actionBlankTap:(id)tap;
-(void)actionSend:(id)send;
-(void)actionCancel:(id)cancel;
-(void)releaseTouch;
-(void)updateVolume:(float)volume time:(double)time;
-(void)locationGesture:(id)gesture;
-(void)locateThumbAndTimerAtCenterX:(float)centerX;
-(float)thumbBaseCenterX;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AudioCoverImageView : VKMImageView {
	UIActivityIndicatorView* _activityView;
}
@property(retain, nonatomic) UIActivityIndicatorView* activityView;
-(void).cxx_destruct;
-(void)setImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface AudioPreviewController : VKMController <PopupWindowController> {
	BOOL stopped;
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	VKAudio* _audio;
	AudioCoverImageView* _imageView;
	UILabel* _titleLabel;
	UILabel* _artistLabel;
	UIButton* _button;
	AVPlayer* _player;
	id _observer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAudio* audio;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) id observer;
@property(retain, nonatomic) AVPlayer* player;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* artistLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) AudioCoverImageView* imageView;
@property(retain, nonatomic) PopupWindowView* view;
-(void).cxx_destruct;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(void)actionButton:(id)button;
-(void)playURL:(id)url stop:(BOOL)stop;
-(void)stop;
-(void)update;
-(void)notificationMatch:(id)match;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VKAPPlacesViewController : VKMLiveController <UITableViewDataSource, UITableViewDelegate, MKMapViewDelegate, CLLocationManagerDelegate, VKAPTabViewControllerProtocol> {
	BOOL _locationServicesDisabled;
	BOOL _mapInFullScreenMode;
	BOOL _pinMovedFromUserLocation;
	int _thumbSize;
	id _expandParent;
	id _setGestureState;
	id _locationAttachAction;
	CLLocationManager* _locationManager;
	CLLocation* _currentUserLocation;
	VKAPLocationStorage* _locationStorage;
	TGLocationAnnotation* _annotation;
	TGLocationAnnotation* _customAnnotation;
	UIView* _mapViewWrapper;
	TGLocationMapView* _mapView;
	UIView* _pickerPinWrapper;
	TGLocationPinView* _pickerPinView;
	CLGeocoder* _geocoder;
	UIButton* _locationButton;
	VKPPNoAccessView* _noAccessView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id locationAttachAction;
@property(copy, nonatomic) id setGestureState;
@property(copy, nonatomic) id expandParent;
@property(assign, nonatomic) int thumbSize;
@property(retain, nonatomic) PlacesSearchModel* model;
@property(retain, nonatomic) VKPPNoAccessView* noAccessView;
@property(retain, nonatomic) UIButton* locationButton;
@property(retain, nonatomic) CLGeocoder* geocoder;
@property(retain, nonatomic) TGLocationPinView* pickerPinView;
@property(retain, nonatomic) UIView* pickerPinWrapper;
@property(assign, nonatomic) BOOL pinMovedFromUserLocation;
@property(assign, nonatomic) BOOL mapInFullScreenMode;
@property(retain, nonatomic) TGLocationMapView* mapView;
@property(retain, nonatomic) UIView* mapViewWrapper;
@property(retain, nonatomic) TGLocationAnnotation* customAnnotation;
@property(retain, nonatomic) TGLocationAnnotation* annotation;
@property(retain, nonatomic) VKAPLocationStorage* locationStorage;
@property(retain, nonatomic) CLLocation* currentUserLocation;
@property(assign, nonatomic) BOOL locationServicesDisabled;
@property(retain, nonatomic) CLLocationManager* locationManager;
-(void).cxx_destruct;
-(void)sendCoordinate:(CLLocationCoordinate2D)coordinate;
-(void)sendLocation;
-(void)userLocationButtonPressed;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)layoutMap;
-(void)updateCurrentLocationButtonAlpha;
-(void)updatePickerPinMode;
-(void)pickerPinMode:(BOOL)mode;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)updateAnnotationWithCoordinate:(CLLocationCoordinate2D)coordinate;
-(void)switchToVenuesTableView;
-(void)switchToFullscreenMapAnimated:(BOOL)fullscreenMapAnimated;
-(void)updateCurrentLocationCell;
-(void)actionSettingsButton:(id)button;
-(void)updateNoAccessView;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(BOOL)requestWhenInUserLocationAuthorizationWithLocationManager:(id)locationManager;
-(XXStruct_zkbX1B)MKMapRectForCoordinateRegion:(XXStruct_zkbX1B)coordinateRegion;
-(void)setMapCenterCoordinate:(CLLocationCoordinate2D)coordinate span:(CLLocationCoordinate2D)span offset:(CGPoint)offset animated:(BOOL)animated;
-(void)setMapCenterCoordinate:(CLLocationCoordinate2D)coordinate animated:(BOOL)animated;
-(CLLocationCoordinate2D)mapCenterCoordinateForPickerPin;
-(void)pinPinView;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(void)setCurrentUserLocation:(id)location storeLocation:(BOOL)location2 updateMapView:(BOOL)view;
-(void)updatePlacesModel:(id)model;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(id)currentLocation;
-(void)hidePickerAnnotationAnimated:(bool)animated;
-(void)showPickerAnnotationAnimated:(bool)animated;
-(void)updatePickerAnnotation;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)vkApMinimized;
-(id)initWithMain:(id)main andModel:(id)model;
-(id)scrollView;
-(void)VKMControllerChromeInsetsApply;
-(int)VKMTableSearchMode;
-(BOOL)VKMScrollViewDisablePTR;
-(void)VKMNavigationBarUpdate;
@end

__attribute__((visibility("hidden")))
@interface PhotoFeedContext : ListModelContext {
	BOOL _isStreamContext;
	VKDomain<VKBrowsableImage>* _initialPhoto;
	NSArray* _photos;
	NSNumber* _photosTotal;
	NSDictionary* _pendingDetails;
	VKPhoto* _emptyPhoto;
	unsigned _initial;
	int _statsContext;
}
@property(assign, nonatomic) int statsContext;
@property(assign, nonatomic) BOOL isStreamContext;
@property(assign, nonatomic) unsigned initial;
@property(retain, nonatomic) VKPhoto* emptyPhoto;
@property(retain, nonatomic) NSDictionary* pendingDetails;
@property(retain, nonatomic) NSNumber* photosTotal;
@property(retain, nonatomic) NSArray* photos;
@property(retain, nonatomic) VKDomain<VKBrowsableImage>* initialPhoto;
+(id)contextForPhoto:(id)photo list:(id)list source:(id)source;
+(id)duplicate:(id)duplicate;
-(void).cxx_destruct;
-(id)parsePhotosData:(id)data;
-(BOOL)canContainPhotoIdentity:(id)identity;
-(id)codeForNextPage;
-(void)spawnCopy:(id)copy;
-(BOOL)reorderPhoto:(id)photo after:(id)after before:(id)before;
-(BOOL)removePhotosWithIdentity:(id)identity;
-(void)prepend:(id)prepend;
-(void)addPhotos:(id)photos withData:(id)data;
-(void)addPhotos:(id)photos;
-(void)setupInitial:(id)initial;
@end

__attribute__((visibility("hidden")))
@interface AlbumPhotoFeedContext : PhotoFeedContext {
	BOOL _updatedAlbum;
	BOOL _forceIsAdultCheck;
	BOOL _strongOrder;
	VKPhotoAlbum* _album;
}
@property(assign, nonatomic) BOOL strongOrder;
@property(assign, nonatomic) BOOL forceIsAdultCheck;
@property(assign, nonatomic) BOOL updatedAlbum;
@property(retain, nonatomic) VKPhotoAlbum* album;
+(id)requestForType:(int)type aid:(id)aid owner:(id)owner offset:(int)offset count:(int)count rev:(BOOL)rev forceIsAdultCheck:(BOOL)check;
+(id)requestForType:(int)type aid:(id)aid owner:(id)owner offset:(int)offset count:(int)count rev:(BOOL)rev;
+(id)contextForProfilePhotos:(id)profilePhotos;
-(void).cxx_destruct;
-(BOOL)isStrongOrderAvailable;
-(BOOL)canContainPhotoIdentity:(id)identity;
-(id)codeForNextPage;
-(void)spawnCopy:(id)copy;
-(void)updateAlbum:(id)album;
@end

__attribute__((visibility("hidden")))
@interface StaticPhotoFeedContext : PhotoFeedContext {
}
+(id)contextWithPhotos:(id)photos;
-(BOOL)shouldLoad:(int)load;
@end

__attribute__((visibility("hidden")))
@interface NewsPhotoFeedContext : PhotoFeedContext {
	VKFeedPhoto* _feed;
}
@property(retain, nonatomic) VKFeedPhoto* feed;
+(id)contextWithFeedPhoto:(id)feedPhoto;
-(void).cxx_destruct;
-(BOOL)canContainPhotoIdentity:(id)identity;
-(id)codeForNextPage;
-(void)spawnCopy:(id)copy;
-(void)addPhotos:(id)photos;
@end

__attribute__((visibility("hidden")))
@interface AppBaseController : VKMLiveController <ApplicationModelDelegate> {
	BOOL tracked;
	AppFriendsInviter* _friendsInviter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ApplicationModel* model;
@property(retain, nonatomic) AppFriendsInviter* friendsInviter;
-(void).cxx_destruct;
-(id)actionContextForApplicationModel:(id)applicationModel;
-(void)actionsButtonTapped:(id)tapped;
-(void)model:(id)model updated:(id)updated;
-(BOOL)route:(id)route;
-(void)openFriendsSelectionScreenForApp:(id)app;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)VKMTableStyle;
-(int)VKMTableSearchMode;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PhotoBrowserController : VKMController <UIGestureRecognizerDelegate, PhotoHostViewDelegate, UIScrollViewDelegate, LayoutAwareViewDelegate, NavWindowPresenterController> {
	BOOL dirty;
	BOOL skipScroll;
	unsigned currentPage;
	BOOL appearAnimated;
	BOOL appearFromThumbnail;
	id<VKImage> _single;
	NavWindowPresenter* _windowPresenter;
	NSArray* _photos;
	LayoutAwareView* _rootView;
	UIScrollView* _paging;
	NSArray* _hosts;
	PhotoHostView* _animatingHostView;
	UIToolbar* _toolbar;
	NSArray* _photoToolbarItems;
	NSArray* _gifToolbarItems;
	UIBarButtonItem* _actionBarButtonItem;
	UIButton* _buttonLike;
	UIButton* _buttonComment;
	UIButton* _buttonTag;
	UIButton* _buttonGifAdd;
	Component5HostView* _descr;
	UILabel* _titleLabel;
	UIImageView* _descrShadow;
	int _deviceOrientation;
	UITapGestureRecognizer* _doubleTapRecoginizer;
	UIPanGestureRecognizer* _panGesture;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NavWindowPresenter* windowPresenter;
@property(retain, nonatomic) id<VKImage> single;
@property(retain, nonatomic) PhotoBrowsingModel* model;
@property(retain, nonatomic) UIPanGestureRecognizer* panGesture;
@property(retain, nonatomic) UITapGestureRecognizer* doubleTapRecoginizer;
@property(assign, nonatomic) int deviceOrientation;
@property(retain, nonatomic) UIImageView* descrShadow;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) Component5HostView* descr;
@property(retain, nonatomic) UIButton* buttonGifAdd;
@property(retain, nonatomic) UIButton* buttonTag;
@property(retain, nonatomic) UIButton* buttonComment;
@property(retain, nonatomic) UIButton* buttonLike;
@property(retain, nonatomic) UIBarButtonItem* actionBarButtonItem;
@property(retain, nonatomic) NSArray* gifToolbarItems;
@property(retain, nonatomic) NSArray* photoToolbarItems;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) PhotoHostView* animatingHostView;
@property(retain, nonatomic) NSArray* hosts;
@property(retain, nonatomic) UIScrollView* paging;
@property(retain, nonatomic) LayoutAwareView* rootView;
@property(retain, nonatomic) NSArray* photos;
-(void).cxx_destruct;
-(id)VKMControllerStatsRef;
-(void)photoHost:(id)host didPlayGif:(id)gif;
-(void)photoHostViewDidZoom:(id)photoHostView;
-(void)notificationWillResignActive:(id)notification;
-(void)gesturePan:(id)pan;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)markAppearFromThumbnail;
-(void)markAppearAnimated;
-(void)windowPresenterAnimateOut:(id)anOut animateWindow:(BOOL)window complete:(id)complete;
-(void)windowPresenterAnimateIn:(id)anIn complete:(id)complete;
-(void)renderHostWindowTint:(int)tint zoom:(BOOL)zoom background:(BOOL)background;
-(void)animateWithPresenter:(id)presenter block:(id)block;
-(UIEdgeInsets)photoHostHudInsetsWhenToolbarVisible:(BOOL)visible;
-(void)chromeToggle;
-(void)chromeHide;
-(void)chrome:(BOOL)chrome animated:(BOOL)animated;
-(void)chromeHideDelay:(double)delay;
-(void)chromeClear;
-(BOOL)chromeHidden;
-(void)actionAction:(id)action;
-(void)actionGifShare:(id)share;
-(void)actionGifAdd:(id)add;
-(void)actionTag:(id)tag;
-(void)actionComment:(id)comment;
-(void)openPhoto;
-(void)actionLike:(id)like;
-(void)animateLike:(BOOL)like;
-(void)gestureDoubleTap:(id)tap;
-(void)gestureTap:(id)tap;
-(void)actionPresenterClose:(id)close;
-(void)layoutAwareViewDidLayout:(id)layoutAwareView;
-(BOOL)canUseMaxQuality;
-(void)scrollToPage;
-(void)tile;
-(void)layoutPages;
-(void)updateScrollFrame;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)model:(id)model updated:(id)updated;
-(void)updateDetail;
-(void)updateTitle;
-(void)switchedToPage:(unsigned)page;
-(id)photoForPage:(unsigned)page;
-(id)hostViewForPage:(unsigned)page;
-(id)modelPhotos;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(id)VKMNavigationBarTintColor;
-(id)VKMNavigationBarBarTintColor;
-(BOOL)VKMNavigationBarTranslucent;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(BOOL)route:(id)route;
-(void)updateToolbar:(BOOL)toolbar;
-(void)updateRightBarButtonItem:(BOOL)item;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(BOOL)dark;
-(void)enablePresenter;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface PhotoBrowserWindowContext : XXUnknownSuperclass <NavWindowPresenterContext> {
	NSArray* _thumbnails;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* thumbnails;
-(void).cxx_destruct;
-(BOOL)hasThumbnails;
@end

__attribute__((visibility("hidden")))
@interface PhotoHostView : XXUnknownSuperclass <AutoplayedVideoViewDelegate, UIScrollViewDelegate, TrackingBoundsView> {
	BOOL dirty;
	BOOL loadedInitial;
	BOOL shouldUpdateVariant;
	BOOL zoomWillBeginDisabled;
	id<PhotoHostViewDelegate> _delegate;
	UIScrollView* _scrollView;
	UIImageView* _image;
	AutoplayedGifView* _gifView;
	UIActivityIndicatorView* _animation;
	float _maxRatio;
	VKImageVariant* _currentVariant;
	float _trackingBoundsPercentsVisible;
	id<VKBrowsableImage> _renderedImage;
	VKImageVariant* _initialVariant;
	VKImageVariant* _maxVariant;
	PhotoHostProgressView* _progressView;
	AFImageRequestOperation* _imageOperation;
	UIEdgeInsets _progressViewInset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) UIEdgeInsets progressViewInset;
@property(assign, nonatomic) float trackingBoundsPercentsVisible;
@property(assign, nonatomic) float maxRatio;
@property(retain, nonatomic) UIActivityIndicatorView* animation;
@property(retain, nonatomic) AutoplayedGifView* gifView;
@property(retain, nonatomic) UIImageView* image;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) __weak id<PhotoHostViewDelegate> delegate;
@property(retain, nonatomic) AFImageRequestOperation* imageOperation;
@property(retain, nonatomic) PhotoHostProgressView* progressView;
@property(retain, nonatomic) VKImageVariant* maxVariant;
@property(retain, nonatomic) VKImageVariant* currentVariant;
@property(retain, nonatomic) VKImageVariant* initialVariant;
@property(retain, nonatomic) id<VKBrowsableImage> renderedImage;
-(void).cxx_destruct;
-(id)navDelegate;
-(void)videoViewBecameHidden:(id)hidden;
-(BOOL)videoViewToggleFullscreen:(id)fullscreen;
-(void)videoViewDidStartPlaying:(id)videoView;
-(void)videoViewDidFinishLoading:(id)videoView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)markAsPresenting;
-(void)viewTrackingBoundsDidChange:(float)viewTrackingBounds previousValue:(float)value;
-(void)render:(id)render finalImage:(BOOL)image;
-(void)completeImage:(id)image;
-(void)refreshVariant:(BOOL)variant;
-(void)load:(id)load delay:(float)delay maxQuality:(BOOL)quality;
-(void)loadVariant:(id)variant delay:(float)delay;
-(void)loadVariant:(id)variant;
-(void)loadImage;
-(void)reuse;
-(void)zoomTo:(CGPoint)to;
-(void)layoutProgressView;
-(void)layout;
-(void)alignScrollView;
-(void)prepareGifView;
-(void)usePlaceholderImageIfNeeded:(id)needed sizeType:(int)type;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PhotoHostProgressView : XXUnknownSuperclass {
	float _progress;
	BOOL _annular;
	UIActivityIndicatorView* _indeterminateActivity;
}
@property(assign, nonatomic, getter=isAnnular) BOOL annular;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UIActivityIndicatorView* indeterminateActivity;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)setIndeterminate:(BOOL)indeterminate;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LayoutAwareView : XXUnknownSuperclass {
	/*function-pointer*/ void* _layoutFunc;
	id _layoutBlock;
	id<LayoutAwareViewDelegate> _layoutDelegate;
}
@property(assign, nonatomic) __weak id<LayoutAwareViewDelegate> layoutDelegate;
@property(copy, nonatomic) id layoutBlock;
@property(assign, nonatomic) /*function-pointer*/ void* layoutFunc;
-(void).cxx_destruct;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface AudioBlockCellWithCollectionView : VKMCell <UICollectionViewDataSource, UICollectionViewDelegate> {
	AudioBlockCellHeaderView* _headerView;
	UICollectionView* _collectionView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) AudioBlockCellHeaderView* headerView;
@property(retain, nonatomic) AudioBlock* domain;
@property(retain, nonatomic) UICollectionView* collectionView;
+(void)prerender:(id)prerender;
+(float)interitemDistance;
+(Class)collectionCellClass;
-(void).cxx_destruct;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(id)itemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)actionShowAllButton:(id)button;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ToolbarBuilder : XXUnknownSuperclass {
	NSMutableArray* _items;
	UIBarButtonItem* _flex;
}
@property(retain, nonatomic) NSMutableArray* items;
@property(retain, nonatomic) UIBarButtonItem* flex;
+(id)builder;
-(void).cxx_destruct;
-(id)flexible;
-(id)fixed:(float)fixed;
-(id)add:(id)add size:(float)size;
-(id)add:(id)add;
-(void)clear;
-(id)build:(CGRect)build;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchModel : SearchModel {
}
-(id)process:(id)process;
-(int)searchPageSize:(BOOL)size;
-(id)parameters:(id)parameters;
-(id)method;
-(id)searchScopes;
-(id)countKey;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VideoSearchModel : SearchModel {
}
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)process:(id)process;
-(id)parameters:(id)parameters;
-(id)method;
-(id)searchScopes;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface MasksPageController : XXUnknownSuperclass <UIPageViewControllerDataSource, UIPageViewControllerDelegate, ModelObserver, MasksSectionControllerDelegate> {
	id<MasksPageControllerDelegate> _masksDelegate;
	MaskLoader* _maskLoader;
	MasksSectionsLocationInfo* _masksSectionsLocationInfo;
	MainModel* _main;
	MasksSectionsModel* _sectionsModel;
	MasksRecentModel* _recentModel;
	NSArray* _controllers;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MasksSectionsLocationInfo* masksSectionsLocationInfo;
@property(retain, nonatomic) MaskLoader* maskLoader;
@property(assign, nonatomic) __weak id<MasksPageControllerDelegate> masksDelegate;
@property(retain, nonatomic) NSArray* controllers;
@property(retain, nonatomic) MasksRecentModel* recentModel;
@property(retain, nonatomic) MasksSectionsModel* sectionsModel;
@property(retain, nonatomic) MainModel* main;
-(void).cxx_destruct;
-(void)moveToSection:(id)section;
-(void)masksSectionController:(id)controller didSelectMask:(id)mask;
-(void)pageViewController:(id)controller didFinishAnimating:(BOOL)animating previousViewControllers:(id)controllers transitionCompleted:(BOOL)completed;
-(void)pageViewController:(id)controller willTransitionToViewControllers:(id)viewControllers;
-(id)pageViewController:(id)controller viewControllerAfterViewController:(id)controller2;
-(id)pageViewController:(id)controller viewControllerBeforeViewController:(id)controller2;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)updateControllers;
-(void)model:(id)model updated:(id)updated;
-(id)modelForSectionId:(id)sectionId;
-(void)viewDidLoad;
-(id)initWithMain:(id)main sectionsModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsModel : Model {
}
-(void)viewed:(id)viewed;
-(BOOL)requireViewed;
-(void)updateBuilder:(id)builder enumerateAdsItem:(id)item withBlock:(id)block;
-(void)updateBuilder:(id)builder removeAdsItem:(id)item;
-(void)handleReportAds:(id)ads :(id)arg2;
-(void)handleHideAds:(id)ads :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)isForegroundModelForEventContext:(id)eventContext;
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsCollectionViewComponentState : UICollectionViewComponentState {
	VKFeedAds* _ads;
}
@property(retain, nonatomic) VKFeedAds* ads;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsCollectionViewComponentController : UICollectionViewModelComponentController <PromotedApplicationsModelDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PromotedApplicationsCollectionViewComponent* component;
+(Class)modelClass;
-(void)model:(id)model didDeleteAdsItem:(id)item;
-(void)model:(id)model updated:(id)updated;
-(void)checkEmptiness;
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsCollectionViewComponent : UICollectionViewModelComponent {
}
@property(retain, nonatomic) PromotedApplicationsCollectionViewComponentState* state;
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsCollectionViewComponentSingle : PromotedApplicationsCollectionViewComponent {
}
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsCollectionViewComponentSingleController : PromotedApplicationsCollectionViewComponentController {
}
+(id)createLayout;
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsCollectionViewComponentScroll : PromotedApplicationsCollectionViewComponent {
}
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsCollectionViewComponentScrollController : PromotedApplicationsCollectionViewComponentController {
}
+(id)createLayout;
@end

__attribute__((visibility("hidden")))
@interface PromotedApplicationsComponent : Component5 {
}
+(id)ads:(id)ads;
-(id)nodeForState:(id)state context:(id)context;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface StoreProductCell : VKMCell {
	VKMImageView* _image;
}
@property(retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface BoardModelContext : ListModelContext {
	BOOL _can_edit_topics;
	BOOL _can_create_topic;
}
@property(assign, nonatomic) BOOL can_create_topic;
@property(assign, nonatomic) BOOL can_edit_topics;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface BoardModel : LoadingModel {
}
@property(retain, nonatomic) BoardModelContext* lastContext;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(BOOL)isOwnerTopic:(id)topic;
-(void)registerForEvents:(id)events;
-(BOOL)shouldLoad:(id)load;
-(id)topicsRender:(id)render;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface VKAPBottomToolbar : XXUnknownSuperclass {
	VKAPModel* _model;
	UIView* _hostView;
	UIToolbar* _bg;
	VKPPBadge* _badge;
	UIButton* _doneButton;
	UIButton* _closeButton;
}
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UIButton* doneButton;
@property(retain, nonatomic) VKAPModel* model;
@property(retain, nonatomic) VKPPBadge* badge;
@property(readonly, assign, nonatomic) UIToolbar* bg;
@property(readonly, assign, nonatomic) UIView* hostView;
-(void).cxx_destruct;
-(void)layoutToolbarInSuperView;
-(void)done;
-(void)cancel;
-(void)setDoneButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)updateSelectionAnimated:(BOOL)animated count:(int)count;
-(void)notificationSelectLimit;
-(void)layoutSubviews;
-(id)initWithModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VKRequestBuilder : XXUnknownSuperclass {
	NSString* _method;
	NSMutableDictionary* _p;
	NSMutableArray* _vars;
}
@property(retain, nonatomic) NSMutableDictionary* p;
@property(retain, nonatomic) NSString* method;
@property(retain, nonatomic) NSMutableArray* vars;
+(id)usersGroupsListsFrom:(id)from userFields:(id)fields groupFields:(id)fields3;
+(id)remoteSource:(id)source var:(id)var;
+(id)users:(id)users fields:(id)fields;
+(id)user:(id)user fields:(id)fields;
+(id)source:(id)source;
+(id)source:(id)source fieldsUser:(id)user fieldsGroup:(id)group nameCase:(id)aCase;
+(id)builderWithRequest:(id)request;
+(id)builder;
-(void).cxx_destruct;
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)version:(int)version;
-(id)addExtended;
-(id)addiOSPlatform;
-(id)ref:(id)ref;
-(id)context:(id)context;
-(id)typeIdentity:(id)identity;
-(id)fields:(id)fields;
-(id):(id)arg1 text:(id)text;
-(id)trackCode:(id)code;
-(id)accessKey:(id)key;
-(id)ownerSource:(id)source;
-(id)owner:(id)owner;
-(id):(id)arg1 f:(id)f;
-(id)extended;
-(id)photoSizes;
-(id)count:(int)count;
-(id)offset:(int)offset;
-(id)dict:(id)dict;
-(id)escapeVars:(id)vars;
-(id)p:(id)p varName:(id)name;
-(id)p:(id)p v:(id)v;
-(id):(id)arg1 :(id)arg2;
-(id)method:(id)method;
-(id)buildCode;
-(id)buildCodeFormat:(id)format;
-(id)build;
-(id)build:(id)build;
@end

__attribute__((visibility("hidden")))
@interface VKExecuteBuilder : VKRequestBuilder {
	NSMutableString* _c;
}
@property(retain, nonatomic) NSMutableString* c;
+(id)builder;
-(void).cxx_destruct;
-(id)counters:(id)counters;
-(id)key:(id)key req:(id)req;
-(id):(id)arg1 req:(id)req;
-(id):(id)arg1 code:(id)code;
-(id)var:(id)var reqCode:(id)code;
-(id)var:(id)var req:(id)req;
-(id)user:(id)user uid:(id)uid;
-(id)serverTime:(id)time;
-(id)f:(id)f;
-(id):(id)arg1;
-(id)buildWithReturnValue:(id)returnValue;
-(id)buildWithArgs:(id)args;
-(id)build;
@end

__attribute__((visibility("hidden")))
@interface TextComponentState : XXUnknownSuperclass {
	VKRenderedText* _text;
	UIColor* _backgroundColor;
}
@property(retain, nonatomic) UIColor* backgroundColor;
@property(retain, nonatomic) VKRenderedText* text;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ComputedTextSettings : XXUnknownSuperclass <NSCopying> {
	NSAttributedString* _attributedText;
	unsigned _maximumNumberOfLines;
	unsigned _minimumNumberOfLines;
	int _alignment;
	UIColor* _backgroundColor;
}
@property(retain, nonatomic) UIColor* backgroundColor;
@property(assign, nonatomic) int alignment;
@property(assign, nonatomic) unsigned minimumNumberOfLines;
@property(assign, nonatomic) unsigned maximumNumberOfLines;
@property(copy, nonatomic) NSAttributedString* attributedText;
-(void).cxx_destruct;
-(id)copyWithNewText:(id)newText;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface TextComponentNode : Component5Node {
	VKRenderedText* _renderedText;
	UIColor* _backgroundColor;
}
@property(retain, nonatomic) TextComponent* component;
@property(retain, nonatomic) UIColor* backgroundColor;
@property(retain, nonatomic) VKRenderedText* renderedText;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface TextComponent : Component5 {
}
@property(retain, nonatomic) TextComponentState* state;
+(id)textWithSettings:(id)settings;
+(id)text:(id)text;
+(id)computedTextWithString:(id)string context:(id)context;
+(id)computedTextWithString:(id)string numberOfLines:(unsigned)lines alignment:(int)alignment context:(id)context;
+(id)computedTextWithString:(id)string numberOfLines:(unsigned)lines context:(id)context;
+(id)computedTextWithSettings:(id)settings context:(id)context;
+(id)computedTextWithString:(id)string numberOfLines:(unsigned)lines alignment:(int)alignment;
+(id)computedTextWithString:(id)string numberOfLines:(unsigned)lines;
+(id)computedTextWithString:(id)string;
+(id)computedTextWithSettings:(id)settings;
+(Class)nodeClass;
-(id)componentByAppendingComponent:(id)component;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TextComponentController : Component5Controller {
}
@property(retain, nonatomic) TextComponentNode* node;
@property(assign, nonatomic) __weak TextKitLabelInteractive* view;
@property(retain, nonatomic) TextComponent* component;
+(id)createView;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface TextComponentInteractive : TextComponent {
	BOOL _allowsCopying;
}
@property(assign, nonatomic) BOOL allowsCopying;
@end

__attribute__((visibility("hidden")))
@interface TextComponentInteractiveController : TextComponentController <TextKitLabelInteractiveDefaultBehaviorDelegate> {
	TextKitLabelInteractiveDefaultBehavior* _defaultLabelDelegate;
	id<TextKitLabelDelegate> _labelDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<TextKitLabelDelegate> labelDelegate;
@property(readonly, assign, nonatomic) TextKitLabelInteractiveDefaultBehavior* defaultLabelDelegate;
@property(retain, nonatomic) TextComponentInteractive* component;
+(id)createView;
-(void).cxx_destruct;
-(id)currentNavDelegate;
-(id)initWithView:(id)view context:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface TextViewComponentState : XXUnknownSuperclass {
	NSAttributedString* _text;
	unsigned _dataDetectorTypes;
	float _lineFragmentPadding;
	UIEdgeInsets _contentInset;
}
@property(assign, nonatomic) float lineFragmentPadding;
@property(assign, nonatomic) UIEdgeInsets contentInset;
@property(assign, nonatomic) unsigned dataDetectorTypes;
@property(retain, nonatomic) NSAttributedString* text;
+(id)text:(id)text;
+(id)text:(id)text dataDetectorTypes:(unsigned)types contentInset:(UIEdgeInsets)inset;
-(void).cxx_destruct;
-(id)initWithText:(id)text dataDetectorTypes:(unsigned)types contentInset:(UIEdgeInsets)inset;
@end

__attribute__((visibility("hidden")))
@interface TextViewComponent : Component5 {
}
@property(retain, nonatomic) TextViewComponentState* state;
+(id)defaultTextViewComponentWithText:(id)text;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TextViewComponentController : Component5Controller <UITextViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) TextViewComponent* component;
@property(readonly, assign, nonatomic) __weak UITextView* view;
+(id)createView;
-(void)setNode:(id)node;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelContext : XXUnknownSuperclass {
	BOOL _complete;
	BOOL _allowCacheLoad;
	unsigned _count;
	IndexUpdate* _indexUpdate;
	NSDictionary* _lastErrors;
	NSDate* _startDate;
	NSDate* _endDate;
}
@property(retain, nonatomic) NSDate* endDate;
@property(retain, nonatomic) NSDate* startDate;
@property(assign, nonatomic) BOOL allowCacheLoad;
@property(retain, nonatomic) NSDictionary* lastErrors;
@property(retain, nonatomic) IndexUpdate* indexUpdate;
@property(assign, nonatomic) unsigned count;
@property(assign, nonatomic) BOOL complete;
+(id)spawn:(id)spawn;
+(id)spawn:(id)spawn setup:(id)setup;
+(id)spawn:(id)spawn handle:(id)handle;
-(void).cxx_destruct;
-(void)offsetCount:(int)count;
-(void)spawnCopy:(id)copy;
-(void)spawnSetup:(id)setup;
@end

__attribute__((visibility("hidden")))
@interface ListModelContext : ModelContext {
	int _offset;
	int _page;
	NSNumber* _total;
	int _loaded;
}
@property(assign, nonatomic) int loaded;
@property(retain, nonatomic) NSNumber* total;
@property(assign, nonatomic) int page;
@property(assign, nonatomic) int offset;
-(void).cxx_destruct;
-(BOOL)shouldLoad:(int)load;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface RangeModelContext : ModelContext {
	unsigned _page;
	unsigned _total;
	int _initialTarget;
	int _expand;
	NSRange _initial;
	NSRange _loaded;
}
@property(assign, nonatomic) int expand;
@property(assign, nonatomic) NSRange loaded;
@property(assign, nonatomic) int initialTarget;
@property(assign, nonatomic) NSRange initial;
@property(assign, nonatomic) unsigned total;
@property(assign, nonatomic) unsigned page;
-(void)updateForLoaded:(int)loaded total:(int)total;
-(NSRange)rangeForExpand;
-(int)expandForDiscovered:(int)discovered;
-(BOOL)isLastPageTarget;
-(BOOL)isLoaded;
-(void)spawnCopy:(id)copy;
-(void)spawnSetup:(id)setup;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface WholePath : XXUnknownSuperclass {
	UIColor* _color;
	UIBezierPath* _path;
}
@property(retain, nonatomic) UIBezierPath* path;
@property(retain, nonatomic) UIColor* color;
+(id)withColor:(id)color path:(id)path;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface SketchDrawView : XXUnknownSuperclass {
	id<SketchDrawViewDelegate> _delegate;
	UIColor* _brushColor;
	float _brushWidth;
	UIImage* _cachedImage;
	NSMutableArray* _currentPoints;
	UIBezierPath* _currentPath;
	NSMutableArray* _wholePaths;
}
@property(assign, nonatomic) float brushWidth;
@property(retain, nonatomic) UIColor* brushColor;
@property(assign, nonatomic) __weak id<SketchDrawViewDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* wholePaths;
@property(retain, nonatomic) UIBezierPath* currentPath;
@property(retain, nonatomic) NSMutableArray* currentPoints;
@property(retain, nonatomic) UIImage* cachedImage;
-(void).cxx_destruct;
-(void)finishDrawingAtPoint:(CGPoint)point;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(CGRect)calculateEnclosingFrame;
-(id)renderEnclosingImage;
-(void)clearAll;
-(void)undo;
-(BOOL)hasAnyToErase;
-(BOOL)hasAnyToUndo;
-(BOOL)hasAnyToSend;
-(void)drawRect:(CGRect)rect;
-(void)updateCachedImage;
-(void)processTouchIsLast:(BOOL)last;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface BoardController : VKMLiveController {
}
@property(retain, nonatomic) BoardModel* model;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(BOOL)canDeleteTopic:(id)topic;
-(id)topicAtIndexPath:(id)indexPath;
-(void)actionAdd:(id)add;
-(void)VKMTableUpdatedIndex;
-(void)viewDidLoad;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface SportMatch : VKRenderable {
	BOOL _live;
	SportTeam* _teamA;
	SportTeam* _teamB;
	SportScore* _score;
	NSString* _state;
	id<VKRemoteAction> _live_action;
	VKRemoteImageAssetGroup* _icon;
}
@property(retain, nonatomic) VKRemoteImageAssetGroup* icon;
@property(retain, nonatomic) id<VKRemoteAction> live_action;
@property(assign, nonatomic, getter=isLive) BOOL live;
@property(retain, nonatomic) NSString* state;
@property(retain, nonatomic) SportScore* score;
@property(retain, nonatomic) SportTeam* teamB;
@property(retain, nonatomic) SportTeam* teamA;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAdAudioPlayer : XXUnknownSuperclass <MTRGInstreamAudioAdPlayer> {
	BOOL _playing;
	id<MTRGInstreamAudioAdPlayerDelegate> adPlayerDelegate;
	float volume;
	AVPlayer* _player;
	AVPlayerItem* _playerItem;
	double adAudioTimeElapsed;
	double adAudioDuration;
}
@property(assign, nonatomic) float volume;
@property(assign, nonatomic) __weak id<MTRGInstreamAudioAdPlayerDelegate> adPlayerDelegate;
@property(readonly, assign, nonatomic) double adAudioTimeElapsed;
@property(readonly, assign, nonatomic) double adAudioDuration;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain) AVPlayerItem* playerItem;
@property(retain) AVPlayer* player;
@property(assign, nonatomic) BOOL playing;
-(void).cxx_destruct;
-(void)startPlayback;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)stopAdAudio;
-(void)resumeAdAudio;
-(void)pauseAdAudio;
-(void)playAdAudioWithUrl:(id)url;
@end

__attribute__((visibility("hidden")))
@interface VKAPAudioSearchModel : AudioSearchModel {
}
-(id)process:(id)process;
@end

__attribute__((visibility("hidden")))
@interface TopicModelContext : RangeModelContext {
	VKTopic* _topic;
	VKPoll* _poll;
}
@property(retain, nonatomic) VKPoll* poll;
@property(retain, nonatomic) VKTopic* topic;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface TopicModel : LoadingModel {
	NSNumber* _tid;
	int _targetOffset;
	NSRange _targetRange;
}
@property(assign, nonatomic) int targetOffset;
@property(assign, nonatomic) NSRange targetRange;
@property(retain, nonatomic) NSNumber* tid;
@property(retain, nonatomic) TopicModelContext* lastContext;
+(id)topicComments:(id)comments tid:(id)tid bottom:(BOOL)bottom offset:(int)offset count:(int)count;
-(void).cxx_destruct;
-(void)handleEdit:(id)edit :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(BOOL)isTopicComment:(id)comment;
-(void)registerForEvents:(id)events;
-(id)topicIdentity;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)setupOffset:(int)offset;
-(id)setupTopic:(id)topic;
-(id)setupTid:(id)tid owner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface AudioDashboardAddPlaylist : VKDomain {
}
-(float)renderHeight;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface TopicController : FeedController {
	LoadingFooterView* _topFooter;
	UIRefreshControl* _bottomRefresh;
}
@property(retain, nonatomic) TopicModel* model;
@property(retain, nonatomic) UIRefreshControl* bottomRefresh;
@property(retain, nonatomic) LoadingFooterView* topFooter;
-(void).cxx_destruct;
-(void)model:(id)model updated:(id)updated;
-(void)updateTitle;
-(void)updateTopFooter;
-(id)VKMControllerStatsRef;
-(void)VKMScrollViewRefreshLoading;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionCompose:(id)compose;
-(void)actionBottomReset:(id)reset;
-(void)VKMScrollViewHasLoaded;
-(void)viewDidLoad;
-(float)VKMTableCellSeparatorInsetForIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)VKMTableStyle;
-(Class)VKMTableViewClass;
@end

__attribute__((visibility("hidden")))
@interface HighlightableBackgroundButton : XXUnknownSuperclass {
	NSMutableDictionary* _backgroundColorsForState;
}
@property(retain, nonatomic) NSMutableDictionary* backgroundColorsForState;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)updateBackgroundColor;
-(void)setBackgroundColor:(id)color forState:(unsigned)state;
@end

__attribute__((visibility("hidden")))
@interface MaskCollectionCell : VKMCollectionCell <MaskLoaderObserver> {
	MaskLoader* _maskLoader;
	VKMImageView* _imageView;
	UIImageView* _disabledImageView;
	UIImageView* _downloadIconImageView;
	UIImageView* _selectionView;
}
@property(retain, nonatomic) MaskLoader* maskLoader;
@property(retain, nonatomic) VKMask* domain;
@property(retain, nonatomic) UIImageView* selectionView;
@property(retain, nonatomic) UIImageView* downloadIconImageView;
@property(retain, nonatomic) UIImageView* disabledImageView;
@property(retain, nonatomic) VKMImageView* imageView;
-(void).cxx_destruct;
-(void)maskLoader:(id)loader masksCacheCleanedMaskWithIden:(id)iden;
-(void)maskLoader:(id)loader canceledLoadingMask:(id)mask;
-(void)maskLoader:(id)loader finishLoadingMask:(id)mask;
-(void)maskLoader:(id)loader failedLoadingMask:(id)mask;
-(void)maskLoader:(id)loader loadingMask:(id)mask updatedProgress:(id)progress;
-(void)maskLoader:(id)loader startLoadingMask:(id)mask;
-(void)maskLoader:(id)loader changeCurrentMask:(id)mask;
-(void)updateDownloadIconVisibility;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKLiveVideoSettings : VKRenderable {
	BOOL _enabled;
	BOOL _notificationsBlocked;
}
@property(assign, nonatomic) BOOL notificationsBlocked;
@property(assign, nonatomic) BOOL enabled;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKRenderable : XXUnknownSuperclass <VKRenderable> {
	id _render;
	float _renderHeight;
	float _renderWidth;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float renderWidth;
@property(assign, nonatomic) float renderHeight;
@property(retain, nonatomic) id render;
+(id)safe:(id)safe;
+(id)parse:(id)parse context:(id)context;
+(id)parse:(id)parse;
+(id)parseIfNotNil:(id)aNil;
+(id)clear;
-(void).cxx_destruct;
-(id)domainData;
-(void)writeData:(id)data;
-(BOOL)process:(id)process context:(id)context;
-(id)prerender;
-(Class)cellClass;
-(Class)rendererClass;
-(BOOL)isEqualItemId:(id)anId;
-(BOOL)isEqualIdentity:(id)identity;
@end

__attribute__((visibility("hidden")))
@interface RenderedObject : XXUnknownSuperclass {
	id _object;
	Component5Node* _node;
	RenderLayout* _render;
	float _forceCellInset;
	CGSize _size;
}
@property(assign, nonatomic) float forceCellInset;
@property(readonly, assign, nonatomic) float height;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, retain, nonatomic) RenderLayout* render;
@property(readonly, retain, nonatomic) Component5Node* node;
@property(readonly, retain, nonatomic) id object;
+(id)object:(id)object withSize:(CGSize)size;
+(id)object:(id)object withRenderLayout:(id)renderLayout;
+(id)object:(id)object withNode:(id)node;
-(void).cxx_destruct;
-(id)initWithObject:(id)object size:(CGSize)size;
-(id)initWithObject:(id)object renderLayout:(id)layout;
-(id)initWithObject:(id)object node:(id)node;
@end

__attribute__((visibility("hidden")))
@interface VKMultinameUser : VKUser {
	NSString* _first_name_dat;
	NSString* _last_name_dat;
	NSString* _first_name_ins;
	NSString* _last_name_ins;
	NSString* _first_name_abl;
	NSString* _last_name_abl;
}
@property(retain, nonatomic) NSString* last_name_abl;
@property(retain, nonatomic) NSString* first_name_abl;
@property(retain, nonatomic) NSString* last_name_ins;
@property(retain, nonatomic) NSString* first_name_ins;
@property(retain, nonatomic) NSString* last_name_dat;
@property(retain, nonatomic) NSString* first_name_dat;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(id)casedName:(int)name;
@end

__attribute__((visibility("hidden")))
@interface ProgressIndicatorView : XXUnknownSuperclass {
	CAShapeLayer* _progressShapeLayer;
	UIButton* _cancelButton;
	float _progress;
}
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) CAShapeLayer* progressShapeLayer;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MaskLoaderDimProgressView : XXUnknownSuperclass {
	id<MaskLoaderDimProgressViewDelegate> _delegate;
	ProgressIndicatorView* _progressIndicatorView;
}
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) __weak id<MaskLoaderDimProgressViewDelegate> delegate;
@property(retain, nonatomic) ProgressIndicatorView* progressIndicatorView;
-(void).cxx_destruct;
-(void)dismiss;
-(void)present;
-(void)actionTapGesture:(id)gesture;
-(void)actionCancelButton:(id)button;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKStoreProduct : VKDomain {
	BOOL _purchased;
	BOOL _active;
	BOOL _promoted;
	NSString* _productId;
	NSString* _title;
	NSString* _base_url;
}
@property(readonly, assign, nonatomic) int type;
@property(retain, nonatomic) NSString* base_url;
@property(assign, nonatomic) BOOL promoted;
@property(assign, nonatomic) BOOL active;
@property(assign, nonatomic) BOOL purchased;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* productId;
+(id)productWithData:(id)data;
+(id)productIdentityForType:(int)type productId:(id)anId;
+(id)productIdWithType:(int)type apiId:(id)anId;
+(void)parseProductId:(id)anId block:(id)block;
+(void)initialize;
-(void).cxx_destruct;
-(id)storeDescription;
-(void)writeData:(id)data;
-(BOOL)process:(id)process context:(id)context;
-(BOOL)isEqual:(id)equal;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKStoreProductSticker : VKStoreProduct {
	NSArray* _sticker_ids;
	NSString* _stickers_base_url;
}
@property(retain, nonatomic) NSString* stickers_base_url;
@property(retain, nonatomic) NSArray* sticker_ids;
-(void).cxx_destruct;
-(id)storeDescription;
-(void)writeData:(id)data;
-(BOOL)process:(id)process context:(id)context;
-(BOOL)isEqual:(id)equal;
@end

__attribute__((visibility("hidden")))
@interface VKStoreProductSubscription : VKStoreProduct {
	NSNumber* _expires_date;
	NSString* _merchant;
	NSString* _subtitle;
	NSString* _merchant_title;
}
@property(retain, nonatomic) NSString* merchant_title;
@property(retain, nonatomic) NSString* subtitle;
@property(retain, nonatomic) NSString* merchant;
@property(retain, nonatomic) NSNumber* expires_date;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKStoreProductVotes : VKStoreProduct {
	NSNumber* _votes;
}
@property(retain, nonatomic) NSNumber* votes;
-(void).cxx_destruct;
-(id)storeDescription;
-(void)writeData:(id)data;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKStoreProductTarget : VKRenderable {
	VKIdentity* _targetIdentity;
	NSString* _stickerProductName;
	NSNumber* _someStickerId;
	VKStoreProductStickerReferrerContext* _referrerContext;
}
@property(retain, nonatomic) VKStoreProductStickerReferrerContext* referrerContext;
@property(retain, nonatomic) NSNumber* someStickerId;
@property(retain, nonatomic) NSString* stickerProductName;
@property(retain, nonatomic) VKIdentity* targetIdentity;
+(id)targetForSomeStickerId:(id)someStickerId;
+(id)targetForStickerProductName:(id)stickerProductName;
+(id)targetForIdentity:(id)identity;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKStoreProductStickerReferrerContext : XXUnknownSuperclass {
	int _source;
	NSString* _keyword;
}
@property(copy, nonatomic) NSString* keyword;
@property(assign, nonatomic) int source;
+(id)contextLink;
+(id)contextMessage;
+(id)contextSuggestionWithKeyword:(id)keyword;
+(id)contextKeyboard;
+(id)contextStore;
-(void).cxx_destruct;
-(id)stringRepresentation;
@end

__attribute__((visibility("hidden")))
@interface TextKitLabelLayer : XXUnknownSuperclass {
	TextKitLayer* _textLayer;
	CALayer* _backgroundLayer;
}
@property(readonly, assign, nonatomic) CALayer* backgroundLayer;
@property(readonly, assign, nonatomic) TextKitLayer* textLayer;
-(void).cxx_destruct;
-(void)layoutSublayers;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TextKitLabelInteractive : TextKitLabel <UIGestureRecognizerDelegate> {
	CGPoint _touchBeganPoint;
	BOOL _allowsCopyText;
	id<TextKitLabelDelegate> _delegate;
	VKRenderedTextAttributeValue* _currentHighlightedAttribute;
	VKRenderedTextAttributeValue* _currentLongPressedAttribute;
	NSSet* _highlightedAttributes;
	CAShapeLayer* _highlightLayer;
	UILongPressGestureRecognizer* _longPressRecognizer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) CALayer* backgroundLayer;
@property(readonly, assign, nonatomic) TextKitLayer* textLayer;
@property(assign, nonatomic) __weak id<TextKitLabelDelegate> delegate;
@property(assign, nonatomic) BOOL allowsCopyText;
@property(retain, nonatomic) UILongPressGestureRecognizer* longPressRecognizer;
@property(retain, nonatomic) CAShapeLayer* highlightLayer;
@property(retain, nonatomic) NSSet* highlightedAttributes;
@property(retain, nonatomic) VKRenderedTextAttributeValue* currentLongPressedAttribute;
@property(retain, nonatomic) VKRenderedTextAttributeValue* currentHighlightedAttribute;
+(Class)layerClass;
-(void).cxx_destruct;
-(void)cancelHighlight;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)removeHighlightedAttribute:(id)attribute;
-(void)addHighlightedAttribute:(id)attribute;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(BOOL)canBecomeFirstResponder;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)copy:(id)copy;
-(BOOL)hasAttributesAtPoint:(CGPoint)point;
-(void)didLongPressAttribute:(id)attribute;
-(BOOL)shouldLongPressAttribute:(id)attribute;
-(void)didSelectAttribute:(id)attribute;
-(BOOL)shouldSelectAttribute:(id)attribute;
-(BOOL)shouldHighlightAttribute:(id)attribute;
-(void)layoutSubviews;
-(void)updateHighlight;
-(void)setText:(id)text;
-(void)gestureLongPress:(id)press;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ApplicationModelContext : FeedModelContext {
	BOOL _wallMode;
	unsigned _requestsSectionIndex;
}
@property(assign, nonatomic) unsigned requestsSectionIndex;
@property(assign, nonatomic) BOOL wallMode;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface ApplicationModel : FeedModel <TimerTargetDelegate> {
	id<ApplicationModelDelegate> _delegate;
	NSNumber* _appID;
	VKAPIApp* _application;
	NSSet* _pendingUnreadRequests;
	TimerTarget* _unreadTimer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ApplicationModelContext* lastContext;
@property(retain, nonatomic) VKAPIApp* application;
@property(readonly, retain, nonatomic) NSNumber* appID;
@property(assign, nonatomic) __weak id<ApplicationModelDelegate> delegate;
@property(retain, nonatomic) TimerTarget* unreadTimer;
@property(retain, nonatomic) NSSet* pendingUnreadRequests;
-(void).cxx_destruct;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)processRequests:(id)requests;
-(id)regroupRequests:(id)requests withReadItemsLimit:(unsigned)readItemsLimit;
-(id)processLeaderboards:(id)leaderboards ofType:(unsigned)type;
-(id)activitiesSectionWithData:(id)data;
-(id)applicationRequestForContext:(id)context;
-(void)handleRequestDelete:(id)aDelete updateBuilder:(id)builder;
-(void)handleMarkAsRead:(id)read updateBuilder:(id)builder;
-(void)handleAppRemoved:(id)removed updateBuilder:(id)builder;
-(void)handleAppInfoExpand:(id)expand updateBuilder:(id)builder;
-(void)registerForEvents:(id)events;
-(void)discovered:(id)discovered;
-(void)timerTargetFired:(id)fired;
-(void)addPendingUnreadRequestId:(id)anId;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(id)countKey;
-(id)feedRequestBuilderForContext:(id)context;
-(id)requestForContext:(id)context;
-(id)forAppID:(id)appID;
-(id)spawnContext:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKAPTabCollectionViewCell : XXUnknownSuperclass {
	UIImageView* _backgroundImageView;
	UIImageView* _tabIconImageView;
	UIImageView* _promoImageView;
	UILabel* _tabTitleLabel;
	UIColor* _textColor;
	UIColor* _hlTextColor;
}
@property(retain, nonatomic) UIColor* hlTextColor;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UILabel* tabTitleLabel;
@property(retain, nonatomic) UIImageView* promoImageView;
@property(retain, nonatomic) UIImageView* tabIconImageView;
@property(retain, nonatomic) UIImageView* backgroundImageView;
-(void).cxx_destruct;
-(void)applyTab:(id)tab;
-(void)layoutSubviews;
-(void)updateSelectionAnimated:(BOOL)animated;
-(void)hidePromo;
-(void)setHighlighted:(BOOL)highlighted;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsListModel : ListModel {
	NSNumber* _dialogId;
}
@property(retain, nonatomic) NSNumber* dialogId;
+(id)requestBuilderForNextFrom:(id)from page:(int)page mediaType:(id)type dialogId:(id)anId;
+(id)with:(id)with dialogId:(id)anId;
-(void).cxx_destruct;
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)spawnContext:(id)context;
-(id)mediaType;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsListContext : ListModelContext {
	NSString* _nextFrom;
}
@property(retain, nonatomic) NSString* nextFrom;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface RecordExtraInputPanelView : ExtraInputPanelView <VMPushToTalkDelegate, VMRaiseToRecordActivatorDelegate, VMRecordingDelegate> {
	BOOL _pushToTalkHintAnimationInProcess;
	id<RecordPanelDelegate> _recordPanelDelegate;
	UIViewController* _presentingController;
	UIButton* _record;
	UIView* _pushToTalkCoverView;
	UILabel* _pushToTalkHintLabel;
	UIWindow* _pushToTalkWindow;
	VMPushToTalkController* _pushToTalkController;
	VMVoiceMessagePlayer* _voiceMessagePlayer;
	VMSessionManager* _VMSessionManager;
	VMRaiseToRecordActivator* _raiseToRecordActivator;
	VMRecording* _recording;
	VMPushToTalkPreviewView* _previewView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UIViewController* presentingController;
@property(assign, nonatomic) __weak id<RecordPanelDelegate> recordPanelDelegate;
@property(retain, nonatomic) VMPushToTalkPreviewView* previewView;
@property(retain, nonatomic) VMRecording* recording;
@property(retain, nonatomic) VMRaiseToRecordActivator* raiseToRecordActivator;
@property(retain, nonatomic) VMSessionManager* VMSessionManager;
@property(retain, nonatomic) VMVoiceMessagePlayer* voiceMessagePlayer;
@property(retain, nonatomic) VMPushToTalkController* pushToTalkController;
@property(retain, nonatomic) UIWindow* pushToTalkWindow;
@property(assign, nonatomic) BOOL pushToTalkHintAnimationInProcess;
@property(retain, nonatomic) UILabel* pushToTalkHintLabel;
@property(retain, nonatomic) UIView* pushToTalkCoverView;
@property(retain, nonatomic) UIButton* record;
-(void).cxx_destruct;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(BOOL)shouldRaiseToRecordRecognizeAttemptAtThisTime:(id)thisTime;
-(void)raiseToRecordActivatorDidRecognizedAttempt:(id)raiseToRecordActivator;
-(void)updateShouldListenEarRecordingAttempts:(BOOL)update;
-(void)cleanPushToTalk;
-(void)hidePreview;
-(void)actionPreviewCancel:(id)cancel;
-(void)actionPreviewSend:(id)send;
-(void)stopRecordingAndPreview;
-(void)pushToTalkControllerActionBlankTap:(id)talkControllerActionBlankTap;
-(void)pushToTalkControllerActionCancel:(id)talkControllerActionCancel;
-(void)pushToTalkControllerActionSend:(id)talkControllerActionSend;
-(void)recording:(id)recording updateVolume:(float)volume time:(double)time;
-(void)recordingGetInterruptedOrExceededLimitOrGettingAwayFromEar:(id)ear;
-(void)startRecordingIsFromRiseToRecord:(BOOL)record;
-(void)showPushToTalk;
-(void)showRecorderPermissionInfoAlert;
-(void)recordLongPress:(id)press;
-(void)animateHint;
-(void)recordPressed:(id)pressed;
-(BOOL)isPushToTalkActive;
-(void)showTextInput;
-(void)hideTextInput;
-(void)updateEmpty:(BOOL)empty;
-(id)initForComments:(BOOL)comments voiceMessagePlayer:(id)player VMSessionManager:(id)manager;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKImageVariant : XXUnknownSuperclass {
	NSString* _src;
	int _width;
	int _height;
	int _type;
}
@property(assign, nonatomic) int type;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSString* src;
+(id)variantForType:(int)type src:(id)src;
+(id)parsePhotoVariant:(id)variant;
-(void).cxx_destruct;
-(float)ratio;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface DocAttachmentRenderer : AttachmentRenderer {
	NSNumber* _userId;
}
@property(readonly, retain, nonatomic) NSNumber* userId;
-(void).cxx_destruct;
-(void)render:(id)render layout:(id)layout reuse:(double)reuse;
-(id)initWithMain:(id)main view:(id)view context:(int)context;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoAlbum : VKDomain <VKPhotoEdit, VKImage> {
	BOOL _can_upload;
	BOOL _upload_by_admins_only;
	BOOL _comments_disabled;
	NSString* _title;
	NSString* _descr;
	int _size;
	unsigned _created;
	unsigned _updated;
	VKPrivacySetting* _privacy_view;
	VKPrivacySetting* _privacy_comment;
	NSNumber* _thumb_id;
	NSString* _thumb_src;
	VKPhoto* _thumb;
	int _flags;
}
@property(readonly, assign, nonatomic) float ratio;
@property(readonly, retain, nonatomic) NSMutableDictionary* variants;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int flags;
@property(readonly, assign, nonatomic) int type;
@property(assign, nonatomic) BOOL comments_disabled;
@property(assign, nonatomic) BOOL upload_by_admins_only;
@property(assign, nonatomic) BOOL can_upload;
@property(retain, nonatomic) VKPhoto* thumb;
@property(retain, nonatomic) NSString* thumb_src;
@property(retain, nonatomic) NSNumber* thumb_id;
@property(retain, nonatomic) VKPrivacySetting* privacy_comment;
@property(retain, nonatomic) VKPrivacySetting* privacy_view;
@property(assign, nonatomic) unsigned updated;
@property(assign, nonatomic) unsigned created;
@property(assign, nonatomic) int size;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* title;
+(id)albumWithAid:(id)aid owner:(id)owner;
+(id)albumWithURLAid:(id)urlaid owner:(id)owner;
+(id)userAlbum:(id)album owner:(id)owner;
+(id)systemAlbum:(int)album ownerId:(id)anId nameGen:(id)gen nameIns:(id)ins;
+(id)photoAlbumWithId:(id)anId ownerId:(id)anId2;
-(void).cxx_destruct;
-(BOOL)isEqualToAlbum:(id)album;
-(id)userAlbumIdentity;
-(BOOL)canContainPhotoIdentity:(id)identity;
-(id)fillTitleWithNameGen:(id)nameGen nameIns:(id)ins;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
-(id)thumbnailUrl;
-(id)photoEditDescription;
-(id)photoEditTitle;
-(id)photoEditThumbnail;
-(BOOL)process:(id)process context:(id)context;
-(Class)rendererClass;
-(void)domainOnEditCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface ModelAction : Action <DomainEvent> {
	BOOL _disableHUD;
	BOOL _hudSuccessEmptyVisible;
	VKHUD* _weakHUD;
	int _completeRequestResult;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int completeRequestResult;
@property(assign, nonatomic) VKHUD* weakHUD;
@property(assign, nonatomic) BOOL hudSuccessEmptyVisible;
@property(assign, nonatomic) BOOL disableHUD;
+(int)domainType;
-(id)resultMessage;
-(void)fireInContext:(id)context;
-(void)runInContext:(id)context;
-(id)actionSuccessMessage:(id)message;
-(void)actionHandleResult:(id)result;
-(BOOL)actionShowsFailureConfirmation;
-(BOOL)actionShowsSuccessConfirmation;
-(id)actionQueueKey;
-(void)setupHud:(id)hud;
-(void)actionHandleSuccessForData:(id)data context:(id)context;
-(BOOL)actionResultForErrorResult:(int)errorResult;
-(int)actionResultForFailedRequestResult:(id)failedRequestResult;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)withHUD:(id)hud;
@end

__attribute__((visibility("hidden")))
@interface ModelActionRefresh : ModelAction {
}
@property(retain, nonatomic) VKDomain* target;
+(int)domainType;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDelete : ModelAction {
}
@property(retain, nonatomic) VKIdentity* target;
-(id)defaultTitle;
-(BOOL)actionShowsSuccessConfirmation;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAdd : ModelAction {
	VKDomain* _added;
}
@property(retain, nonatomic) VKDomain* added;
@property(retain, nonatomic) VKDomain* target;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEdit : ModelAction {
}
@property(retain, nonatomic) VKDomain* target;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface ModelActionMove : ModelAction {
	NSNumber* _from;
	NSNumber* _to;
}
@property(retain, nonatomic) NSNumber* to;
@property(retain, nonatomic) NSNumber* from;
@property(retain, nonatomic) VKDomain* target;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReorder : ModelAction {
	NSNumber* _before;
	NSNumber* _after;
}
@property(retain, nonatomic) NSNumber* after;
@property(retain, nonatomic) NSNumber* before;
@property(retain, nonatomic) VKIdentity* target;
+(id)reorderActionClass:(Class)aClass itemClass:(Class)aClass2 index:(id)index from:(id)from to:(id)to identity:(id)identity;
-(void).cxx_destruct;
-(BOOL)actionShowsSuccessConfirmation;
@end

__attribute__((visibility("hidden")))
@interface ModelActionShare : ModelAction {
	NSURL* _url;
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSURL* url;
-(void).cxx_destruct;
-(id)defaultTitle;
-(BOOL)actionShowsSuccessConfirmation;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioITunesMatcher : XXUnknownSuperclass {
	NSMutableDictionary* _matches;
	NSMutableSet* _pending;
	NSOperationQueue* _queue;
}
@property(readonly, retain, nonatomic) NSMutableSet* pending;
@property(readonly, retain, nonatomic) NSMutableDictionary* matches;
@property(readonly, retain, nonatomic) NSOperationQueue* queue;
+(BOOL)isNotification:(id)notification forAudioIdentity:(id)audioIdentity;
+(id)encodedSearchTermForAudio:(id)audio withTitle:(BOOL)title;
+(id)sharedMatcher;
-(void).cxx_destruct;
-(id)fullSizeCoverUrl:(id)url;
-(void)openITunes:(id)tunes;
-(void)match:(id)match;
-(BOOL)untouched:(id)untouched;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKGroupState : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* queue;
	NSSet* _admin;
	NSMutableDictionary* _adminLevel;
}
@property(retain) NSMutableDictionary* adminLevel;
@property(retain) NSSet* admin;
-(void).cxx_destruct;
-(void)setAdminLevel:(id)level level:(int)level2;
-(id)single:(id)single;
-(void)process:(id)process;
-(void)include:(id)include exclude:(id)exclude;
-(int)adminLevel:(id)level;
-(BOOL)isAdmin:(id)admin;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AnimatedIndexUpdate : IndexUpdate {
	NSMutableDictionary* _updates;
	NSIndexPath* _scrollPathAnimated;
}
@property(retain, nonatomic) NSIndexPath* scrollPathAnimated;
@property(retain, nonatomic) NSMutableDictionary* updates;
-(void).cxx_destruct;
-(void)replaceRowInsertionsWithReloads;
-(BOOL)tableShouldReload;
-(void)applyForCollectionView:(id)collectionView shouldReload:(BOOL)reload reload:(id)reload3;
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
-(void)update:(int)update sections:(id)sections animation:(int)animation;
-(void)update:(int)update rows:(id)rows animation:(int)animation;
-(int)changes;
-(void)add:(id)add key:(id)key sections:(BOOL)sections;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface IndexUpdateElement : XXUnknownSuperclass {
	NSMutableIndexSet* deleteSections_;
	NSMutableIndexSet* reloadSections_;
	NSMutableIndexSet* insertSections_;
	NSMutableArray* deleteRows_;
	NSMutableArray* reloadRows_;
	NSMutableArray* insertRows_;
	XXStruct_X102JB strategy_;
}
@property(readonly, assign, nonatomic) XXStruct_X102JB strategy;
@property(retain, nonatomic) NSMutableArray* insertRows;
@property(retain, nonatomic) NSMutableArray* reloadRows;
@property(retain, nonatomic) NSMutableArray* deleteRows;
@property(retain, nonatomic) NSMutableIndexSet* insertSections;
@property(retain, nonatomic) NSMutableIndexSet* reloadSections;
@property(retain, nonatomic) NSMutableIndexSet* deleteSections;
-(void).cxx_destruct;
-(id)initWithStrategy:(XXStruct_X102JB)strategy;
@end

__attribute__((visibility("hidden")))
@interface ElementIndexUpdate : IndexUpdate {
	NSMutableArray* _elements;
}
@property(retain, nonatomic) NSMutableArray* elements;
+(int)addToInfo:(id)info sectionTo:(int)to sectionFrom:(int)from to:(id)to4 from:(id)from5 comparator:(id)comparator limit:(int*)limit onSame:(id)same;
-(void).cxx_destruct;
-(id)indexPathsForReplacedRowUpdates;
-(BOOL)hasNonReloadChanges;
-(BOOL)hasListChanges;
-(BOOL)validate;
-(BOOL)tableShouldReload;
-(int)changes;
-(id)elementForStrategy:(XXStruct_X102JB)strategy;
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface ActionContext : EventContext {
}
@end

__attribute__((visibility("hidden")))
@interface Action : XXUnknownSuperclass {
	NSString* _title;
	NSString* _picto;
	id _target;
	BarButtonBuilder* _buttonBuilder;
	id _complete;
	NSString* _track_code;
}
@property(copy, nonatomic) NSString* track_code;
@property(copy, nonatomic) id complete;
@property(retain, nonatomic) BarButtonBuilder* buttonBuilder;
@property(retain, nonatomic) id target;
@property(retain, nonatomic) NSString* picto;
@property(retain, nonatomic) NSString* title;
+(id)target:(id)target;
-(void).cxx_destruct;
-(void)fireInContext:(id)context;
-(void)runInContext:(id)context;
-(id)fullTitle;
-(id)defaultTitle;
-(id)withComplete:(id)complete;
-(id)withButton:(id)button;
-(id)withPicto:(id)picto;
-(id)withTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface AppsDashboardController : VKMLiveController {
	BOOL tracked;
}
@property(retain, nonatomic) AppsDashboardModel* model;
-(void)reachabilityChanged:(id)changed;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(unsigned)filterOfShowMoreForSection:(int)section mode:(unsigned)mode;
-(id)applyAttributesOfSection:(int)section inMode:(unsigned)mode toHeader:(id)header;
-(void)switchToMode:(unsigned)mode;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)showMoreActionWithFilter:(unsigned)filter genreID:(id)anId title:(id)title;
-(void)notificationAppActive:(id)active;
-(int)VKMTableStyle;
-(id)autopagingCell;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface CommentSourcePickerController : XXUnknownSuperclass <CommentPostSourceDelegate, UIViewControllerTransitioningDelegate> {
	id<CommentSourcePickerDelegate> _delegate;
	UIView* _backdropView;
	UIView* _containerView;
	CommentPostSourceController* _contentController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<CommentSourcePickerDelegate> delegate;
@property(retain, nonatomic) CommentPostSourceController* contentController;
@property(retain, nonatomic) UIView* containerView;
@property(retain, nonatomic) UIView* backdropView;
-(void).cxx_destruct;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(void)commentPostSourceController:(id)controller didSelectSource:(id)source;
-(void)dismissPicker;
-(id)contentControllerView;
-(void)displayContentController:(id)controller;
-(void)actionCancelButton:(id)button;
-(id)cancelButtonImageWithColor:(id)color;
-(void)addCancelButton;
-(void)addHeader;
-(void)addContainerViewTopRoundedMask;
-(void)addContainerView;
-(void)handleBackdropTap;
-(void)addBackdropView;
-(void)viewDidLoad;
-(id)initWithMain:(id)main sources:(id)sources;
-(int)preferredStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface CommentPickerTransitionController : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	BOOL _present;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL present;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

__attribute__((visibility("hidden")))
@interface ActionsBuilder : XXUnknownSuperclass {
	BOOL _destructiveLast;
	NSString* _title;
	NSString* _cancelTitle;
	NSMutableArray* _actions;
	NSMutableDictionary* _sources;
	Action* _destructive;
}
@property(assign, nonatomic) BOOL destructiveLast;
@property(copy, nonatomic) NSString* cancelTitle;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) Action* destructive;
@property(retain, nonatomic) NSMutableDictionary* sources;
@property(retain, nonatomic) NSMutableArray* actions;
+(void)textAlertPrompt:(id)prompt confirmText:(id)text block:(id)block;
+(void)serviceRestrictedAlert:(id)alert canOpenMessage:(id)message;
+(void)serviceRestrictedAlert:(id)alert canOpenMessage:(id)message cancel:(id)cancel;
+(void)deleteAlertPrompt:(id)prompt kind:(int)kind block:(id)block;
+(id)confirmedDeleteForDomain:(int)domain block:(id)block;
+(id)confirmedDeleteItem:(id)item kind:(int)kind block:(id)block;
+(id)confirmedTitle:(id)title action:(id)action block:(id)block;
+(id)deleteConfirmationForItemString:(id)itemString;
+(id)thatTitleForItem:(id)item kind:(int)kind;
+(id)deleteTitleForItem:(id)item;
+(id)deleteTitle:(id)title;
+(id)confirmedDestructiveTitle:(id)title action:(id)action block:(id)block;
+(void)uploadAvatarImage:(id)image showHud:(BOOL)hud context:(id)context handler:(id)handler;
+(void)changeProfilePhoto:(id)photo handler:(id)handler;
+(void)lookupAudioPlaylist:(id)playlist block:(id)block;
+(void)lookupCommunity:(id)community managed:(BOOL)managed search:(BOOL)search block:(id)block;
+(void)lookupPhotoAlbum:(id)album animated:(BOOL)animated block:(id)block;
+(void)lookupDialog:(id)dialog animated:(BOOL)animated block:(id)block;
+(void)lookupDialog:(id)dialog dismiss:(BOOL)dismiss animated:(BOOL)animated block:(id)block;
+(void)lookupPhotos:(id)photos picker:(id)picker block:(id)block;
+(id)builder;
-(id)destructivePromptedForDomain:(int)domain block:(id)block;
-(id)destructivePromptedForItem:(id)item kind:(int)kind block:(id)block;
-(void)report:(id)report;
-(void)commonShareActions:(id)actions editAttachment:(id)attachment sendImmediately:(BOOL)immediately supportSystemShare:(BOOL)share;
-(void)audioShareActions:(id)actions;
-(void)audioPlaylistAudioActions:(id)actions downloadAvailable:(BOOL)available playlistIden:(id)iden;
-(void)audioPlaylistShareActions:(id)actions;
-(void)audioPlaylistUnfollowAction:(id)action;
-(void)audioPlaylistActions:(id)actions owner:(id)owner preloadedAudios:(id)audios session:(id)session;
-(void)audioActions:(id)actions session:(id)session owner:(id)owner canDelete:(BOOL)aDelete playlistIden:(id)iden;
-(void)docShareActions:(id)actions sendImmediately:(BOOL)immediately;
-(void)profilePhotoActions:(id)actions handler:(id)handler;
-(void)photoActions:(id)actions session:(id)session;
-(void)photoShareActions:(id)actions;
-(id)shareActions:(id)actions ownWall:(BOOL)wall;
-(id)systemShareActionWithIdentity:(id)identity;
-(id)lookupDialog:(id)dialog sendImmediately:(BOOL)immediately;
-(void)configureLookupMyVideosWithBlock:(id)block;
-(void)configureLookupWithContext:(id)context block:(id)block;
-(void)lookupAttachmentsLimit:(int)limit photoUpload:(id)upload videoUpload:(id)upload3 docUpload:(id)upload4 giftSend:(id)send allowPlaylists:(BOOL)playlists block:(id)block;
-(id)lookupVideoDismissAnimated:(BOOL)animated block:(id)block;
-(void)lookupPhotos:(id)photos block:(id)block;
-(id)addSource:(id)source title:(id)title;
-(void)title:(id)title subSheet:(id)sheet;
-(id)title:(id)title block:(id)block;
-(id)desctructive:(id)desctructive;
-(id)add:(id)add;
-(void)showInContext:(id)context force:(BOOL)force;
-(void)showInContext:(id)context;
-(id)buildSheet:(id)sheet;
-(id)singleAction;
-(BOOL)isEmpty;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WindowedViewController : XXUnknownSuperclass {
	UIWindow* _vcWindow;
}
@property(retain, nonatomic) UIWindow* vcWindow;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(id)childViewControllerForStatusBarStyle;
-(void)loadView;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AlertViewWindow : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface WizardStepAddressBookSync : XXUnknownSuperclass <WizardStepInfo> {
	MainModel* _main;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) MainModel* main;
+(id)stepWithMain:(id)main;
-(void).cxx_destruct;
-(void)prepareViewControllerWithCompletion:(id)completion;
-(BOOL)isAvailable;
-(id)initWithMain:(id)main;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsAudioModel : MessagesAttachmentsListModel {
}
-(id)process:(id)process;
-(id)mediaType;
-(id)countKey;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface PollAnswerUsersModel : ListModel {
	VKPollAnswerInPoll* _answer;
}
@property(retain, nonatomic) VKPollAnswerInPoll* answer;
-(void).cxx_destruct;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
-(id)withAnswer:(id)answer;
@end

__attribute__((visibility("hidden")))
@interface UserActionBlock : Action {
	id _block;
}
@property(copy, nonatomic) id block;
+(id)block:(id)block;
-(void).cxx_destruct;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface UserActionCopyText : Action {
}
@property(retain, nonatomic) id<VKTextCopy> target;
+(id)target:(id)target;
-(void)runInContext:(id)context;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface UserActionRouteLink : Action {
	NSString* _linkTitle;
}
@property(retain, nonatomic) NSString* linkTitle;
@property(retain, nonatomic) NSString* target;
-(void).cxx_destruct;
-(void)runInContext:(id)context;
-(id)title;
-(id)withLinkTitle:(id)linkTitle;
@end

__attribute__((visibility("hidden")))
@interface UserActionRouteSource : Action {
}
@property(retain, nonatomic) NSNumber* target;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface UserActionRoute : Action {
}
@property(retain, nonatomic) id<VKTitleable> target;
-(void)runInContext:(id)context;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface UserActionCreate : Action {
	BOOL _animated;
	id _block;
	EditContext* _context;
}
@property(assign, nonatomic) BOOL animated;
@property(retain, nonatomic) EditContext* context;
@property(copy, nonatomic) id block;
+(id)identity:(id)identity context:(id)context animated:(BOOL)animated block:(id)block;
-(void).cxx_destruct;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface UserActionEdit : UserActionCreate {
}
+(id)domain:(id)domain context:(id)context;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddVideo : ModelActionAdd {
	NSNumber* _targetId;
}
@property(retain, nonatomic) VKVideo* added;
@property(retain, nonatomic) NSNumber* targetId;
@property(retain, nonatomic) VKVideo* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteVideo : ModelActionDelete {
	NSNumber* _targetId;
}
@property(retain, nonatomic) NSNumber* targetId;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)actionShowsSuccessConfirmation;
@end

__attribute__((visibility("hidden")))
@interface ModelActionVideoInAlbum : ModelAction {
	BOOL _add;
	VKIdentity* _album;
}
@property(assign, nonatomic) BOOL add;
@property(retain, nonatomic) VKIdentity* album;
@property(retain, nonatomic) VKVideo* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)hudSuccessEmptyVisible;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditVideo : ModelActionEdit {
}
@property(retain, nonatomic) VKVideo* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddVideoAlbum : ModelActionAdd {
}
@property(retain, nonatomic) VKVideoAlbum* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditVideoAlbum : ModelActionEdit {
}
@property(retain, nonatomic) VKVideoAlbum* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteVideoAlbum : ModelActionDelete {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VideoItemEditContext : ItemEditContext <VKSwitchEditItemContext> {
	BOOL _comments_disabled;
	id _handler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id handler;
@property(assign, nonatomic) BOOL comments_disabled;
@property(retain, nonatomic) VKVideo* domain;
-(void).cxx_destruct;
-(id)commentsDisabledTitle;
-(void)setCommentsDisabled:(BOOL)disabled;
-(BOOL)commentsDisabled;
-(int)descrMax;
-(int)descrMin;
-(int)titleMax;
-(int)titleMin;
-(id)descrPlaceholder;
-(id)titlePlaceholder;
-(id)editTitle;
-(Class)editControllerClass;
-(BOOL)editPrivacy;
-(void)useDomain:(id)domain edit:(BOOL)edit;
-(id)confirmAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface RowUpdate : XXUnknownSuperclass {
	NSIndexPath* _path;
	id _object;
	int _animation;
}
@property(assign, nonatomic) int animation;
@property(retain, nonatomic) id object;
@property(retain, nonatomic) NSIndexPath* path;
+(id)row:(id)row object:(id)object animation:(int)animation;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface SectionUpdate : XXUnknownSuperclass {
	unsigned _idx;
	NSArray* _objects;
	NSString* _title;
	NSString* _indexTitle;
	int _animation;
}
@property(assign, nonatomic) int animation;
@property(retain, nonatomic) NSString* indexTitle;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSArray* objects;
@property(assign, nonatomic) unsigned idx;
+(id)section:(unsigned)section objects:(id)objects title:(id)title indexTitle:(id)title4 animation:(int)animation;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ModelUpdateBuilder : XXUnknownSuperclass {
	BOOL forcedReload;
	Index* _index;
	NSIndexPath* _scrollPathAnimated;
	NSMutableDictionary* _updates;
	Index* _resetIndex;
	IndexUpdate* _resetIndexUpdate;
	XXStruct_X102JB _animation;
}
@property(assign, nonatomic) XXStruct_X102JB animation;
@property(retain, nonatomic) NSIndexPath* scrollPathAnimated;
@property(retain, nonatomic) Index* index;
@property(retain, nonatomic) IndexUpdate* resetIndexUpdate;
@property(retain, nonatomic) Index* resetIndex;
@property(retain, nonatomic) NSMutableDictionary* updates;
+(void)lookupReorderIndex:(id)index section:(unsigned)section iden:(id)iden after:(id)after before:(id)before block:(id)block;
+(void)enumerateSections:(id)sections index:(id)index block:(id)block;
+(void)updateIndex:(id)index withContext:(id)context performing:(id)performing result:(id)result;
+(id)updatedIndex:(id)index performing:(id)performing;
+(id)builder:(id)builder;
-(void).cxx_destruct;
-(void)sectionAppend:(BOOL)append block:(id)block;
-(void)withSection:(unsigned)section block:(id)block;
-(void)deleteAllRows;
-(void)pathForInsertion:(id)insertion sortedSection:(unsigned)section comparator:(id)comparator block:(id)block;
-(void)lookupReorder:(id)reorder after:(id)after before:(id)before section:(int)section block:(id)block;
-(void)ensure:(Class)ensure path:(id)path block:(id)block;
-(void)pathForSection:(unsigned)section append:(BOOL)append object:(id)object block:(id)block;
-(void)pathForSection:(unsigned)section append:(BOOL)append reverse:(BOOL)reverse objects:(id)objects block:(id)block;
-(void)enumerateSections:(id)sections;
-(void)enumerateIdentity:(id)identity block:(id)block;
-(void)enumerateIdentity:(id)identity section:(unsigned)section block:(id)block;
-(void)enumerateObject:(id)object block:(id)block;
-(void)enumerateIdentity:(id)identity sections:(id)sections block:(id)block;
-(void)refreshSection:(unsigned)section title:(id)title;
-(void)refreshRow:(id)row with:(id)with;
-(void)refreshRow:(id)row;
-(void)insertRow:(id)row with:(id)with;
-(void)deleteRow:(id)row;
-(void)reloadRow:(id)row with:(id)with;
-(void)insertSection:(unsigned)section with:(id)with title:(id)title indexTitle:(id)title4;
-(void)deleteSection:(unsigned)section;
-(void)reloadSection:(unsigned)section with:(id)with;
-(void)addUpdate:(id)update key:(int)key;
-(void)scrollAnimated:(id)animated;
-(void)resetToIndex:(id)index update:(id)update;
-(void)forceReload;
-(id)buildUpdatedIndex;
-(id)buildAnimated:(BOOL)animated;
-(id)description;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DetailAnimatedIndexUpdate : AnimatedIndexUpdate {
}
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
@end

__attribute__((visibility("hidden")))
@interface DetailStaticIndexUpdate : AnimatedIndexUpdate {
}
-(void)applyForTableView:(id)tableView shouldReload:(BOOL)reload reload:(id)reload3;
@end

__attribute__((visibility("hidden")))
@interface LiveVideoSubscribeAction : ModelAction {
	BOOL _subscribe;
}
@property(assign, nonatomic) BOOL subscribe;
@property(retain, nonatomic) NSNumber* target;
+(id)unsubscribe:(id)unsubscribe;
+(id)subscribe:(id)subscribe;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppSetting : VKDomainDerived {
}
@property(retain, nonatomic) VKAPIApp* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppWithRequests : VKDomainDerived {
	NSArray* _requests;
}
@property(copy, nonatomic) NSArray* requests;
@property(readonly, retain, nonatomic) VKAPIApp* domain;
+(id)from:(id)from requests:(id)requests;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppWithFriendsPlaying : VKDomainDerived {
	NSArray* _friends;
}
@property(readonly, copy, nonatomic) NSArray* friends;
@property(readonly, retain, nonatomic) VKAPIApp* domain;
+(id)from:(id)from withFriends:(id)friends;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppWithExpandableInfo : VKDomainDerived {
	BOOL _expanded;
}
@property(readonly, assign, nonatomic, getter=isExpanded) BOOL expanded;
@property(readonly, retain, nonatomic) VKAPIApp* domain;
-(void)expand;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppWithActionButton : VKDomainDerived {
}
@property(readonly, retain, nonatomic) VKAPIApp* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppInviteFriends : VKDomainDerived {
}
@property(readonly, retain, nonatomic) VKAPIApp* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppNotificationSettings : VKDomainDerived {
}
@property(readonly, retain, nonatomic) VKAPIApp* domain;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ObjectDescription : XXUnknownSuperclass {
	NSArray* _pairs;
}
@property(readonly, copy, nonatomic) NSArray* pairs;
+(id)pairs:(id)pairs;
-(void).cxx_destruct;
-(id)descriptionForObject:(id)object;
-(id)initWithPairs:(id)pairs;
-(void)registerToClass:(Class)aClass;
@end

__attribute__((visibility("hidden")))
@interface ObjectDescriptionBuilder : XXUnknownSuperclass {
	NSMutableArray* _pairs;
}
@property(retain, nonatomic) NSMutableArray* pairs;
+(id)builder;
-(void).cxx_destruct;
-(id)build;
-(id)selector:(SEL)selector name:(id)name;
-(id)selector:(SEL)selector;
-(id)selectors:(SEL)selectors;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKFeedAdsItemCard : VKDomain <VKImage> {
	NSString* _card_id;
	NSString* _title;
	NSNumber* _rating;
	NSString* _descr;
	NSString* _followers;
	NSString* _button;
	NSNumber* _ios_app_id;
	NSString* _ios_app_url;
	NSString* _link_url;
	int _link_url_target;
	NSMutableDictionary* _variants;
	float _ratio;
	VKAdData* _adData;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAdData* adData;
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) NSMutableDictionary* variants;
@property(assign, nonatomic) int link_url_target;
@property(retain, nonatomic) NSString* link_url;
@property(retain, nonatomic) NSString* ios_app_url;
@property(retain, nonatomic) NSNumber* ios_app_id;
@property(retain, nonatomic) NSString* button;
@property(retain, nonatomic) NSString* followers;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSNumber* rating;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* card_id;
-(void).cxx_destruct;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(id)thumbnailUrl;
-(id)fullVariant;
-(id)messagesVariant;
-(id)thumbnailVariant;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedAdsItem : VKDomain <VKSource, VKImage, VKSourceStatus> {
	BOOL _statsImperssionHandled;
	BOOL _statsLoadHandled;
	int _ads_type;
	NSString* _title;
	NSString* _descr;
	NSString* _genre;
	NSString* _domain;
	NSString* _followers;
	NSString* _button;
	NSString* _link_url;
	int _link_url_target;
	NSString* _photo;
	NSNumber* _rating;
	NSNumber* _ios_app_id;
	NSString* _ios_app_url;
	NSString* _site_description;
	VKPost* _post;
	NSString* _age_restriction;
	NSArray* _cards;
	NSMutableDictionary* _variants;
	float _ratio;
	VKAdData* _adData;
}
@property(readonly, assign, nonatomic) BOOL verified;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) int deactivated;
@property(readonly, assign, nonatomic) int sex;
@property(readonly, retain, nonatomic) NSString* name;
@property(readonly, retain, nonatomic) NSNumber* source_id;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAdData* adData;
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) NSMutableDictionary* variants;
@property(retain, nonatomic) NSArray* cards;
@property(retain, nonatomic) NSString* age_restriction;
@property(assign, nonatomic) BOOL statsLoadHandled;
@property(assign, nonatomic) BOOL statsImperssionHandled;
@property(retain, nonatomic) VKPost* post;
@property(retain, nonatomic) NSString* site_description;
@property(retain, nonatomic) NSString* ios_app_url;
@property(retain, nonatomic) NSNumber* ios_app_id;
@property(retain, nonatomic) NSNumber* rating;
@property(retain, nonatomic) NSString* photo;
@property(assign, nonatomic) int link_url_target;
@property(retain, nonatomic) NSString* link_url;
@property(retain, nonatomic) NSString* button;
@property(retain, nonatomic) NSString* followers;
@property(retain, nonatomic) NSString* domain;
@property(retain, nonatomic) NSString* genre;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int ads_type;
+(id)linkIcon;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)disclosure;
-(id)linkText;
-(int)statusMask;
-(id)statusForSource:(id)source;
-(id)statusString;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(id)thumbnailUrl;
-(id)fullVariant;
-(id)messagesVariant;
-(id)thumbnailVariant;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(void)acceptSources:(id)sources;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedAds : VKFeed {
	NSArray* _ads;
	NSString* _ads_debug;
	NSString* _id1;
	NSString* _id2;
	NSString* _title;
	VKAdData* _adData;
}
@property(retain, nonatomic) VKAdData* adData;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* id2;
@property(retain, nonatomic) NSString* id1;
@property(retain, nonatomic) NSString* ads_debug;
@property(retain, nonatomic) NSArray* ads;
-(void).cxx_destruct;
-(id)statusForSource:(id)source;
-(void)acceptSources:(id)sources;
-(id)firstItem;
-(int)type;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface WallExtraController : FeedController {
}
-(void)VKMScrollViewHasLoaded;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeletePhoto : ModelActionDelete {
	BOOL _userProfilePhoto;
}
@property(assign, nonatomic) BOOL userProfilePhoto;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)actionShowsSuccessConfirmation;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReorderPhoto : ModelActionReorder {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionMovePhoto : ModelActionMove {
}
@property(retain, nonatomic) VKPhoto* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditPhoto : ModelActionEdit {
}
@property(retain, nonatomic) VKPhoto* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionCopyPhoto : ModelAction {
}
@property(retain, nonatomic) VKPhoto* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(BOOL)hudSuccessEmptyVisible;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeletePhotoAlbum : ModelActionDelete {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReorderPhotoAlbum : ModelActionReorder {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddPhotoAlbum : ModelActionAdd {
}
@property(retain, nonatomic) VKPhotoAlbum* added;
@property(retain, nonatomic) VKPhotoAlbum* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditPhotoAlbum : ModelActionEdit {
}
@property(retain, nonatomic) VKPhotoAlbum* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionPhotoAlbumCover : ModelAction {
	VKPhoto* _photo;
}
@property(retain, nonatomic) VKPhoto* photo;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface PhotoEditContext : TextEditContext {
}
@property(retain, nonatomic) VKPhoto* domain;
-(unsigned)textLengthMax;
-(unsigned)textLengthMin;
-(id)title;
-(void)useDomain:(id)domain edit:(BOOL)edit;
-(id)confirmAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumItemEditContext : ItemEditContext <VKSwitchEditItemContext> {
	BOOL _upload_by_admins_only;
	BOOL _comments_disabled;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL comments_disabled;
@property(assign, nonatomic) BOOL upload_by_admins_only;
@property(retain, nonatomic) VKPhotoAlbum* domain;
-(id)uploadByAdminsOnlyTitle;
-(void)setUploadByAdminsOnly:(BOOL)only;
-(BOOL)uploadByAdminsOnly;
-(id)commentsDisabledTitle;
-(void)setCommentsDisabled:(BOOL)disabled;
-(BOOL)commentsDisabled;
-(int)descrMax;
-(int)descrMin;
-(int)titleMax;
-(int)titleMin;
-(id)descrPlaceholder;
-(id)titlePlaceholder;
-(id)editTitle;
-(BOOL)editPrivacy;
-(Class)editControllerClass;
-(void)useDomain:(id)domain edit:(BOOL)edit;
-(id)confirmAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface VKSnippetRating : XXUnknownSuperclass {
	NSNumber* _stars;
	NSNumber* _reviews;
	NSString* _descr;
}
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSNumber* reviews;
@property(retain, nonatomic) NSNumber* stars;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKSnippetButton : XXUnknownSuperclass {
	NSString* _title;
	id _routeObject;
	id<VKRemoteAction> _action;
}
@property(retain, nonatomic) id<VKRemoteAction> action;
@property(retain, nonatomic) id routeObject;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKSnippetAttach : XXUnknownSuperclass {
	NSString* _title;
	NSString* _caption;
	NSString* _descr;
	VKSnippetRating* _rating;
	VKSnippetButton* _button;
	id<SnippetStats> _stats;
	id<VKImage> _photo;
	UIImage* _placeholder;
	id _routeObject;
}
@property(retain, nonatomic) id routeObject;
@property(retain, nonatomic) UIImage* placeholder;
@property(retain, nonatomic) id<VKImage> photo;
@property(retain, nonatomic) id<SnippetStats> stats;
@property(retain, nonatomic) VKSnippetButton* button;
@property(retain, nonatomic) VKSnippetRating* rating;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* caption;
@property(retain, nonatomic) NSString* title;
+(id)playlist:(id)playlist;
+(id)product:(id)product;
+(id)photo:(id)photo notePreview:(id)preview;
+(id)photo:(id)photo note:(id)note;
+(id)photo:(id)photo page:(id)page;
+(id)link:(id)link;
-(void).cxx_destruct;
-(id)initWithPlaylist:(id)playlist;
-(id)initWithProduct:(id)product;
-(id)initWithPhoto:(id)photo notePreview:(id)preview;
-(id)initWithPhoto:(id)photo note:(id)note;
-(id)initWithPhoto:(id)photo page:(id)page;
-(id)initWithLink:(id)link;
@end

__attribute__((visibility("hidden")))
@interface VMProximityMonitoringEnabledHolder : VMEmptyHolder {
}
+(id)sharedInstance;
-(void)notificationUIDeviceProximityStateDidChange:(id)notificationUIDeviceProximityState;
-(void)becameEmptyAction;
-(void)wasEmptyAction;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface EditController : VKMController {
	BOOL dirty;
	EditContext* _context;
}
@property(retain, nonatomic) EditContext* context;
+(id)main:(id)main context:(id)context;
-(void).cxx_destruct;
-(void)VKMEditDataChanged:(BOOL)changed;
-(int)VKMEditDataState;
-(void)buttonConfirm:(id)confirm;
-(void)endEditing;
-(void)VKMDismissModalSelf:(BOOL)aSelf;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(BOOL)dark;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKIdentity : XXUnknownSuperclass <NSCopying> {
	int _type;
	NSNumber* _oid;
	NSNumber* _iid;
	NSString* _access_key;
	NSString* _context;
	NSString* _track_code;
}
@property(retain, nonatomic) NSString* track_code;
@property(retain, nonatomic) NSString* context;
@property(retain, nonatomic) NSString* access_key;
@property(retain, nonatomic) NSNumber* iid;
@property(retain, nonatomic) NSNumber* oid;
@property(assign, nonatomic) int type;
+(id)parse:(id)parse withType:(int)type;
+(id)type:(int)type oid:(id)oid iid:(id)iid;
+(id)identityFromUrl:(id)url;
+(id)identityFromString:(id)string;
+(id)source:(id)source;
+(id)group:(id)group;
+(id)user:(id)user;
-(void).cxx_destruct;
-(BOOL)isOwner:(id)owner;
-(id)titleShort;
-(id)title;
-(BOOL)isEqualToIdentity:(id)identity;
-(unsigned)hash;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)isEqual:(id)equal;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface NewsSectionsController : VKMLiveController <NewsSectionCellDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NewsSectionsModel* model;
-(void)newsSectionCellDidChangeValue:(id)newsSectionCell;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogAudiosListModel : ListModel {
	NSNumber* _blockId;
}
@property(copy, nonatomic) NSNumber* blockId;
-(void).cxx_destruct;
-(id)listFromData:(id)data;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface TextEditController : EditController <UITextViewDelegate> {
	float keyboardHeight;
	MOTextView* _textView;
	NSString* _textTitle;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MOTextView* textView;
@property(retain, nonatomic) TextEditContext* context;
@property(retain, nonatomic) NSString* textTitle;
-(void).cxx_destruct;
-(void)textViewDidChange:(id)textView;
-(int)VKMEditDataState;
-(void)VKMEditDataChanged:(BOOL)changed;
-(unsigned)supportedInterfaceOrientations;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)updateForOrientation;
-(void)VKMDismissModalSelf:(BOOL)aSelf;
-(void)notificationKeyboard:(id)keyboard;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillLayoutSubviews;
-(void)viewDidLoad;
-(void)VKMControllerChromeInsetsApply;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteComment : ModelActionDelete {
}
@property(retain, nonatomic) VKCommentIdentity* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddComment : ModelActionAdd {
	VKIdentity* _parentIdentity;
	NSNumber* _from_group;
	NSDictionary* _result;
	NSNumber* _guid;
	VKStickerReferrerContext* _stickerReferrerContext;
}
@property(retain, nonatomic) VKStickerReferrerContext* stickerReferrerContext;
@property(retain, nonatomic) NSNumber* guid;
@property(retain, nonatomic) NSDictionary* result;
@property(assign, nonatomic) NSNumber* from_group;
@property(retain, nonatomic) VKIdentity* parentIdentity;
@property(retain, nonatomic) VKComment* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)singleSticker;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditComment : ModelActionEdit {
	VKIdentity* _parentIdentity;
}
@property(retain, nonatomic) VKIdentity* parentIdentity;
@property(retain, nonatomic) VKComment* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKP2PDetailedView : XXUnknownSuperclass {
	BOOL _sizeFromStatus;
	UIButton* _transferAcceptButton;
	UIButton* _transferCancelButton;
	UIButton* _transferRejectButton;
	UIButton* _transferRepeatButton;
	VKMoneyTransferAttachment* _item;
	UILabel* _transferRecipient;
	UILabel* _transferDate;
	VKMImageView* _avatarImageView;
	UILabel* _transferAmount;
	UILabel* _transferAmountCurrency;
	UILabel* _transferAmountSign;
	UILabel* _transferComment;
	UILabel* _transferStatus;
	UIImageView* _transferStatusIcon;
	UIView* _userInfo;
	UIView* _separator;
	UIView* _buttonsSeparator;
	NSNumberFormatter* _numberFormatter;
}
@property(assign, nonatomic) BOOL sizeFromStatus;
@property(retain, nonatomic) NSNumberFormatter* numberFormatter;
@property(retain, nonatomic) UIView* buttonsSeparator;
@property(retain, nonatomic) UIView* separator;
@property(retain, nonatomic) UIButton* transferRepeatButton;
@property(retain, nonatomic) UIButton* transferRejectButton;
@property(retain, nonatomic) UIButton* transferCancelButton;
@property(retain, nonatomic) UIButton* transferAcceptButton;
@property(retain, nonatomic) UIView* userInfo;
@property(retain, nonatomic) UIImageView* transferStatusIcon;
@property(retain, nonatomic) UILabel* transferStatus;
@property(retain, nonatomic) UILabel* transferComment;
@property(retain, nonatomic) UILabel* transferAmountSign;
@property(retain, nonatomic) UILabel* transferAmountCurrency;
@property(retain, nonatomic) UILabel* transferAmount;
@property(retain, nonatomic) VKMImageView* avatarImageView;
@property(retain, nonatomic) UILabel* transferDate;
@property(retain, nonatomic) UILabel* transferRecipient;
@property(retain, nonatomic) VKMoneyTransferAttachment* item;
-(void).cxx_destruct;
-(void)renderItem:(id)item;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StoryPreviewToCameraAnimatedTransitioning : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeletePost : ModelActionDelete {
	int _postType;
}
@property(assign, nonatomic) int postType;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)actionShowsSuccessConfirmation;
-(id)withPostType:(int)postType;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddPost : ModelAction {
	BOOL _from_group;
	BOOL _ssigned;
	BOOL _friends_only;
	BOOL _facebook;
	BOOL _twitter;
	NSString* _message;
	VKAttachments* _attachments;
	id _place;
	NSNumber* _guid;
	NSNumber* _publish_date;
	int _publishOrigin;
	NSString* _successMessage;
	VKPost* _result;
}
@property(retain, nonatomic) VKPost* result;
@property(retain, nonatomic) NSString* successMessage;
@property(assign, nonatomic) int publishOrigin;
@property(retain, nonatomic) NSNumber* publish_date;
@property(retain, nonatomic) NSNumber* guid;
@property(assign, nonatomic) BOOL twitter;
@property(assign, nonatomic) BOOL facebook;
@property(assign, nonatomic) BOOL friends_only;
@property(assign, nonatomic) BOOL ssigned;
@property(assign, nonatomic) BOOL from_group;
@property(retain, nonatomic) id place;
@property(retain, nonatomic) VKAttachments* attachments;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) VKIdentity* target;
+(id)fakeEditAction:(id)action;
+(int)domainType;
-(void).cxx_destruct;
-(id)actionSuccessMessage:(id)message;
-(int)actionResultForFailedRequestResult:(id)failedRequestResult;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)isEditAction;
-(BOOL)isPublishAction;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface ModelActionPinPost : ModelAction {
	BOOL _unpin;
}
@property(assign, nonatomic) BOOL unpin;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PostActionToggleExpand : ModelAction {
	VKIdentity* _host;
}
@property(retain, nonatomic) VKIdentity* host;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
+(id)target:(id)target host:(id)host;
-(void).cxx_destruct;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ProductDescriptionExpandableToggleAction : ModelAction {
}
+(int)domainType;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionLike : ModelAction {
	BOOL _like;
	VKIdentity* _companionIdentity;
	NSNumber* _known_count;
	NSNumber* _known_companion_count;
}
@property(retain, nonatomic) NSNumber* known_companion_count;
@property(retain, nonatomic) NSNumber* known_count;
@property(retain, nonatomic) VKIdentity* companionIdentity;
@property(assign, nonatomic) BOOL like;
@property(retain, nonatomic) VKIdentity* target;
+(id)like:(BOOL)like item:(id)item companion:(id)companion known_count:(id)count;
+(int)domainType;
-(void).cxx_destruct;
-(void)actionHandleResult:(id)result;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)actionQueueKey;
-(id)likeItemId;
@end

__attribute__((visibility("hidden")))
@interface ModelActionLikeComment : ModelActionLike {
}
@property(retain, nonatomic) VKCommentIdentity* target;
+(int)domainType;
-(id)likeItemId;
-(BOOL)actionShowsSuccessConfirmation;
-(id)actionQueueKey;
@end

__attribute__((visibility("hidden")))
@interface ModelActionRepost : ModelAction {
	NSString* _message;
	NSNumber* _group;
	NSNumber* _reposts;
	NSNumber* _likes;
}
@property(retain, nonatomic) NSNumber* likes;
@property(retain, nonatomic) NSNumber* reposts;
@property(retain, nonatomic) NSNumber* group;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) VKIdentity* target;
+(id)repost:(id)repost messsage:(id)messsage group:(id)group;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)hudSuccessEmptyVisible;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(void)updatePost:(id)post;
@end

__attribute__((visibility("hidden")))
@interface ExtrasInputView : XXUnknownSuperclass <ExtrasTabBarDelegate, ModelObserver, StickerSelectionViewDelegate, StickerSelectionViewPhotoEditorModeDelegate, LargeEmojiSelectionViewDelegate, EmojiInputDelegate, ExtrasTabBarScrollingDelegate, UIScrollViewDelegate, StickerSelectionViewScrollingDelegate, UIInputViewAudioFeedback, PagingViewDataSource, PagingViewDelegate> {
	float _tabBarOffset;
	int _toPage;
	int _fromPage;
	BOOL _photoEditorMode;
	BOOL _shouldShowRecentTab;
	id<ExtrasInputViewDelegate> _delegate;
	id<ExtraInputPanelViewPhotoEditorModeDelegate> _photoEditorModeDelegate;
	id<VKMNavDelegate> _navDelegate;
	MainModel* _main;
	StoreActiveModel* _stickersModel;
	PhotoEditorStickersModel* _photoEditorStickersModel;
	StickersLoadingManager* _stickersLoadingManager;
	StoreStockManager* _storeStockManager;
	ExtrasTabBar* _tabBar;
	NSArray* _productTabs;
	ExtrasTabBarItem* _storeTabBarItem;
	ExtrasTabBarItem* _settingsTabBarItem;
	ExtrasTabBarItem* _emojiTabBarItem;
	LargeEmojiSelectionView* _largeEmojiView;
	EmojiSelectionView* _emojiView;
	ExtrasInputViewRecentStickersTab* _recentStickersTab;
	ExtrasInputViewPhotoEditorStickersTab* _photoEditorStickersTab;
	NSArray* _stickerSelectionReusableViews;
	NSArray* _backgroundViews;
	UIView* _topSeparatorView;
	PagingView* _pagingView;
	VKMImageView* _currentBackgroundView;
	VKMImageView* _previousBackgroundView;
}
@property(readonly, assign, nonatomic) BOOL enableInputClicksWhenVisible;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) id<VKMNavDelegate> navDelegate;
@property(assign, nonatomic) id<ExtraInputPanelViewPhotoEditorModeDelegate> photoEditorModeDelegate;
@property(assign, nonatomic) id<ExtrasInputViewDelegate> delegate;
@property(retain, nonatomic) VKMImageView* previousBackgroundView;
@property(retain, nonatomic) VKMImageView* currentBackgroundView;
@property(retain, nonatomic) PagingView* pagingView;
@property(retain, nonatomic) UIView* topSeparatorView;
@property(retain, nonatomic) NSArray* backgroundViews;
@property(retain, nonatomic) NSArray* stickerSelectionReusableViews;
@property(retain, nonatomic) ExtrasInputViewPhotoEditorStickersTab* photoEditorStickersTab;
@property(retain, nonatomic) ExtrasInputViewRecentStickersTab* recentStickersTab;
@property(assign, nonatomic) BOOL shouldShowRecentTab;
@property(retain, nonatomic) EmojiSelectionView* emojiView;
@property(retain, nonatomic) LargeEmojiSelectionView* largeEmojiView;
@property(retain, nonatomic) ExtrasTabBarItem* emojiTabBarItem;
@property(retain, nonatomic) ExtrasTabBarItem* settingsTabBarItem;
@property(retain, nonatomic) ExtrasTabBarItem* storeTabBarItem;
@property(retain, nonatomic) NSArray* productTabs;
@property(retain, nonatomic) ExtrasTabBar* tabBar;
@property(retain, nonatomic) StoreStockManager* storeStockManager;
@property(retain, nonatomic) StickersLoadingManager* stickersLoadingManager;
@property(retain, nonatomic) PhotoEditorStickersModel* photoEditorStickersModel;
@property(retain, nonatomic) StoreActiveModel* stickersModel;
@property(retain, nonatomic) MainModel* main;
@property(assign, nonatomic) BOOL photoEditorMode;
-(void).cxx_destruct;
-(BOOL)canMakeOverlay;
-(int)currentTabType;
-(BOOL)selectStickerProductId:(id)anId;
-(void)showPopupForProductWithId:(id)anId referrerContext:(id)context;
-(BOOL)hasProducts;
-(void)showStoreController;
-(BOOL)extrasTabBar:(id)bar shouldSelectItem:(id)item;
-(void)extrasTabBar:(id)bar didSelectItem:(id)item animated:(BOOL)animated;
-(unsigned)pageIndexForTabBarItem:(id)tabBarItem;
-(void)stickerSelectionViewScrollViewWillEndDragging:(id)stickerSelectionViewScrollView withVelocity:(CGPoint)velocity;
-(void)stickerSelectionViewScrollViewDidScroll:(id)stickerSelectionViewScrollView;
-(void)extrasInputScrollViewWillAppear:(id)extrasInputScrollView;
-(void)extrasInputScrollViewWillEndDragging:(id)extrasInputScrollView withVelocity:(CGPoint)velocity;
-(void)extrasInputScrollViewDidScroll:(id)extrasInputScrollView;
-(void)setTabBarOffset:(float)offset animated:(BOOL)animated;
-(void)_makePageViewController;
-(void)_makeTabBarShouldBlur:(BOOL)_makeTabBar;
-(void)_makeBottomStoryBarShouldBlur:(BOOL)_makeBottomStoryBar;
-(void)informDelegateDidChangeTab;
-(void)didChangeTab;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)updateStoreBadgeValue;
-(void)updateTabsWithStickersModelIndex:(id)stickersModelIndex;
-(void)actionPhotoEditorModeStoreButton;
-(void)actionPhotoEditorModeCancel;
-(void)largeEmojiSelectionView:(id)view didSelectEmojiWithImage:(id)image emojiString:(id)string;
-(void)stickerSelectionView:(id)view didSelectStickerWithImage:(id)image stickerId:(id)anId;
-(void)stickerSelectionView:(id)view didSelectSticker:(id)sticker referrerContext:(id)context;
-(void)emojiSelectionView:(id)view didSelectEmoji:(id)emoji;
-(BOOL)productPurchasedAndActiveAndLoaded:(id)loaded;
-(BOOL)productPurchasedAndActive:(id)active;
-(void)renderBackgroundImageView:(id)view forPage:(int)page;
-(void)renderStickerSelectionView:(id)view forPage:(int)page;
-(id)productTabForPage:(int)page;
-(id)viewForPage:(int)page;
-(id)collectionViewLayoutWithColumnsCount:(unsigned)columnsCount;
-(float)collectionInteritemDistance;
-(float)collectionViewPadding;
-(void)pagingView:(id)view scrollingProgress:(float)progress fromPage:(int)page toPage:(int)page4;
-(void)pagingView:(id)view didChangeCurrentPage:(int)page;
-(id)currentScrollViewForPagingView:(id)pagingView;
-(id)pagingView:(id)view viewForPage:(int)page;
-(void)setActiveTab:(id)tab;
-(void)notificationProductPurchased:(id)purchased;
-(void)notificationProductLoadingChanged:(id)changed;
-(id)productTabForProductId:(id)productId;
-(id)initWithFrame:(CGRect)frame main:(id)main photoEditorMode:(BOOL)mode;
-(void)dealloc;
-(unsigned)numberOfNonProductPages;
-(BOOL)isPhotoEditorStickersPage:(unsigned)page;
-(BOOL)isRecentStickersPage:(unsigned)page;
-(BOOL)isEmojiPage:(unsigned)page;
@end

__attribute__((visibility("hidden")))
@interface ModelActionStatus : ModelAction {
	NSString* _status;
}
@property(retain, nonatomic) NSString* status;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StatusEditContext : TextEditContext {
}
@property(retain, nonatomic) VKProfile* domain;
-(unsigned)textLengthMax;
-(unsigned)textLengthMin;
-(id)title;
-(id)confirmAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface SubscriptionsSettingsViewController : VKMLiveController <MOCTLabelDelegate> {
	UIView* _footerView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIView* footerView;
@property(retain, nonatomic) SubscriptionsSettingsModel* model;
+(id)textAttributes;
-(void).cxx_destruct;
-(BOOL)route:(id)route;
-(void)moctlabel:(id)moctlabel linkClicked:(id)clicked;
-(void)notificationPurchase:(id)purchase;
-(void)notificationStore:(id)store;
-(int)VKMTableStyle;
-(id)footerAttributedString;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(void)actionActions:(id)actions;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VKVideoAlbum : VKDomain {
	NSString* _title;
	NSString* _photo;
	int _count;
}
@property(assign, nonatomic) int count;
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSString* title;
+(id)uploadedVideoFor:(id)aFor;
+(id)allVideoFor:(id)aFor;
+(id)owner:(id)owner album:(id)album;
-(void).cxx_destruct;
-(BOOL)isUserAlbum;
-(BOOL)isUploadedVideo;
-(BOOL)isAllVideo;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterGroup : XXUnknownSuperclass <VKImageFilter> {
	NSMutableArray* _filters;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)group;
+(id)groupWithFilters:(id)filters;
-(void).cxx_destruct;
-(id)infoString;
-(void)addFilter:(id)filter;
-(id)filters;
-(id)process:(id)process;
-(id)init;
-(id)initWithFilters:(id)filters;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumModel : ListModel {
	VideoAlbumContext* _albumContext;
}
@property(retain, nonatomic) VideoAlbumContext* albumContext;
-(void).cxx_destruct;
-(BOOL)isSameModel:(id)model;
-(id)addNewVideoItem;
-(void)handleLastItem:(id)item;
-(void)handleUploadFinished:(id)finished :(id)arg2;
-(void)handleNewUpload:(id)upload :(id)arg2;
-(void)handleEdit:(id)edit :(id)arg2;
-(void)handleAlbum:(id)album :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(void)deleteVideo:(id)video :(id)arg2;
-(void)addVideo:(id)video :(id)arg2;
-(BOOL)isAlbumTargetId:(id)anId;
-(void)registerForEvents:(id)events;
-(BOOL)isAlbumAdmin;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumAddVideo : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface FavVideosModel : ListModel {
}
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerManager : XXUnknownSuperclass {
	VKVideoPlayer* _currentlyPlayingVideoPlayer;
	NSTimer* _throttleTimer;
	NSMutableSet* _playersInUsePool;
	NSMutableSet* _availablePlayersPool;
	int _playersCreatedCount;
}
@property(readonly, assign, nonatomic) int playersCreatedCount;
@property(retain, nonatomic) NSMutableSet* availablePlayersPool;
@property(retain, nonatomic) NSMutableSet* playersInUsePool;
@property(retain, nonatomic) NSTimer* throttleTimer;
@property(assign, nonatomic) __weak VKVideoPlayer* currentlyPlayingVideoPlayer;
+(CGSize)previewSizeForVideo:(id)video fallbackViewSize:(CGSize)size;
+(BOOL)deviceModelIsIPhone6Plus:(id)plus;
+(BOOL)deviceModelIsIPhone5s:(id)a5s;
+(BOOL)deviceModelIsIPod:(id)pod;
+(BOOL)deviceModelIsIPhone5OrWorseIPhone:(id)phone;
+(double)playerItemSetupThrottleDelay;
+(double)playThrottleDelay;
+(BOOL)shouldStartAutoplayForVideo:(id)video session:(id)session;
+(BOOL)isAutoplayableVideo:(id)video;
+(id)pickVideoURLFromVideo:(id)video;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)pauseVideoInPlayer:(id)player;
-(BOOL)hasPlayingPlayer;
-(void)playVideoInPlayer:(id)player throttle:(BOOL)throttle force:(BOOL)force;
-(void)playVideoInPlayer:(id)player throttle:(BOOL)throttle;
-(void)playVideoInPlayer:(id)player;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TitleableRenderer : Renderer {
}
@property(retain, nonatomic) id<VKTitleable> domain;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface SketchController : XXUnknownSuperclass <SketchPreviewControllerDelegate> {
	id<SketchControllerDelegate> _delegate;
	SketchView* _sketchView;
	int _lastInterfaceOrientation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<SketchControllerDelegate> delegate;
@property(assign, nonatomic) int lastInterfaceOrientation;
@property(retain, nonatomic) SketchView* sketchView;
-(void).cxx_destruct;
-(void)sketchPreviewController:(id)controller confirmSendingImage:(id)image;
-(void)actionDone;
-(void)actionCancel;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)updateOrientationIfCan;
-(void)notifiactionDeviceOrientationDidChange:(id)notifiactionDeviceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)prefersStatusBarHidden;
@end

__attribute__((visibility("hidden")))
@interface StatsInfoSticker : XXUnknownSuperclass {
	NSNumber* _stickerId;
}
@property(retain, nonatomic) NSNumber* stickerId;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface StatsInfoSmile : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface StoryEditorPreviewViewController : VKMController <StoryEditorEditableTextAttachmentDelegate, StoryEditorDraggableAttachmentsContainerViewDelegate, StickersPickerViewControllerDelegate> {
	id<StoryEditorPreviewViewControllerDelegate> _delegate;
	StoryEditorNavigationBar* _customNavigationBar;
	UIButton* _continueButton;
	TransparentToolbar* _editActionsBottomToolbar;
	VKMask* _mask;
	StoryStatContext* _storyStatsContext;
	UIView<StoryEditorItemPreview>* _preview;
	id<StoryEditorItem> _item;
	UIImageView* _topScrimImageView;
	UIImageView* _bottomScrimImageView;
	SketchView* _sketchView;
	StoryEditorDraggableAttachmentsContainerView* _attachmentsContainerView;
	UIBarButtonItem* _saveToCameraRollButtonItem;
	UIButton* _muteButton;
	UIBarButtonItem* _addStickerButtonItem;
	UIBarButtonItem* _addTextButtonItem;
	UIBarButtonItem* _addGraffitiButtonItem;
	UIBarButtonItem* _addMusicButtonItem;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKMask* mask;
@property(retain, nonatomic) TransparentToolbar* editActionsBottomToolbar;
@property(retain, nonatomic) UIButton* continueButton;
@property(assign, nonatomic) __weak id<StoryEditorPreviewViewControllerDelegate> delegate;
@property(retain, nonatomic) UIBarButtonItem* addMusicButtonItem;
@property(retain, nonatomic) UIBarButtonItem* addGraffitiButtonItem;
@property(retain, nonatomic) UIBarButtonItem* addTextButtonItem;
@property(retain, nonatomic) UIBarButtonItem* addStickerButtonItem;
@property(retain, nonatomic) UIButton* muteButton;
@property(retain, nonatomic) UIBarButtonItem* saveToCameraRollButtonItem;
@property(retain, nonatomic) StoryEditorDraggableAttachmentsContainerView* attachmentsContainerView;
@property(retain, nonatomic) SketchView* sketchView;
@property(retain, nonatomic) UIImageView* bottomScrimImageView;
@property(retain, nonatomic) UIImageView* topScrimImageView;
@property(retain, nonatomic) id<StoryEditorItem> item;
@property(retain, nonatomic) UIView<StoryEditorItemPreview>* preview;
@property(retain, nonatomic) StoryEditorNavigationBar* customNavigationBar;
@property(retain, nonatomic) StoryStatContext* storyStatsContext;
+(id)createPreviewForItem:(id)item withFrame:(CGRect)frame;
-(void).cxx_destruct;
-(void)stickersPickerViewController:(id)controller didFinishWithEmojiImage:(id)emojiImage emojiString:(id)string;
-(void)stickersPickerViewController:(id)controller didFinishWithStickerImage:(id)stickerImage stickerId:(id)anId;
-(void)draggableAttachmentsContainerViewDidEndInteractions:(id)draggableAttachmentsContainerView;
-(void)draggableAttachmentsContainerViewWillBeginInteractions:(id)draggableAttachmentsContainerView;
-(void)storyEditorEditableTextAttachmentDidEndEditing:(id)storyEditorEditableTextAttachment;
-(void)storyEditorEditableTextAttachmentWillBeginEditing:(id)storyEditorEditableTextAttachment;
-(void)handleSketchViewDoneButtonTap;
-(void)handleSketchViewCancelButtonTap;
-(void)handleAddMusicButtonTap;
-(void)handleAddGraffitiButtonTap;
-(void)handleAddTextButtonTap;
-(void)handleAddStickerButtonTap;
-(void)handleContinueButtonTap;
-(void)handleSaveToCameraRollButtonTap;
-(void)handleMuteButtonTap;
-(void)handleCancelButtonTap;
-(id)storyStatsContextWithFinalMarksAndLengthInSecondsForVideo:(int)video;
-(int)getVideoOrientationFromAsset:(id)asset;
-(id)createVideoRenderingTaskForVideoItem:(id)videoItem;
-(void)saveVideoItem:(id)item;
-(void)savePhotoItem:(id)item;
-(id)renderPhoto:(id)photo;
-(id)buildRenderingTask;
-(void)attachStickerImage:(id)image minScale:(float)scale maxScale:(float)scale3 statsInfo:(id)info;
-(void)setSketchViewHidden:(BOOL)hidden animated:(BOOL)animated completion:(id)completion;
-(void)showControlsAnimated;
-(void)hideControlsAnimatedHideTopScrim:(BOOL)scrim hideBottomScrim:(BOOL)scrim2;
-(id)editActionBarButtonItemWithImageNamed:(id)imageNamed action:(SEL)action;
-(void)setupNavigationBar;
-(void)initializeContinueButton;
-(void)initializeBottomToolbar;
-(void)initializeScrims;
-(void)initializeAttachmentsContainer;
-(void)initializeSketchView;
-(void)initializePreview;
-(void)initializeSubviews;
-(int)VKMNavigationBarStyle;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)prefersStatusBarHidden;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithItem:(id)item mainModel:(id)model andModel:(id)model3;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorItemPhotoPreview : XXUnknownSuperclass <StoryEditorItemPreview> {
	StoryEditorItemPhoto* _item;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) StoryEditorItemPhoto* item;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame item:(id)item;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorItemVideoPreview : XXUnknownSuperclass <StoryEditorItemPreview> {
	StoryEditorItemVideo* _item;
	AVAsset* _asset;
	AVPlayer* _player;
	AVPlayerLayer* _playerLayer;
	AVPlayerItem* _playerItem;
	KVOObserver* _playerLayerObserver;
	UIImageView* _placeholderImageView;
	id _periodicTimeObserver;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) StoryEditorItemVideo* item;
@property(retain, nonatomic) id periodicTimeObserver;
@property(retain, nonatomic) UIImageView* placeholderImageView;
@property(retain, nonatomic) KVOObserver* playerLayerObserver;
@property(retain, nonatomic) AVPlayerItem* playerItem;
@property(retain, nonatomic) AVPlayerLayer* playerLayer;
@property(retain, nonatomic) AVPlayer* player;
@property(retain, nonatomic) AVAsset* asset;
-(void).cxx_destruct;
-(void)setMuted:(BOOL)muted;
-(void)didDisappear;
-(void)willDisappear;
-(void)didAppear;
-(void)willAppear;
-(void)handleApplicationDidBecomeActiveNotification:(id)handleApplication;
-(void)handleApplicationWillResignActiveNotification:(id)handleApplication;
-(void)handlePlayerLayerReadyForDisplayChange:(BOOL)displayChange;
-(void)handlePlayerItemDidPlayToEndNotification:(id)handlePlayerItem;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame item:(id)item;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorItemPhoto : XXUnknownSuperclass <StoryEditorItem> {
	UIImage* _image;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(BOOL)muteSupported;
-(BOOL)musicSupported;
-(BOOL)drawingSupported;
-(BOOL)textAttachmentsSupported;
-(BOOL)stickersAttachmentsSupported;
-(id)initWithImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorItemVideo : XXUnknownSuperclass <StoryEditorItem> {
	AVAsset* _asset;
	UIImage* _placeholderImage;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImage* placeholderImage;
@property(readonly, assign, nonatomic) AVAsset* asset;
-(void).cxx_destruct;
-(BOOL)muteSupported;
-(BOOL)musicSupported;
-(BOOL)drawingSupported;
-(BOOL)textAttachmentsSupported;
-(BOOL)stickersAttachmentsSupported;
-(id)initWithAsset:(id)asset;
@end

__attribute__((visibility("hidden")))
@interface DocsSearchModel : SearchModel {
}
-(id)process:(id)process;
-(id)method;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddAudio : ModelActionAdd {
}
@property(retain, nonatomic) VKAudio* added;
@property(retain, nonatomic) VKAudio* target;
+(int)domainType;
-(BOOL)hudSuccessEmptyVisible;
-(BOOL)actionShowsSuccessConfirmation;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteAudio : ModelActionDelete {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReorderAudio : ModelActionReorder {
	VKIdentity* _playlistIden;
}
@property(retain, nonatomic) VKIdentity* playlistIden;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionMoveAudio : ModelActionMove {
}
@property(retain, nonatomic) VKAudio* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionGetAudioRecommendations : ModelAction {
	NSArray* _audios;
}
@property(retain, nonatomic) NSArray* audios;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddAudiosToPlaylist : ModelAction {
	NSArray* _ownedAddedAudios;
	NSArray* _externalAddedAudios;
	NSArray* _allAddedAudios;
	VKIdentity* _playlistIden;
}
@property(copy, nonatomic) VKIdentity* playlistIden;
@property(retain, nonatomic) NSArray* allAddedAudios;
@property(retain, nonatomic) NSArray* externalAddedAudios;
@property(retain, nonatomic) NSArray* ownedAddedAudios;
@property(retain, nonatomic) NSArray* target;
+(int)domainType;
+(id)target:(id)target playlistIden:(id)iden;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)hudSuccessEmptyVisible;
@end

__attribute__((visibility("hidden")))
@interface ModelActionRemoveAudioFromPlaylist : ModelActionDelete {
	VKIdentity* _playlistIden;
}
@property(copy, nonatomic) VKIdentity* playlistIden;
+(int)domainType;
+(id)target:(id)target playlistIden:(id)iden;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionShuffleAudio : ModelAction {
	VKIdentity* _playlistIden;
	NSArray* _audios;
}
@property(retain, nonatomic) NSArray* audios;
@property(retain, nonatomic) VKIdentity* playlistIden;
@property(retain, nonatomic) NSNumber* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionFollowAudioPlaylist : ModelActionAdd {
	id<VKSource> _source;
}
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) VKAudioPlaylist* added;
@property(retain, nonatomic) VKAudioPlaylist* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)hudSuccessEmptyVisible;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteAudioPlaylist : ModelActionDelete {
}
+(int)domainType;
-(BOOL)hudSuccessEmptyVisible;
-(BOOL)actionShowsSuccessConfirmation;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddAudioPlaylist : ModelActionAdd {
	id<VKSource> _source;
}
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) VKAudioPlaylist* added;
@property(retain, nonatomic) VKAudioPlaylist* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditAudioPlaylist : ModelActionEdit {
}
@property(retain, nonatomic) VKAudioPlaylist* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionUpdateAudioPlaylistCover : ModelActionRefresh {
}
@property(retain, nonatomic) VKAudioPlaylist* target;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteAudioPlaylistCover : ModelAction {
}
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReorderAudioPlaylists : ModelActionReorder {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionGetAudioPlaylistAudios : ModelAction {
	int _count;
	NSArray* _audios;
}
@property(retain, nonatomic) NSArray* audios;
@property(assign, nonatomic) int count;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistItemEditContext : ItemEditContext {
}
@property(retain, nonatomic) VKAudioPlaylist* domain;
-(int)descrMax;
-(int)descrMin;
-(int)titleMax;
-(int)titleMin;
-(id)descrPlaceholder;
-(id)titlePlaceholder;
-(id)editTitle;
-(BOOL)editPrivacy;
-(Class)editControllerClass;
-(void)useDomain:(id)domain edit:(BOOL)edit;
-(id)confirmAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface AsyncOperation : XXUnknownSuperclass {
	BOOL finished;
	BOOL executing;
	BOOL _resultSuccess;
	float _progress;
	id<Cancellable> _operation;
	NSString* _resultMessage;
}
@property(retain) NSString* resultMessage;
@property(assign, nonatomic) BOOL resultSuccess;
@property(retain) id<Cancellable> operation;
@property(readonly, assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)runAsync;
-(BOOL)asyncOpCheckCancelInPhase:(id)phase;
-(void)asyncOpProgress:(float)progress;
-(void)asyncOpFinish;
-(void)cancel;
-(void)start;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface UploadContext : ClientBasedUploadContext {
	VKSession* _session;
	EventContext* _eventContext;
}
@property(retain, nonatomic) EventContext* eventContext;
@property(retain, nonatomic) VKSession* session;
+(id)contextWithSession:(id)session;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface BaseSettingsController : VKMTableController {
	NSDate* _lastUpdate;
}
@property(retain, nonatomic) NSDate* lastUpdate;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)render;
-(id)settingsCellWithTitle:(id)title style:(int)style switch:(SEL)aSwitch;
-(Class)cellClass;
-(void)VKMScrollViewSetFooter:(id)footer;
-(BOOL)VKMScrollViewDisablePTR;
-(int)VKMTableStyle;
-(void)VKMControllerChromeInsetsApply;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface VKMInputTextCell : VKMCell {
	UITextField* _inputText;
	float _minTextWidth;
}
@property(assign, nonatomic) float minTextWidth;
@property(retain, nonatomic) UITextField* inputText;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKMSecureInputTextCell : VKMInputTextCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AlbumPhotoUploadContext : PhotoUploadContext <DomainEvent> {
	VKIdentity* _album;
	NSString* _caption;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* caption;
@property(retain, nonatomic) VKIdentity* album;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(id)requestForUploadServer;
@end

__attribute__((visibility("hidden")))
@interface VKAccountInfo : VKDomain {
	BOOL _no_wall_replies;
	BOOL _own_posts_default;
	BOOL _community_comments;
	int _intro;
	NSDictionary* _globalSettings;
	NSString* _support_url;
	NSString* _phone;
	int _phone_status;
	NSString* _change_phone_url;
	NSString* _email;
	int _email_status;
	NSString* _change_email_url;
	VKAccountInfoP2PParams* _p2pParams;
	VKAccountInfoVKLiveParams* _liveParams;
	VKAccountInfoAudioAdParams* _audioAdParams;
}
@property(retain, nonatomic) VKAccountInfoAudioAdParams* audioAdParams;
@property(retain, nonatomic) VKAccountInfoVKLiveParams* liveParams;
@property(retain, nonatomic) VKAccountInfoP2PParams* p2pParams;
@property(retain, nonatomic) NSString* change_email_url;
@property(assign, nonatomic) int email_status;
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* change_phone_url;
@property(assign, nonatomic) int phone_status;
@property(retain, nonatomic) NSString* phone;
@property(retain, nonatomic) NSString* support_url;
@property(retain, nonatomic) NSDictionary* globalSettings;
@property(assign, nonatomic) BOOL community_comments;
@property(assign, nonatomic) BOOL own_posts_default;
@property(assign, nonatomic) BOOL no_wall_replies;
@property(assign, nonatomic) int intro;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAccountGlobalSetting : VKRenderable {
	BOOL _settingAvailable;
	NSString* _settingName;
	NSString* _value;
}
@property(assign, nonatomic) BOOL settingAvailable;
@property(retain, nonatomic) NSString* value;
@property(retain, nonatomic) NSString* settingName;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAccountInfoP2PParams : VKRenderable {
	unsigned _minAmount;
	unsigned _maxAmount;
	NSString* _currency;
}
@property(retain, nonatomic) NSString* currency;
@property(assign, nonatomic) unsigned maxAmount;
@property(assign, nonatomic) unsigned minAmount;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAccountInfoVKLiveParams : VKRenderable {
	NSString* _scheme;
	NSString* _store_url;
}
@property(retain, nonatomic) NSString* store_url;
@property(retain, nonatomic) NSString* scheme;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAccountInfoAudioAdParams : VKRenderable {
	unsigned _track_limit;
	int _types_allowed;
	NSArray* _sections_allowed;
}
@property(retain, nonatomic) NSArray* sections_allowed;
@property(assign, nonatomic) int types_allowed;
@property(assign, nonatomic) unsigned track_limit;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface SketchPreviewView : XXUnknownSuperclass {
	VKMImageView* _sketchImageView;
	UIButton* _sendButton;
	UIImage* _image;
	VKDoc* _graffitiDoc;
	UIActivityIndicatorView* _indicator;
}
@property(retain, nonatomic) UIActivityIndicatorView* indicator;
@property(retain, nonatomic) VKDoc* graffitiDoc;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) VKMImageView* sketchImageView;
-(void).cxx_destruct;
-(void)updateStateAsReady;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SketchPreviewController : XXUnknownSuperclass <PopupWindowController> {
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	id<SketchPreviewControllerDelegate> _delegate;
	PopupWindowView* _popupWindowView;
	UIImage* _image;
	VKDoc* _graffitiDoc;
	SketchPreviewView* _sketchPreviewView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<SketchPreviewControllerDelegate> delegate;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) SketchPreviewView* sketchPreviewView;
@property(retain, nonatomic) VKDoc* graffitiDoc;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) PopupWindowView* popupWindowView;
-(void).cxx_destruct;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarStyle;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)sendButtonAction:(id)action;
-(void)loadView;
-(void)attachGraffitiDoc:(id)doc;
-(void)attachImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface AsyncOperationHUD : VKHUD {
	BOOL _tracksProgress;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(assign, nonatomic) BOOL tracksProgress;
@property(retain, nonatomic) AsyncOperation* op;
-(void).cxx_destruct;
-(id)withHandler:(id)handler;
-(id)initWithFrame:(CGRect)frame;
-(void)startAsync:(id)async progress:(BOOL)progress;
-(void)handleFinished;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface EventManager : XXUnknownSuperclass {
}
+(void)fireEvent:(id)event session:(id)session context:(id)context;
+(id)contextFromNotification:(id)notification;
+(id)eventFromNotification:(id)notification;
@end

__attribute__((visibility("hidden")))
@interface EventContext : VKMNavContext {
	BOOL _delayForegroundUpdate;
	id _delayedModel;
}
@property(retain, nonatomic) id delayedModel;
@property(assign, nonatomic) BOOL delayForegroundUpdate;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PhotoStreamModel : PhotoAlbumModel {
}
@property(retain, nonatomic) PhotoStreamContext* lastContext;
+(BOOL)forceIsAdultCheck;
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(void)handlePhotoUpload:(id)upload :(id)arg2;
-(void)handleDeletePhoto:(id)photo :(id)arg2;
-(BOOL)isProfileAlbumFor:(id)aFor;
-(void)registerForEvents:(id)events;
-(void)processStoriesData:(id)data context:(id)context;
-(id)process:(id)process;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)itemsToAppend:(id)append to:(id)to context:(id)context;
-(id)spawnContext:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PhotoStreamContext : AlbumPhotoFeedContext {
	NSMutableSet* _photosIdens;
	NSArray* _stories;
	NSMutableDictionary* _sources;
}
@property(retain, nonatomic) NSMutableDictionary* sources;
@property(retain, nonatomic) NSArray* stories;
@property(retain, nonatomic) NSMutableSet* photosIdens;
+(id)duplicate:(id)duplicate;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
-(void)addPhotos:(id)photos;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderIgnoreItem : ActionOptionsProviderActionBuilder {
	VKIdentity* _item;
}
@property(readonly, assign, nonatomic) VKIdentity* item;
+(id)item:(id)item;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(id)initWithItem:(id)item;
@end

__attribute__((visibility("hidden")))
@interface StickerProductDescriptionView : XXUnknownSuperclass {
	UILabel* _authorLabel;
	UILabel* _titleLabel;
	StoreStatusButton* _statusButton;
}
@property(retain, nonatomic) StoreStatusButton* statusButton;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UILabel* authorLabel;
-(void).cxx_destruct;
-(id)stockItem;
-(void)attach:(id)attach;
-(void)layoutSubviews;
-(id)initWithSession:(id)session;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumEditModel : PhotoAlbumModel {
}
-(void)handleEdit:(id)edit :(id)arg2;
-(void)handleMove:(id)move :(id)arg2;
-(void)handleReorder:(id)reorder :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleUpload:(id)upload :(id)arg2;
-(void)deletePhoto:(id)photo :(id)arg2;
-(void)addPhoto:(id)photo :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)initialIndex;
-(id)indexItemsFromPhotos:(id)photos;
-(id)itemsToAppend:(id)append to:(id)to;
@end

__attribute__((visibility("hidden")))
@interface PhotoEditRenderer : Renderer {
}
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
@end

__attribute__((visibility("hidden")))
@interface StickerImageLoader : VKMImageLoader {
	int _attempts;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(assign, nonatomic) int attempts;
-(void).cxx_destruct;
-(void)complete:(id)complete cached:(BOOL)cached;
@end

__attribute__((visibility("hidden")))
@interface StickersLoadingManager : XXUnknownSuperclass {
	NSString* _basePath;
	NSMutableSet* _loadedProductIds;
	NSMutableSet* _loadingProductIds;
	VKMImage* _imagesLoader;
	NSSet* _preloadedStickerIds;
}
@property(retain, nonatomic) NSString* basePath;
@property(readonly, retain, nonatomic) NSSet* preloadedStickerIds;
@property(retain, nonatomic) VKMImage* imagesLoader;
@property(retain, nonatomic) NSMutableSet* loadingProductIds;
@property(retain, nonatomic) NSMutableSet* loadedProductIds;
+(BOOL)isNotification:(id)notification forProduct:(id)product;
+(id)sharedManager;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)setupLoader:(id)loader forImageType:(XXStruct_m5P4pB*)imageType productId:(id)anId stickerId:(id)anId4 remoteBaseUrl:(id)url;
-(void)_clearCache;
-(void)_clearLoadedList;
-(void)unloadProductId:(id)anId handler:(id)handler;
-(void)loadProduct:(id)product;
-(int)loadingStateForProductId:(id)productId;
-(void)notifyStickerProductId:(id)anId;
-(void)modifyLoadedProductIds:(id)ids;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AudioDashboardAddPlaylistCell : VKMCell {
}
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumEditController : PhotoAlbumController {
}
@property(retain, nonatomic) PhotoAlbumEditModel* model;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DefaultNavResolver : DispatchNavResolver {
}
+(id)sharedResolver;
-(void)registerRoutes:(id)routes;
@end

__attribute__((visibility("hidden")))
@interface VKMNavContext : XXUnknownSuperclass {
	BOOL _preserveModal;
	BOOL _preserveStatsContext;
	MainModel* _main;
	id<VKMNavRoot> _rootNav;
	UINavigationController* _navController;
	VKMController* _controller;
	VKIdentity* _sourceIden;
	StatContext* _statsContext;
	StatsRef* _statsRef;
}
@property(assign, nonatomic) BOOL preserveStatsContext;
@property(assign, nonatomic) BOOL preserveModal;
@property(retain, nonatomic) StatsRef* statsRef;
@property(retain, nonatomic) StatContext* statsContext;
@property(retain, nonatomic) VKIdentity* sourceIden;
@property(retain, nonatomic) VKMController* controller;
@property(retain, nonatomic) UINavigationController* navController;
@property(retain, nonatomic) id<VKMNavRoot> rootNav;
@property(retain, nonatomic) MainModel* main;
+(id)applicationNavRoot;
-(void).cxx_destruct;
-(id)prevViewController;
-(id)topViewController;
-(BOOL)routeSource:(id)source context:(id)context;
-(BOOL)routeSource:(id)source;
-(BOOL)routeSourceObject:(id)object context:(id)context;
-(BOOL)routeURL:(id)url browser:(BOOL)browser;
-(BOOL)routeLink:(id)link browser:(BOOL)browser;
-(BOOL)handleRouteResult:(id)result browser:(BOOL)browser;
-(void)safariVC:(id)vc;
-(void)webAppBrowser:(id)browser;
-(void)browser:(id)browser;
-(void)presentStoryFullscreenControllerWithUsersStoryIdens:(id)usersStoryIdens startFromPage:(int)page fromSource:(id)source;
-(void)presentStoriesEditorViewControllerWithMask:(id)mask;
-(void)presentVideoPlayerViewControllerForVideo:(id)video fromFeedVideoView:(id)feedVideoView navDelegate:(id)delegate;
-(void)presentVideoPlayerViewControllerForVideo:(id)video;
-(void)photoFeed:(id)feed thumbnails:(id)thumbnails;
-(void)dismissModal:(BOOL)modal completion:(id)completion;
-(void)dismissModal:(BOOL)modal;
-(void)modal:(id)modal animated:(BOOL)animated;
-(void)modal:(id)modal resolver:(id)resolver animated:(BOOL)animated transitionDelegate:(id)delegate modalPresentationStyle:(int)style;
-(void)modal:(id)modal resolver:(id)resolver animated:(BOOL)animated;
-(void)swapTopViewController:(id)controller;
-(void)hideModalsAnimated:(BOOL)animated completeBlock:(id)block;
-(void)pop;
-(void)pop:(BOOL)pop;
-(void)popTo:(id)to animated:(BOOL)animated;
-(void)popTo:(id)to;
-(void)push:(id)push;
-(void)push:(id)push animated:(BOOL)animated;
-(void)push:(id)push resolver:(id)resolver animated:(BOOL)animated;
-(void)replace:(id)replace;
-(void)reset:(id)reset;
-(void)resetMulti:(id)multi;
-(id)withPreserveStatsContext:(BOOL)preserveStatsContext;
-(void)clearModals;
-(id)foregroundModel;
-(BOOL)isCurrentContext;
@end

__attribute__((visibility("hidden")))
@interface VKMSourceTarget : XXUnknownSuperclass {
	NSNumber* _source_id;
}
@property(retain, nonatomic) NSNumber* source_id;
+(id)source:(id)source;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorSegmentedControl : VKSelector {
	UISegmentedControl* _segmentedControl;
	float _segmentWidth;
}
@property(assign, nonatomic) float segmentWidth;
@property(retain, nonatomic) UISegmentedControl* segmentedControl;
-(void).cxx_destruct;
-(void)reloadData;
-(void)updateSelection;
-(void)actionSelectionChanged:(id)changed;
-(void)layoutView;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface VKMBrowserTarget : XXUnknownSuperclass {
	BOOL _simpleChrome;
	VKMBrowserController* _weakBrowser;
	NSURL* _url;
}
@property(assign, nonatomic) BOOL simpleChrome;
@property(retain, nonatomic) NSURL* url;
@property(assign, nonatomic) VKMBrowserController* weakBrowser;
-(void).cxx_destruct;
-(void)fillShareActions:(id)actions;
-(BOOL)canShare;
-(id)targetURL;
-(id)title;
-(void)reload;
-(void)render;
-(void)stop;
-(void)load;
@end

__attribute__((visibility("hidden")))
@interface VKMPageTarget : VKMBrowserTarget {
	id<VKTextPage> _page;
}
@property(retain, nonatomic) id<VKTextPage> page;
+(id)page:(id)page;
-(void).cxx_destruct;
-(void)reload;
-(void)stop;
-(void)load;
-(void)render;
-(id)targetURL;
-(id)title;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VKMURLTarget : VKMBrowserTarget {
	BOOL _safe;
	NSString* _safeRef;
}
@property(copy, nonatomic) NSString* safeRef;
@property(assign, nonatomic) BOOL safe;
+(id)url:(id)url safe:(BOOL)safe safeRef:(id)ref;
+(id)url:(id)url safe:(BOOL)safe;
-(void).cxx_destruct;
-(void)reload;
-(id)targetURL;
-(id)title;
-(void)stop;
-(void)load;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VKMURLDocTarget : VKMBrowserTarget {
	VKDoc* _document;
}
@property(readonly, retain, nonatomic) VKDoc* document;
+(id)withDoc:(id)doc;
-(void).cxx_destruct;
-(void)fillShareActions:(id)actions;
-(BOOL)canShare;
-(void)reload;
-(id)targetURL;
-(id)title;
-(void)stop;
-(void)load;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VKMHtmlTarget : VKMBrowserTarget {
	NSString* _html;
}
@property(retain, nonatomic) NSString* html;
+(id)targetWithHTML:(id)html;
-(void).cxx_destruct;
-(void)reload;
-(id)targetURL;
-(id)title;
-(void)stop;
-(void)load;
@end

__attribute__((visibility("hidden")))
@interface VKMNavResolver : XXUnknownSuperclass {
}
+(id)resolver;
-(BOOL)route:(id)route context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ExtrasInputViewPhotoEditorStickersTab : XXUnknownSuperclass <ExtrasInputViewStickersTab> {
	BOOL hasReloaded;
	PhotoEditorStickersModel* _model;
	ExtrasTabBarItem* _tabBarItem;
	StickerSelectionView* _stickerSelectionView;
	NSArray* _stickerIds;
	NSString* _stickersBaseUrl;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* stickersBaseUrl;
@property(retain, nonatomic) NSArray* stickerIds;
@property(retain, nonatomic) StickerSelectionView* stickerSelectionView;
@property(readonly, retain, nonatomic) ExtrasTabBarItem* tabBarItem;
@property(readonly, retain, nonatomic) PhotoEditorStickersModel* model;
+(id)tabWithPhotoEditorStickersModel:(id)photoEditorStickersModel;
-(void).cxx_destruct;
-(id)stickerSelectionViewBaseUrl:(id)url;
-(id)stickerSelectionViewStickerIds:(id)ids;
-(void)reloadIfNeeded;
-(void)setNeedsReload;
-(id)init;
-(id)initWithPhotoEditorStickersModel:(id)photoEditorStickersModel;
@end

__attribute__((visibility("hidden")))
@interface DispatchNavResolver : VKMNavResolver {
	NSMutableDictionary* _dispatch;
}
@property(retain, nonatomic) NSMutableDictionary* dispatch;
+(id)resolver;
-(void).cxx_destruct;
-(BOOL)route:(id)route context:(id)context;
-(void)registerRoutes:(id)routes;
@end

__attribute__((visibility("hidden")))
@interface LookupNavResolver : VKMNavResolver {
	BOOL _allowsAll;
	NSArray* _lookupClassess;
	id _lookupBlock;
	NSMutableSet* _allow;
	int _dismissMode;
}
@property(assign, nonatomic) int dismissMode;
@property(assign, nonatomic) BOOL allowsAll;
@property(retain, nonatomic) NSMutableSet* allow;
@property(copy, nonatomic) id lookupBlock;
@property(retain, nonatomic) NSArray* lookupClassess;
+(BOOL)isLookupResolver:(id)resolver forClass:(Class)aClass;
+(id)lookup:(Class)lookup block:(id)block;
+(id)lookupClasses:(id)classes block:(id)block;
-(id)setupDismissMode:(int)mode;
-(id)allowAll;
-(id)allow:(Class)allow;
-(BOOL)route:(id)route context:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface DecorationComponent : Component5 {
}
+(id)scrimDecoratedComponent:(id)component image:(id)image;
+(id)scrimDecoratedComponent:(id)component;
+(id)component:(id)component decoratedWithTopComponent:(id)topComponent;
+(id)topScrimDecoratedComponent:(id)component;
+(id)topScrimComponent;
+(id)component:(id)component withBackgroundColor:(id)backgroundColor;
@end

__attribute__((visibility("hidden")))
@interface BackgroundColorComponent : Component5 {
	UIColor* _color;
}
@property(readonly, assign, nonatomic) UIColor* color;
+(id)color:(id)color;
-(void).cxx_destruct;
-(id)initWithColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface BackgroundColorComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak UIView* view;
@property(retain, nonatomic) BackgroundColorComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface VKTimeout : XXUnknownSuperclass {
	NSDate* _lastUpdateDate;
	double _timeout;
}
@property(assign, nonatomic) double timeout;
@property(retain, nonatomic) NSDate* lastUpdateDate;
+(id)timeoutWithTimeoutInterval:(double)timeoutInterval startImmediately:(BOOL)immediately;
-(void).cxx_destruct;
-(BOOL)isTimedOut;
-(void)updateNow;
-(id)initWithTimeoutInterval:(double)timeoutInterval startImmediately:(BOOL)immediately;
-(id)initWithTimeoutInterval:(double)timeoutInterval;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsBlockCell : AudioBlockCellWithCollectionView {
}
@property(retain, nonatomic) AudioPlaylistsBlock* domain;
+(float)interitemDistance;
+(Class)collectionCellClass;
-(void)actionShowAllButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface VKHacksWebViewVideoContext : XXUnknownSuperclass {
	UIWebView* _webView;
}
@property(readonly, retain, nonatomic) UIWebView* webView;
+(id)detail:(id)detail;
+(id)contextForViewController:(id)viewController;
-(void).cxx_destruct;
-(void)dismiss:(id)dismiss;
-(id)initWithWebView:(id)webView;
@end

__attribute__((visibility("hidden")))
@interface VKHacks : XXUnknownSuperclass {
}
+(id)fullscreenVideoViewController;
@end

__attribute__((visibility("hidden")))
@interface GifPlayStats : XXUnknownSuperclass <VideoPlayStats> {
	VKSession* _session;
	VKIdentity* _iden;
	StatsRef* _ref;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) StatsRef* ref;
@property(readonly, assign, nonatomic) VKIdentity* iden;
@property(readonly, assign, nonatomic) VKSession* session;
+(id)session:(id)session gif:(id)gif ref:(id)ref;
-(void).cxx_destruct;
-(void)toggleFullscreen:(BOOL)fullscreen;
-(void)toggleVolume:(BOOL)volume;
-(void)progress:(double)progress;
-(void)complete;
-(void)resume;
-(void)pause;
-(void)play:(BOOL)play;
-(id)initWithSession:(id)session gif:(id)gif ref:(id)ref;
@end

__attribute__((visibility("hidden")))
@interface BottomRefreshControl : XXUnknownSuperclass {
}
-(void)endRefreshing;
-(void)_subscribeToScrollNotificationsIfNecessary:(id)scrollNotificationsIfNecessary;
@end

__attribute__((visibility("hidden")))
@interface BottomRefreshView : XXUnknownSuperclass {
	BOOL skipOffset;
	UIRefreshControl* _refresh;
	UITableView* _weakTableView;
}
@property(readonly, retain, nonatomic) UIRefreshControl* refresh;
@property(assign, nonatomic) UITableView* weakTableView;
+(void)tableView:(id)view adjustInsets:(id)insets;
+(void)initialize;
-(void).cxx_destruct;
-(void)didMoveToSuperview;
-(void)layoutSubviews;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setContentOffset:(CGPoint)offset;
-(void)setFrame:(CGRect)frame;
-(double)_verticalVelocity;
-(BOOL)isTracking;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface BottomRefreshTableView : XXUnknownSuperclass {
	UIRefreshControl* _bottomRefreshControl;
}
@property(retain, nonatomic) UIRefreshControl* bottomRefreshControl;
-(void).cxx_destruct;
-(float)_rubberBandOffsetForOffset:(float)offset maxOffset:(float)offset2 minOffset:(float)offset3 range:(float)range outside:(BOOL*)outside;
-(id)initWithFrame:(CGRect)frame style:(int)style;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumsModel : ListModel {
	BOOL _needSystem;
	VideoAlbumContext* _albumsContext;
}
@property(assign, nonatomic) BOOL needSystem;
@property(retain, nonatomic) VideoAlbumContext* albumsContext;
-(void).cxx_destruct;
-(void)handleAdd:(id)add :(id)arg2;
-(void)handleEdit:(id)edit :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(BOOL)isOwnerAlbum:(id)album;
-(void)registerForEvents:(id)events;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface PromptAlertView : XXUnknownSuperclass {
	UITextField* _field;
	id _dismiss;
	id _cancel;
}
@property(retain, nonatomic) UITextField* field;
@property(copy, nonatomic) id cancel;
@property(copy, nonatomic) id dismiss;
+(id)alertViewWithTitle:(id)title message:(id)message prompt:(id)prompt cancelButtonTitle:(id)title4 otherButtonTitles:(id)titles dismiss:(id)dismiss cancel:(id)cancel;
-(void).cxx_destruct;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumsEditModel : ListModel {
}
-(void)handleEdit:(id)edit :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(void)handleReorder:(id)reorder :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)isOwnerAlbum:(id)album;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface MoneyCancelTransferAction : ModelAction {
	VKIdentity* _transferIden;
}
@property(readonly, assign, nonatomic) VKIdentity* transferIden;
+(int)domainType;
+(id)transfer:(id)transfer;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)initWithTransferIden:(id)transferIden;
@end

__attribute__((visibility("hidden")))
@interface MoneyAcceptTransferAction : ModelAction {
	BOOL _success;
	VKIdentity* _transferIden;
}
@property(readonly, assign, nonatomic) BOOL success;
@property(readonly, assign, nonatomic) VKIdentity* transferIden;
+(int)domainType;
+(id)transfer:(id)transfer success:(BOOL)success;
-(void).cxx_destruct;
-(void)runInContext:(id)context;
-(id)initWithTransferId:(id)transferId success:(BOOL)success;
@end

__attribute__((visibility("hidden")))
@interface MoneySendCompleteTransferAction : ModelAction {
}
+(int)domainType;
+(id)action;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MoneySendTransferAction : ModelAction {
	NSNumber* _recipient;
	NSNumber* _amount;
	NSString* _message;
	NSString* _currency;
	NSURL* _redirectUrl;
}
@property(copy, nonatomic) NSURL* redirectUrl;
@property(readonly, copy, nonatomic) NSString* currency;
@property(readonly, copy, nonatomic) NSString* message;
@property(readonly, assign, nonatomic) NSNumber* amount;
@property(readonly, assign, nonatomic) NSNumber* recipient;
+(int)domainType;
+(id)recipient:(id)recipient amount:(id)amount message:(id)message currency:(id)currency;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)initWithRecipient:(id)recipient amount:(id)amount message:(id)message currency:(id)currency;
@end

__attribute__((visibility("hidden")))
@interface MasksSectionsLocationInfo : XXUnknownSuperclass {
	BOOL _locationInfoRestrictedOrFailed;
	BOOL _locationRestrictedOrFailed;
	CLLocationCoordinate2D _location;
}
@property(readonly, assign, nonatomic) BOOL locationInfoRestrictedOrFailed;
@property(assign, nonatomic) BOOL locationRestrictedOrFailed;
@property(assign, nonatomic) CLLocationCoordinate2D location;
+(id)locationInfoRestrictedOrFailed;
+(id)locationInfoWithLocation:(CLLocationCoordinate2D)location;
-(BOOL)coordinateIsSettled;
@end

__attribute__((visibility("hidden")))
@interface StatsRef : XXUnknownSuperclass <NSCopying> {
	NSString* _name;
	NSString* _context;
	int _audioContext;
	NSString* _source;
}
@property(readonly, assign, nonatomic) NSString* source;
@property(readonly, assign, nonatomic) int audioContext;
@property(retain, nonatomic) NSString* context;
@property(readonly, assign, nonatomic) NSString* name;
+(id)vkmeDialogRef:(id)ref source:(id)source;
+(id)videoAlbum:(id)album;
+(id)post:(id)post;
+(id)product:(id)product;
+(id)audio:(int)audio;
+(id)photo:(id)photo;
+(id)video:(id)video;
+(id)identity:(id)identity;
+(id)topic:(id)topic;
+(id)feedSearch:(id)search;
+(id)promotedFeedList:(id)list;
+(id)feedList:(id)list;
+(id)feedPhoto;
+(id)feedRecommended;
+(id)feedFriends;
+(id)feedRecent;
+(id)feedTop;
+(id)feed;
+(id)group:(id)group;
+(id)profile:(id)profile;
+(id)message;
+(id)dialog:(id)dialog;
+(id)name:(id)name;
+(id)name:(id)name audioContext:(int)context;
+(id)name:(id)name context:(id)context audioContext:(int)context3;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)description;
-(id)initWithName:(id)name;
-(id)initWithName:(id)name context:(id)context audioContext:(int)context3;
-(id)initWithName:(id)name context:(id)context audioContext:(int)context3 source:(id)source;
@end

__attribute__((visibility("hidden")))
@interface MaskAssetsLoader : XXUnknownSuperclass {
	id<MaskAssetsLoaderDelegate> _delegate;
	AFHTTPRequestOperation* _op;
	NSString* _url;
	int _version;
	XXStruct_xAnk1C _progressBytes;
}
@property(assign, nonatomic) XXStruct_xAnk1C progressBytes;
@property(assign, nonatomic) __weak id<MaskAssetsLoaderDelegate> delegate;
@property(assign, nonatomic) int version;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) AFHTTPRequestOperation* op;
+(void)initialize;
+(BOOL)assetsAtURL:(id)url compatibleWithEngineVersion:(int)engineVersion modelVersion:(int)version;
-(void).cxx_destruct;
-(id)destinationURL;
-(id)assetsURLIfDownloaded;
-(BOOL)isDownloaded;
-(BOOL)isLoading;
-(void)cancel;
-(void)touch;
-(id)createOperation;
-(id)initWithURL:(id)url version:(int)version;
@end

__attribute__((visibility("hidden")))
@interface FeedbackController : VKMLiveController {
}
@property(retain, nonatomic) FeedbackModel* model;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(int)VKMTableStyle;
-(void)actionSettings:(id)settings;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumsController : VKMLiveController {
}
@property(retain, nonatomic) PhotoAlbumsEditModel* model;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionAdd:(id)add;
-(int)VKMControllerModalAutoClosePosition;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ItemEditController : EditController <UITableViewDataSource, UITableViewDelegate, UITextViewDelegate> {
	BOOL group;
	int titleMin;
	int titleMax;
	int descrMin;
	int descrMax;
	float DESCR_H;
	float keyboardHeight;
	BOOL firstAppear;
	BOOL _privacy;
	UITextField* _fieldTitle;
	UITextView* _textDescription;
	UITableView* _tableView;
	UILabel* _textPlaceholder;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UITextView* textDescription;
@property(retain, nonatomic) UITextField* fieldTitle;
@property(retain, nonatomic) ItemEditContext* context;
@property(retain, nonatomic) UILabel* textPlaceholder;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) BOOL privacy;
+(id)main:(id)main context:(id)context;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)loadPrivacyObjectsIfRequired;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)textViewDidChange:(id)textView;
-(void)updatePlaceholder;
-(void)buttonConfirm:(id)confirm;
-(void)titleChanged:(id)changed;
-(void)render;
-(void)VKMEditDataChanged:(BOOL)changed;
-(int)VKMEditDataState;
-(void)rerender;
-(void)updateForOrientation;
-(void)notificationKeyboard:(id)keyboard;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)VKMControllerChromeInsetsApply;
-(void)loadView;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface BarButtonBuilder : XXUnknownSuperclass {
}
-(id)buildBarButton;
@end

__attribute__((visibility("hidden")))
@interface SystemBarButtonBuilder : BarButtonBuilder {
	int _item;
}
@property(assign, nonatomic) int item;
+(id)builderSystem:(int)system;
-(id)buildBarButton;
@end

__attribute__((visibility("hidden")))
@interface DisableAnimationsLayerDelegate : XXUnknownSuperclass <CALayerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)actionForLayer:(id)layer forKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface ActivityIndicatorView : XXUnknownSuperclass {
	float _strokeWidthFraction;
	float _progressGapFraction;
	float _traceAlpha;
	UIColor* _traceColor;
	CABasicAnimation* _rotationAnimation;
	UIImage* _maskImage;
	float _progress;
	UIColor* _tintColor;
	CAShapeLayer* _traceLayer;
	CAShapeLayer* _progressLayer;
	CALayer* _imageLayer;
	DisableAnimationsLayerDelegate* _layerDelegate;
}
@property(retain, nonatomic) UIColor* tintColor;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UIImage* maskImage;
@property(readonly, retain, nonatomic) CABasicAnimation* rotationAnimation;
@property(retain, nonatomic) UIColor* traceColor;
@property(assign, nonatomic) float traceAlpha;
@property(assign, nonatomic) float progressGapFraction;
@property(assign, nonatomic) float strokeWidthFraction;
@property(retain, nonatomic) DisableAnimationsLayerDelegate* layerDelegate;
@property(retain, nonatomic) CALayer* imageLayer;
@property(readonly, retain, nonatomic) CAShapeLayer* progressLayer;
@property(readonly, retain, nonatomic) CAShapeLayer* traceLayer;
+(id)defaultSizeIndicator;
-(void).cxx_destruct;
-(void)_test;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(void)layoutSubviews;
-(void)updateColors;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface RecommendedFriendsCollectionViewComponentState : UICollectionViewComponentState {
	NSSet* _discoveredFriendIdentifiers;
	VKFeedRecommendedFriends* _recommendedFriends;
	id _nextFrom;
	ListModelContext* _modelContext;
	NSIndexPath* _discovered;
	NSSet* _viewed;
}
@property(retain, nonatomic) NSSet* viewed;
@property(retain, nonatomic) NSIndexPath* discovered;
@property(retain, nonatomic) ListModelContext* modelContext;
@property(retain, nonatomic) id nextFrom;
@property(retain, nonatomic) VKFeedRecommendedFriends* recommendedFriends;
@property(retain, nonatomic) NSSet* discoveredFriendIdentifiers;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface RecommendedFriendsCollectionViewComponent : UICollectionViewModelComponent {
}
@property(retain, nonatomic) RecommendedFriendsCollectionViewComponentState* state;
+(id)friends:(id)friends;
@end

__attribute__((visibility("hidden")))
@interface RecommendedFriendsCollectionViewComponentController : UICollectionViewModelComponentController {
}
@property(retain, nonatomic) RecommendedFriendsCollectionViewComponent* component;
@property(retain, nonatomic) RecommendedFriendsModel* model;
+(id)createLayout;
+(Class)modelClass;
-(void)model:(id)model updated:(id)updated;
-(void)checkEmptiness;
-(id)model:(id)model componentRenderContextForObject:(id)object context:(id)context;
-(id)model:(id)model componentForObject:(id)object withContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumController : VKMLiveController {
	VideoAlbumsInfoToolbar* _toolbar;
}
@property(retain, nonatomic) VideoAlbumModel* model;
@property(retain, nonatomic) VideoAlbumsInfoToolbar* toolbar;
-(void).cxx_destruct;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionAdd:(id)add;
-(void)actionVideoAlbumsInfoSegment:(id)segment;
-(void)VKMTableUpdatedIndex;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)actionTeaserButton:(id)button;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(void)setupNavigationItemButtons:(BOOL)buttons;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumsController : VKMLiveController {
	VideoAlbumsInfoToolbar* _toolbar;
}
@property(retain, nonatomic) VideoAlbumsModel* model;
@property(retain, nonatomic) VideoAlbumsInfoToolbar* toolbar;
-(void).cxx_destruct;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionAdd:(id)add;
-(void)dialogWithTitle:(id)title text:(id)text completeBlock:(id)block;
-(void)actionVideoAlbumsInfoSegment:(id)segment;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)viewDidLoad;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface FriendListsController : VKMLiveController {
}
@property(retain, nonatomic) FriendListsModel* model;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionAdd:(id)add;
-(void)dialogWithTitle:(id)title text:(id)text completeBlock:(id)block;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsCell : VKMCell {
	UIView* _hostedView;
	UILabel* _titleLabel;
	UIButton* _showAllButton;
}
@property(retain, nonatomic) UIView* hostedView;
@property(readonly, retain, nonatomic) AudioPlaylistsInlineDomain* domain;
@property(readonly, retain, nonatomic) UIButton* showAllButton;
@property(readonly, retain, nonatomic) UILabel* titleLabel;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(void)actionShowAll:(id)all;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKWallMode : VKRenderable {
	BOOL _show_post;
	BOOL _owner_only;
	BOOL _can_see_all_posts;
	NSNumber* _owner;
	NSString* _user_name_case;
	int _access_mode;
	int _groupType;
}
@property(assign, nonatomic) int groupType;
@property(assign, nonatomic) int access_mode;
@property(assign, nonatomic) BOOL can_see_all_posts;
@property(assign, nonatomic) BOOL owner_only;
@property(assign, nonatomic) BOOL show_post;
@property(retain, nonatomic) NSString* user_name_case;
@property(retain, nonatomic) NSNumber* owner;
-(void).cxx_destruct;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface WallModeRenderer : Renderer {
	UIButton* _composeButton;
	UISegmentedControl* _segment;
	UIButton* _buttonAll;
	UIButton* _buttonFilter;
}
@property(retain, nonatomic) VKWallMode* domain;
@property(retain, nonatomic) UIButton* buttonFilter;
@property(retain, nonatomic) UIButton* buttonAll;
@property(retain, nonatomic) UISegmentedControl* segment;
@property(retain, nonatomic) UIButton* composeButton;
+(void)prepareLayout:(id)layout;
-(void).cxx_destruct;
-(void)actionButton:(id)button;
-(BOOL)toggledFilter;
-(void)updateToggle;
-(void)actionSegment:(id)segment;
-(void)changeToggleFilter:(BOOL)filter sendAction:(BOOL)action;
-(void)actionToggle:(id)toggle;
-(void)actionCompose:(id)compose;
-(id)wallController;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface ProfileModelInfoHelper : DefaultProfileHelper {
}
@property(retain, nonatomic) VKProfile* item;
@property(retain, nonatomic) ProfileModel* model;
-(id)stuffSection;
-(id)giftsSection;
-(id)personalSection;
-(id)positionSection;
-(id)educationSection;
-(id)careerSection;
-(id)contactsSection;
-(id)commonSection;
-(id)statusSection;
-(id)createProfileSections;
@end

__attribute__((visibility("hidden")))
@interface MBContactCollectionViewContactCell : XXUnknownSuperclass {
	BOOL _isInFocus;
	BOOL _editingMode;
	BOOL _isLastItem;
	id<MBContactPickerModelProtocol> _model;
	UIColor* _textColor;
	UIColor* _tintColor;
	UIFont* _font;
	UILabel* _contactTitleLabel;
}
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) UIColor* tintColor;
@property(retain, nonatomic) UIColor* textColor;
@property(assign, nonatomic) BOOL isLastItem;
@property(assign, nonatomic) BOOL editingMode;
@property(assign, nonatomic) BOOL isInFocus;
@property(retain, nonatomic) id<MBContactPickerModelProtocol> model;
@property(assign, nonatomic) __weak UILabel* contactTitleLabel;
-(void).cxx_destruct;
-(float)widthForCellWithContact:(id)contact;
-(void)tintColorDidChange;
-(void)setup;
-(void)awakeFromNib;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumsInfo : XXUnknownSuperclass {
	BOOL _forceAlbums;
	BOOL _hasUploaded;
	NSNumber* _ownerId;
	int _albumsCount;
}
@property(assign, nonatomic) int albumsCount;
@property(assign, nonatomic) BOOL hasUploaded;
@property(assign, nonatomic) BOOL forceAlbums;
@property(retain, nonatomic) NSNumber* ownerId;
-(void).cxx_destruct;
-(void)enumerateSections:(id)sections;
-(BOOL)hasSelection;
@end

__attribute__((visibility("hidden")))
@interface VKFriendList : VKDomain {
	NSString* _name;
}
@property(retain, nonatomic) NSString* name;
+(id)list:(id)list owner:(id)owner;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCopy:(id)copy;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKVideoPlayer : XXUnknownSuperclass {
	BOOL _durationLoaded;
	BOOL _muted;
	BOOL _looped;
	BOOL _automaticallyPreparesVideoForPlaying;
	NSString* _localIdentifier;
	VideoContainerView* _videoContainerView;
	id<VKVideoPlayerHolder> _playerHolder;
	NSURL* _videoURL;
	VKVideoPlayerState* _state;
	int _onErrorRetryAttempts;
	id<VideoPlayStats> _stats;
	AVPlayer* _player;
	AVPlayerItem* _playerItem;
	AVURLAsset* _asset;
	KVOObserver* _playerKVOObserver;
	KVOObserver* _playerItemKVOObserver;
	KVOObserver* _playerLayerKVOObserver;
	id _playerPeriodicTimeObserver;
	NSTimer* _playerItemSetupThrottleTimer;
	NSTimer* _playerStallThrottleTimer;
	NSObject<OS_dispatch_queue>* _playerQueue;
	int _retryAttempsUsed;
	XXStruct_1vgcKB _flags;
	double _currentVideoTime;
	double _loadedVideoTime;
	double _currentTimeUpdateInterval;
	double _videoDuration;
	double _playerItemSetupThrottleDelay;
}
@property(retain, nonatomic) id<VideoPlayStats> stats;
@property(assign, nonatomic) int onErrorRetryAttempts;
@property(assign, nonatomic) double playerItemSetupThrottleDelay;
@property(assign, nonatomic) BOOL automaticallyPreparesVideoForPlaying;
@property(assign, nonatomic) BOOL looped;
@property(assign, nonatomic) BOOL muted;
@property(assign, nonatomic) double currentTimeUpdateInterval;
@property(readonly, assign, nonatomic) BOOL startedPlaying;
@property(readonly, assign, nonatomic) NSURL* videoURL;
@property(assign, nonatomic) __weak id<VKVideoPlayerHolder> playerHolder;
@property(readonly, assign, nonatomic) VideoContainerView* videoContainerView;
@property(assign, nonatomic) int retryAttempsUsed;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* playerQueue;
@property(retain, nonatomic) NSTimer* playerStallThrottleTimer;
@property(retain, nonatomic) NSTimer* playerItemSetupThrottleTimer;
@property(assign, nonatomic) BOOL durationLoaded;
@property(assign, nonatomic) double videoDuration;
@property(assign, nonatomic) double loadedVideoTime;
@property(assign, nonatomic) double currentVideoTime;
@property(retain, nonatomic) id playerPeriodicTimeObserver;
@property(retain, nonatomic) KVOObserver* playerLayerKVOObserver;
@property(retain, nonatomic) KVOObserver* playerItemKVOObserver;
@property(retain, nonatomic) KVOObserver* playerKVOObserver;
@property(retain, nonatomic) VKVideoPlayerState* state;
@property(assign, nonatomic) XXStruct_1vgcKB flags;
@property(retain, nonatomic) AVURLAsset* asset;
@property(retain, nonatomic) AVPlayerItem* playerItem;
@property(retain, nonatomic) AVPlayer* player;
@property(retain, nonatomic) NSString* localIdentifier;
+(id)avAssetKeysForLoading;
-(void).cxx_destruct;
-(void)asyncOnPlayerQueue:(id)queue;
-(void)handlePlayerItemFailedToPlayNotification:(id)playNotification;
-(void)handlePlayerItemNewErrorLogEntryNotificaiton:(id)notificaiton;
-(void)handlePlayerItemPlaybackStalledNotification:(id)notification;
-(void)handlePlayerItemDidPlayToEndNotification:(id)handlePlayerItem;
-(void)handlePlayerItem:(id)item loadedTimeRangesChange:(id)change;
-(void)handlePlayerItem:(id)item statusChange:(int)change;
-(void)handlePlayerItem:(id)item playbackBufferEmptyChange:(BOOL)change;
-(void)handlePlayerItem:(id)item playbackLikelyToKeepUpChange:(BOOL)keepUpChange;
-(void)handlePlayer:(id)player statusChange:(int)change;
-(void)handlePlayerLayerReadyForDisplayChange:(BOOL)displayChange;
-(void)setVideoURL:(id)url;
-(void)prepareItemIfNeeded;
-(void)reload;
-(void)seekToTime:(double)time showActivityIndicatorIfStall:(BOOL)stall;
-(void)seekToTime:(double)time;
-(void)seekToZero;
-(void)pause;
-(void)play;
-(void)startStallingWithThrottlingDelay:(double)throttlingDelay;
-(void)updateForPlaybackIsLikelyToKeepUp:(BOOL)keepUp;
-(void)updateForPlaybackBufferEmpty:(BOOL)playbackBufferEmpty;
-(void)setupAudioSession;
-(void)seekToCMTime:(XXStruct_pwHToB)cmtime showActivityIndicatorIfStall:(BOOL)stall;
-(void)updateState:(id)state;
-(void)failWithError:(id)error;
-(void)checkPlayState;
-(void)resetFlags;
-(void)removePlayerPeriodicTimeObserver;
-(void)loadAssetDuration:(id)duration;
-(void)setupPeriodicTimeObserver;
-(void)setupPlayerItemWithAsset:(id)asset;
-(void)setupPlayerItemWithURL:(id)url;
-(void)unsubscribeFromNotificationsForPlayerItem:(id)playerItem;
-(void)subscribeForNotificationsForPlayerItem:(id)playerItem;
-(void)tearDownCurrentPlayerItem;
-(void)clearStateAndPlayerItemTearDownOldItem:(BOOL)item;
-(void)resetState;
-(void)setupForNewVideoURL:(id)newVideoURL oldVideoURL:(id)url;
-(id)createPlayerLayerKVOObserverForLayer:(id)layer;
-(id)createPlayerItemKVOObserverForPlayerItem:(id)playerItem;
-(id)createPlayerKVOObserverForPlayer:(id)player;
-(id)createPlayerWithAsset:(id)asset attachToPlayerLayer:(id)playerLayer;
-(void)prepareToPlay;
-(void)replaceCurrentVideoWithAsset:(id)asset;
-(void)replaceCurrentVideoURLWithURL:(id)url forceUpdate:(BOOL)update;
-(void)initializePlayerView;
-(void)dealloc;
-(void)initialize;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKVideoPlayerState : XXUnknownSuperclass {
	BOOL _hasDisplayed;
	BOOL _preparedToPlay;
	BOOL _failedToPlay;
	BOOL _isAtEndOfVideo;
	unsigned _timeControlStatus;
	unsigned _desiredRateState;
	NSError* _error;
}
@property(readonly, copy, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) BOOL isAtEndOfVideo;
@property(readonly, assign, nonatomic) BOOL failedToPlay;
@property(readonly, assign, nonatomic) BOOL preparedToPlay;
@property(readonly, assign, nonatomic) BOOL hasDisplayed;
@property(readonly, assign, nonatomic) unsigned desiredRateState;
@property(readonly, assign, nonatomic) unsigned timeControlStatus;
+(id)defaultState;
-(void).cxx_destruct;
-(id)initWithTimeControlStatus:(unsigned)timeControlStatus desiredRateState:(unsigned)state hasDisplayed:(BOOL)displayed preparedToPlay:(BOOL)play failedToPlay:(BOOL)play5 isAtEndOfVideo:(BOOL)video error:(id)error;
@end

__attribute__((visibility("hidden")))
@interface VKVideoPlayerStateBuilder : XXUnknownSuperclass {
	BOOL _hasDisplayed;
	BOOL _preparedToPlay;
	BOOL _failedToPlay;
	BOOL _isAtEndOfVideo;
	unsigned _timeControlStatus;
	unsigned _desiredRateState;
	NSError* _error;
}
@property(copy, nonatomic) NSError* error;
@property(assign, nonatomic) BOOL isAtEndOfVideo;
@property(assign, nonatomic) BOOL failedToPlay;
@property(assign, nonatomic) BOOL preparedToPlay;
@property(assign, nonatomic) BOOL hasDisplayed;
@property(assign, nonatomic) unsigned desiredRateState;
@property(assign, nonatomic) unsigned timeControlStatus;
+(id)builderWithState:(id)state;
+(id)builder;
-(void).cxx_destruct;
-(id)build;
-(id)withError:(id)error;
-(id)withIsAtEndOfVideo:(BOOL)video;
-(id)withFailedToPlay:(BOOL)play;
-(id)withPreparedToPlay:(BOOL)play;
-(id)withHasDisplayed:(BOOL)hasDisplayed;
-(id)withDesiredRateState:(unsigned)desiredRateState;
-(id)withTimeControlStatus:(unsigned)timeControlStatus;
-(id)initWithState:(id)state;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKAVPlayerLayerView : XXUnknownSuperclass {
}
@property(readonly, assign, nonatomic) AVPlayerLayer* playerLayer;
+(Class)layerClass;
@end

__attribute__((visibility("hidden")))
@interface VKAVPlayer : XXUnknownSuperclass {
}
-(void)dealloc;
-(id)initWithDispatchQueue:(id)dispatchQueue;
@end

__attribute__((visibility("hidden")))
@interface VideoContainerView : XXUnknownSuperclass {
	VKMImageView* _previewImageView;
	VKImageVariant* _previewImage;
	UIView<AnimatingIndicator>* _activityIndicator;
	VKAVPlayerLayerView* _playerLayerView;
}
@property(retain, nonatomic) UIView<AnimatingIndicator>* activityIndicator;
@property(readonly, assign, nonatomic) VKImageVariant* previewImage;
@property(readonly, assign, nonatomic) AVPlayerLayer* playerLayer;
@property(retain, nonatomic) VKAVPlayerLayerView* playerLayerView;
@property(retain, nonatomic) VKMImageView* previewImageView;
-(void).cxx_destruct;
-(void)showPlayerLayerViewAnimated:(BOOL)animated;
-(void)preparePlayerLayerForDisplay;
-(void)resetView;
-(void)prepareForReuse;
-(void)setPreviewImage:(id)image fillToSize:(CGSize)size;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AddressBookContactDescription : XXUnknownSuperclass {
	NSString* _label;
	NSString* _contact;
	int _serviceType;
}
@property(assign, nonatomic) int serviceType;
@property(copy, nonatomic) NSString* contact;
@property(copy, nonatomic) NSString* label;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ABRecord : XXUnknownSuperclass {
	BOOL _isOrganization;
	NSString* _firstName;
	NSString* _lastName;
	NSString* _organizationName;
	UIImage* _image;
	NSArray* _phones;
	NSArray* _emails;
	NSArray* _phoneContacts;
	NSArray* _emailContacts;
	NSArray* _allContacts;
}
@property(retain, nonatomic) NSArray* allContacts;
@property(retain, nonatomic) NSArray* emailContacts;
@property(retain, nonatomic) NSArray* phoneContacts;
@property(retain, nonatomic) NSArray* emails;
@property(retain, nonatomic) NSArray* phones;
@property(retain, nonatomic) UIImage* image;
@property(copy, nonatomic) NSString* organizationName;
@property(assign, nonatomic) BOOL isOrganization;
@property(copy, nonatomic) NSString* lastName;
@property(copy, nonatomic) NSString* firstName;
-(void).cxx_destruct;
-(id)initWithRecordRef:(void*)recordRef;
@end

__attribute__((visibility("hidden")))
@interface AddressBook : XXUnknownSuperclass {
	void* _addressBook;
	NSArray* _records;
}
@property(retain, nonatomic) NSArray* records;
@property(assign, nonatomic) void* addressBook;
+(void)requestAccessWithCompletion:(id)completion;
+(BOOL)authorizationStatusIsDetermined;
+(BOOL)isAuthorized;
+(void)requestLookupFriendsWithNavDelegate:(id)navDelegate;
+(void)lookupFriendsWithNavDelegate:(id)navDelegate;
+(void)lookupFriendsWithAddressBook:(id)addressBook navDelegate:(id)delegate;
-(void).cxx_destruct;
-(id)lazyRecords;
-(void)dealloc;
-(id)initWithAddressBook:(void*)addressBook;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteFriendList : ModelActionDelete {
}
+(int)domainType;
-(void)actionHandleSuccessForData:(id)data context:(id)context;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddFriendList : ModelActionAdd {
}
@property(retain, nonatomic) VKFriendList* target;
+(int)domainType;
-(void)actionHandleSuccessForData:(id)data context:(id)context;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditFriendList : ModelActionEdit {
}
@property(retain, nonatomic) VKFriendList* target;
+(int)domainType;
-(void)actionHandleSuccessForData:(id)data context:(id)context;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionChangeFriendList : ModelAction {
	BOOL _add;
	VKUser* _user;
}
@property(assign, nonatomic) BOOL add;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) NSNumber* target;
+(int)domainType;
-(void).cxx_destruct;
-(void)actionHandleSuccessForData:(id)data context:(id)context;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)user:(id)user add:(BOOL)add;
@end

__attribute__((visibility("hidden")))
@interface ModelActionFriend : ModelAction {
	BOOL _add;
	VKUser* _user;
	int _result;
	int _res_counter_friends;
	VKFriend* _res_friend;
	StatsUploadHelper* _statsUpload;
}
@property(retain, nonatomic) VKFriend* res_friend;
@property(assign, nonatomic) int res_counter_friends;
@property(assign, nonatomic) int result;
@property(assign, nonatomic) BOOL add;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) NSNumber* target;
@property(retain, nonatomic) StatsUploadHelper* statsUpload;
+(int)domainType;
-(void).cxx_destruct;
-(int)actionResultForFailedRequestResult:(id)failedRequestResult;
-(void)actionHandleSuccessForData:(id)data context:(id)context;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)add:(BOOL)add user:(id)user;
@end

__attribute__((visibility("hidden")))
@interface ModelActionFriendDeleteRequests : ModelAction {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionHideFriendRecommendationsBlock : Action <DomainEvent> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(int)domainType;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionHideFriendRecommendation : ModelActionDelete {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionHideFriendAddressBookRecommendations : Action <DomainEvent> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(int)domainType;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionGroup : ModelAction {
	BOOL _add;
	BOOL _not_sure;
	BOOL _leave_in_interface;
	BOOL _result;
	BOOL _invite;
	VKGroup* _group;
	NSString* _source;
	StatsUploadHelper* _statsUpload;
}
@property(retain, nonatomic) NSString* source;
@property(assign, nonatomic) BOOL leave_in_interface;
@property(assign, nonatomic) BOOL not_sure;
@property(assign, nonatomic) BOOL add;
@property(retain, nonatomic) VKGroup* group;
@property(retain, nonatomic) NSNumber* target;
@property(retain, nonatomic) StatsUploadHelper* statsUpload;
@property(assign, nonatomic) BOOL invite;
@property(assign, nonatomic) BOOL result;
+(int)domainType;
-(void).cxx_destruct;
-(id)shouldStay:(BOOL)stay;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)notSure:(BOOL)sure;
-(id)add:(BOOL)add group:(id)group;
@end

__attribute__((visibility("hidden")))
@interface ModelActionGroupMessagesFromGroup : ModelAction {
	BOOL _allow;
}
@property(assign, nonatomic) BOOL allow;
@property(retain, nonatomic) NSNumber* target;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)allow:(BOOL)allow;
@end

__attribute__((visibility("hidden")))
@interface ModelActionNewsSourceBan : ModelAction {
	BOOL _ban;
}
@property(assign, nonatomic) BOOL ban;
@property(retain, nonatomic) NSNumber* target;
+(int)domainType;
+(id)sourceId:(id)anId;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionNewsItemIgnore : ModelAction {
	BOOL _ignore;
}
@property(assign, nonatomic) BOOL ignore;
@property(retain, nonatomic) VKIdentity* target;
+(BOOL)canIgnoreItem:(id)item;
+(id)typeForIdentity:(id)identity;
+(int)domainType;
+(id)item:(id)item;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddPlace : ModelAction {
	VKPlace* _result;
}
@property(retain, nonatomic) VKPlace* result;
@property(retain, nonatomic) VKPlace* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionBlacklist : ModelAction {
	BOOL _add;
}
@property(assign, nonatomic) BOOL add;
@property(retain, nonatomic) NSNumber* target;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)setupAdd:(BOOL)add;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReport : ModelAction {
	int _reason;
}
@property(assign, nonatomic) int reason;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)title;
-(id)reason:(int)reason;
@end

__attribute__((visibility("hidden")))
@interface ModelActionUnsubscribeComments : ModelAction {
}
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteAppRequest : ModelAction {
	BOOL _app_installed;
	NSNumber* _appID;
	int _type;
	id _requests;
}
@property(retain, nonatomic) id requests;
@property(assign, nonatomic) BOOL app_installed;
@property(retain, nonatomic) VKIdentity* target;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSNumber* appID;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)disableHUD;
-(BOOL)actionShowsSuccessConfirmation;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAppToggleNotifications : ModelAction {
	BOOL _enabled;
}
@property(assign, nonatomic) BOOL enabled;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionRemoveApp : ModelActionDelete {
}
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionHideAdsBlock : Action <DomainEvent> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(int)domainType;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionHideAds : ModelAction {
	int _mode;
}
@property(readonly, assign, nonatomic) int mode;
@property(retain, nonatomic) VKFeedAdsItem* target;
+(int)domainType;
+(id)target:(id)target mode:(int)mode;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReportAds : ModelAction {
	int _reason;
}
@property(assign, nonatomic) int reason;
@property(retain, nonatomic) VKFeedAdsItem* target;
+(int)domainType;
+(id)target:(id)target reason:(int)reason;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditProfile : ModelAction {
	NSNumber* _cancel_request_id;
	VKProfileInfo* _result;
	VKNameRequest* _resultNameRequest;
}
@property(retain, nonatomic) VKNameRequest* resultNameRequest;
@property(retain, nonatomic) VKProfileInfo* result;
@property(retain, nonatomic) NSNumber* cancel_request_id;
@property(retain, nonatomic) NSDictionary* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionShowsFailureConfirmation;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionUserFavorites : ModelAction {
	BOOL _add;
}
@property(assign, nonatomic) BOOL add;
@property(retain, nonatomic) VKUser* target;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)setupAdd:(BOOL)add;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ModelActionGroupFavorites : ModelAction {
	BOOL _add;
}
@property(assign, nonatomic) BOOL add;
@property(retain, nonatomic) VKGroup* target;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)setupAdd:(BOOL)add;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ModelActionRemoveLinkFavorites : ModelAction {
}
@property(retain, nonatomic) VKLink* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ModelActionHideAppNotification : ModelAction {
	int _closeReason;
}
@property(readonly, assign, nonatomic) int closeReason;
@property(retain, nonatomic) VKAppInternalNotification* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)reason:(int)reason;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WallSearchModel : FeedSearchModel {
	NSString* _domain;
	NSNumber* _owner_id;
}
@property(retain, nonatomic) NSNumber* owner_id;
@property(retain, nonatomic) NSString* domain;
+(id)query:(id)query session:(id)session;
+(id)query:(id)query domain:(id)domain session:(id)session;
+(id)query:(id)query ownerId:(id)anId session:(id)session;
-(void).cxx_destruct;
-(id)feedRequestBuilderForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TestStorySketchController : XXUnknownSuperclass {
	SketchView* _sketchView;
	UIImageView* _imageView;
	UIButton* _drawButton;
	UIButton* _closeButton;
}
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UIButton* drawButton;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) SketchView* sketchView;
-(void).cxx_destruct;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(unsigned)supportedInterfaceOrientations;
-(void)actionClose;
-(void)actionDraw;
-(void)actionDone;
-(void)actionCancel;
-(void)removeSketchView;
-(void)addSketchView;
-(void)viewDidLoad;
-(BOOL)prefersStatusBarHidden;
@end

__attribute__((visibility("hidden")))
@interface ProfileFriendsController : VKMMultiIndexController {
}
@property(retain, nonatomic) ProfileFriendsModel* model;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(void)actionAdd:(id)add;
-(void)actionFindFriends:(id)friends;
-(void)actionTeaserButton:(id)button;
-(int)VKMLiveSearchSkipSections;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogOwnersListModel : ListModel {
	NSNumber* _blockId;
}
@property(copy, nonatomic) NSNumber* blockId;
-(void).cxx_destruct;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)listFromData:(id)data;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface SketchViewController : XXUnknownSuperclass <UIPopoverPresentationControllerDelegate, SketchBrushViewControllerDelegate, SketchDrawViewDelegate, SketchPreviewControllerDelegate> {
	id<SketchViewControllerDelegate> _delegate;
	SketchDrawView* _drawView;
	NSArray* _paletteButtons;
	int _lastInterfaceOrientation;
	NSArray* _rotatingViews;
	UIButton* _sendButton;
	UIButton* _undoButton;
	UIButton* _eraserButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<SketchViewControllerDelegate> delegate;
@property(retain, nonatomic) UIButton* eraserButton;
@property(retain, nonatomic) UIButton* undoButton;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) NSArray* rotatingViews;
@property(assign, nonatomic) int lastInterfaceOrientation;
@property(retain, nonatomic) NSArray* paletteButtons;
@property(retain, nonatomic) SketchDrawView* drawView;
-(void).cxx_destruct;
-(void)undoLongPress:(id)press;
-(void)undoButtonAction;
-(void)sketchPreviewController:(id)controller confirmSendingImage:(id)image;
-(void)sendButtonAction;
-(void)cancelButtonAction;
-(void)paletteButtonAction:(id)action;
-(void)eraserButtonAction:(id)action;
-(void)brushButtonAction:(id)action;
-(int)adaptivePresentationStyleForPresentationController:(id)presentationController;
-(int)adaptivePresentationStyleForPresentationController:(id)presentationController traitCollection:(id)collection;
-(void)updateSendUndoEraserButtons;
-(void)sketchDrawViewDidClearAll:(id)sketchDrawView;
-(void)sketchDrawViewDidUndo:(id)sketchDrawView;
-(void)sketchDrawViewDidDraw:(id)sketchDrawView;
-(void)sketchBrushControllerDidEndChangingColor:(id)sketchBrushController;
-(void)sketchBrushController:(id)controller changeColor:(id)color;
-(void)sketchBrushController:(id)controller changeBrush:(float)brush;
-(void)viewWillLayoutSubviews;
-(void)loadView;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)updateOrientationIfCan;
-(void)deviceOrientationDidChange;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)prefersStatusBarHidden;
@end

__attribute__((visibility("hidden")))
@interface FriendRequestsContext : ListModelContext {
	int _totalRequests;
	int _totalSuggested;
}
@property(assign, nonatomic) int totalSuggested;
@property(assign, nonatomic) int totalRequests;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface FriendsRequestsModel : LoadingModel {
	BOOL _suggested;
	int _currentFilter;
}
@property(assign, nonatomic) int currentFilter;
@property(assign, nonatomic) BOOL suggested;
-(void)handleDeleteRequests:(id)requests :(id)arg2;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)discovered:(id)discovered;
-(BOOL)shouldLoad:(id)load;
-(void)updateIndexSections:(id)sections withContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
-(void)setFilter:(int)filter;
-(id)setupFilter:(int)filter;
-(id)setupSuggested:(BOOL)suggested;
-(BOOL)isSameModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface FriendsRequestsController : VKMLiveController {
}
@property(retain, nonatomic) FriendsRequestsModel* model;
-(void)actionDeleteAll:(id)all;
-(id)VKMScrollViewBackgroundColor;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)viewDidLoad;
-(int)VKMTableStyle;
-(void)VKMTableUpdatedIndex;
@end

__attribute__((visibility("hidden")))
@interface VKMStickerPreviewImageView : VKMImageView {
	ActivityIndicatorView* _loadingIndicator;
}
@property(retain, nonatomic) ActivityIndicatorView* loadingIndicator;
-(void).cxx_destruct;
-(void)reuse;
-(void)stopLoadingAnimation;
-(void)startLoadingAnimation;
-(void)loader:(id)loader complete:(id)complete;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface HelperViewController : XXUnknownSuperclass {
}
-(int)preferredStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface StickerPopup : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	BOOL _allowMoveAside;
	id<StickerPopupDelegate> _delegate;
	UICollectionView* _collectionView;
	StickersLoadingManager* _stickersLoadingManager;
	NSIndexPath* _previouslyHighlightedIndexPath;
	UIWindow* _popupWindow;
	VKMStickerPreviewImageView* _stickerPreviewImageView;
	UILongPressGestureRecognizer* _gestureRecognizer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) id<StickerPopupDelegate> delegate;
@property(assign, nonatomic) BOOL allowMoveAside;
@property(retain, nonatomic) UILongPressGestureRecognizer* gestureRecognizer;
@property(retain, nonatomic) VKMStickerPreviewImageView* stickerPreviewImageView;
@property(retain, nonatomic) UIWindow* popupWindow;
@property(retain, nonatomic) NSIndexPath* previouslyHighlightedIndexPath;
@property(retain, nonatomic) StickersLoadingManager* stickersLoadingManager;
@property(retain, nonatomic) UICollectionView* collectionView;
-(void).cxx_destruct;
-(void)hidePopupWindow;
-(void)showPopupWindow;
-(void)updateStickerAtIndexPath:(id)indexPath;
-(void)popupStickerAtIndexPath:(id)indexPath;
-(void)setCollectionViewCell:(id)cell highlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)gestureRecognizerLongPressed:(id)pressed;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(id)initWithCollectionView:(id)collectionView stickersLoadingManager:(id)manager;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface GroupRequestsModel : ListModel {
}
-(void)handleGroup:(id)group :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface GroupRequestsController : VKMLiveController {
}
@property(retain, nonatomic) GroupRequestsModel* model;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
-(void)VKMTableUpdatedIndex;
@end

__attribute__((visibility("hidden")))
@interface StoryViewersListViewController : VKMLiveController {
}
@property(retain, nonatomic) StoryViewersListModel* model;
+(id)titleForViewersCount:(int)viewersCount;
-(void)model:(id)model updated:(id)updated;
-(int)VKMControllerStatusBarStyle;
-(int)VKMControllerModalAutoClosePosition;
-(int)VKMNavigationBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface StoryViewersListModel : LoadingModel {
	VKIdentity* _identity;
}
@property(retain, nonatomic) VKIdentity* identity;
+(id)modelWithStoryIdentity:(id)storyIdentity session:(id)session;
-(void).cxx_destruct;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface GroupsController : VKMMultiIndexController {
	UIBarButtonItem* _buttonCatalog;
}
@property(retain, nonatomic) UIBarButtonItem* buttonCatalog;
-(void).cxx_destruct;
-(void)VKMTableUpdatedIndex;
-(id)VKMScrollViewBackgroundColor;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)updateCounter;
-(void)notificationActivity:(id)activity;
-(void)actionTeaserButton:(id)button;
-(void)actionCatalog:(id)catalog;
-(void)viewDidLoad;
-(int)VKMControllerModalAutoClosePosition;
-(int)VKMTableStyle;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface BadgeView : XXUnknownSuperclass {
	NSString* _text;
	UIFont* _font;
	UIColor* _textColor;
	UIColor* _tintColor;
	UIColor* _shadowColor;
	float _shadowBlur;
	CGSize _shadowOffset;
}
@property(assign, nonatomic) float shadowBlur;
@property(assign, nonatomic) CGSize shadowOffset;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* tintColor;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
@property(copy, nonatomic) NSString* text;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)useTextColor:(id)color;
-(void)useTintColor:(id)color;
-(void)useFont:(id)font;
-(void)useText:(id)text;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
-(void)_configureDefaults;
@end

__attribute__((visibility("hidden")))
@interface BadgedBarButtonItem : XXUnknownSuperclass {
	int applied;
	CGPoint badgeCenter;
	VKPPBadge* _badge;
	UIButton* _button;
	NSString* _nameForAccessibility;
}
@property(retain, nonatomic) NSString* nameForAccessibility;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) VKPPBadge* badge;
+(id)badgedButton:(id)button target:(id)target action:(SEL)action width:(float)width;
-(void).cxx_destruct;
-(void)useBadgeNumber:(int)number;
@end

__attribute__((visibility("hidden")))
@interface AudioMessageAttachmentView : AttachmentView <VMVoiceMessagePlayerObserver, VMSeekingViewDelegate> {
	VKAudioMessage* _audioMessage;
	id<AudioMessageAttachmentDelegate> _delegate;
	UIButton* _playButton;
	UILabel* _duration;
	VMSamplesView* _samplesView;
	VMSeekingView* _seekingView;
	VMVoiceMessagePlayer* _voiceMessagePlayer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<AudioMessageAttachmentDelegate> delegate;
@property(retain, nonatomic) VKAudioMessage* audioMessage;
@property(retain, nonatomic) VMVoiceMessagePlayer* voiceMessagePlayer;
@property(retain, nonatomic) VMSeekingView* seekingView;
@property(retain, nonatomic) VMSamplesView* samplesView;
@property(retain, nonatomic) UILabel* duration;
@property(retain, nonatomic) UIButton* playButton;
-(void).cxx_destruct;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)voiceMessagePlayerChangingCurrentTime:(id)time;
-(void)voiceMessagePlayerUpdated:(id)updated;
-(void)seekingView:(id)view endSeekingWithProgress:(float)progress;
-(void)seekingView:(id)view seekingToProgress:(float)progress;
-(float)seekingViewBeganSeekingAndAskingForCurrentProgress:(id)currentProgress;
-(void)updatePlaybackProgress;
-(float)progress;
-(void)update;
-(void)togglePlayPauseAudioMessage;
-(void)actionSeekingViewTapGesture:(id)gesture;
-(void)actionPlayPauseButton:(id)button;
-(void)render:(id)render;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame player:(id)player;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKAudioPlaylist : VKDomain <VKAttachment> {
	id<VKSource> _source;
	NSString* _title;
	NSString* _desc;
	int _count;
	int _type;
	unsigned _year;
	VKIdentity* _originalIden;
	VKIdentity* _followedIden;
	VKAudioThumb* _photo;
	NSArray* _thumbs;
	unsigned _createTime;
	unsigned _updateTime;
	unsigned _followers;
	unsigned _plays;
	NSString* _mainArtist;
	NSArray* _artists;
	NSArray* _genres;
}
@property(retain, nonatomic) NSArray* genres;
@property(retain, nonatomic) NSArray* artists;
@property(retain, nonatomic) NSString* mainArtist;
@property(assign, nonatomic) unsigned plays;
@property(assign, nonatomic) unsigned followers;
@property(assign, nonatomic) unsigned updateTime;
@property(assign, nonatomic) unsigned createTime;
@property(retain, nonatomic) NSArray* thumbs;
@property(retain, nonatomic) VKAudioThumb* photo;
@property(retain, nonatomic) VKIdentity* followedIden;
@property(retain, nonatomic) VKIdentity* originalIden;
@property(assign, nonatomic) unsigned year;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) int count;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) id<VKSource> source;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)oid:(id)oid iid:(id)iid accessKey:(id)key;
-(void).cxx_destruct;
-(void)acceptSources:(id)sources;
-(BOOL)isCreator:(id)creator;
-(id)pickImageUrlsForSize:(CGSize)size scale:(float)scale;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
-(void)domainOnEditCopy:(id)copy;
-(id)artistStr;
-(id)attributedStatus:(id)status;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
@end

__attribute__((visibility("hidden")))
@interface UniformContext : XXUnknownSuperclass {
	float _distanceSinceLastDrawnPoint;
	float _previousQuadScale;
	int _drawnPointsCount;
	CGPoint _lastDistanceIncrementPoint;
}
@property(assign, nonatomic) int drawnPointsCount;
@property(assign, nonatomic) float previousQuadScale;
@property(assign, nonatomic) float distanceSinceLastDrawnPoint;
@property(assign, nonatomic) CGPoint lastDistanceIncrementPoint;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface Quad : XXUnknownSuperclass {
	CGPoint p0;
	CGPoint p1;
	CGPoint p2;
	CGRect _rect;
}
@property(readonly, assign, nonatomic, getter=isDot) BOOL dot;
@property(readonly, assign, nonatomic) CGRect rect;
-(void)drawWithUniformContext:(id)uniformContext brush:(id)brush brushImage:(id)image neonBrushCentreImage:(id)image4;
-(CGRect)calculateRect;
-(id)initWithTouchPoint1:(CGPoint)touchPoint1 touchPoint2:(CGPoint)a2 touchPoint3:(CGPoint)a3;
-(id)initWithSingleTouchPoint:(CGPoint)singleTouchPoint;
@end

__attribute__((visibility("hidden")))
@interface Bezier : XXUnknownSuperclass {
	Brush* _brush;
	NSMutableArray* _touchPoints;
	NSMutableArray* _quads;
}
@property(retain, nonatomic) Brush* brush;
@property(retain, nonatomic) NSMutableArray* quads;
@property(retain, nonatomic) NSMutableArray* touchPoints;
-(void).cxx_destruct;
-(void)drawFromPoint:(unsigned)point withUniformContext:(id)uniformContext brushImage:(id)image neonBrushCentreImage:(id)image4;
-(CGRect)calculateRect;
-(CGRect)calculateRectFromPoint:(unsigned)point;
-(CGRect)brushInsettedRect:(CGRect)rect;
-(void)addTouchPoint:(CGPoint)point touchesEndedOrCanceled:(BOOL)canceled;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TimerTarget : XXUnknownSuperclass {
	id<TimerTargetDelegate> _delegate;
	NSTimer* _strongTimer;
}
@property(assign, nonatomic) __weak id<TimerTargetDelegate> delegate;
@property(retain, nonatomic) NSTimer* strongTimer;
+(id)scheduledTimerTargetWithTimeInterval:(double)timeInterval repeats:(BOOL)repeats;
+(id)timerTarget:(id)target;
-(void).cxx_destruct;
-(void)invalidate;
-(void)fireTimer;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKAudioQueuePlayer : XXUnknownSuperclass <MTRGInstreamAudioAdDelegate> {
	BOOL _needResume;
	BOOL _active;
	BOOL _wantToPlay;
	VKAdAudioPlayer* _adPlayer;
	AVQueuePlayer* _avPlayer;
	VKAudioQueuePlayerItem* _currentPlayerItem;
	int _state;
	VKAudioPlayerModel* _model;
	UIImage* _coverImage;
	BackgroundTaskWrapper* _task;
	MainModel* _weakMain;
	int _currentAudioAdSection;
	int _adsOnCurrentTrack;
	MTRGInstreamAudioAdBanner* _banner;
	MTRGInstreamAudioAd* _instreamAd;
	NSArray* _midrolAdPositions;
	NSMutableDictionary* _nowPlayingInfo;
	id _observer;
	NSURLSessionDataTask* _coverDownloadTask;
	NSArray* _prevItemsCleaningQueue;
	float _listenedTime;
	double _audioPlayStartTimeForStats;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float listenedTime;
@property(assign, nonatomic) double audioPlayStartTimeForStats;
@property(retain, nonatomic) NSArray* prevItemsCleaningQueue;
@property(retain, nonatomic) UIImage* coverImage;
@property(retain, nonatomic) NSURLSessionDataTask* coverDownloadTask;
@property(retain, nonatomic) id observer;
@property(retain, nonatomic) NSMutableDictionary* nowPlayingInfo;
@property(retain, nonatomic) NSArray* midrolAdPositions;
@property(retain, nonatomic) MTRGInstreamAudioAd* instreamAd;
@property(retain, nonatomic) MTRGInstreamAudioAdBanner* banner;
@property(retain, nonatomic) VKAudioPlayerModel* model;
@property(assign, nonatomic) BOOL wantToPlay;
@property(assign, nonatomic) BOOL active;
@property(assign, nonatomic) BOOL needResume;
@property(assign, nonatomic) int adsOnCurrentTrack;
@property(assign, nonatomic) int currentAudioAdSection;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) __weak MainModel* weakMain;
@property(retain, nonatomic) VKAudioQueuePlayerItem* currentPlayerItem;
@property(retain, nonatomic) AVQueuePlayer* avPlayer;
@property(retain, nonatomic) VKAdAudioPlayer* adPlayer;
@property(readonly, assign, nonatomic) BackgroundTaskWrapper* task;
-(void).cxx_destruct;
-(id)currentAudio;
-(id)currentPlayer;
-(id)title;
-(id)performer;
-(BOOL)showCover;
-(BOOL)canSkip;
-(BOOL)canSeek;
-(BOOL)isPlayingAd;
-(BOOL)isPlayingOrPausedAd;
-(BOOL)isPlayingOrPaused;
-(BOOL)isPlaying;
-(BOOL)isCurrentItem:(id)item;
-(BOOL)isPlayingItem:(id)item;
-(BOOL)isCurrentAudio:(id)audio;
-(BOOL)isPlayingAudio:(id)audio;
-(void)updateNowPlaying:(id)playing forcePlaybackTime:(BOOL)time;
-(void)updateNowPlaying:(id)playing;
-(int)handleCommandSeekBackward:(id)backward;
-(int)handleCommandSeekForward:(id)forward;
-(int)handleCommandChangePlaybackPosition:(id)position;
-(int)handleCommandPrev:(id)prev;
-(int)handleCommandNext:(id)next;
-(int)handleCommandToggle:(id)toggle;
-(int)handleCommandPause:(id)pause;
-(int)handleCommandPlay:(id)play;
-(void)deattachCommandCenter;
-(void)configureCommandCenter;
-(void)commandCenterSkipCommandsEnable:(BOOL)enable;
-(void)commandCenterSeekCommandsEnable:(BOOL)enable;
-(void)commandCenterPlayPauseCommandsEnable:(BOOL)enable;
-(void)commandCenterCommandsEnable:(BOOL)enable;
-(void)notificationAudioSessioInterruption:(id)interruption;
-(void)routeChanged:(id)changed;
-(void)insertItemAtIndex:(int)index;
-(void)insertNextItemsInQueueIfNeeded;
-(void)notificationComplete:(id)complete;
-(void)resetPlayerFromCurrentItemToItem:(id)item;
-(void)removeAllObserversFrom:(id)from;
-(void)pushToCleaningQueue:(id)cleaningQueue;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)createMPMediaArtwork;
-(void)handleAssetMetadata;
-(void)notifyUpdateItem;
-(void)notifyUpdateState;
-(void)updateState:(int)state;
-(void)switchTo:(int)to;
-(void)deactivateAudioSession;
-(void)activateAudioSession;
-(void)broadcastCancel;
-(void)broadcast;
-(void)broadcastDelayed:(id)delayed;
-(void)playAfterPreroll;
-(void)playAfterPostroll;
-(void)jumpTo:(int)to;
-(void)previous;
-(void)next;
-(void)skipAuidoAd:(BOOL)ad;
-(void)endRewindFastForward;
-(void)beginFastForward;
-(void)beginRewind;
-(void)seekedTo:(float)to;
-(void)stop;
-(void)toggle;
-(void)pause;
-(void)play;
-(void)repeat:(BOOL)repeat;
-(void)shuffle:(BOOL)shuffle;
-(BOOL)insert:(id)insert at:(unsigned)at context:(int)context playlistIden:(id)iden;
-(BOOL)remove:(unsigned)remove;
-(BOOL)move:(unsigned)move to:(unsigned)to;
-(void)removeAllSaveCurrent;
-(void)resetPlaylistForIndex:(int)index;
-(id)modelFromList:(id)list from:(id)from context:(int)context playlistIden:(id)iden;
-(void)playNext:(id)next context:(int)context playlistIden:(id)iden;
-(void)playList:(id)list from:(id)from context:(int)context playlistIden:(id)iden;
-(void)notificationPurchase:(id)purchase;
-(BOOL)musicSubscriptionActive;
-(BOOL)audioAdAvailable;
-(BOOL)shouldRejectAd:(int)ad;
-(void)playCurrentAfterAd;
-(void)onCompleteWithSection:(id)section instreamAudioAd:(id)ad;
-(void)onLeaveApplicationWithInstreamAudioAd:(id)instreamAudioAd;
-(void)onDismissModalWithInstreamAudioAd:(id)instreamAudioAd;
-(void)onShowModalWithInstreamAudioAd:(id)instreamAudioAd;
-(void)onBannerTimeLeftChange:(double)change duration:(double)duration instreamAudioAd:(id)ad;
-(void)onBannerComplete:(id)complete instreamAudioAd:(id)ad;
-(void)onBannerStart:(id)start instreamAudioAd:(id)ad;
-(void)playAd:(int)ad withPoint:(id)point;
-(void)playAd:(int)ad;
-(void)onErrorWithReason:(id)reason instreamAudioAd:(id)ad;
-(void)onNoAdWithReason:(id)reason instreamAudioAd:(id)ad;
-(void)onLoadWithInstreamAudioAd:(id)instreamAudioAd;
-(void)loadAdAndPlay;
-(void)cancel;
-(void)deactivate;
-(void)activate;
-(void)dealloc;
-(id)initWithMain:(id)main;
@end

__attribute__((visibility("hidden")))
@interface PostEditController : TextEditController {
	BOOL forcedDelete;
	AttachmentsContainer* _attachedContainer;
	WrapAttachmentsLayout* _attachmentsLayout;
	UIView* _host;
	UIView* _statusHost;
	UILabel* _statusLocation;
	UILabel* _statusTimer;
	LayoutAwareView* _toolbar;
	UIImageView* _toolbarBackground;
	UIButton* _buttonLocation;
	UIButton* _buttonMention;
	UIButton* _buttonPhoto;
	UIButton* _buttonAttach;
	UIButton* _buttonSettings;
	NSDataDetector* _linksDetector;
	NSMutableSet* _skipLinks;
	LinkEditAttachment* _link;
}
@property(retain, nonatomic) PostEditContext* context;
@property(retain, nonatomic) LinkEditAttachment* link;
@property(retain, nonatomic) NSMutableSet* skipLinks;
@property(retain, nonatomic) NSDataDetector* linksDetector;
@property(retain, nonatomic) UIButton* buttonSettings;
@property(retain, nonatomic) UIButton* buttonAttach;
@property(retain, nonatomic) UIButton* buttonPhoto;
@property(retain, nonatomic) UIButton* buttonMention;
@property(retain, nonatomic) UIButton* buttonLocation;
@property(retain, nonatomic) UIImageView* toolbarBackground;
@property(retain, nonatomic) LayoutAwareView* toolbar;
@property(retain, nonatomic) UILabel* statusTimer;
@property(retain, nonatomic) UILabel* statusLocation;
@property(retain, nonatomic) UIView* statusHost;
@property(retain, nonatomic) UIView* host;
@property(retain, nonatomic) WrapAttachmentsLayout* attachmentsLayout;
@property(retain, nonatomic) AttachmentsContainer* attachedContainer;
+(void)lookupLocation:(int)location nav:(id)nav dismissAnimated:(BOOL)animated block:(id)block;
-(void).cxx_destruct;
-(void)notificationAttachmentEdit:(id)edit;
-(void)notificationAttachmentsReady:(id)ready;
-(void)notificationAttachmentsUpdated:(id)updated;
-(void)addAttachments:(id)attachments;
-(void)touchAttachments;
-(void)updateAttachmentsHost;
-(void)updateToolbar;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)textViewDidChange:(id)textView;
-(void)updateLinks;
-(void)updateMentionHighlight;
-(NSRange)highlightedMentionRange;
-(int)VKMEditDataState;
-(void)VKMEditDataChanged:(BOOL)changed;
-(void)actionSettings:(id)settings;
-(void)actionLocation:(id)location;
-(void)actionMention:(id)mention;
-(void)actionAttach:(id)attach;
-(void)actionCamera:(id)camera;
-(void)updateOptions;
-(CGRect)scrollToBottomRect;
-(void)updateForOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)_attachContainer:(id)container;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface CircularBrush : Brush {
}
+(float)minSize;
+(float)maxSize;
-(id)generateImageWithScale:(float)scale;
-(CGSize)brushImageSize;
-(float)drawPeriod;
-(id)initWithSize:(float)size color:(id)color;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderDomainSource : ActionOptionsProviderActionBuilder {
	id _domain;
	id<VKSource> _source;
}
@property(readonly, assign, nonatomic) id<VKSource> source;
@property(readonly, assign, nonatomic) id domain;
+(id)itemSource:(id)source;
+(id)domain:(id)domain source:(id)source;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(id)initWithDomain:(id)domain source:(id)source;
@end

__attribute__((visibility("hidden")))
@interface VKAPIApp : VKDomain {
	BOOL _neww;
	BOOL _installed;
	BOOL _push_enabled;
	NSString* _title;
	NSNumber* _genreID;
	NSString* _genre;
	NSString* _icon;
	NSString* _image;
	int _members_count;
	NSNumber* _author_group;
	id _platform_id;
	int _friends_count;
	NSString* _install_url;
	unsigned _leaderboardType;
	NSString* _about;
	NSArray* _screenshots;
	NSString* _banner;
}
@property(copy, nonatomic) NSString* banner;
@property(copy, nonatomic) NSArray* screenshots;
@property(copy, nonatomic) NSString* about;
@property(assign, nonatomic) unsigned leaderboardType;
@property(assign, nonatomic) BOOL push_enabled;
@property(assign, nonatomic, getter=isInstalled) BOOL installed;
@property(retain, nonatomic) NSString* install_url;
@property(assign, nonatomic) int friends_count;
@property(assign, nonatomic) BOOL neww;
@property(retain, nonatomic) id platform_id;
@property(retain, nonatomic) NSNumber* author_group;
@property(assign, nonatomic) int members_count;
@property(retain, nonatomic) NSString* image;
@property(retain, nonatomic) NSString* icon;
@property(retain, nonatomic) NSString* genre;
@property(retain, nonatomic) NSNumber* genreID;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface AppScreenshot : XXUnknownSuperclass {
	NSNumber* _ID;
	NSString* _URL;
	CGSize _size;
}
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, copy, nonatomic) NSString* URL;
@property(readonly, retain, nonatomic) NSNumber* ID;
+(id)screenshotWithPhoto:(id)photo;
-(void).cxx_destruct;
-(id)initWithPhoto:(id)photo;
@end

__attribute__((visibility("hidden")))
@interface VKDomainWithCustomCellClass : VKDomainDerived {
	Class _cellClass;
}
@property(readonly, assign, nonatomic) Class cellClass;
+(id)from:(id)from cellClass:(Class)aClass;
@end

__attribute__((visibility("hidden")))
@interface AudioEditAttachment : DomainEditAttachment {
}
@property(retain, nonatomic) VKAudio* domain;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumListController : PhotoAlbumController {
}
@property(retain, nonatomic) PhotoAlbumListModel* model;
+(void)qualityTestUpload:(id)upload album:(id)album context:(id)context;
+(void)uploadPhotos:(id)photos album:(id)album context:(id)context;
-(void)VKMScrollViewHasLoaded;
-(void)switchOrder:(id)order;
-(void)actionActions:(id)actions;
-(void)updateActions;
-(void)updateAlbum;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface FileDownloadOperation : AsyncOperation {
	BOOL _ignoreLocalCacheData;
	NSURL* _url;
	NSString* _outputFilePath;
}
@property(assign, nonatomic) BOOL ignoreLocalCacheData;
@property(copy, nonatomic) NSString* outputFilePath;
@property(copy, nonatomic) NSURL* url;
+(id)generateRandomFilePathForURL:(id)url;
+(id)operationWithURL:(id)url outputFilePath:(id)path;
-(void).cxx_destruct;
-(void)removeOutputFile;
-(void)runAsync;
-(id)initWithURL:(id)url outputFilePath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface MasksRecentPersistentStorage : XXUnknownSuperclass {
	VKStats* _stats;
	NSArray* _masks;
}
@property(retain, nonatomic) NSArray* masks;
@property(retain, nonatomic) VKStats* stats;
-(void).cxx_destruct;
-(void)handleMaskIden:(id)iden;
-(void)store;
-(void)load;
-(id)initWithStats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface MasksRecentModelContext : ModelContext {
	NSArray* _masks;
}
@property(retain, nonatomic) NSArray* masks;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MasksRecentModel : LoadingModel <MasksSectionModelProtocol> {
	NSNumber* _sectionId;
	MasksSectionsLocationInfo* _locationInfo;
	MasksRecentPersistentStorage* _masksRecentPersistentStorage;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MasksSectionsLocationInfo* locationInfo;
@property(retain, nonatomic) NSNumber* sectionId;
@property(retain, nonatomic) MasksRecentPersistentStorage* masksRecentPersistentStorage;
+(BOOL)emptyWithStats:(id)stats;
+(int)sectionId;
-(void).cxx_destruct;
-(void)updateIndexOrder;
-(void)handleMask:(id)mask shouldUpdateIndexOrder:(BOOL)order;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(void)emptyIndexAppropriatelly;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VKRemoteImageAsset : XXUnknownSuperclass <VKRemoteAsset> {
	NSURL* _url;
	CGSize _size;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) CGSize size;
@property(retain, nonatomic) NSURL* url;
+(id)assetWithUrl:(id)url size:(CGSize)size;
+(id)parse:(id)parse;
-(void).cxx_destruct;
-(id)initWithUrl:(id)url size:(CGSize)size;
@end

__attribute__((visibility("hidden")))
@interface VKRemoteImageAssetGroup : XXUnknownSuperclass {
	NSArray* _assets;
}
@property(readonly, assign, nonatomic) NSArray* assets;
+(id)groupWithAssets:(id)assets;
-(void).cxx_destruct;
-(id)pickAssetForScaledSize:(CGSize)scaledSize;
-(id)pickAssetForSize:(CGSize)size;
-(id)initWithAssets:(id)assets;
@end

__attribute__((visibility("hidden")))
@interface VKCommentAdminGroup : VKGroup {
	NSString* _photo_200;
}
@property(copy, nonatomic) NSString* photo_200;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface UploadEditAttachment : DomainEditAttachment {
	UploadContext* _context;
	float _progress;
	ClientBasedUploadOperation* _operation;
}
@property(readonly, assign, nonatomic) BOOL longOperation;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UploadContext* context;
@property(retain, nonatomic) ClientBasedUploadOperation* operation;
+(id)uploadAttachmentWithContext:(id)context;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)opProgress;
-(void)opFinished;
-(void)clearResources;
-(id)createOperation;
-(void)clearOperation;
-(void)attachmentViewTapped;
-(id)imageVariants;
-(id)createViewForStyle:(id)style;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface UploadingAttachmentPhoto : VKPhoto <VKUploadingImage> {
	UploadEditAttachment* _attachment;
}
@property(readonly, assign, nonatomic) float ratio;
@property(readonly, retain, nonatomic) NSMutableDictionary* variants;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UploadEditAttachment* attachment;
+(id)withAttachment:(id)attachment;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerViewController : VKMController <UIViewControllerTransitioningDelegate, FullScreenVideoPlayerControlsViewDelegate, UIGestureRecognizerDelegate, PanGestureDrivenDismissableTransitionViewController, VKVideoPlayerHolder> {
	BOOL _mustCreatePlayer;
	BOOL _manuallyPausedVideo;
	BOOL _scrubbing;
	BOOL _controlsHidden;
	BOOL _dismissTransitionInProgress;
	BOOL _showPlayPauseButtonAndScrubberOnNextTap;
	BOOL _playerCreatedHere;
	BOOL _viewDidAppearOnce;
	BOOL _wasPlayingBeforeScrubbing;
	BOOL _wasPlayingBeforeDisappear;
	BOOL _wasPlayingBeforeApplicationResignedActive;
	BOOL _audioPlayerWasPlayingBeforeAppear;
	BOOL _shouldAutoHideControlsAsSoonAsStateIsPlaying;
	VKVideoPlayer* _videoPlayer;
	id<UIViewControllerTransitioningDelegate> _transitionManager;
	FullScreenVideoPlayerControlsView* _controlsView;
	UITapGestureRecognizer* _tapGestureRecognizer;
	NSTimer* _controlsHideDelayTimer;
	NSTimer* _scrubbingUpdateTimer;
	KVOObserver* _videoPlayerObserver;
	AppVolumeIndicatorView* _appVolumeIndicatorView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<UIViewControllerTransitioningDelegate> transitionManager;
@property(assign, nonatomic) BOOL mustCreatePlayer;
@property(readonly, assign, nonatomic) VideoContainerView* videoContainerView;
@property(readonly, assign, nonatomic) VKVideoPlayer* videoPlayer;
@property(readonly, assign, nonatomic) VKVideo* video;
@property(retain, nonatomic) VideoPlayerModel* model;
@property(retain, nonatomic) AppVolumeIndicatorView* appVolumeIndicatorView;
@property(retain, nonatomic) KVOObserver* videoPlayerObserver;
@property(assign, nonatomic) BOOL manuallyPausedVideo;
@property(assign, nonatomic) BOOL shouldAutoHideControlsAsSoonAsStateIsPlaying;
@property(assign, nonatomic) BOOL audioPlayerWasPlayingBeforeAppear;
@property(assign, nonatomic) BOOL wasPlayingBeforeApplicationResignedActive;
@property(assign, nonatomic) BOOL wasPlayingBeforeDisappear;
@property(assign, nonatomic) BOOL wasPlayingBeforeScrubbing;
@property(assign, nonatomic) BOOL viewDidAppearOnce;
@property(assign, nonatomic) BOOL playerCreatedHere;
@property(assign, nonatomic) BOOL showPlayPauseButtonAndScrubberOnNextTap;
@property(assign, nonatomic) BOOL dismissTransitionInProgress;
@property(assign, nonatomic) BOOL controlsHidden;
@property(assign, nonatomic) BOOL scrubbing;
@property(retain, nonatomic) NSTimer* scrubbingUpdateTimer;
@property(retain, nonatomic) NSTimer* controlsHideDelayTimer;
@property(retain, nonatomic) UITapGestureRecognizer* tapGestureRecognizer;
@property(retain, nonatomic) FullScreenVideoPlayerControlsView* controlsView;
-(void).cxx_destruct;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(id)VKMControllerStatsRef;
-(void)updateControlsViewWithVideo:(id)video;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)willFinishPanGestureDismissTransition;
-(void)didFinishCancelPanGestureDismissTransition;
-(void)willCancelPanGestureDismissTransition;
-(void)willBeginPanGestureDismissTransition;
-(BOOL)canBeginPanGestureDismissTransition;
-(id)viewForDismissTransitionAnimation;
-(id)viewForDismissTransitionPanGesture;
-(void)fullScreenVideoPlayerControlsView:(id)view handleErrorOverlayRetryButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleCommentsButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleMoreButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleShareButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleLikeButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleAddButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleReplayButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handlePauseButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handlePlayButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsViewDidEndScrubbing:(id)fullScreenVideoPlayerControlsView;
-(void)fullScreenVideoPlayerControlsView:(id)view didScrubToValue:(float)value;
-(void)fullScreenVideoPlayerControlsViewWillBeginScrubbing:(id)fullScreenVideoPlayerControlsView;
-(void)fullScreenVideoPlayerControlsView:(id)view handleCloseButtonTap:(id)tap;
-(void)fullScreenVideoPlayerControlsView:(id)view handleOpenInLiveAppButtonTap:(id)liveAppButtonTap;
-(void)handleAudioSessionInterruptionNotification:(id)notification;
-(void)handleAudioSessionRouteChangeNotification:(id)notification;
-(void)handleApplicationDidBecomActiveNotification:(id)handleApplication;
-(void)handleApplicationWillResignActiveNotification:(id)handleApplication;
-(void)handleVideoViewTap:(id)tap;
-(void)handleVideoPlayerLoadedVideoTimeChanged:(double)changed;
-(void)handleVideoPlayerCurrentTimeChanged:(double)changed;
-(void)handleVideoPlayerStateChange:(id)change prevState:(id)state;
-(void)attachVideoPlayer:(id)player;
-(void)deattachCurrentVideoPlayer;
-(void)tearDownCustomVolumeIndicator;
-(void)setupCustomVolumeIndicator;
-(BOOL)canShowPlayPauseButton;
-(BOOL)canShowScrubber;
-(void)createPlayer;
-(void)ensureHasPlayer;
-(void)updateForVideoPlayerState;
-(void)tearDownVideoPlayerKVOObserver;
-(void)setupKVOObserverForPlayer:(id)player;
-(void)updateScrubberBufferProgressForLoadedTime:(double)loadedTime;
-(void)updatePlaybackDurationLabelsWithTotalDuration:(double)totalDuration currentTime:(double)time;
-(void)updateScrubberFromVideoPlayerCurrentTimeAnimated:(BOOL)videoPlayerCurrentTimeAnimated;
-(void)updateVideoPlayerCurrentTimeFromScrubber;
-(void)hideControlsWithDelayIfNeeded;
-(void)setControlsHidden:(BOOL)hidden animated:(BOOL)animated afterDelay:(double)delay force:(BOOL)force;
-(void)setControlsHidden:(BOOL)hidden animated:(BOOL)animated afterDelay:(double)delay;
-(void)setControlsHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(void)configureVideoPlayerVideoContainerViewIfNeeded:(id)needed;
-(BOOL)shouldAutorotate;
-(int)preferredInterfaceOrientationForPresentation;
-(void)viewWillLayoutSubviews;
-(int)preferredStatusBarStyle;
-(int)preferredStatusBarUpdateAnimation;
-(BOOL)prefersStatusBarHidden;
-(unsigned)supportedInterfaceOrientations;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface WallPhotoUploadContext : PhotoUploadContext {
	NSNumber* _to;
}
@property(retain, nonatomic) NSNumber* to;
-(void).cxx_destruct;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(id)requestForUploadServer;
-(id)withToWall:(id)wall;
@end

__attribute__((visibility("hidden")))
@interface PhotoUploadEditAttachment : UploadEditAttachment {
}
@property(retain, nonatomic) PhotoUploadContext* context;
-(float)domainAttachmentImageRatio;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface SportTeam : VKRenderable {
	NSString* _name;
	NSString* _descr;
	VKRemoteImageAssetGroup* _image;
}
@property(retain, nonatomic) VKRemoteImageAssetGroup* image;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface WallPostEditContext : PostEditContext {
	BOOL _group_admin;
	BOOL _allow_from_user;
	BOOL _suggest;
	int _publish_origin;
	int _group_type;
	NSString* _successMessage;
}
@property(retain, nonatomic) NSString* successMessage;
@property(assign, nonatomic) int group_type;
@property(assign, nonatomic) int publish_origin;
@property(assign, nonatomic) BOOL suggest;
@property(assign, nonatomic) BOOL allow_from_user;
@property(assign, nonatomic) BOOL group_admin;
@property(retain, nonatomic) VKPost* domain;
+(int)attachmentsLimit;
-(void).cxx_destruct;
-(void)postOptionsChanged:(id)changed;
-(BOOL)enabledAsCommunity;
-(id)buildPostOptions;
-(id)uploadTarget;
-(BOOL)allowAudioPlaylists;
-(BOOL)allowPolls;
-(BOOL)autoDetectLinks;
-(int)locationType;
-(id)confirmAction:(id)action;
-(void)useDomain:(id)domain edit:(BOOL)edit;
-(id)placeholderText;
-(unsigned)textLengthMax;
-(unsigned)textLengthMin;
-(id)title;
-(BOOL)userIsCommunityEditor;
-(BOOL)isPublish;
-(BOOL)targetUserOwner;
-(BOOL)targetGroup;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadEditAttachment : UploadEditAttachment {
}
@property(retain, nonatomic) VideoUploadContext* context;
-(BOOL)longOperation;
-(float)domainAttachmentImageRatio;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteBoardComment : ModelActionDeleteComment {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddBoardComment : ModelAction {
	BOOL _from_group;
	id _comments;
	NSNumber* _guid;
}
@property(retain, nonatomic) NSNumber* guid;
@property(retain, nonatomic) id comments;
@property(assign, nonatomic) BOOL from_group;
@property(retain, nonatomic) VKTopicComment* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionEditBoardComment : ModelActionEdit {
}
@property(retain, nonatomic) VKTopicComment* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteTopic : ModelActionDelete {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionAddTopic : ModelActionAdd {
	NSString* _text;
	id _result;
}
@property(retain, nonatomic) id result;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) VKTopic* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TopicCommentEditContext : PostEditContext {
}
@property(retain, nonatomic) VKTopicComment* domain;
+(int)attachmentsLimit;
-(id)buildPostOptions;
-(void)useDomain:(id)domain edit:(BOOL)edit;
-(id)confirmAction:(id)action;
-(id)uploadTarget;
-(unsigned)textLengthMax;
-(unsigned)textLengthMin;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface UserMenuCell : TitleMenuCell {
	UIButton* _photo;
	VKMImageView* _image;
}
@property(retain, nonatomic) UIButton* photo;
@property(retain, nonatomic) VKMImageView* image;
+(id)image:(id)image statId:(id)anId title:(id)title select:(id)select;
-(void).cxx_destruct;
-(void)renderUser:(id)user;
-(void)layoutSubviews;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setSelected:(BOOL)selected;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)updateButton;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WizardStepFindFriends : XXUnknownSuperclass <WizardStepInfo> {
	MainModel* _main;
	int _introMask;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int introMask;
@property(readonly, assign, nonatomic) MainModel* main;
+(id)stepWithMain:(id)main;
+(id)stepWithMain:(id)main introMask:(int)mask;
-(void).cxx_destruct;
-(void)prepareViewControllerWithCompletion:(id)completion;
-(BOOL)isAvailable;
-(id)initWithMain:(id)main;
-(id)initWithMain:(id)main introMask:(int)mask;
@end

__attribute__((visibility("hidden")))
@interface BlockActionController : XXUnknownSuperclass <ActionDialogProvider, ActionSheetProvider> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)dialogWithTitle:(id)title message:(id)message;
+(id)dialogWithTitle:(id)title;
+(id)actionSheetWithTitle:(id)title;
-(void)finish;
-(void)presentInViewController:(id)viewController animated:(BOOL)animated;
-(void)showFromBarButtonItem:(id)barButtonItem inViewController:(id)viewController animated:(BOOL)animated;
-(void)showFromRect:(CGRect)rect inViewController:(id)viewController animated:(BOOL)animated;
-(void)showInViewController:(id)viewController;
-(id)dialogTextFieldAtIndex:(int)index;
-(void)addTextFieldWithPlaceholder:(id)placeholder text:(id)text secured:(BOOL)secured;
-(void)addButtonWithTitle:(id)title block:(id)block preferred:(BOOL)preferred;
-(void)addButtonWithTitle:(id)title block:(id)block;
-(void)setDestructiveButtonWithTitle:(id)title block:(id)block;
-(void)setCancelButtonWithTitle:(id)title block:(id)block;
-(void)setActionSheetStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogPlaylistsListModel : ListModel {
	NSNumber* _blockId;
}
@property(copy, nonatomic) NSNumber* blockId;
-(void).cxx_destruct;
-(id)listFromData:(id)data;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface ProfileBlockView : XXUnknownSuperclass {
	UILabel* _label;
	int _block;
	NSString* _key;
}
@property(retain, nonatomic) NSString* key;
@property(assign, nonatomic) int block;
@property(retain, nonatomic) UILabel* label;
+(id)profileBlockFor:(int)aFor;
-(void).cxx_destruct;
-(id)accessibilityLabel;
-(void)renderCount:(int)count;
@end

__attribute__((visibility("hidden")))
@interface GeoRenderer : Renderer {
}
@property(retain, nonatomic) VKGeo* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)actionMap:(id)map;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface SimpleGeoRenderer : Renderer {
}
@property(retain, nonatomic) VKSimpleGeo* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)actionMap:(id)map;
@end

__attribute__((visibility("hidden")))
@interface ProfileInfoController : VKMLiveController <EKEventEditViewDelegate> {
	ProfileView* _profileView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ProfileView* profileView;
@property(readonly, retain, nonatomic) DefaultProfileModel* model;
-(void).cxx_destruct;
-(id)safeProfileItemAtIndexPath:(id)indexPath;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)VKMTableCellSeparatorInsetForIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)eventEditViewController:(id)controller didCompleteWithAction:(int)action;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(void)VKMControllerTouch;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface StoreManageController : VKMLiveController {
	UITableViewCell* _cellSuggestionsEnabled;
}
@property(retain, nonatomic) UITableViewCell* cellSuggestionsEnabled;
-(void).cxx_destruct;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(void)switchStickersSuggestions:(id)suggestions;
-(void)actionActions:(id)actions;
-(BOOL)VKMControllerModalAutoClose;
-(int)VKMTableStyle;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface PlaceholderTextField : XXUnknownSuperclass {
	UIColor* _placeholderColor;
}
@property(retain, nonatomic) UIColor* placeholderColor;
-(void).cxx_destruct;
-(void)drawPlaceholderInRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface NewsFeedController : FeedController {
}
@property(retain, nonatomic) FeedModel* model;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)VKMScrollViewFullscreenEnabled;
-(void)actionSearch:(id)search;
-(id)postContext;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface RecommendedNewsFeedController : NewsFeedController {
}
-(id)postContext;
-(id)VKMControllerStatsRef;
@end

__attribute__((visibility("hidden")))
@interface NewsFeedListController : NewsFeedController {
}
-(id)postContext;
-(id)VKMControllerStatsRef;
@end

__attribute__((visibility("hidden")))
@interface PromotedNewsFeedListController : NewsFeedController {
}
-(id)postContext;
-(id)VKMControllerStatsRef;
@end

__attribute__((visibility("hidden")))
@interface NewsFeedSearchController : NewsFeedController {
}
@property(retain, nonatomic) FeedSearchModel* model;
-(id)VKMControllerStatsRef;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ProfileWallController : FeedController <UITextFieldDelegate> {
	BOOL tracked;
	UIImageView* _shadow;
	ProfileView* _profileView;
	UIButton* _post;
	UIButton* _photo;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIButton* photo;
@property(retain, nonatomic) UIButton* post;
@property(retain, nonatomic) ProfileView* profileView;
@property(retain, nonatomic) UIImageView* shadow;
@property(retain, nonatomic) WallModel* model;
-(void).cxx_destruct;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)VKMTableUpdatedIndex;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)VKMControllerStatsRef;
-(void)VKMScrollViewReloadData;
-(void)useBottomInset:(float)inset;
-(void)changeOwnerOnly:(BOOL)only;
-(void)actionProfileViewPostPlace:(id)place;
-(void)actionProfileViewPostPhoto:(id)photo;
-(void)actionProfileViewPost:(id)post;
-(id)postIdentity;
-(id)postContext;
@end

__attribute__((visibility("hidden")))
@interface VKP2PItemModel : ItemModel {
	NSNumber* _iid;
	NSNumber* _from_id;
	NSNumber* _to_id;
}
@property(readonly, assign, nonatomic) VKMoneyTransfer* item;
@property(readonly, assign, nonatomic) NSNumber* to_id;
@property(readonly, assign, nonatomic) NSNumber* from_id;
@property(readonly, assign, nonatomic) NSNumber* iid;
-(void).cxx_destruct;
-(void)changeTransferStatus:(int)status withTransferIden:(id)transferIden andReload:(id)reload;
-(void)handleAccept:(id)accept :(id)arg2;
-(void)handleCancel:(id)cancel :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)process:(id)process context:(id)context;
-(id)request;
-(id)withPreloadedItem:(id)preloadedItem;
@end

__attribute__((visibility("hidden")))
@interface RecommendedFriendComponent : Component5 {
}
+(id)friend:(id)aFriend;
@end

__attribute__((visibility("hidden")))
@interface AttachmentRenderer : Renderer {
}
@property(retain, nonatomic) VKRenderable<VKAttachment>* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)actionSelected:(id)selected;
-(BOOL)cellSelected:(id)selected;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface VKUserProfile : VKDomain {
	BOOL _exportFacebook;
	BOOL _exportTwitter;
	VKUser* _user;
	NSString* _photo_big;
	int _age;
}
@property(assign, nonatomic) BOOL exportTwitter;
@property(assign, nonatomic) BOOL exportFacebook;
@property(assign, nonatomic) int age;
@property(retain, nonatomic) NSString* photo_big;
@property(retain, nonatomic) VKUser* user;
-(void).cxx_destruct;
-(id)safeProfilePhoto;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface BackgroundView : XXUnknownSuperclass {
	int _cornerRadius;
}
@property(assign, nonatomic) int cornerRadius;
-(void)drawRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface NewDialogCell : XXUnknownSuperclass {
	float paddingX;
	float lineHeight;
	float startY;
	CGRect textFrame;
	float namePadding;
	float onlinePadding;
	VKDialog* _dialog;
	UsersModel* _model;
	VKMImageView* _photo;
	UILabel* _name;
	UILabel* _time;
	VKMImageView* _sender;
	UILabel* _dialogText;
	UILabel* _attach;
	BackgroundView* _unread;
	UIImageView* _themeImage;
}
@property(retain, nonatomic) VKDialog* dialog;
@property(readonly, retain, nonatomic) UIImageView* themeImage;
@property(readonly, retain, nonatomic) BackgroundView* unread;
@property(readonly, retain, nonatomic) UILabel* attach;
@property(readonly, retain, nonatomic) UILabel* dialogText;
@property(readonly, retain, nonatomic) VKMImageView* sender;
@property(readonly, retain, nonatomic) UILabel* time;
@property(readonly, retain, nonatomic) UILabel* name;
@property(readonly, retain, nonatomic) VKMImageView* photo;
@property(readonly, retain, nonatomic) UsersModel* model;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)renderSender:(id)sender reuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithModel:(id)model reuse:(id)reuse;
@end

__attribute__((visibility("hidden")))
@interface DialogSingleCell : NewDialogCell {
	id<VKSource> _source;
	UIButton* _online;
}
@property(retain) UIButton* online;
@property(retain) id<VKSource> source;
-(void).cxx_destruct;
-(void)attach:(id)attach source:(id)source expectedReuse:(double)reuse;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)attachUserExpectedReuse:(double)reuse;
-(void)notificationUserUpdated:(id)updated;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithModel:(id)model reuse:(id)reuse;
@end

__attribute__((visibility("hidden")))
@interface DialogMultiCell : NewDialogCell <MultiImageLoaderDelegate> {
	BOOL imagePending;
	VKMMultiLoader* _multiloader;
	UIImageView* _multi;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) UIImageView* multi;
@property(readonly, retain, nonatomic) VKMMultiLoader* multiloader;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)multiImageLoader:(id)loader complete:(id)complete;
-(void)loadDialogImage:(double)image;
-(void)notificationUserUpdated:(id)updated;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithModel:(id)model reuse:(id)reuse;
@end

__attribute__((visibility("hidden")))
@interface SignupConfirmController : SignupController <TimerTargetDelegate, UITextFieldDelegate, ConfirmationCodeHandler> {
	BOOL is2FA;
	BOOL isApp2FA;
	UITextField* _codeField;
	TimerTarget* _target;
	UILabel* _footerLabel;
	UILabel* _footerSublabel;
	UIButton* _footerButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIButton* footerButton;
@property(retain, nonatomic) UILabel* footerSublabel;
@property(retain, nonatomic) UILabel* footerLabel;
@property(retain, nonatomic) TimerTarget* target;
@property(retain, nonatomic) UITextField* codeField;
-(void).cxx_destruct;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)timerTargetFired:(id)fired;
-(void)retrySMS:(BOOL)sms;
-(void)updateTimer;
-(BOOL)is2FAWithApp;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)actionNext:(id)next;
-(void)actionProblems:(id)problems;
-(void)actionCall:(id)call;
-(BOOL)handleConfirmationCode:(id)code;
-(void)notifyIncorrectFields:(id)fields;
-(void)render;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface HighlightableLabel : XXUnknownSuperclass {
	UIColor* _preservedShadowColor;
	UIColor* _preservedTextColor;
}
@property(retain, nonatomic) UIColor* preservedTextColor;
@property(retain, nonatomic) UIColor* preservedShadowColor;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
@end

__attribute__((visibility("hidden")))
@interface AudioOwnersBlockCell : AudioBlockCellWithCollectionView {
}
@property(retain, nonatomic) AudioOwnersBlock* domain;
+(Class)collectionCellClass;
-(void)actionShowAllButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface StoriesSettingsModel : SettingsPrivacyModel {
	NSNumber* _count_stories_banned;
}
@property(retain, nonatomic) NSNumber* count_stories_banned;
-(void).cxx_destruct;
-(void)modelActionStoriesSourceBan:(id)ban :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface InputPanelViewTextView : MOTextView {
	BOOL _overlayEnabled;
	id<InputPanelViewTextViewDelegate> _interactionDelegate;
}
@property(assign, nonatomic) BOOL overlayEnabled;
@property(assign, nonatomic) __weak id<InputPanelViewTextViewDelegate> interactionDelegate;
-(void).cxx_destruct;
-(void)actionSend:(id)send;
-(id)keyCommands;
-(CGRect)caretRectForPosition:(id)position;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)attemptToBecomeFirstResponder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface InputPanelView : XXUnknownSuperclass <InputPanelViewTextViewDelegate> {
	InputPanelViewTextView* _textPanel;
	UIButton* _toggle;
	UIImageView* _promo;
	UIButton* _send;
	VKPPBadge* _badge;
	UIImageView* _background;
	UIView* _overlay;
	id<InputPanelViewDelegate> _inputPanelDelegate;
	float _targetHeight;
	UIColor* _shadowColor;
	UIEdgeInsets _inset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float targetHeight;
@property(assign, nonatomic) __weak id<InputPanelViewDelegate> inputPanelDelegate;
@property(assign, nonatomic) UIEdgeInsets inset;
@property(retain, nonatomic) UIView* overlay;
@property(retain, nonatomic) UIImageView* background;
@property(retain, nonatomic) VKPPBadge* badge;
@property(retain, nonatomic) UIButton* send;
@property(retain, nonatomic) UIImageView* promo;
@property(retain, nonatomic) UIButton* toggle;
@property(retain, nonatomic) InputPanelViewTextView* textPanel;
@property(retain, nonatomic) UIColor* shadowColor;
-(void).cxx_destruct;
-(void)inputPanelViewTextViewResignFirstResponder:(BOOL)responder;
-(void)inputPanelViewTextViewBecomeFirstResponder:(BOOL)responder;
-(void)inputPanelViewTextViewAttemptToSend:(id)send;
-(void)inputPanelViewTextViewAttemptToBecomeFirstResponder:(id)becomeFirstResponder;
-(void)updateCount:(int)count animated:(BOOL)animated;
-(void)updateEmpty:(BOOL)empty;
-(void)inputEnable:(BOOL)enable;
-(void)dealloc;
-(CGRect)textPanelFrame;
-(void)layoutSubviews;
-(id)initForComments:(BOOL)comments;
-(id)initWithFrame:(CGRect)frame inset:(UIEdgeInsets)inset forComments:(BOOL)comments;
@end

__attribute__((visibility("hidden")))
@interface FeedCommentsController : FeedController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface FeedCommentRenderer : Renderer {
}
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface DetailCounter : XXUnknownSuperclass {
	UILabel* _title;
	UIImage* _normal;
	UIImage* _selected;
}
@property(retain, nonatomic) UIImage* selected;
@property(retain, nonatomic) UIImage* normal;
@property(retain, nonatomic) UILabel* title;
+(float)widthWithTitle:(id)title;
-(void).cxx_destruct;
-(id)initWithImageName:(id)imageName;
@end

__attribute__((visibility("hidden")))
@interface MessageRenderLayout : RenderLayout {
	VKRenderedText* _textRender;
}
@property(retain) VKRenderedText* textRender;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MessageRenderer : XXUnknownSuperclass <TextKitLabelInteractiveDefaultBehaviorDelegate, MessageRendererDelegate, ThumbnailViewDelegate, AudioAttachmentDelegate, AudioMessageAttachmentDelegate, SnapperViewDelegate> {
	BOOL _detail;
	BOOL _disableGeo;
	UsersModel* _model;
	int _level;
	VKMessage* _message;
	NSNumber* _uid;
	id<MessageRendererDelegate> _delegate;
	ImageAttachmentView* _author;
	UIView* _stripe;
	TextKitLabelInteractive* _textKitLabel;
	UITextView* _textView;
	NSMutableArray* _images;
	NSMutableArray* _audios;
	NSMutableArray* _audioMessages;
	NSMutableArray* _links;
	NSMutableArray* _money;
	NSMutableArray* _playlists;
	NSMutableArray* _stories;
	NSMutableArray* _masks;
	NSMutableArray* _gift_panels;
	ThumbnailView* _map;
	NSMutableArray* _fwd;
	SnapperView* _snapperView;
	UIButton* _openStickersButton;
	TextKitLabelInteractiveDefaultBehavior* _labelDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIButton* openStickersButton;
@property(retain, nonatomic) SnapperView* snapperView;
@property(retain, nonatomic) NSMutableArray* fwd;
@property(retain, nonatomic) ThumbnailView* map;
@property(retain, nonatomic) NSMutableArray* gift_panels;
@property(retain, nonatomic) NSMutableArray* masks;
@property(retain, nonatomic) NSMutableArray* stories;
@property(retain, nonatomic) NSMutableArray* playlists;
@property(retain, nonatomic) NSMutableArray* money;
@property(retain, nonatomic) NSMutableArray* links;
@property(retain, nonatomic) NSMutableArray* audioMessages;
@property(retain, nonatomic) NSMutableArray* audios;
@property(retain, nonatomic) NSMutableArray* images;
@property(retain, nonatomic) UITextView* textView;
@property(retain, nonatomic) TextKitLabelInteractive* textKitLabel;
@property(retain, nonatomic) UIView* stripe;
@property(retain, nonatomic) ImageAttachmentView* author;
@property(assign, nonatomic) __weak id<MessageRendererDelegate> delegate;
@property(retain) NSNumber* uid;
@property(retain, nonatomic) VKMessage* message;
@property(assign, nonatomic) BOOL disableGeo;
@property(assign, nonatomic) BOOL detail;
@property(assign, nonatomic) int level;
@property(retain, nonatomic) UsersModel* model;
@property(retain, nonatomic) TextKitLabelInteractiveDefaultBehavior* labelDelegate;
+(void)prerender:(id)prerender level:(int)level width:(float)width detailView:(id)view;
+(void)prerenderGift:(id)gift level:(int)level width:(float)width detailView:(id)view layout:(id)layout startIndex:(inout unsigned*)index;
+(void)prerenderDefaultMessage:(id)message level:(int)level width:(float)width detailView:(id)view layout:(id)layout startIndex:(inout unsigned*)index justBody:(inout BOOL*)body skipText:(BOOL)text;
+(id)preparedBodyForMessage:(id)message;
+(void)initialize;
-(void).cxx_destruct;
-(id)currentNavDelegate;
-(void)snapperView:(id)view shouldOpenAttach:(id)attach;
-(void)audioMessageView:(id)view selectedAudioMessage:(id)message;
-(void)audioView:(id)view selectedAudio:(id)audio;
-(id)thumbnailViewNavDelegate;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)actionOpenPack:(id)pack;
-(void)actionAudioMessage:(id)message;
-(void)actionAudio:(id)audio;
-(void)actionAuthor:(id)author;
-(void)actionPlaylist:(id)playlist;
-(void)actionMoney:(id)money;
-(void)actionMask:(id)mask;
-(void)actionStory:(id)story;
-(void)actionLink:(id)link;
-(void)playAudioMessage:(id)message toggle:(BOOL)toggle;
-(void)playAudio:(id)audio toggle:(BOOL)toggle;
-(id)messageNavigation;
-(void)render:(id)render width:(float)width reuse:(double)reuse;
-(void)clear;
-(void)reuse;
-(void)renderUser:(double)user;
-(void)notificationUserUpdated:(id)updated;
-(id)initWithDelegate:(id)delegate level:(int)level detail:(BOOL)detail;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AbstractMessagesAttachmentView : XXUnknownSuperclass {
	BOOL beginsTracking;
}
-(void)setHighlighted:(BOOL)highlighted;
-(BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface AttachmentView : AbstractMessagesAttachmentView {
	CGRect imageFrame;
	BOOL _condensed;
	UILabel* _title;
	UILabel* _status;
}
@property(assign, nonatomic) BOOL condensed;
@property(retain, nonatomic) UILabel* status;
@property(retain, nonatomic) UILabel* title;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ImageAttachmentView : AttachmentView {
	XXStruct_UOIMaD type;
	VKMImageView* _image;
	UIImageView* _ico;
	id<VKAttachment> _attachment;
}
@property(retain, nonatomic) id<VKAttachment> attachment;
@property(retain, nonatomic) UIImageView* ico;
@property(retain, nonatomic) VKMImageView* image;
-(void).cxx_destruct;
-(void)reuse;
-(void)render:(id)render reuse:(double)reuse;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SnippetAttachmentView : AbstractMessagesAttachmentView {
	UILabel* _titleLabel;
	UILabel* _statusLabel;
	UIImageView* _icoImageView;
	VKMImageView* _imageView;
	id<VKAttachment> _attachment;
	UIButton* _hollowButton;
}
@property(retain, nonatomic) UIButton* hollowButton;
@property(retain, nonatomic) id<VKAttachment> attachment;
@property(retain, nonatomic) VKMImageView* imageView;
@property(retain, nonatomic) UIImageView* icoImageView;
@property(retain, nonatomic) UILabel* statusLabel;
@property(retain, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(void)reuse;
-(void)render:(id)render reuse:(double)reuse;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioAttachmentView : AttachmentView {
	VKAudio* _audio;
	id<AudioAttachmentDelegate> _delegate;
	VKAudioQueuePlayer* _player;
	UIButton* _button;
	UILabel* _duration;
	VKCircleProgressView* _progressView;
	id _observer;
}
@property(assign, nonatomic) __weak id<AudioAttachmentDelegate> delegate;
@property(retain, nonatomic) VKAudio* audio;
@property(retain, nonatomic) id observer;
@property(retain, nonatomic) VKCircleProgressView* progressView;
@property(retain, nonatomic) UILabel* duration;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) VKAudioQueuePlayer* player;
-(void).cxx_destruct;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)playerChangedItem:(id)item;
-(void)playerUpdated:(id)updated;
-(void)updateProgressForProgressView:(float)progressView;
-(float)progressForTime:(XXStruct_pwHToB)time;
-(void)createTimeObserver;
-(void)toggle:(id)toggle;
-(void)update;
-(void)render:(id)render;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame main:(id)main duration:(BOOL)duration;
@end

__attribute__((visibility("hidden")))
@interface MessagesPhotoUploadContext : PhotoUploadContext {
}
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(id)requestForUploadServer;
@end

__attribute__((visibility("hidden")))
@interface VKAudioPlaylistExtended : VKRenderable {
	NSString* _title;
	NSString* _subtitle;
	VKAudioPlaylist* _playlist;
}
@property(retain, nonatomic) VKAudioPlaylist* playlist;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface DocsModel : ListModel {
}
-(id)componentForObject:(id)object withContext:(id)context;
-(id)addNewDocItem;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleUpload:(id)upload :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)isOwnerDoc:(id)doc;
-(id)setupSearch;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface DocsUploadFromCamera : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface CommonPostInteractionStats : XXUnknownSuperclass <FeedPostInteractionStats> {
	VKIdentity* _post;
	VKAdData* _adData;
	CommonStatsManager* _statsManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) CommonStatsManager* statsManager;
@property(readonly, assign, nonatomic) VKAdData* adData;
@property(readonly, assign, nonatomic) VKIdentity* post;
+(BOOL)validTarget:(id)target;
+(id)post:(id)post adData:(id)data statsManager:(id)manager;
-(void).cxx_destruct;
-(void)tapLinkAttachment:(id)attachment ref:(id)ref;
-(void)tapSnippetButton:(id)button ref:(id)ref;
-(void)tapSnippet:(id)snippet ref:(id)ref;
-(void)openImage:(id)image ref:(id)ref;
-(void)playAudio:(id)audio ref:(id)ref;
-(void)action:(int)action context:(id)context;
-(id)initWithPost:(id)post adData:(id)data statsManager:(id)manager;
@end

__attribute__((visibility("hidden")))
@interface VKDocVideoPreview : VKDomain {
	NSString* _src;
	int _width;
	int _height;
	unsigned _file_size;
}
@property(assign, nonatomic) unsigned file_size;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(copy, nonatomic) NSString* src;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKDocSketchPreview : VKDomain {
	NSString* _src;
	UIImage* _image;
	int _width;
	int _height;
}
@property(readonly, assign, nonatomic) float ratio;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) UIImage* image;
@property(copy, nonatomic) NSString* src;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKDoc : VKDomain <VKAttachment, VKBrowsableImage> {
	BOOL _saved;
	BOOL _is_licensed;
	BOOL _purchase_available;
	BOOL _is_purchased;
	NSMutableDictionary* _variants;
	NSString* _title;
	int _size;
	NSString* _ext;
	NSString* _url;
	NSNumber* _date;
	VKDocVideoPreview* _video;
	VKDocSketchPreview* _sketch;
	float _ratio;
	VKIdentity* _knownAddedDoc;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL is_purchased;
@property(assign, nonatomic) BOOL purchase_available;
@property(assign, nonatomic) BOOL is_licensed;
@property(retain, nonatomic) VKIdentity* knownAddedDoc;
@property(assign, nonatomic) BOOL saved;
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) VKDocSketchPreview* sketch;
@property(retain, nonatomic) VKDocVideoPreview* video;
@property(retain, nonatomic) NSNumber* date;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* ext;
@property(assign, nonatomic) int size;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSMutableDictionary* variants;
-(void).cxx_destruct;
-(BOOL)isVideo;
-(id)messagesFilterForSize:(CGSize)size isFirst:(BOOL)first isLast:(BOOL)last;
-(id)thumbnailUrl;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(int)fullVariantType;
-(id)thumbnailVariant;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(BOOL)copyrightOwnerRestricted;
-(id)sizeString;
-(BOOL)process:(id)process context:(id)context;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsVideoModel : MessagesAttachmentsListModel {
}
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)process:(id)process;
-(id)requestForContext:(id)context;
-(id)mediaType;
-(id)countKey;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface TopicEditContext : ItemEditContext {
}
@property(retain, nonatomic) VKTopic* domain;
-(int)descrMax;
-(int)descrMin;
-(int)titleMax;
-(int)titleMin;
-(id)descrPlaceholder;
-(id)titlePlaceholder;
-(BOOL)editPrivacy;
-(id)editTitle;
-(id)confirmAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface DocEditAttachment : DomainEditAttachment {
}
@property(retain, nonatomic) VKDoc* domain;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface RoundedProgressOverlayCircle : XXUnknownSuperclass {
	float _pizzaRadius;
}
@property(assign, nonatomic) float pizzaRadius;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface RoundedProgressOverlayLayer : XXUnknownSuperclass {
	float _strokeWidth;
	float _pizzaRadius;
}
@property(assign, nonatomic) float pizzaRadius;
@property(assign, nonatomic) float strokeWidth;
-(void)updatePath;
-(CGPathRef)circlePathWithLineWidth:(float)lineWidth;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface RoundedProgressOverlayView : XXUnknownSuperclass <UIGestureRecognizerDelegate, MBProgressHUDCustomView, AnimatingIndicator> {
	int _rotationDegree;
	int _currentAnimationFrame;
	BOOL _isIndeterminate;
	BOOL _animated;
	UIColor* _overlayColor;
	UIColor* _strokeColor;
	NSString* _text;
	id<RoundedProgressOverlayViewDelegate> _delegate;
	float _pizzaRadius;
	float _strokeWidth;
	float _progress;
	float _speedFactor;
	RoundedProgressOverlayCircle* _circleLayer;
	RoundedProgressOverlayLayer* _progressLayer;
	UILabel* _textLabel;
	UIImageView* _crossImageView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL animated;
@property(assign, nonatomic) float speedFactor;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) float strokeWidth;
@property(assign, nonatomic) float pizzaRadius;
@property(assign, nonatomic) __weak id<RoundedProgressOverlayViewDelegate> delegate;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) UIColor* strokeColor;
@property(retain, nonatomic) UIColor* overlayColor;
@property(retain, nonatomic) UIImageView* crossImageView;
@property(retain, nonatomic) UILabel* textLabel;
@property(retain, nonatomic) RoundedProgressOverlayLayer* progressLayer;
@property(retain, nonatomic) RoundedProgressOverlayCircle* circleLayer;
-(void).cxx_destruct;
-(BOOL)isAnimating;
-(void)stopAnimating;
-(void)startAnimating;
-(void)cancelTap:(id)tap;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)setIndeterminate:(BOOL)indeterminate;
-(void)clean;
-(void)layoutSublayersOfLayer:(id)layer;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(void)setBackgroundHidden:(BOOL)hidden;
-(void)setCancelHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setCancelHidden:(BOOL)hidden;
-(void)setCancelationImage:(id)image;
-(void)setProgressLayerValue:(float)value to:(float)to animated:(BOOL)animated;
-(void)addRunningAnimation;
-(void)setHidden:(BOOL)hidden;
-(void)setDisplayLinkPaused:(BOOL)paused;
-(void)addSublayer:(id)sublayer;
-(void)setUp;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface HighlightableView : XXUnknownSuperclass {
	/*function-pointer*/ void* _highlight;
}
@property(assign, nonatomic) /*function-pointer*/ void* highlight;
-(void)setHighlighted:(BOOL)highlighted;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorNavigationBar : XXUnknownSuperclass {
}
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WizardStepRecommendedPages : XXUnknownSuperclass <WizardStepInfo> {
	MainModel* _main;
	int _introMask;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int introMask;
@property(readonly, assign, nonatomic) MainModel* main;
+(id)stepWithMain:(id)main;
+(id)stepWithMain:(id)main introMask:(int)mask;
-(void).cxx_destruct;
-(void)prepareViewControllerWithCompletion:(id)completion;
-(BOOL)isAvailable;
-(id)initWithMain:(id)main;
-(id)initWithMain:(id)main introMask:(int)mask;
@end

__attribute__((visibility("hidden")))
@interface StoryFeedPreviewAvatarCell : XXUnknownSuperclass {
	VKMImageView* _imageView;
	id<StoryFeedPreviewAvatarCellViewModel> _viewModel;
	UILabel* _nameLabel;
	UIImageView* _unseenOverlayImageView;
	UIImageView* _uploadFailedOverlayImageView;
	UIImageView* _createStoryButtonImageView;
}
@property(retain, nonatomic) id<StoryFeedPreviewAvatarCellViewModel> viewModel;
@property(readonly, assign, nonatomic) VKMImageView* imageView;
@property(retain, nonatomic) UIImageView* createStoryButtonImageView;
@property(retain, nonatomic) UIImageView* uploadFailedOverlayImageView;
@property(retain, nonatomic) UIImageView* unseenOverlayImageView;
@property(retain, nonatomic) UILabel* nameLabel;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)showUploadStartedAnimation;
-(void)updateContentForViewModel:(id)viewModel;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryFeedPreviewItem : XXUnknownSuperclass <StoryFeedPreviewAvatarCellViewModel> {
	BOOL _isMyStory;
	BOOL _seen;
	id<VKSource> _source;
	StoryIdentity* _storyIden;
	StoriesModel* _storiesModel;
}
@property(readonly, copy, nonatomic) NSString* avatarPhotoURL;
@property(readonly, copy, nonatomic) NSString* sourceName;
@property(readonly, assign, nonatomic) unsigned cellState;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) StoryIdentity* storyIden;
@property(readonly, assign, nonatomic) id<VKSource> source;
@property(assign, nonatomic, getter=isSeen) BOOL seen;
@property(assign, nonatomic) BOOL isMyStory;
@property(retain, nonatomic) StoriesModel* storiesModel;
-(void).cxx_destruct;
-(id)initWithStoryIdentity:(id)storyIdentity storiesModel:(id)model source:(id)source;
@end

__attribute__((visibility("hidden")))
@interface StoryFeedCreateStoryItem : XXUnknownSuperclass <StoryFeedPreviewAvatarCellViewModel> {
}
@property(readonly, copy, nonatomic) NSString* avatarPhotoURL;
@property(readonly, copy, nonatomic) NSString* sourceName;
@property(readonly, assign, nonatomic) unsigned cellState;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)previewImageVariantForSize:(CGSize)size;
@end

__attribute__((visibility("hidden")))
@interface MyBlurEffect : XXUnknownSuperclass {
}
+(id)effectWithStyle:(int)style;
-(id)copyWithZone:(NSZone*)zone;
-(id)effectSettings;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterBlur : VKImageFilter {
	float _blurRadius;
}
+(id)blurRadius:(float)radius;
-(id)process:(id)process;
@end

__attribute__((visibility("hidden")))
@interface VKMImageViewWithDominantColorFade : VKMImageView {
	UIView* _fadeView;
	NSObject<OS_dispatch_queue>* _colorCubeQueue;
}
@property(assign, nonatomic) BOOL fadeViewHidden;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* colorCubeQueue;
@property(retain, nonatomic) UIView* fadeView;
-(void).cxx_destruct;
-(void)updateColorFadeViewForCurrentImage;
-(void)changeImage:(id)image animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ChatEditModelContext : ModelContext {
	BOOL _admin;
	BOOL _inviter;
	BOOL _participant;
	BOOL _left;
	BOOL _kicked;
	NSSet* _uids;
	NSString* _title;
	NSString* _photo;
}
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSSet* uids;
@property(assign, nonatomic) BOOL kicked;
@property(assign, nonatomic) BOOL left;
@property(assign, nonatomic) BOOL participant;
@property(assign, nonatomic) BOOL inviter;
@property(assign, nonatomic) BOOL admin;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface ChatEditModel : LoadingModel {
	NSString* _changeTitle;
	NSSet* _addUsers;
	NSNumber* _removeUser;
	NSNumber* _pushSound;
	NSNumber* _pushMute;
}
@property(retain, nonatomic) NSNumber* pushMute;
@property(retain, nonatomic) NSNumber* pushSound;
@property(retain, nonatomic) NSNumber* removeUser;
@property(retain, nonatomic) NSSet* addUsers;
@property(retain, nonatomic) NSString* changeTitle;
@property(retain, nonatomic) ChatEditModelContext* lastContext;
+(void)fillMuteVariants:(id)variants withCompleteVariant:(id)completeVariant;
+(id)requestForEditChat:(id)editChat title:(id)title add:(id)add remove:(id)remove sound:(id)sound mute:(id)mute deviceId:(id)anId;
-(void).cxx_destruct;
-(void)invalidateChatUsers;
-(void)updateTitle:(id)title add:(id)add remove:(id)remove sound:(id)sound mute:(id)mute;
-(void)handleUserKick:(id)kick :(id)arg2;
-(BOOL)shouldLoad:(id)load;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(void)registerForEvents:(id)events;
@end

__attribute__((visibility("hidden")))
@interface ChatKickUserModelAction : ModelAction {
	NSNumber* _chatId;
}
@property(retain, nonatomic) NSNumber* chatId;
@property(retain, nonatomic) id<VKSource> target;
+(id)withTarget:(id)target chat:(id)chat;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAudioPlayerListTableViewController : XXUnknownSuperclass <VKAudioTableViewCellDelegate> {
	VKAudioQueuePlayer* _player;
}
@property(readonly, assign, nonatomic) VKAudioQueuePlayer* player;
+(id)with:(id)with;
-(void).cxx_destruct;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)vkAudioTableViewCellSelectedItem:(id)item cell:(id)cell;
-(void)actionDone:(id)done;
-(void)actionToggle:(id)toggle;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithPlayer:(id)player;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemTitle : VKRenderable {
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemPushSound : VKRenderable {
	BOOL _enabled;
	BOOL _on;
}
@property(assign, nonatomic) BOOL on;
@property(assign, nonatomic) BOOL enabled;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemPushMute : VKRenderable {
	BOOL _enabled;
	NSNumber* _disabled_until;
}
@property(retain, nonatomic) NSNumber* disabled_until;
@property(assign, nonatomic) BOOL enabled;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemUser : VKRenderable {
	BOOL _admin;
	id<VKSource> _source;
	NSDictionary* _lastSeen;
	id<VKSource> _inviter;
}
@property(assign, nonatomic) BOOL admin;
@property(retain, nonatomic) id<VKSource> inviter;
@property(retain, nonatomic) NSDictionary* lastSeen;
@property(retain, nonatomic) id<VKSource> source;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemAdd : VKRenderable {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemLeave : VKRenderable {
	BOOL _participant;
}
@property(assign, nonatomic) BOOL participant;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemAttachments : VKRenderable {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface StoreViewControllerDelegate : XXUnknownSuperclass <SKStoreProductViewControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)productViewControllerDidFinish:(id)productViewController;
@end

__attribute__((visibility("hidden")))
@interface OpenExternalAppAction : Action {
}
+(id)actionWithAppId:(id)appId;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface InstagramOpenUrlAction : Action {
}
+(id)actionWithUrlString:(id)urlString;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface SnapsterOpenIdentityAction : Action {
}
+(id)actionWithIdentity:(id)identity;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ExternalAppsSupport : XXUnknownSuperclass {
}
+(id)boomSupport;
+(id)safariSupport;
+(id)snapsterSupport;
+(id)instagramSupport;
+(void)presentAppStoreProductWithId:(id)anId fromViewController:(id)viewController campaignToken:(id)token providerToken:(id)token4;
+(void)presentAppStoreProductWithId:(id)anId fromViewController:(id)viewController unformattedSource:(id)source;
+(id)urlForAppStoreApplicationWithProductId:(id)productId;
+(BOOL)openExternalUrl:(id)url;
@end

__attribute__((visibility("hidden")))
@interface BoomAppSupport : XXUnknownSuperclass <ExternalAppSupport> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)downloadIdentity:(id)identity fromViewController:(id)viewController source:(id)source;
-(void)openBoomIfAvailableFromViewController:(id)viewController source:(id)source;
-(id)boomURL;
-(BOOL)canOpenBoom;
-(BOOL)isAvailable;
@end

__attribute__((visibility("hidden")))
@interface InstagramAppSupport : XXUnknownSuperclass <ExternalAppSupport> {
	BOOL _isAvailable;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)actionToOpenUrl:(id)openUrl;
-(BOOL)openMediaId:(id)anId;
-(id)urlForMediaId:(id)mediaId;
-(void)getMediaIdFromUrl:(id)url withCompletion:(id)completion;
-(id)init;
-(void)checkIfAvailable;
-(BOOL)isAvailable;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SnapsterAppSupport : XXUnknownSuperclass <ExternalAppSupport> {
	BOOL _isAvailable;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)actionToOpenIdentity:(id)openIdentity;
-(BOOL)openIdentity:(id)identity;
-(id)urlForIdentity:(id)identity;
-(id)init;
-(void)checkIfAvailable;
-(BOOL)isAvailable;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SafariAppSupport : XXUnknownSuperclass <ExternalAppSupport> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)openURL:(id)url;
-(BOOL)isAvailable;
@end

__attribute__((visibility("hidden")))
@interface PostInteractionStatsGroup : XXUnknownSuperclass <FeedPostInteractionStats> {
	NSArray* _stats;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSArray* stats;
+(id)stats:(id)stats;
-(void).cxx_destruct;
-(void)tapLinkAttachment:(id)attachment ref:(id)ref;
-(void)tapSnippetButton:(id)button ref:(id)ref;
-(void)tapSnippet:(id)snippet ref:(id)ref;
-(void)openImage:(id)image ref:(id)ref;
-(void)playAudio:(id)audio ref:(id)ref;
-(void)action:(int)action context:(id)context;
-(id)initWithStats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchTrendsModel : ListModel {
}
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
@end

__attribute__((visibility("hidden")))
@interface ChatEditHeaderView : XXUnknownSuperclass <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _table;
	ChatEditItemTitle* _item;
	ChatEditItemTitleCell* _cell;
	VKMImageView* _image;
	UIButton* _photoButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIButton* photoButton;
@property(retain, nonatomic) VKMImageView* image;
@property(retain, nonatomic) ChatEditItemTitleCell* cell;
@property(retain, nonatomic) ChatEditItemTitle* item;
@property(retain, nonatomic) UITableView* table;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ChatEditController : VKMLiveController <MessagesModelObserver> {
	BOOL _realEditing;
	ChatEditHeaderView* _header;
	NSDate* _ownUpdate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ChatEditModel* model;
@property(assign, nonatomic) BOOL realEditing;
@property(retain, nonatomic) NSDate* ownUpdate;
@property(retain, nonatomic) ChatEditHeaderView* header;
-(void).cxx_destruct;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)chatUserAtIndexPath:(id)indexPath;
-(float)VKMTableCellSeparatorInsetForIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionPhoto:(id)photo;
-(void)setupImageView:(BOOL)view;
-(void)VKMTableUpdatedIndex;
-(void)viewDidLoad;
-(int)VKMTableStyle;
-(void)modelUpdatedDialogsData:(id)data;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VKAttachments2 : XXUnknownSuperclass {
	BOOL _displayDetailedPolls;
	VKIdentity* _host;
	NSArray* _allImages;
	NSArray* _videoSnippets;
	NSArray* _videoAutoplayedSnippets;
	NSArray* _links;
	NSArray* _linkSnippets;
	NSArray* _polls;
	NSArray* _geoObjects;
	NSArray* _allDocuments;
	NSArray* _gifsDocuments;
	NSArray* _imageDocuments;
	NSArray* _generalDocuments;
	NSArray* _stickers;
	NSArray* _allAudios;
	NSArray* _playlists;
	NSArray* _photoAlbums;
	NSArray* _marketCollections;
	VKPhotosListAttach* _photosList;
	id<VKSource> _signer;
	id<AudioStats> _audioStats;
	id<PhotoStats> _photoStats;
	id<SnippetStats> _snippetStats;
}
@property(retain, nonatomic) id<SnippetStats> snippetStats;
@property(retain, nonatomic) id<PhotoStats> photoStats;
@property(retain, nonatomic) id<AudioStats> audioStats;
@property(assign, nonatomic) BOOL displayDetailedPolls;
@property(retain, nonatomic) id<VKSource> signer;
@property(retain, nonatomic) VKPhotosListAttach* photosList;
@property(copy, nonatomic) NSArray* marketCollections;
@property(retain, nonatomic) NSArray* photoAlbums;
@property(retain, nonatomic) NSArray* playlists;
@property(retain, nonatomic) NSArray* allAudios;
@property(retain, nonatomic) NSArray* stickers;
@property(retain, nonatomic) NSArray* generalDocuments;
@property(retain, nonatomic) NSArray* imageDocuments;
@property(retain, nonatomic) NSArray* gifsDocuments;
@property(retain, nonatomic) NSArray* allDocuments;
@property(retain, nonatomic) NSArray* geoObjects;
@property(retain, nonatomic) NSArray* polls;
@property(retain, nonatomic) NSArray* linkSnippets;
@property(retain, nonatomic) NSArray* links;
@property(retain, nonatomic) NSArray* videoAutoplayedSnippets;
@property(retain, nonatomic) NSArray* videoSnippets;
@property(retain, nonatomic) NSArray* allImages;
@property(retain, nonatomic) VKIdentity* host;
-(void).cxx_destruct;
-(BOOL)largeGifPreview;
-(BOOL)lastAttachmentIsBordered;
-(BOOL)canDisplayDetailedPolls;
-(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface VKAttachments2Builder : XXUnknownSuperclass {
	NSMutableArray* _vkAttachments;
	NSMutableArray* _geoObjects;
	id<VKSource> _signer;
	VKIdentity* _host;
}
@property(retain, nonatomic) VKIdentity* host;
@property(retain, nonatomic) id<VKSource> signer;
@property(retain, nonatomic) NSMutableArray* geoObjects;
@property(retain, nonatomic) NSMutableArray* vkAttachments;
+(id)builderWithPost:(id)post;
+(id)builder:(id)builder;
+(id)builder;
-(void).cxx_destruct;
-(id)build;
-(void)addSigner:(id)signer;
-(void)addGeo:(id)geo;
-(void)addAttachments:(id)attachments;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AttachmentsComponentState : XXUnknownSuperclass {
	VKAttachments* _attachments;
	float _sideInsets;
}
@property(assign, nonatomic) float sideInsets;
@property(retain, nonatomic) VKAttachments* attachments;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AttachmentsComponent : Component5 {
}
+(void)routeDocuments:(id)documents withInitial:(id)initial inContext:(id)context;
+(id)attachments2:(id)a2 needsSeparator:(BOOL*)separator;
+(id)attachments2:(id)a2;
+(id)geoComponent:(id)component single:(BOOL)single;
+(id)signer:(id)signer;
+(id)regularDocs:(id)docs;
+(id)thumbDocs:(id)docs singleAttach:(BOOL)attach;
+(id)geo:(id)geo single:(BOOL)single;
+(id)audios:(id)audios stats:(id)stats;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface SettingsAlertStyleController : BaseSettingsController {
	int _selected;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(assign, nonatomic) int selected;
+(void)testAlertStyle:(id)style;
+(id)alertStyleName:(int)name;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface CommentSourceCellBase : VKMCollectionCell {
}
+(CGSize)cellSize;
-(CGRect)imageFrame;
@end

__attribute__((visibility("hidden")))
@interface ProfileInfoComponent : CompositionComponent {
}
+(id)groupProfile:(id)profile delegate:(id)delegate;
+(id)groupCounters:(id)counters delegate:(id)delegate;
+(id)groupInfo:(id)info delegate:(id)delegate;
+(id)groupMoreInfo:(id)info styleSheet:(id)sheet delegate:(id)delegate;
+(id)groupInfoDescription:(id)description styleSheet:(id)sheet;
+(id)groupInfoMembers:(id)members styleSheet:(id)sheet;
+(id)groupButtons:(id)buttons delegate:(id)delegate;
+(id)groupHeader:(id)header delegate:(id)delegate;
+(id)userProfile:(id)profile delegate:(id)delegate;
+(id)userCounters:(id)counters;
+(id)userInfo:(id)info delegate:(id)delegate;
+(id)userInfoMore:(id)more styleSheet:(id)sheet delegate:(id)delegate;
+(id)userInfoBirthDay:(id)day styleSheet:(id)sheet;
+(id)userInfoHome:(id)home styleSheet:(id)sheet;
+(id)userInfoCareer:(id)career styleSheet:(id)sheet;
+(id)userInfoFollowers:(id)followers styleSheet:(id)sheet;
+(id)userInfoFriends:(id)friends styleSheet:(id)sheet;
+(id)userInfoStatus:(id)status styleSheet:(id)sheet;
+(id)userButtons:(id)buttons delegate:(id)delegate;
+(id)userHeader:(id)header delegate:(id)delegate;
+(id)counterBlockForUsersGridWithImages:(id)images title:(id)title count:(int)count;
+(id)counterBlockForVideo:(id)video count:(int)count owner:(id)owner;
+(id)counterBlockForAudio:(id)audio count:(int)count owner:(id)owner;
+(id)counterInfoForTopic:(id)topic;
+(id)counterInfoForVideo:(id)video;
+(id)counterInfoForAudio:(id)audio;
+(id)counterInfoWithIcon:(id)icon title:(id)title subtitle:(id)subtitle;
+(id)counterBlockWithTitle:(id)title count:(int)count contentComponent:(id)component;
+(id)postButtonsWithDelegate:(id)delegate;
+(id)postButtonWithIcon:(id)icon text:(id)text styleSheet:(id)sheet;
+(id)secondaryButtonWithText:(id)text;
+(id)primaryButtonWithText:(id)text enabled:(BOOL)enabled;
+(id)primaryButtonWithText:(id)text style:(id)style enabled:(BOOL)enabled;
+(id)secondaryButtonTextStyle:(id)style;
+(id)primaryButtonTextStyle:(id)style;
+(id)userAvatarsPreviewComponent:(id)component;
+(id)infoCounterComponentWithNumber:(int)number suffixKey:(id)key;
+(id)infoCounterComponentWithNumber:(int)number suffixKey:(id)key styleSheet:(id)sheet;
+(id)infoCounterAttributedStringWithNumber:(int)number suffixKey:(id)key styleSheet:(id)sheet;
+(id)moreInfoOptionWithStyleSheet:(id)styleSheet;
+(id)infoOptionWithIcon:(id)icon contentComponent:(id)component;
+(id)moreInfoTextStyle:(id)style;
+(id)infoNumberTextStyle:(id)style;
+(id)infoTextStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface ProfileInfoComponentController : Component5Controller {
	VKMImageView* _profilePhotoView;
	UIView* _profileTeaserView;
	UIView* _topScrimView;
	UIImageView* _profilePhotoBlurView;
}
@property(retain, nonatomic) UIImageView* profilePhotoBlurView;
@property(retain, nonatomic) UIView* topScrimView;
@property(retain, nonatomic) UIView* profileTeaserView;
@property(retain, nonatomic) VKMImageView* profilePhotoView;
+(id)createView;
-(void).cxx_destruct;
-(void)registerViewKeyBinding:(id)binding;
@end

__attribute__((visibility("hidden")))
@interface TGLocationPinWrapperView : XXUnknownSuperclass {
}
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface TGLocationPinView : XXUnknownSuperclass {
	UIImageView* _pinView;
	UIImageView* _pinPointView;
	UIImageView* _shadowView;
	BOOL _pinRaised;
}
@property(assign, nonatomic, getter=isPinRaised) BOOL pinRaised;
-(void).cxx_destruct;
-(void)setPinRaised:(BOOL)raised animated:(BOOL)animated completion:(id)completion;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemTitleCell : VKMCell {
	UILabel* _textView;
}
@property(retain, nonatomic) UILabel* textView;
+(void)prerender:(id)prerender;
+(void)initialize;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemPushSoundCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)actionSwitch:(id)aSwitch;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemPushMuteCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemUserCell : VKMCell {
	VKMImageView* _image;
	UILabel* _name;
	UIButton* _online;
}
@property(readonly, retain, nonatomic) UIButton* online;
@property(readonly, retain, nonatomic) UILabel* name;
@property(readonly, retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemAddCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemLeaveCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemAttachmentsCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface TGLocationAnnotation : XXUnknownSuperclass <MKAnnotation> {
	NSString* _title;
	NSString* _subtitle;
	NSDictionary* _userInfo;
	CLLocationCoordinate2D _coordinate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
-(void).cxx_destruct;
-(id)initWithCoordinate:(CLLocationCoordinate2D)coordinate;
@end

__attribute__((visibility("hidden")))
@interface DocsPhotoUploadContext : DocsUploadContext {
	VKPPAssetData* _assetData;
}
@property(retain) VKPPAssetData* assetData;
+(id)docsPhotoContextWithSession:(id)session assetData:(id)data;
-(void).cxx_destruct;
-(void)loadUploadData:(id)data;
-(void)makeThumbnail;
@end

__attribute__((visibility("hidden")))
@interface LargeEmojiCell : XXUnknownSuperclass {
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
-(void).cxx_destruct;
-(void)setEmoji:(id)emoji;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface EmojiSectionHeader : XXUnknownSuperclass {
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LargeEmojiSelectionView : XXUnknownSuperclass <UICollectionViewDataSource, UICollectionViewDelegate> {
	id<LargeEmojiSelectionViewDelegate> _photoEditorModeDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<LargeEmojiSelectionViewDelegate> photoEditorModeDelegate;
+(id)imageForEmoji:(id)emoji size:(float)size;
+(void)initialize;
-(void).cxx_destruct;
-(id)scrollView;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PhotoFeedController : FeedController {
}
+(void)takePhoto:(id)photo postContext:(id)context handler:(id)handler;
+(void)takePhoto:(id)photo handler:(id)handler;
-(id)VKMControllerStatsRef;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)actionPhoto:(id)photo;
-(id)renderGroupForCell:(id)cell;
-(BOOL)VKMScrollViewFullscreenEnabled;
-(void)viewDidLoad;
-(int)VKMTableStyle;
-(void)actionTeaserButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface AFQueryStringComponent : XXUnknownSuperclass {
	NSString* _key;
	NSString* _value;
}
@property(retain, nonatomic) id value;
@property(retain, nonatomic) id key;
-(id)URLEncodedStringValueWithEncoding:(unsigned)encoding;
-(void)dealloc;
-(id)initWithKey:(id)key value:(id)value;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPClient : XXUnknownSuperclass {
	NSURL* _baseURL;
	unsigned _stringEncoding;
	int _parameterEncoding;
	NSMutableArray* _registeredHTTPOperationClassNames;
	NSMutableDictionary* _defaultHeaders;
	NSOperationQueue* _operationQueue;
	id _networkReachability;
	id _networkReachabilityStatusBlock;
}
@property(assign, nonatomic) int parameterEncoding;
@property(assign, nonatomic) unsigned stringEncoding;
@property(copy, nonatomic) id networkReachabilityStatusBlock;
@property(assign, nonatomic) id networkReachability;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) NSMutableDictionary* defaultHeaders;
@property(retain, nonatomic) NSMutableArray* registeredHTTPOperationClassNames;
@property(retain, nonatomic) NSURL* baseURL;
+(id)clientWithBaseURL:(id)baseURL;
-(void)patchPath:(id)path parameters:(id)parameters success:(id)success failure:(id)failure;
-(void)deletePath:(id)path parameters:(id)parameters success:(id)success failure:(id)failure;
-(void)putPath:(id)path parameters:(id)parameters success:(id)success failure:(id)failure;
-(void)postPath:(id)path parameters:(id)parameters success:(id)success failure:(id)failure;
-(void)getPath:(id)path parameters:(id)parameters success:(id)success failure:(id)failure;
-(void)enqueueBatchOfHTTPRequestOperations:(id)httprequestOperations progressBlock:(id)block completionBlock:(id)block3;
-(void)enqueueBatchOfHTTPRequestOperationsWithRequests:(id)requests progressBlock:(id)block completionBlock:(id)block3;
-(void)cancelAllHTTPOperationsWithMethod:(id)method path:(id)path;
-(void)enqueueHTTPRequestOperation:(id)operation;
-(id)HTTPRequestOperationWithRequest:(id)request success:(id)success failure:(id)failure;
-(id)multipartFormRequestWithMethod:(id)method path:(id)path parameters:(id)parameters constructingBodyWithBlock:(id)block;
-(id)requestWithMethod:(id)method path:(id)path parameters:(id)parameters;
-(void)clearAuthorizationHeader;
-(void)setAuthorizationHeaderWithToken:(id)token;
-(void)setAuthorizationHeaderWithUsername:(id)username password:(id)password;
-(void)setDefaultHeader:(id)header value:(id)value;
-(id)defaultValueForHeader:(id)header;
-(void)unregisterHTTPOperationClass:(Class)aClass;
-(BOOL)registerHTTPOperationClass:(Class)aClass;
-(id)description;
-(void)dealloc;
-(id)initWithBaseURL:(id)baseURL;
@end

__attribute__((visibility("hidden")))
@interface AFMultipartFormData : XXUnknownSuperclass <AFMultipartFormData> {
	unsigned _stringEncoding;
	NSMutableData* _mutableData;
}
@property(readonly, assign) NSData* data;
@property(retain, nonatomic) NSMutableData* mutableData;
@property(assign, nonatomic) unsigned stringEncoding;
-(void)appendString:(id)string;
-(void)appendData:(id)data;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name error:(id*)error;
-(void)appendPartWithFileData:(id)fileData name:(id)name fileName:(id)name3 mimeType:(id)type;
-(void)appendPartWithFormData:(id)formData name:(id)name;
-(void)appendPartWithHeaders:(id)headers body:(id)body;
-(void)dealloc;
-(id)initWithStringEncoding:(unsigned)stringEncoding;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPRequestOperation : AFURLConnectionOperation {
	NSIndexSet* _acceptableStatusCodes;
	NSSet* _acceptableContentTypes;
	NSError* _HTTPError;
	NSObject<OS_dispatch_queue>* _successCallbackQueue;
	NSObject<OS_dispatch_queue>* _failureCallbackQueue;
}
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* failureCallbackQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* successCallbackQueue;
@property(readonly, assign) BOOL hasAcceptableContentType;
@property(retain, nonatomic) NSSet* acceptableContentTypes;
@property(readonly, assign) BOOL hasAcceptableStatusCode;
@property(retain, nonatomic) NSIndexSet* acceptableStatusCodes;
@property(readonly, retain, nonatomic) NSHTTPURLResponse* response;
@property(retain, nonatomic) NSError* HTTPError;
+(BOOL)canProcessRequest:(id)request;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(id)error;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface AFImageRequestOperation : AFHTTPRequestOperation {
	UIImage* _responseImage;
	float _imageScale;
}
@property(assign, nonatomic) float imageScale;
@property(retain, nonatomic) UIImage* responseImage;
+(id)HTTPRequestOperationWithRequest:(id)request success:(id)success failure:(id)failure;
+(BOOL)canProcessRequest:(id)request;
+(id)defaultAcceptablePathExtensions;
+(id)defaultAcceptableContentTypes;
+(id)imageRequestOperationWithRequest:(id)request imageProcessingBlock:(id)block cacheName:(id)name success:(id)success failure:(id)failure;
+(id)imageRequestOperationWithRequest:(id)request success:(id)success;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface AFJSONRequestOperation : AFHTTPRequestOperation {
	id _responseJSON;
	NSError* _JSONError;
}
@property(retain, nonatomic) NSError* JSONError;
@property(retain, nonatomic) id responseJSON;
+(BOOL)canProcessRequest:(id)request;
+(id)defaultAcceptablePathExtensions;
+(id)defaultAcceptableContentTypes;
+(id)JSONRequestOperationWithRequest:(id)request success:(id)success failure:(id)failure;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(id)error;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface AFNetworkActivityIndicatorManager : XXUnknownSuperclass {
	int _activityCount;
	BOOL _enabled;
	NSTimer* _activityIndicatorVisibilityTimer;
}
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, assign, getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible;
@property(retain, nonatomic) NSTimer* activityIndicatorVisibilityTimer;
@property(assign, nonatomic) int activityCount;
+(id)sharedManager;
-(void)decrementActivityCount;
-(void)incrementActivityCount;
-(void)updateNetworkActivityIndicatorVisibility;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFPropertyListRequestOperation : AFHTTPRequestOperation {
	id _responsePropertyList;
	unsigned _propertyListFormat;
	unsigned _propertyListReadOptions;
	NSError* _propertyListError;
}
@property(assign, nonatomic) unsigned propertyListReadOptions;
@property(retain, nonatomic) NSError* propertyListError;
@property(assign, nonatomic) unsigned propertyListFormat;
@property(retain, nonatomic) id responsePropertyList;
+(BOOL)canProcessRequest:(id)request;
+(id)defaultAcceptablePathExtensions;
+(id)defaultAcceptableContentTypes;
+(id)propertyListRequestOperationWithRequest:(id)request success:(id)success failure:(id)failure;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(id)error;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface RecentOrderList : XXUnknownSuperclass {
	NSMutableArray* _array;
	NSString* _userDefaultsKey;
	unsigned _maxCount;
}
@property(assign, nonatomic) unsigned maxCount;
@property(copy, nonatomic) NSString* userDefaultsKey;
@property(retain, nonatomic) NSMutableArray* array;
-(void).cxx_destruct;
-(void)save;
-(void)cleanAll;
-(BOOL)contains:(id)contains;
-(void)insertOrHoist:(id)hoist;
-(id)initWithUserDefaultsKey:(id)userDefaultsKey maxCount:(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface MasksCache : XXUnknownSuperclass {
	id<MasksCacheDelegate> _delegate;
	RecentOrderList* _cacheTrakingList;
}
@property(assign, nonatomic) __weak id<MasksCacheDelegate> delegate;
@property(retain, nonatomic) RecentOrderList* cacheTrakingList;
+(void)initialize;
-(void).cxx_destruct;
-(void)cleanCachedMasksNotPresentedInTrackingList;
-(id)cachedMasksPaths;
-(id)directoryPathForMask:(id)mask;
-(id)cachedMasksDirectoryPath;
-(NSRange)calculateInfo;
-(id)jsonPathForMaskIfCached:(id)maskIfCached;
-(void)clearAll;
-(BOOL)addNewMask:(id)mask zipPath:(id)path;
-(void)hoistExistedMask:(id)mask;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFURLConnectionOperation : XXUnknownSuperclass {
	unsigned short _state;
	BOOL _cancelled;
	NSRecursiveLock* _lock;
	NSSet* _runLoopModes;
	NSURLConnection* _connection;
	NSURLRequest* _request;
	NSHTTPURLResponse* _response;
	NSError* _error;
	NSData* _responseData;
	int _totalBytesRead;
	NSMutableData* _dataAccumulator;
	NSOutputStream* _outputStream;
	NSString* _responseString;
	id _uploadProgress;
	id _downloadProgress;
	id _authenticationAgainstProtectionSpace;
	id _authenticationChallenge;
	id _cacheResponse;
}
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(retain, nonatomic) NSSet* runLoopModes;
@property(copy, nonatomic) id cacheResponse;
@property(copy, nonatomic) id authenticationChallenge;
@property(copy, nonatomic) id authenticationAgainstProtectionSpace;
@property(copy, nonatomic) id downloadProgress;
@property(copy, nonatomic) id uploadProgress;
@property(retain, nonatomic) NSMutableData* dataAccumulator;
@property(assign, nonatomic) int totalBytesRead;
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) NSData* responseData;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic) unsigned short state;
+(id)networkRequestThread;
+(void)networkRequestThreadEntryPoint:(id)point;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)cancelConnection;
-(void)cancel;
-(void)finish;
-(void)operationDidStart;
-(void)start;
-(BOOL)isConcurrent;
-(BOOL)isCancelled;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isReady;
-(void)setCacheResponseBlock:(id)block;
-(void)setAuthenticationChallengeBlock:(id)block;
-(void)setAuthenticationAgainstProtectionSpaceBlock:(id)block;
-(void)setDownloadProgressBlock:(id)block;
-(void)setUploadProgressBlock:(id)block;
-(void)setCompletionBlock:(id)block;
-(id)description;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface AFXMLRequestOperation : AFHTTPRequestOperation {
	NSXMLParser* _responseXMLParser;
	NSError* _XMLError;
}
@property(retain, nonatomic) NSError* XMLError;
@property(retain, nonatomic) NSXMLParser* responseXMLParser;
+(BOOL)canProcessRequest:(id)request;
+(id)defaultAcceptablePathExtensions;
+(id)defaultAcceptableContentTypes;
+(id)XMLParserRequestOperationWithRequest:(id)request success:(id)success failure:(id)failure;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(void)cancel;
-(id)error;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface MOTextView : XXUnknownSuperclass {
	UIEdgeInsets originalContentInset;
	BOOL autoresizes;
	UIView* _footerView;
	id _footerHandler;
	NSString* _placeholder;
	id _autoresizingHandler;
	id<MOTextViewLimit> _limitMin;
	id<MOTextViewLimit> _limitMax;
	float _heightMin;
	float _heightMax;
	float _targetHeight;
	UILabel* _placeholderLabel;
	UIEdgeInsets _viewportInset;
}
@property(readonly, assign, nonatomic) float targetHeight;
@property(readonly, assign, nonatomic) float heightMax;
@property(readonly, assign, nonatomic) float heightMin;
@property(copy, nonatomic) id autoresizingHandler;
@property(copy, nonatomic) NSString* placeholder;
@property(copy, nonatomic) id footerHandler;
@property(retain, nonatomic) UIView* footerView;
@property(assign, nonatomic) UIEdgeInsets viewportInset;
@property(retain, nonatomic) UILabel* placeholderLabel;
@property(retain, nonatomic) id<MOTextViewLimit> limitMax;
@property(retain, nonatomic) id<MOTextViewLimit> limitMin;
+(void)initialize;
-(void).cxx_destruct;
-(void)autoresizeWithHeightFrom:(float)from to:(float)to;
-(void)autoresizeWithLinesFrom:(unsigned)from to:(unsigned)to;
-(void)autoresizeWithLimitFrom:(id)from to:(id)to;
-(void)updateLimits;
-(void)customizePlaceholderLabel:(id)label;
-(void)scrollRectToVisible:(CGRect)visible animated:(BOOL)animated;
-(void)setText:(id)text;
-(void)setFont:(id)font;
-(void)setTextContainerInset:(UIEdgeInsets)inset;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setContentSize:(CGSize)size;
-(void)webViewDidChange:(id)webView;
-(void)textInputDidChange:(id)textInput;
-(void)paste:(id)paste;
-(void)checkAutoresizing;
-(void)updatePlaceholderVisibility;
-(void)alignPlaceholderLabel;
-(void)reapplyContentInset;
-(void)alignFooterView;
-(void)scrollToCaretVisible;
-(CGPoint)contentOffsetForScrollToVisibleRect:(CGRect)visibleRect;
-(CGRect)validBounds:(CGRect)bounds;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MOTextViewPointLimit : XXUnknownSuperclass <MOTextViewLimit> {
	float _height;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float height;
+(id)limitWithHeight:(float)height;
-(float)heightLimitForTextView:(id)textView;
@end

__attribute__((visibility("hidden")))
@interface MOTextViewLineLimit : XXUnknownSuperclass <MOTextViewLimit> {
	unsigned _line;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned line;
+(id)limitWithLine:(unsigned)line;
-(float)heightLimitForTextView:(id)textView;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterCropToFace : VKImageFilter {
	CGSize _size;
}
@property(readonly, assign, nonatomic) CGSize size;
+(id)cropToSize:(CGSize)size;
-(id)infoString;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(id)contextForImage:(id)image;
-(id)initWithSize:(CGSize)size;
@end

__attribute__((visibility("hidden")))
@interface AFImageCache : XXUnknownSuperclass {
}
-(void)cacheImageData:(id)data forRequest:(id)request;
-(id)cachedImageForRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface SignupStartController : SignupController <UITextFieldDelegate, MOCTLabelDelegate, UIWebViewDelegate> {
	ProfilePhotoAndNameCell* _profileCell;
	SexSelectionSegmentedControl* _sexControl;
	UITextField* _dateOfBirthField;
	UIDatePicker* _dateOfBirthPicker;
	NSDate* _selectedDateOfBirth;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDate* selectedDateOfBirth;
@property(retain, nonatomic) UIDatePicker* dateOfBirthPicker;
@property(retain, nonatomic) UITextField* dateOfBirthField;
@property(retain, nonatomic) SexSelectionSegmentedControl* sexControl;
@property(retain, nonatomic) ProfilePhotoAndNameCell* profileCell;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)moctlabel:(id)moctlabel linkClicked:(id)clicked;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)notifyIncorrectFields:(id)fields;
-(void)actionName:(id)name;
-(void)actionPhoto:(id)photo;
-(void)usePhotoAsset:(id)asset;
-(void)actionSex:(id)sex;
-(void)actionBirthdayChanged:(id)changed;
-(void)actionNext:(id)next;
-(void)validate;
-(void)read;
-(void)render;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MBProgressHUDBackgroundLayer : XXUnknownSuperclass {
	BOOL _allowBackgroundAlpha;
	MBProgressHUD* _parent;
}
@property(assign, nonatomic) BOOL allowBackgroundAlpha;
@property(assign, nonatomic) MBProgressHUD* parent;
-(void)drawInContext:(CGContextRef)context;
@end

__attribute__((visibility("hidden")))
@interface MBProgressAnimatedTextLabel : XXUnknownSuperclass {
}
-(void)setText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface MBProgressHUD : XXUnknownSuperclass {
	BOOL _useAnimation;
	SEL _methodForExecution;
	id _targetForExecution;
	id _objectForExecution;
	UILabel* _label;
	UILabel* _detailsLabel;
	BOOL _isFinished;
	CGAffineTransform _rotationTransform;
	BOOL _dimBackground;
	BOOL _taskInProgress;
	BOOL _removeFromSuperViewOnHide;
	BOOL _square;
	int _mode;
	int _animationType;
	UIView* _customView;
	id<MBProgressHUDDelegate> _delegate;
	NSString* _labelText;
	NSString* _detailsLabelText;
	float _opacity;
	float _xOffset;
	float _yOffset;
	float _margin;
	float _graceTime;
	float _minShowTime;
	UIFont* _labelFont;
	UIFont* _detailsLabelFont;
	float _progress;
	UIColor* _bgColor;
	UIColor* _labelColor;
	UIColor* _buttonTextColor;
	UIFont* _buttonFont;
	int _closeMode;
	UIView* _indicator;
	NSTimer* _graceTimer;
	NSTimer* _minShowTimer;
	NSDate* _showStarted;
	UIVisualEffectView* _visualEffectsView;
	MBProgressHUDBackgroundLayer* _background;
	CGSize _minSize;
	CGSize _size;
}
@property(assign, nonatomic) int closeMode;
@property(retain, nonatomic) UIFont* buttonFont;
@property(retain, nonatomic) UIColor* buttonTextColor;
@property(retain, nonatomic) UIColor* labelColor;
@property(retain, nonatomic) UIColor* bgColor;
@property(assign, nonatomic, getter=isSquare) BOOL square;
@property(assign, nonatomic) CGSize minSize;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UIFont* detailsLabelFont;
@property(retain, nonatomic) UIFont* labelFont;
@property(assign, nonatomic) BOOL removeFromSuperViewOnHide;
@property(assign, nonatomic) BOOL taskInProgress;
@property(assign, nonatomic) float minShowTime;
@property(assign, nonatomic) float graceTime;
@property(assign, nonatomic) BOOL dimBackground;
@property(assign, nonatomic) float margin;
@property(assign, nonatomic) float yOffset;
@property(assign, nonatomic) float xOffset;
@property(assign, nonatomic) float opacity;
@property(copy, nonatomic) NSString* detailsLabelText;
@property(copy, nonatomic) NSString* labelText;
@property(assign, nonatomic) __weak id<MBProgressHUDDelegate> delegate;
@property(retain, nonatomic) UIView* customView;
@property(assign, nonatomic) int animationType;
@property(assign, nonatomic) int mode;
@property(assign, nonatomic) CGSize size;
@property(retain, nonatomic) MBProgressHUDBackgroundLayer* background;
@property(retain, nonatomic) UIVisualEffectView* visualEffectsView;
@property(retain, nonatomic) NSDate* showStarted;
@property(retain, nonatomic) NSTimer* minShowTimer;
@property(retain, nonatomic) NSTimer* graceTimer;
@property(retain, nonatomic) UIView* indicator;
+(id)allHUDsForView:(id)view;
+(id)HUDForView:(id)view;
+(unsigned)hideAllHUDsForView:(id)view animated:(BOOL)animated;
+(BOOL)hideHUDForView:(id)view animated:(BOOL)animated;
+(id)showHUDAddedTo:(id)to animated:(BOOL)animated;
-(void).cxx_destruct;
-(void)actionClose:(id)close;
-(void)setTransformForOrientation:(int)orientation animated:(BOOL)animated;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)unregisterFromNotifications;
-(void)registerForNotifications;
-(void)updateUIForKeypath:(id)keypath;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)observableKeypaths;
-(void)unregisterFromKVO;
-(void)registerForKVO;
-(void)layoutSubviews;
-(void)updateIndicators;
-(void)setupLabels;
-(void)cleanUp;
-(void)launchExecution;
-(void)showWhileExecuting:(SEL)executing onTarget:(id)target withObject:(id)object animated:(BOOL)animated;
-(void)done;
-(void)animationFinished:(id)finished finished:(BOOL)finished2 context:(void*)context;
-(void)hideUsingAnimation:(BOOL)animation;
-(void)showUsingAnimation:(BOOL)animation;
-(void)handleMinShowTimer:(id)timer;
-(void)handleGraceTimer:(id)timer;
-(void)hideDelayed:(id)delayed;
-(void)hide:(BOOL)hide afterDelay:(double)delay;
-(void)hide:(BOOL)hide;
-(void)show:(BOOL)show;
-(void)dealloc;
-(id)initWithWindow:(id)window;
-(id)initWithView:(id)view;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBRoundProgressView : XXUnknownSuperclass {
	float _progress;
	BOOL _annular;
}
@property(assign, nonatomic, getter=isAnnular) BOOL annular;
@property(assign, nonatomic) float progress;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKMultilinkRouteTarget : VKDomain {
	NSArray* _urls;
}
@property(copy, nonatomic) NSArray* urls;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogExtendedPlaylistsListController : VKMLiveController {
	NSString* _subtitle;
	Component5HostView* _componentTitleView;
}
@property(retain, nonatomic) NSString* subtitle;
@property(retain, nonatomic) Component5HostView* componentTitleView;
-(void).cxx_destruct;
-(id)titleComponent;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface FriendsAllRequestsController : VKMToolbarController {
}
@property(retain, nonatomic) FriendsRequestsModel* model;
-(void)segmentedControlChanged:(id)changed;
-(id)titleForSegmentAtIndex:(unsigned)index;
-(BOOL)isToolbarHidden;
-(unsigned)numberOfSegments;
@end

__attribute__((visibility("hidden")))
@interface Reachability : XXUnknownSuperclass {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
	NSString* _carrierNetworkType;
	id _carrierObserver;
}
@property(copy, nonatomic) NSString* carrierNetworkType;
@property(retain, nonatomic) id carrierObserver;
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
+(void)initialize;
-(void)updateCarrierNetworkType:(id)type;
-(void)registerCarrierCallback;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

__attribute__((visibility("hidden")))
@interface BasicURLInteropHandler : XXUnknownSuperclass <URLInteropHandler> {
	id _handler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id handler;
-(void).cxx_destruct;
-(BOOL)handleOpenURL:(id)url;
-(BOOL)openURL:(id)url handler:(id)handler;
-(void)notificationAppActive:(id)active;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKWallReply : VKPostComment {
}
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKWallReplyLink : VKDomainDerived <VKAttachment> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKWallReply* domain;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKP2PSendViewController : VKMScrollViewController <UITextViewDelegate, UITextFieldDelegate> {
	id _success;
	UIImageView* _bubble;
	NSNumberFormatter* _amountFormatter;
	UIView* _separator;
	UIView* _topSeparator;
	UITextField* _amountTextField;
	MOTextView* _commentTextView;
	UIScrollView* _sendScrollView;
	id<VKSource> _recipient;
	VKMImageView* _avatarImageView;
	UILabel* _userName;
	UIButton* _sendButton;
	UILabel* _limitsWarningLabel;
	NSString* _preconfigAmount;
	NSString* _preconfigComment;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id success;
@property(copy, nonatomic) NSString* preconfigComment;
@property(copy, nonatomic) NSString* preconfigAmount;
@property(retain, nonatomic) UILabel* limitsWarningLabel;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) UILabel* userName;
@property(retain, nonatomic) VKMImageView* avatarImageView;
@property(retain, nonatomic) id<VKSource> recipient;
@property(retain, nonatomic) UIScrollView* sendScrollView;
@property(retain, nonatomic) MOTextView* commentTextView;
@property(retain, nonatomic) UITextField* amountTextField;
@property(retain, nonatomic) UIView* topSeparator;
@property(retain, nonatomic) UIView* separator;
@property(retain, nonatomic) NSNumberFormatter* amountFormatter;
@property(retain, nonatomic) UIImageView* bubble;
-(void).cxx_destruct;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(id)VKMScrollView;
-(void)VKMScrollViewSetFooter:(id)footer;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(BOOL)VKMScrollViewDisablePTR;
-(void)sendTransfer;
-(void)actionLanding:(id)landing;
-(void)actionNext:(id)next;
-(void)actionCancel:(id)cancel;
-(int)minAmount;
-(int)maxAmount;
-(int)userAmountInteger;
-(BOOL)satisfiesLimits;
-(void)updateLimitsLabel;
-(void)actionTextFieldDidChange:(id)actionTextField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillLayoutSubviews;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithMain:(id)main andRecipientId:(id)anId amount:(id)amount comment:(id)comment source:(id)source;
-(id)initWithMain:(id)main andRecipientId:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface AppsActivityModelContext : ListModelContext {
	id _from;
	NSNumber* _appID;
}
@property(retain, nonatomic) NSNumber* appID;
@property(retain, nonatomic) id from;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface AppsActivityModel : LoadingModel {
	NSNumber* _appID;
}
@property(readonly, retain, nonatomic) NSNumber* appID;
+(id)parseActivity:(id)activity allowSelection:(BOOL)selection;
+(id)requestForAppWithID:(id)anId count:(int)count;
+(id)requestFrom:(id)from count:(int)count;
-(void).cxx_destruct;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
-(id)forAppID:(id)appID;
@end

__attribute__((visibility("hidden")))
@interface DeckView : XXUnknownSuperclass {
}
-(void)willMoveToWindow:(id)window;
-(void)willMoveToSuperview:(id)superview;
@end

__attribute__((visibility("hidden")))
@interface IIViewDeckController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	float _panOrigin;
	BOOL _viewAppeared;
	float _preRotationWidth;
	float _preRotationHeight;
	float _leftWidth;
	float _rightWidth;
	float _preRotationCenterWidth;
	float _preRotationCenterHeight;
	float _maxLedge;
	float _offsetX;
	float _offsetY;
	BOOL observing;
	BOOL _resizesCenterView;
	BOOL _enabled;
	BOOL _elastic;
	BOOL fullViewPanDisabled_;
	int _panningMode;
	NSMutableArray* _panners;
	UIView* _referenceView;
	UIViewController* _slidingController;
	UIViewController* _centerController;
	UIViewController* _leftController;
	UIViewController* _rightController;
	UIViewController* _topController;
	float _leftLedge;
	float _rightLedge;
	float _topLedge;
	float _maxLedgeY;
	float _originalShadowOpacity;
	UIBezierPath* _originalShadowPath;
	float _originalShadowRadius;
	UIColor* _originalShadowColor;
	id<IIViewDeckControllerDelegate> _delegate;
	int _navigationControllerBehavior;
	UIView* _panningView;
	int _centerhiddenInteractivity;
	UIButton* _centerTapper;
	UIView* _centerView;
	int _rotationBehavior;
	UIPanGestureRecognizer* fullViewPanRecognizer_;
	CGSize _originalShadowOffset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIPanGestureRecognizer* fullViewPanRecognizer;
@property(assign, nonatomic) BOOL fullViewPanDisabled;
@property(assign, nonatomic) int rotationBehavior;
@property(assign, nonatomic) int navigationControllerBehavior;
@property(assign, nonatomic) int centerhiddenInteractivity;
@property(assign, nonatomic) int panningMode;
@property(assign, nonatomic) BOOL resizesCenterView;
@property(assign, nonatomic) float maxLedgeY;
@property(assign, nonatomic) float maxLedge;
@property(assign, nonatomic) float topLedge;
@property(assign, nonatomic) float rightLedge;
@property(assign, nonatomic) float leftLedge;
@property(assign, nonatomic) BOOL elastic;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, retain, nonatomic) NSArray* controllers;
@property(retain, nonatomic) UIView* panningView;
@property(readonly, assign, nonatomic) UIViewController* slidingController;
@property(retain, nonatomic) UIViewController* topController;
@property(retain, nonatomic) UIViewController* rightController;
@property(retain, nonatomic) UIViewController* leftController;
@property(retain, nonatomic) UIViewController* centerController;
@property(assign, nonatomic) __weak id<IIViewDeckControllerDelegate> delegate;
@property(readonly, assign, nonatomic) UIView* slidingControllerView;
@property(retain, nonatomic) UIView* centerView;
@property(retain, nonatomic) UIButton* centerTapper;
@property(retain, nonatomic) UIBezierPath* originalShadowPath;
@property(assign, nonatomic) CGSize originalShadowOffset;
@property(retain, nonatomic) UIColor* originalShadowColor;
@property(assign, nonatomic) float originalShadowOpacity;
@property(assign, nonatomic) float originalShadowRadius;
@property(retain, nonatomic) NSMutableArray* panners;
@property(readonly, assign, nonatomic) CGRect sideViewBounds;
@property(readonly, assign, nonatomic) CGRect centerViewBounds;
@property(readonly, assign, nonatomic) CGRect referenceBounds;
@property(retain, nonatomic) UIView* referenceView;
+(void)initialize;
-(void).cxx_destruct;
-(id)childViewControllerForStatusBarHidden;
-(id)childViewControllerForStatusBarStyle;
-(BOOL)hidesBottomBarWhenPushed;
-(void)applyShadowToSlidingView;
-(void)restoreShadowToSlidingView;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setSlidingAndReferenceViews;
-(void)reapplySideController:(id*)controller;
-(void)applySideController:(id*)controller to:(id)to otherSideController:(id)controller3 clearOtherController:(id)controller4;
-(id)title;
-(void)setTitle:(id)title;
-(void)performOffsetDelegate:(SEL)delegate offset:(float)offset;
-(void)performDelegate:(SEL)delegate animated:(BOOL)animated;
-(BOOL)checkDelegate:(SEL)delegate animated:(BOOL)animated;
-(void)removePanners;
-(void)addPanners;
-(id)addPanner:(id)panner;
-(void)fullViewPanEnable:(BOOL)enable;
-(void)panned:(id)panned;
-(float)locationOfPanner:(id)panner point:(CGPoint)point;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)centerTapped;
-(void)centerViewHidden;
-(void)centerViewVisible;
-(void)relayAppearanceMethod:(id)method;
-(void)relayAppearanceMethod:(id)method forced:(BOOL)forced;
-(BOOL)closeTopViewBouncing:(id)bouncing callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeTopViewBouncing:(id)bouncing completion:(id)completion;
-(BOOL)closeTopViewBouncing:(id)bouncing;
-(BOOL)closeTopViewAnimated:(BOOL)animated options:(unsigned)options callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeTopViewAnimated:(BOOL)animated callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeTopViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)closeTopViewAnimated:(BOOL)animated;
-(BOOL)openTopViewAnimated:(BOOL)animated options:(unsigned)options callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)openTopViewAnimated:(BOOL)animated callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)openTopViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)openTopViewAnimated:(BOOL)animated;
-(BOOL)toggleTopViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)toggleTopViewAnimated:(BOOL)animated;
-(BOOL)closeTopView;
-(BOOL)openTopView;
-(BOOL)toggleTopView;
-(void)rightViewPushViewControllerOverCenterController:(id)controller;
-(BOOL)closeRightViewBouncing:(id)bouncing callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeRightViewBouncing:(id)bouncing completion:(id)completion;
-(BOOL)closeRightViewBouncing:(id)bouncing;
-(BOOL)closeRightViewAnimated:(BOOL)animated options:(unsigned)options callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeRightViewAnimated:(BOOL)animated callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeRightViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)closeRightViewAnimated:(BOOL)animated;
-(BOOL)openRightViewAnimated:(BOOL)animated options:(unsigned)options callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)openRightViewAnimated:(BOOL)animated callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)openRightViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)openRightViewAnimated:(BOOL)animated;
-(BOOL)toggleRightViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)toggleRightViewAnimated:(BOOL)animated;
-(BOOL)closeRightView;
-(BOOL)openRightView;
-(BOOL)toggleRightView;
-(BOOL)closeLeftViewBouncing:(id)bouncing callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeLeftViewBouncing:(id)bouncing completion:(id)completion;
-(BOOL)closeLeftViewBouncing:(id)bouncing;
-(BOOL)closeLeftViewAnimated:(BOOL)animated options:(unsigned)options callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeLeftViewAnimated:(BOOL)animated callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)closeLeftViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)closeLeftViewAnimated:(BOOL)animated;
-(BOOL)openLeftViewAnimated:(BOOL)animated options:(unsigned)options callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)openLeftViewAnimated:(BOOL)animated callDelegate:(BOOL)delegate completion:(id)completion;
-(BOOL)openLeftViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)openLeftViewAnimated:(BOOL)animated;
-(BOOL)toggleLeftViewAnimated:(BOOL)animated completion:(id)completion;
-(BOOL)toggleLeftViewAnimated:(BOOL)animated;
-(BOOL)closeLeftView;
-(BOOL)openLeftView;
-(BOOL)toggleLeftView;
-(void)showCenterView:(BOOL)view completion:(id)completion;
-(void)showCenterView:(BOOL)view;
-(void)showCenterView;
-(BOOL)topControllerIsOpen;
-(BOOL)rightControllerIsOpen;
-(BOOL)leftControllerIsOpen;
-(BOOL)topControllerIsClosed;
-(BOOL)rightControllerIsClosed;
-(BOOL)leftControllerIsClosed;
-(void)arrangeViewsAfterRotation;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(void)viewDidDisappear:(BOOL)view;
-(void)safeObserve:(BOOL)observe;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)setTopLedge:(float)ledge completion:(id)completion;
-(void)setTopLedge:(float)ledge animated:(BOOL)animated;
-(void)setRightLedge:(float)ledge completion:(id)completion;
-(void)setLeftLedge:(float)ledge completion:(id)completion;
-(void)hideAppropriateSideViews;
-(void)setSlidingFrameForOffsetX:(float)offsetX Y:(float)y;
-(CGSize)slidingSizeForOffsetX:(float)offsetX Y:(float)y;
-(CGRect)slidingRectForOffsetX:(float)offsetX Y:(float)y;
-(float)limitOffsetY:(float)y;
-(float)limitOffsetX:(float)x;
-(float)statusBarHeight;
-(float)relativeStatusBarHeight;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)cleanup;
-(id)initWithCenterViewController:(id)centerViewController leftViewController:(id)controller rightViewController:(id)controller3;
-(id)initWithCenterViewController:(id)centerViewController rightViewController:(id)controller;
-(id)initWithCenterViewController:(id)centerViewController leftViewController:(id)controller topViewController:(id)controller3;
-(id)initWithCenterViewController:(id)centerViewController leftViewController:(id)controller;
-(id)initWithCenterViewController:(id)centerViewController;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WrapController : XXUnknownSuperclass {
	UIViewController* _wrappedController;
	id _onViewDidLoad;
	id _onViewWillAppear;
	id _onViewDidAppear;
	id _onViewWillDisappear;
	id _onViewDidDisappear;
}
@property(copy, nonatomic) id onViewDidDisappear;
@property(copy, nonatomic) id onViewWillDisappear;
@property(copy, nonatomic) id onViewDidAppear;
@property(copy, nonatomic) id onViewWillAppear;
@property(copy, nonatomic) id onViewDidLoad;
@property(readonly, retain, nonatomic) UIViewController* wrappedController;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarning;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willAnimateSecondHalfOfRotationFromInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willAnimateFirstHalfOfRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(unsigned)supportedInterfaceOrientations;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers;
-(void)dealloc;
-(void)viewDidLoad;
-(void)loadView;
-(float)statusBarHeight;
-(id)initWithViewController:(id)viewController;
@end

__attribute__((visibility("hidden")))
@interface DMUser : XXUnknownSuperclass {
}
@property(retain, nonatomic) NSNumber* can_message;
@property(retain, nonatomic) NSString* last_name_acc;
@property(retain, nonatomic) NSString* first_name_acc;
@property(retain, nonatomic) NSNumber* sex;
@property(retain, nonatomic) NSNumber* uid;
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* last_name;
@property(retain, nonatomic) NSString* first_name;
@end

__attribute__((visibility("hidden")))
@interface StoreStockManager : XXUnknownSuperclass <SKPaymentTransactionObserver> {
	VKSession* _weakSession;
	NSMutableSet* _pendingSKProductIds;
	NSMutableDictionary* _loadedSKProducts;
	NSMutableDictionary* _pendingGiftStats;
	NSMutableSet* _invalidSKProductIds;
	NSMutableSet* _processingProductIds;
	NSMutableSet* _processingSKProductIds;
	NSMutableSet* _purchasedProductIds;
	NSMutableDictionary* _errors;
	NSNumberFormatter* _priceFormatter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) VKSession* weakSession;
@property(readonly, retain, nonatomic) NSNumberFormatter* priceFormatter;
@property(retain, nonatomic) NSMutableDictionary* errors;
@property(retain, nonatomic) NSMutableSet* purchasedProductIds;
@property(retain, nonatomic) NSMutableSet* processingSKProductIds;
@property(retain, nonatomic) NSMutableSet* processingProductIds;
@property(retain, nonatomic) NSMutableSet* invalidSKProductIds;
@property(retain, nonatomic) NSMutableDictionary* pendingGiftStats;
@property(retain, nonatomic) NSMutableDictionary* loadedSKProducts;
@property(retain, nonatomic) NSMutableSet* pendingSKProductIds;
+(void)handlePurchaseNotification:(id)notification withProductType:(int)productType quite:(BOOL)quite;
+(BOOL)stateNotification:(id)notification updatesStockItem:(id)item;
-(void).cxx_destruct;
-(void)restoreProducts;
-(void)handleStoreError:(id)error;
-(void)runActionForStock:(id)stock referrerContext:(id)context;
-(void)touchMerchantProductIds:(id)ids;
-(BOOL)productPurchased:(id)purchased;
-(id)priceForStock:(id)stock;
-(int)stateForStock:(id)stock;
-(int)errorForStock:(id)stock;
-(void)processProductPurchase:(id)purchase;
-(void)checkBalanceAndPurchase:(id)purchase attempt:(int)attempt guid:(id)guid referrerContext:(id)context;
-(void)balancePopupWithCallback:(id)callback;
-(void)getBalanceWithCallback:(id)callback hud:(id)hud;
-(void)buyAPIProduct:(id)product attempt:(int)attempt repeatRate:(float)rate guid:(id)guid onRepeat:(id)repeat referrerContext:(id)context;
-(void)purchaseAPIProductId:(id)anId transaction:(id)transaction attempt:(int)attempt repeatRate:(float)rate;
-(void)purchaseAPIProductId:(id)anId transaction:(id)transaction attempt:(int)attempt;
-(void)processPurchaseResult:(id)result transaction:(id)transaction productId:(id)anId merchantProductId:(id)anId4 attempt:(int)attempt onRepeat:(id)repeat;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)finishTransaction:(id)transaction;
-(void)purchaseMerchantProductId:(id)anId;
-(id)currentApplicationUserName;
-(void)clearErrorForProductId:(id)productId merchantProductId:(id)anId;
-(id)errorForStoreItem:(id)storeItem;
-(void)registerError:(id)error;
-(void)updateProcessing:(BOOL)processing force:(BOOL)force productId:(id)anId merchantProductId:(id)anId4;
-(void)notifyProductId:(id)anId merchantProductId:(id)anId2;
-(void)notifyProductIds:(id)ids merchantProductIds:(id)ids2;
-(void)_clearErrors;
-(void)_clearLocalProducts;
-(void)applicationBecomeActive:(id)active;
-(void)drop;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsSearchModel : SearchModel {
	int _filter;
}
@property(assign, nonatomic) int filter;
-(id)process:(id)process;
-(id)parameters:(id)parameters;
-(id)method;
-(id)countKey;
-(id)setupFilter:(int)filter;
@end

__attribute__((visibility("hidden")))
@interface PersistentBackgroundColorView : XXUnknownSuperclass {
}
@property(retain, nonatomic) UIColor* persistentBackgroundColor;
-(void)setBackgroundColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface FullScreenVideoPlayerControlsView : XXUnknownSuperclass <VideoPlayerScrubberDelegate> {
	BOOL _openInLiveApp;
	BOOL _liked;
	BOOL _added;
	BOOL _canAdd;
	BOOL _shared;
	BOOL _showsCommentsButton;
	BOOL _showsLikeButton;
	BOOL _showsMoreButton;
	BOOL _addButtonShouldBeAtBottomInPortraitMode;
	BOOL _playPauseButtonHidden;
	BOOL _playbackViewHidden;
	BOOL _liveIndicatorHidden;
	id<FullScreenVideoPlayerControlsViewDelegate> _delegate;
	int _likesCount;
	int _commentsCount;
	int _sharesCount;
	NSString* _title;
	NSString* _subtitle;
	FinishedVideoActionsOverlayView* _finishedVideoActionsView;
	VideoPlayerErrorOverlayView* _errorOverlayView;
	UIBarButtonItem* _closeButtonItemTop;
	UIBarButtonItem* _addButtonItemTop;
	UIBarButtonItem* _moreButtonItemTop;
	UIBarButtonItem* _likeButtonItemTop;
	UIBarButtonItem* _shareButtonItemTop;
	ToolbarButtonWithCounterItem* _likeButtonItemBottom;
	ToolbarButtonWithCounterItem* _commentsButtonItemBottom;
	ToolbarButtonWithCounterItem* _shareButtonItemBottom;
	ToolbarButtonWithCounterItem* _addButtonItemBottom;
	UINavigationBar* _navigationBar;
	UIToolbar* _bottomToolbar;
	UIView* _bottomToolBarSeparatorLine;
	VideoPlayerPlaybackView* _playbackView;
	UIButton* _playPauseButton;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	UIImageView* _topScrimImageView;
	UIImageView* _bottomScrimImageView;
	UIView* _liveIndicator;
	UIButton* _liveAppButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VideoPlayerErrorOverlayView* errorOverlayView;
@property(readonly, assign, nonatomic) FinishedVideoActionsOverlayView* finishedVideoActionsView;
@property(assign, nonatomic) BOOL liveIndicatorHidden;
@property(assign, nonatomic) BOOL playbackViewHidden;
@property(assign, nonatomic) BOOL playPauseButtonHidden;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) BOOL addButtonShouldBeAtBottomInPortraitMode;
@property(assign, nonatomic) BOOL showsMoreButton;
@property(assign, nonatomic) BOOL showsLikeButton;
@property(assign, nonatomic) BOOL showsCommentsButton;
@property(assign, nonatomic) int sharesCount;
@property(assign, nonatomic) int commentsCount;
@property(assign, nonatomic) int likesCount;
@property(assign, nonatomic, getter=isShared) BOOL shared;
@property(assign, nonatomic) BOOL canAdd;
@property(assign, nonatomic, getter=isAdded) BOOL added;
@property(assign, nonatomic, getter=isLiked) BOOL liked;
@property(assign, nonatomic) BOOL openInLiveApp;
@property(readonly, assign, nonatomic) BOOL scrubbing;
@property(assign, nonatomic) float scrubberBufferProgressValue;
@property(assign, nonatomic) float scrubberValue;
@property(copy, nonatomic) NSString* rightDurationLabelText;
@property(copy, nonatomic) NSString* leftDurationLabelText;
@property(assign, nonatomic) unsigned playPauseButtonMode;
@property(assign, nonatomic) __weak id<FullScreenVideoPlayerControlsViewDelegate> delegate;
@property(retain, nonatomic) UIButton* liveAppButton;
@property(retain, nonatomic) UIView* liveIndicator;
@property(retain, nonatomic) UIImageView* bottomScrimImageView;
@property(retain, nonatomic) UIImageView* topScrimImageView;
@property(retain, nonatomic) UILabel* subtitleLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIButton* playPauseButton;
@property(retain, nonatomic) VideoPlayerPlaybackView* playbackView;
@property(retain, nonatomic) UIView* bottomToolBarSeparatorLine;
@property(retain, nonatomic) UIToolbar* bottomToolbar;
@property(retain, nonatomic) UINavigationBar* navigationBar;
@property(retain, nonatomic) ToolbarButtonWithCounterItem* addButtonItemBottom;
@property(retain, nonatomic) ToolbarButtonWithCounterItem* shareButtonItemBottom;
@property(retain, nonatomic) ToolbarButtonWithCounterItem* commentsButtonItemBottom;
@property(retain, nonatomic) ToolbarButtonWithCounterItem* likeButtonItemBottom;
@property(retain, nonatomic) UIBarButtonItem* shareButtonItemTop;
@property(retain, nonatomic) UIBarButtonItem* likeButtonItemTop;
@property(retain, nonatomic) UIBarButtonItem* moreButtonItemTop;
@property(retain, nonatomic) UIBarButtonItem* addButtonItemTop;
@property(retain, nonatomic) UIBarButtonItem* closeButtonItemTop;
-(void).cxx_destruct;
-(void)videoPlayerScrubberDidEndScrubbing:(id)videoPlayerScrubber;
-(void)videoPlayerScrubberWillBeginScrubbing:(id)videoPlayerScrubber;
-(id)createPlayPauseButton;
-(id)createScrimImageViewFlipped:(BOOL)flipped autoresizingMask:(unsigned)mask;
-(id)createCounterButtonItemWithImageNamed:(id)imageNamed;
-(id)createLabelWithFont:(id)font textColor:(id)color numberOfLines:(int)lines;
-(id)createBarButtonItemWithImageNamed:(id)imageNamed;
-(id)createNavigationBarWithFrame:(CGRect)frame;
-(id)createToolBarWithFrame:(CGRect)frame;
-(void)setScrubberValue:(float)value animated:(BOOL)animated;
-(void)handleErrorRetryButtonTap:(id)tap;
-(void)handleFinishedVideoViewButtonAction:(id)action;
-(void)handlePlaybackScrubberValueChanged:(id)changed;
-(void)handlePlayPauseButtonTap:(id)tap;
-(void)handleAddButtonTap:(id)tap;
-(void)handleShareButtonTap:(id)tap;
-(void)handleCommentsButtonTap:(id)tap;
-(void)handleLikeButtonTap:(id)tap;
-(void)handleMoreButtonTap:(id)tap;
-(void)handleCloseButtonTap:(id)tap;
-(void)handleBarButtonItemTap:(id)tap;
-(void)openLiveInVKLiveAppAction:(id)vkliveAppAction;
-(void)setPlaybackViewHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setPlayPauseButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)layoutForInterfaceOrientation:(int)interfaceOrientation;
-(void)updateToolbars;
-(void)setNeedsUpdateToolBars;
-(void)configureToolbarsForInterfaceOrientation:(int)interfaceOrientation animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)initializeLiveAppButton;
-(void)initializeLiveIndicator;
-(void)initializeErrorOverlayView;
-(void)initializeFinishedVideoUI;
-(void)initializePlayback;
-(void)initializeTitleAndSubtitleLabels;
-(void)initializeToolbars;
-(void)initializeBarItems;
-(void)initializeScrims;
-(void)initializeSubviews;
-(void)initialize;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerPlaybackView : XXUnknownSuperclass {
	VideoPlayerScrubber* _scrubber;
	UILabel* _leftDurationLabel;
	UILabel* _rightDurationLabel;
	float _scrubberMarginLeft;
	float _scrubberMarginRight;
}
@property(copy, nonatomic) NSString* rightDurationLabelText;
@property(copy, nonatomic) NSString* leftDurationLabelText;
@property(assign, nonatomic) float scrubberMarginRight;
@property(assign, nonatomic) float scrubberMarginLeft;
@property(retain, nonatomic) VideoPlayerScrubber* scrubber;
@property(retain, nonatomic) UILabel* rightDurationLabel;
@property(retain, nonatomic) UILabel* leftDurationLabel;
-(void).cxx_destruct;
-(id)createDurationLabel;
-(void)layoutSubviews;
-(void)initializeSubviews;
-(void)initialize;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerScrubber : XXUnknownSuperclass {
	BOOL _scrubbing;
	id<VideoPlayerScrubberDelegate> _delegate;
	float _bufferProgressValue;
	UIImageView* _bufferProgressTrackImageView;
}
@property(assign, nonatomic) float bufferProgressValue;
@property(assign, nonatomic) __weak id<VideoPlayerScrubberDelegate> delegate;
@property(assign, nonatomic) BOOL scrubbing;
@property(retain, nonatomic) UIImageView* bufferProgressTrackImageView;
-(void).cxx_destruct;
-(void)layoutBufferProgressTrackImageView;
-(void)layoutSubviews;
-(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
-(CGRect)trackRectForBounds:(CGRect)bounds;
-(void)endScrubbing;
-(void)beginScrubbing;
-(void)handleTouchCancel;
-(void)handleTouchUp;
-(void)handleTouchDown;
-(void)handleTap:(id)tap;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ToolbarButtonWithCounterItem : XXUnknownSuperclass {
	UIButton* _button;
	int _count;
}
@property(assign, nonatomic) int count;
@property(readonly, assign, nonatomic) UIButton* button;
+(id)vk_itemWithImageNamed:(id)imageNamed target:(id)target action:(SEL)action;
-(void).cxx_destruct;
-(id)initWithImage:(id)image style:(int)style target:(id)target action:(SEL)action;
-(id)initWithImage:(id)image target:(id)target action:(SEL)action;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerErrorOverlayView : XXUnknownSuperclass {
	NSString* _errorTitle;
	UIButton* _retryButton;
	UIVisualEffectView* _retryButtonBackgroundBlur;
	UILabel* _titleLabel;
}
@property(retain, nonatomic) NSString* buttonTitle;
@property(copy, nonatomic) NSString* errorTitle;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIVisualEffectView* retryButtonBackgroundBlur;
@property(retain, nonatomic) UIButton* retryButton;
-(void).cxx_destruct;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ProfilePhotoUploadContext : PhotoUploadContext <DomainEvent> {
	NSString* _cropQuery;
	CGAffineTransform _forcedCrop;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* cropQuery;
@property(assign, nonatomic) CGAffineTransform forcedCrop;
+(int)domainType;
+(id)photoContextWithSession:(id)session assetData:(id)data;
-(void).cxx_destruct;
-(BOOL)forceHighQuality;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(id)uploadURLToUse:(id)use;
-(void)willUseImage:(id)image;
-(id)requestForUploadServer;
@end

__attribute__((visibility("hidden")))
@interface VKMAuthAppSiteAction : VKMSiteAction {
	NSURL* _requestURL;
	NSString* _sdk_bundle;
	NSString* _access_token;
}
@property(retain, nonatomic) NSString* access_token;
@property(retain, nonatomic) NSString* sdk_bundle;
@property(retain, nonatomic) NSURL* requestURL;
+(BOOL)ensureAuthorizeURL:(id)url;
+(BOOL)handleAuthErrors:(id)errors;
+(BOOL)isAuthorizeAppURL:(id)url;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)cancel;
-(id)targetURL;
-(void)handleCompleteAuth:(id)auth;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandler : XXUnknownSuperclass {
	MainModel* _main;
	id<VKAPNSHandlerDelegate> _strongDelegate;
	NSDictionary* _payload;
	NSDictionary* _data;
}
@property(retain, nonatomic) NSDictionary* data;
@property(retain, nonatomic) NSDictionary* payload;
@property(retain, nonatomic) id<VKAPNSHandlerDelegate> strongDelegate;
@property(retain, nonatomic) MainModel* main;
+(id)userNotificationCategory;
-(void).cxx_destruct;
-(id)groupIdFromGroupId;
-(id)userIdFromUid;
-(void)notifyEventForGroupId:(id)groupId;
-(void)notifyEventForUserId:(id)userId completionBlock:(id)block;
-(void)notifyEventForUserId:(id)userId;
-(void)notifyAlert:(id)alert;
-(void)handleActionIdentifier:(id)identifier responseInfo:(id)info completionHandler:(id)handler;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerFeedback : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerComment : VKAPNSHandler {
}
+(id)likeIdentifier;
+(id)replyIdentifier;
+(id)userNotificationCategory;
-(void)handleActionIdentifier:(id)identifier responseInfo:(id)info completionHandler:(id)handler;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerFriendRequest : VKAPNSHandler {
}
+(id)userNotificationCategory;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerFriendFound : VKAPNSHandler {
}
+(id)userNotificationCategory;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerFriendAccepted : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerGroupInvite : VKAPNSHandler {
}
+(id)userNotificationCategory;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerGroupAccepted : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerEventSoon : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerWallPublish : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerNewPost : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerBirthday : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerSdkRequest : VKAPNSHandler {
}
+(id)userNotificationCategory;
+(id)postNotificationName;
-(void)markRequestAsRead:(id)read withCompletion:(id)completion;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(id)appID;
-(int)typeOfPayload;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerSdkOpen : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerOpenURL : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerValidateDevice : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
-(void)persistDeviceToken;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerValidateAction : VKAPNSHandler {
}
+(id)userNotificationCategory;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(void)handle;
-(void)requestConfirmation:(BOOL)confirmation;
-(void)processConfirm:(BOOL)confirm;
-(id)requestToConfirm:(BOOL)confirm;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerShowMessage : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerMessage : VKAPNSHandler {
}
+(id)muteIdentifier;
+(id)markIdentifier;
+(id)replyIdentifier;
+(id)userNotificationCategory;
-(void)handleActionIdentifier:(id)identifier responseInfo:(id)info completionHandler:(id)handler;
-(void)handleActionIdentifier:(id)identifier completionHandler:(id)handler;
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSHandlerChat : VKAPNSHandlerMessage {
}
+(id)muteIdentifier;
+(id)markIdentifier;
+(id)replyIdentifier;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSLocalVideoUploadHandler : VKAPNSHandler {
}
-(void)notify;
-(void)handle;
@end

__attribute__((visibility("hidden")))
@interface VKAPNSManager : XXUnknownSuperclass {
	MainModel* _main;
	id<VKAPNSHandlerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<VKAPNSHandlerDelegate> delegate;
@property(retain, nonatomic) MainModel* main;
+(id)userNotificationsCategories;
+(void)initialize;
-(void).cxx_destruct;
-(void)handle:(id)handle action:(BOOL)action;
-(void)handle:(id)handle actionIdentifier:(id)identifier responseInfo:(id)info completionHandler:(id)handler;
-(void)handle:(id)handle actionIdentifier:(id)identifier completionHandler:(id)handler;
-(id)handlerWithClass:(Class)aClass payload:(id)payload;
@end

__attribute__((visibility("hidden")))
@interface SubscriptionsModel : ListModel {
	BOOL _followers;
}
@property(assign, nonatomic) BOOL followers;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface SuggestionsModel : ListModel {
}
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface AppsRequestsModel : LoadingModel {
	NSNumber* _appID;
	int _type;
}
@property(readonly, assign, nonatomic) int type;
@property(readonly, retain, nonatomic) NSNumber* appID;
+(void)markRequestsReadWithIDs:(id)ids appID:(id)anId context:(id)context;
+(id)parseRequests:(id)requests;
+(id)parseApps:(id)apps;
+(id)request:(int)request filterType:(int)type forAppWithID:(id)anId;
+(id)request:(int)request filterType:(int)type;
-(void).cxx_destruct;
-(unsigned)markReadModelRequests:(id)requests inSetOfIDs:(id)ids;
-(void)handleMarkAsRead:(id)read withBuilder:(id)builder;
-(void)handleDelete:(id)aDelete withBuilder:(id)builder;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)countKey;
-(id)forAppID:(id)appID andType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface PhoneRule : XXUnknownSuperclass {
	int _minVal;
	int _maxVal;
	int _byte8;
	int _maxLen;
	int _otherFlag;
	int _prefixLen;
	int _flag12;
	int _flag13;
	NSString* _format;
}
@property(readonly, assign, nonatomic) BOOL hasTrunkPrefix;
@property(readonly, assign, nonatomic) BOOL hasIntlPrefix;
@property(retain, nonatomic) NSString* format;
@property(assign, nonatomic) int flag13;
@property(assign, nonatomic) int flag12;
@property(assign, nonatomic) int prefixLen;
@property(assign, nonatomic) int otherFlag;
@property(assign, nonatomic) int maxLen;
@property(assign, nonatomic) int byte8;
@property(assign, nonatomic) int maxVal;
@property(assign, nonatomic) int minVal;
-(void).cxx_destruct;
-(id)description;
-(id)format:(id)format intlPrefix:(id)prefix trunkPrefix:(id)prefix3;
@end

__attribute__((visibility("hidden")))
@interface RuleSet : XXUnknownSuperclass {
	BOOL _hasRuleWithIntlPrefix;
	BOOL _hasRuleWithTrunkPrefix;
	int _matchLen;
	NSMutableArray* _rules;
}
@property(assign, nonatomic) BOOL hasRuleWithTrunkPrefix;
@property(assign, nonatomic) BOOL hasRuleWithIntlPrefix;
@property(retain, nonatomic) NSMutableArray* rules;
@property(assign, nonatomic) int matchLen;
-(void).cxx_destruct;
-(id)description;
-(BOOL)isValid:(id)valid intlPrefix:(id)prefix trunkPrefix:(id)prefix3 prefixRequired:(BOOL)required;
-(id)format:(id)format intlPrefix:(id)prefix trunkPrefix:(id)prefix3 prefixRequired:(BOOL)required;
@end

__attribute__((visibility("hidden")))
@interface CallingCodeInfo : XXUnknownSuperclass {
	NSSet* _countries;
	NSString* _callingCode;
	NSMutableArray* _trunkPrefixes;
	NSMutableArray* _intlPrefixes;
	NSMutableArray* _ruleSets;
	NSMutableArray* _formatStrings;
}
@property(retain, nonatomic) NSMutableArray* formatStrings;
@property(retain, nonatomic) NSMutableArray* ruleSets;
@property(retain, nonatomic) NSMutableArray* intlPrefixes;
@property(retain, nonatomic) NSMutableArray* trunkPrefixes;
@property(retain, nonatomic) NSString* callingCode;
@property(retain, nonatomic) NSSet* countries;
-(void).cxx_destruct;
-(id)description;
-(BOOL)isValidPhoneNumber:(id)number;
-(id)format:(id)format;
-(id)matchingTrunkCode:(id)code;
-(id)matchingAccessCode:(id)code;
@end

__attribute__((visibility("hidden")))
@interface RMPhoneFormat : XXUnknownSuperclass {
	NSData* _data;
	NSString* _defaultCountry;
	NSString* _defaultCallingCode;
	NSMutableDictionary* _callingCodeOffsets;
	NSMutableDictionary* _callingCodeCountries;
	NSMutableDictionary* _callingCodeData;
	NSMutableDictionary* _countryCallingCode;
}
+(id)instance;
+(id)strip:(id)strip;
+(void)initialize;
-(void).cxx_destruct;
-(void)parseDataHeader;
-(id)callingCodeInfo:(id)info;
-(int)value16BE:(unsigned)be;
-(int)value16:(unsigned)a16;
-(unsigned)value32:(unsigned)a32;
-(BOOL)isPhoneNumberValid:(id)valid;
-(id)format:(id)format;
-(id)findCallingCodeInfo:(id)info;
-(id)countriesForCallingCode:(id)callingCode;
-(id)callingCodeForCountryCode:(id)countryCode;
-(id)defaultCallingCode;
-(id)initWithDefaultCountry:(id)defaultCountry;
-(id)init;
-(id)isoToCodeMap;
-(BOOL)isPhoneNumberValid:(id)valid forCode:(id)code;
-(id)format:(id)format forCode:(id)code;
@end

__attribute__((visibility("hidden")))
@interface MembersListContext : ListModelContext {
	int _requiredMode;
}
@property(assign, nonatomic) int requiredMode;
@end

__attribute__((visibility("hidden")))
@interface MembersModel : MultiIndexModel {
	Index* _allMembers;
	Index* _onlyFriends;
}
@property(retain, nonatomic) Index* onlyFriends;
@property(retain, nonatomic) Index* allMembers;
-(void).cxx_destruct;
-(void)resetToMode:(unsigned)mode;
-(id)countKeyForMode:(unsigned)mode;
-(id)indexForMode:(unsigned)mode;
-(unsigned)modes;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(BOOL)shouldLoad:(id)load;
-(id)spawnContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface GUIView : XXUnknownSuperclass {
	StoryEditorNavigationBar* _navigationBar;
	UIImageView* _navBarScrimImageView;
	UIView* _backgroundView;
	UIBarButtonItem* _doneButtonItem;
	UIBarButtonItem* _changeStyleButtonItem;
	ColorPaletteView* _colorPaletteView;
}
@property(retain, nonatomic) ColorPaletteView* colorPaletteView;
@property(retain, nonatomic) UIBarButtonItem* changeStyleButtonItem;
@property(retain, nonatomic) UIBarButtonItem* doneButtonItem;
@property(retain, nonatomic) UIView* backgroundView;
@property(retain, nonatomic) UIImageView* navBarScrimImageView;
@property(retain, nonatomic) StoryEditorNavigationBar* navigationBar;
-(void).cxx_destruct;
-(void)setColorPaletteViewHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setBackgroundAndControlsHidden:(BOOL)hidden animated:(BOOL)animated completion:(id)completion;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ExtendedHitTestTextView : XXUnknownSuperclass {
	BOOL _hitTestOnlyInGlyphsBounds;
}
@property(assign, nonatomic) BOOL hitTestOnlyInGlyphsBounds;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorEditableTextAttachment : XXUnknownSuperclass <KeyboardAppearanceEventHandler, UITextViewDelegate, ColorPaletteViewDelegate, DraggableAttachment> {
	BOOL _editing;
	BOOL _firstEditing;
	float _rotation;
	float _zoomScale;
	id<StoryEditorEditableTextAttachmentDelegate> _delegate;
	ExtendedHitTestTextView* _textView;
	StoryEditorDraggableAttachmentsContainerView* _attachmentsContainerView;
	GUIView* _inputContainerView;
	KeyboardAppearanceObserver* _keyboardObserver;
	unsigned _textStyle;
	float _zoomScaleBeforeEdit;
	float _rotationBeforeEdit;
	unsigned _textStyleBeforeEdit;
	UIView* _textViewSuperviewBeforeEditing;
	CGPoint _centerBeforeEdit;
}
@property(readonly, assign, nonatomic) float maxZoomScale;
@property(readonly, assign, nonatomic) float minZoomScale;
@property(assign, nonatomic) float rotation;
@property(assign, nonatomic) float zoomScale;
@property(readonly, assign, nonatomic) BOOL horizontalPanAllowed;
@property(readonly, assign, nonatomic) BOOL verticalPanAllowed;
@property(readonly, assign, nonatomic) BOOL pannable;
@property(readonly, assign, nonatomic) BOOL rotatable;
@property(readonly, assign, nonatomic) BOOL zoomable;
@property(readonly, assign, nonatomic) UIView* view;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak StoryEditorDraggableAttachmentsContainerView* attachmentsContainerView;
@property(assign, nonatomic) __weak id<StoryEditorEditableTextAttachmentDelegate> delegate;
@property(retain, nonatomic) ExtendedHitTestTextView* textView;
@property(retain, nonatomic) UIView* textViewSuperviewBeforeEditing;
@property(assign, nonatomic) BOOL firstEditing;
@property(assign, nonatomic) unsigned textStyleBeforeEdit;
@property(assign, nonatomic) CGPoint centerBeforeEdit;
@property(assign, nonatomic) float rotationBeforeEdit;
@property(assign, nonatomic) float zoomScaleBeforeEdit;
@property(assign, nonatomic, getter=isEditing) BOOL editing;
@property(assign, nonatomic) unsigned textStyle;
@property(retain, nonatomic) KeyboardAppearanceObserver* keyboardObserver;
@property(retain, nonatomic) GUIView* inputContainerView;
-(void).cxx_destruct;
-(void)keyboardAppearanceObserver:(id)observer handleKeyboardAppearanceEventWithInfo:(id)info previouslyTrackedAppearanceInfo:(id)info3;
-(void)colorPaletteView:(id)view didSelectColor:(id)color;
-(void)didEndInteractions;
-(void)willBeginInteractions;
-(BOOL)canBeginInteractions;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)textViewDidChange:(id)textView;
-(void)actionDoneButton:(id)button;
-(void)actionChangeStyleButton:(id)button;
-(void)actionBackgroundTap:(id)tap;
-(void)rasterizeTextAtZoomScale:(float)zoomScale;
-(void)moveTextViewCursorAtTheEnd;
-(float)clampedScaleForTextScale:(float)textScale;
-(void)setContensScale:(float)scale forLayer:(id)layer;
-(void)rerenderTextViewAtScale:(float)scale;
-(BOOL)textIsEmpty;
-(id)selectedColor;
-(BOOL)shouldShowColorPaletteForTextStyle:(unsigned)textStyle;
-(void)updateTextForTextColor:(id)textColor;
-(void)restoreAttachmentPositionIfNeededWithCompletion:(id)completion;
-(void)endEditing;
-(void)beginEditing;
-(unsigned)switchedTextStyle;
-(void)setupForTextStyle:(unsigned)textStyle;
-(void)autosizeTextView;
-(void)layoutTextViewInContainer;
-(id)initWithAttachmentsContainerView:(id)attachmentsContainerView;
@end

__attribute__((visibility("hidden")))
@interface ScrollingComponentState : XXUnknownSuperclass {
	Component5* _component;
	int _mode;
}
@property(assign, nonatomic) int mode;
@property(retain, nonatomic) Component5* component;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ScrollingComponent : Component5 {
}
+(id)component:(id)component;
+(id)component:(id)component mode:(int)mode;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ScrollingComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak UIScrollView* view;
+(id)createView;
-(void)setNode:(id)node;
@end

__attribute__((visibility("hidden")))
@interface PostEditAttachment : DomainEditAttachment {
}
@property(retain, nonatomic) VKPost* domain;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface FwdEditAttachment : EditAttachment {
	NSMutableSet* _mids;
	NSMutableArray* _messages;
}
@property(retain, nonatomic) NSMutableArray* messages;
@property(retain, nonatomic) NSMutableSet* mids;
-(void).cxx_destruct;
-(void)addMessages:(id)messages;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerProgressStats : XXUnknownSuperclass <TimerTargetDelegate> {
	NSMutableIndexSet* _timingLogMutable;
	MPMoviePlayerController* _player;
	TimerTarget* _timer;
	AVPlayer* _avPlayer;
	id _avPlayerObserver;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSIndexSet* timingLog;
@property(readonly, assign, nonatomic) TimerTarget* timer;
@property(retain, nonatomic) id avPlayerObserver;
@property(retain, nonatomic) AVPlayer* avPlayer;
@property(retain, nonatomic) MPMoviePlayerController* player;
-(void).cxx_destruct;
-(id)buildForVideo:(id)video;
-(void)continueWithPlayer:(id)player;
-(void)connectToAVPlayer:(id)avplayer;
-(void)timerTargetFired:(id)fired;
-(id)initWithAVPlayer:(id)avplayer;
-(id)initWithPlayer:(id)player;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SubscriptionsController : VKMLiveController {
}
@property(retain, nonatomic) SubscriptionsModel* model;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
-(void)VKMTableUpdatedIndex;
@end

__attribute__((visibility("hidden")))
@interface MTStatusBarOverlay : XXUnknownSuperclass <UITableViewDataSource> {
	BOOL hidesActivity_;
	BOOL hideInProgress_;
	BOOL active_;
	BOOL canRemoveImmediateMessagesFromQueue_;
	BOOL forcedToHide_;
	UIView* backgroundView_;
	UIView* detailView_;
	UIImageView* statusBarBackgroundImageView_;
	UILabel* statusLabel1_;
	UILabel* statusLabel2_;
	UILabel* hiddenStatusLabel_;
	UIImageView* progressView_;
	UIActivityIndicatorView* activityIndicator_;
	UILabel* finishedLabel_;
	UIImage* defaultStatusBarImage_;
	UIImage* defaultStatusBarImageShrinked_;
	int animation_;
	NSMutableArray* messageQueue_;
	int detailViewMode_;
	NSString* detailText_;
	UITextView* detailTextView_;
	NSMutableArray* messageHistory_;
	UITableView* historyTableView_;
	NSString* lastPostedMessage_;
	id<MTStatusBarOverlayDelegate> _overlayDelegate;
	UIViewController* _realRootController;
	double progress_;
	CGRect smallFrame_;
	CGRect oldBackgroundViewFrame_;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) id<MTStatusBarOverlayDelegate> overlayDelegate;
@property(copy, nonatomic) NSString* detailText;
@property(assign, nonatomic) int detailViewMode;
@property(assign, nonatomic) BOOL canRemoveImmediateMessagesFromQueue;
@property(copy, nonatomic) NSString* lastPostedMessage;
@property(assign, nonatomic, getter=isHistoryEnabled) BOOL historyEnabled;
@property(readonly, assign, nonatomic, getter=isDetailViewHidden) BOOL detailViewHidden;
@property(readonly, assign, nonatomic, getter=isShrinked) BOOL shrinked;
@property(retain, nonatomic) UIImage* defaultStatusBarImageShrinked;
@property(retain, nonatomic) UIImage* defaultStatusBarImage;
@property(assign, nonatomic) BOOL hidesActivity;
@property(retain, nonatomic) UILabel* finishedLabel;
@property(assign, nonatomic) int animation;
@property(assign, nonatomic) CGRect smallFrame;
@property(assign, nonatomic) double progress;
@property(retain, nonatomic) UIView* detailView;
@property(retain, nonatomic) UIView* backgroundView;
@property(retain, nonatomic) UIViewController* realRootController;
@property(assign, nonatomic) BOOL forcedToHide;
@property(retain, nonatomic) UITableView* historyTableView;
@property(retain, nonatomic) NSMutableArray* messageHistory;
@property(retain, nonatomic) NSMutableArray* messageQueue;
@property(retain, nonatomic) UITextView* detailTextView;
@property(readonly, assign, nonatomic, getter=isReallyHidden) BOOL reallyHidden;
@property(assign, getter=isActive) BOOL active;
@property(assign, getter=isHideInProgress) BOOL hideInProgress;
@property(assign, nonatomic) CGRect oldBackgroundViewFrame;
@property(retain, nonatomic) UIImageView* progressView;
@property(readonly, assign, nonatomic) UILabel* visibleStatusLabel;
@property(assign, nonatomic) UILabel* hiddenStatusLabel;
@property(retain, nonatomic) UILabel* statusLabel2;
@property(retain, nonatomic) UILabel* statusLabel1;
@property(retain, nonatomic) UIImageView* statusBarBackgroundImageView;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
+(id)sharedOverlay;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)setHidden:(BOOL)hidden useAlpha:(BOOL)alpha;
-(void)setHiddenUsingAlpha:(BOOL)alpha;
-(void)clearHistory;
-(void)addMessageToHistory:(id)history;
-(CGRect)backgroundViewFrameForStatusBarInterfaceOrientation;
-(void)updateProgressViewSizeForLabel:(id)label;
-(void)updateDetailTextViewHeight;
-(void)callDelegateWithNewMessage:(id)newMessage;
-(void)updateUIForMessageType:(int)messageType duration:(double)duration;
-(void)setColorSchemeForStatusBarStyle:(int)statusBarStyle messageType:(int)type;
-(void)setStatusBarBackgroundForStyle:(int)style;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)contentViewSwipedDown:(id)down;
-(void)contentViewSwipedUp:(id)up;
-(void)contentViewClicked:(id)clicked;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)setDetailViewHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setShrinked:(BOOL)shrinked animated:(BOOL)animated;
-(void)rotateToStatusBarFrame:(id)statusBarFrame;
-(void)setupFrame;
-(void)didChangeStatusBarFrame:(id)frame;
-(void)show;
-(void)hideTemporary;
-(void)hide;
-(void)showNextMessage;
-(void)postImmediateMessage:(id)message type:(int)type duration:(double)duration animated:(BOOL)animated;
-(void)postMessage:(id)message type:(int)type duration:(double)duration animated:(BOOL)animated immediate:(BOOL)immediate;
-(void)postMessageDictionary:(id)dictionary;
-(void)postImmediateErrorMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postErrorMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postErrorMessage:(id)message duration:(double)duration;
-(void)postImmediateFinishMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postFinishMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postFinishMessage:(id)message duration:(double)duration;
-(void)postImmediateMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postImmediateMessage:(id)message duration:(double)duration;
-(void)postImmediateMessage:(id)message animated:(BOOL)animated;
-(void)postMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postMessage:(id)message duration:(double)duration;
-(void)postMessage:(id)message animated:(BOOL)animated;
-(void)postMessage:(id)message;
-(void)restoreState;
-(void)saveStateSynchronized:(BOOL)synchronized;
-(void)saveState;
-(void)addSubviewToBackgroundView:(id)backgroundView atIndex:(int)index;
-(void)addSubviewToBackgroundView:(id)backgroundView;
-(void)dealloc;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)setHidden:(BOOL)hidden;
-(void)setRootViewController:(id)controller;
-(id)initWithFrame:(CGRect)frame;
-(void)becomeKeyWindow;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsLinksModel : MessagesAttachmentsListModel {
}
-(id)componentForObject:(id)object withContext:(id)context;
-(id)processWithComponent:(id)component;
-(id)mediaType;
-(id)countKey;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface BrushButton : XXUnknownSuperclass {
	unsigned _brushType;
	UIColor* _color;
	UIImageView* _colorView;
	UIImageView* _whiteColorAdditionalView;
	UIView* _haloView;
}
@property(retain, nonatomic) UIView* haloView;
@property(retain, nonatomic) UIImageView* whiteColorAdditionalView;
@property(retain, nonatomic) UIImageView* colorView;
@property(retain, nonatomic) UIColor* color;
@property(assign, nonatomic) unsigned brushType;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame brushType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface SketchView : XXUnknownSuperclass <ColorPaletteViewDelegate> {
	BOOL _graffitiMode;
	BOOL _shouldShowInterface;
	DrawView* _drawView;
	UIBarButtonItem* _doneButton;
	UIBarButtonItem* _cancelButton;
	NSArray* _rotatingViews;
	BrushSizeSlider* _sizeSlider;
	NSArray* _brushButtons;
	NSArray* _hideableViews;
	ColorPaletteView* _colorPaletteView;
	UIButton* _undoButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* rotatingViews;
@property(retain, nonatomic) UIBarButtonItem* cancelButton;
@property(retain, nonatomic) UIBarButtonItem* doneButton;
@property(retain, nonatomic) UIButton* undoButton;
@property(retain, nonatomic) ColorPaletteView* colorPaletteView;
@property(assign, nonatomic) BOOL shouldShowInterface;
@property(retain, nonatomic) NSArray* hideableViews;
@property(retain, nonatomic) NSArray* brushButtons;
@property(retain, nonatomic) BrushSizeSlider* sizeSlider;
@property(retain, nonatomic) DrawView* drawView;
@property(assign, nonatomic, getter=isGraffitiMode) BOOL graffitiMode;
-(void).cxx_destruct;
-(void)restoreState;
-(void)saveState;
-(BOOL)isEmpty;
-(void)renderGraffiti:(id)graffiti;
-(id)renderImageWithSize:(CGSize)size;
-(id)screenImage;
-(void)colorPaletteView:(id)view didSelectColor:(id)color;
-(void)updateBrush;
-(void)setBrushColor:(id)color;
-(void)actionBrushButton:(id)button;
-(void)actionSizeSlider:(id)slider;
-(void)hideSizeSlider;
-(void)showSizeSlider;
-(void)actionSizeButton;
-(void)actionUndo;
-(void)actionClear;
-(void)actionTouchDownAndUp:(id)up;
-(void)updateEmptyState;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame graffitiMode:(BOOL)mode;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoriesBannedModel : MultiIndexModel {
	Index* _users;
	Index* _groups;
}
@property(retain, nonatomic) Index* groups;
@property(retain, nonatomic) Index* users;
-(void).cxx_destruct;
-(void)actionStoriesSourceBan:(id)ban :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)indexForMode:(unsigned)mode;
-(id)countKeyForMode:(unsigned)mode;
-(unsigned)modes;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StoriesSourceBanModelAction : ModelAction {
	BOOL _ban;
}
@property(assign, nonatomic) BOOL ban;
@property(retain, nonatomic) NSNumber* target;
+(int)domainType;
+(id)actionBan:(BOOL)ban userId:(id)anId;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NotificationsManager : XXUnknownSuperclass <MTStatusBarOverlayDelegate, NHandlerBannerDelegate> {
	BOOL deattached;
	id<NotificationsManagerDelegate> _delegate;
	NSNumber* _activeDialog;
	VKStats* _stats;
	NotificationEvent* _lastEvent;
	id<NotificationHandler> _handlerVibration;
	id<NotificationHandler> _handlerSound;
	id<NotificationHandler> _handlerVisual;
	NHandlerStatus* _handlerStatus;
	NHandlerBanner* _handlerBanner;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<NotificationsManagerDelegate> delegate;
@property(retain, nonatomic) NHandlerBanner* handlerBanner;
@property(retain, nonatomic) NHandlerStatus* handlerStatus;
@property(retain, nonatomic) id<NotificationHandler> handlerVisual;
@property(readonly, retain, nonatomic) id<NotificationHandler> handlerSound;
@property(readonly, retain, nonatomic) id<NotificationHandler> handlerVibration;
@property(retain, nonatomic) NotificationEvent* lastEvent;
@property(readonly, retain, nonatomic) VKStats* stats;
@property(retain) NSNumber* activeDialog;
-(void).cxx_destruct;
-(void)handle:(id)handle;
-(void)changeActiveDialog:(id)dialog;
-(void)deattach;
-(void)bannerHandlerSelected:(id)selected;
-(void)statusBarOverlayDidRecognizeGesture:(id)statusBarOverlay;
-(id)currentVisualHandler:(id)handler;
-(void)dealloc;
-(id)initWithStats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface VKMaskPreview : XXUnknownSuperclass {
	NSString* _preview_300;
}
@property(retain, nonatomic) NSString* preview_300;
-(void).cxx_destruct;
-(id)initWithPreviewDictionary:(id)previewDictionary;
@end

__attribute__((visibility("hidden")))
@interface VKMaskDisabled : XXUnknownSuperclass {
	NSString* _title;
	NSString* _subtitle;
	NSString* _url;
}
@property(copy, nonatomic) NSString* url;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
+(id)parse:(id)parse;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKMask : VKDomain {
	BOOL _is_new;
	NSNumber* _section_id;
	unsigned _update_time;
	unsigned _create_time;
	NSString* _url;
	NSNumber* _engine_version;
	NSNumber* _vk_engine_version;
	VKMaskPreview* _preview;
	VKMaskDisabled* _disabled;
	NSString* _hint;
	id<VKSource> _author;
}
@property(retain, nonatomic) id<VKSource> author;
@property(copy, nonatomic) NSString* hint;
@property(retain, nonatomic) VKMaskDisabled* disabled;
@property(assign, nonatomic) BOOL is_new;
@property(retain, nonatomic) VKMaskPreview* preview;
@property(retain, nonatomic) NSNumber* vk_engine_version;
@property(retain, nonatomic) NSNumber* engine_version;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) unsigned create_time;
@property(assign, nonatomic) unsigned update_time;
@property(retain, nonatomic) NSNumber* section_id;
-(void).cxx_destruct;
-(BOOL)compatibleWithEngineVersion:(int)engineVersion modelVersion:(int)version;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MaskAuthorView : HighlightSubviewsButton {
	id<VKSource> _source;
	UIView* _avatarShadow;
	VKMImageView* _avatarView;
}
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) VKMImageView* avatarView;
@property(retain, nonatomic) UIView* avatarShadow;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)applyShadowForLayer:(id)layer;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoreEventMarkedAsRead : XXUnknownSuperclass <DomainEvent> {
	int _productType;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int productType;
+(int)domainType;
@end

__attribute__((visibility("hidden")))
@interface StoreEventProductPurchased : XXUnknownSuperclass <DomainEvent> {
	BOOL _handleQuite;
	VKStoreProduct* _product;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL handleQuite;
@property(retain, nonatomic) VKStoreProduct* product;
+(int)domainType;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ModelActionActivateProduct : ModelAction {
	BOOL _activate;
	BOOL _fromManageController;
}
@property(assign, nonatomic) BOOL fromManageController;
@property(assign, nonatomic) BOOL activate;
@property(retain, nonatomic) VKStoreProduct* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionReorderProduct : ModelActionReorder {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderPostSource : ActionOptionsProviderActionBuilder {
	BOOL _canIgnoreItems;
	VKPost* _post;
	int _banSourceType;
}
@property(assign, nonatomic) int banSourceType;
@property(assign, nonatomic) BOOL canIgnoreItems;
@property(readonly, assign, nonatomic) VKPost* post;
+(id)post:(id)post;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(id)initWithPost:(id)post;
@end

__attribute__((visibility("hidden")))
@interface HighlightableButton : XXUnknownSuperclass {
	BOOL touching;
}
-(unsigned)state;
-(void)setHighlighted:(BOOL)highlighted;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistEditAttachment : DomainEditAttachment {
}
@property(retain, nonatomic) VKAudioPlaylist* domain;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface VKGraffiti : VKDomain <VKBrowsableImage> {
	NSMutableDictionary* _variants;
}
@property(readonly, assign, nonatomic) float ratio;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableDictionary* variants;
-(void).cxx_destruct;
-(id)thumbnailUrl;
-(BOOL)isVideo;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKConnectivityState : XXUnknownSuperclass {
	NSDate* _activated;
	NSDate* _disconnected;
}
@property(retain, nonatomic) NSDate* disconnected;
@property(retain, nonatomic) NSDate* activated;
-(void).cxx_destruct;
-(BOOL)isBeforeConnectionLost:(id)lost;
-(void)captureDisconnected;
-(void)captureActivated;
-(void)log;
@end

__attribute__((visibility("hidden")))
@interface DialogsSearchOperation : IndexSearchOperation {
	NSDictionary* _users;
	NSSet* _dids;
}
@property(retain, nonatomic) NSSet* dids;
@property(retain, nonatomic) NSDictionary* users;
-(void).cxx_destruct;
-(void)main;
@end

__attribute__((visibility("hidden")))
@interface TestStickersController : VKMController <ExtraInputPanelViewPhotoEditorModeDelegate> {
	ExtrasInputView* _extrasView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ExtrasInputView* extrasView;
-(void).cxx_destruct;
-(void)extraInputViewDidCancel:(id)extraInputView;
-(void)extraInputView:(id)view didSelectEmojiImage:(id)image emojiString:(id)string;
-(void)extraInputView:(id)view didSelectStickerImage:(id)image stickerId:(id)anId;
-(void)viewDidLoad;
-(BOOL)VKMControllerStatusBarHidden;
@end

__attribute__((visibility("hidden")))
@interface DetailMoreCell : XXUnknownSuperclass {
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
-(void).cxx_destruct;
-(void)renderMore:(int)more total:(int)total;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoAlbumRow : VKRenderable {
	VKPhotoAlbum* _album;
	AlbumPhotoFeedContext* _context;
	float _offset;
}
@property(assign, nonatomic) float offset;
@property(retain, nonatomic) AlbumPhotoFeedContext* context;
@property(retain, nonatomic) VKPhotoAlbum* album;
+(id)album:(id)album;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumsContext : ListModelContext {
	NSArray* _albums;
	int _loadedAlbums;
}
@property(assign, nonatomic) int loadedAlbums;
@property(retain, nonatomic) NSArray* albums;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumsModel : ListModel {
	BOOL _userOnly;
}
@property(assign, nonatomic) BOOL userOnly;
-(void)handleEdit:(id)edit :(id)arg2;
-(void)handleAdd:(id)add :(id)arg2;
-(void)handleReorder:(id)reorder :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)isOwnerAlbum:(id)album;
-(void)discovered:(id)discovered;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)countKey;
-(id)setupUserOnly:(BOOL)only;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumRowPhotoCell : VKMCollectionCell {
	ThumbnailView* _image;
}
@property(readonly, retain, nonatomic) ThumbnailView* image;
+(void)prerender:(id)prerender;
+(void)initialize;
-(void).cxx_destruct;
-(id)createImageFilter;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumRowCell : VKMCell <UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, ModelObserver> {
	PhotoAlbumRowModel* _model;
	UICollectionView* _collection;
	ScrollSpeed* _speed;
	UILabel* _title;
	UILabel* _count;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PhotoAlbumRowModel* model;
@property(retain, nonatomic) VKPhotoAlbumRow* domain;
@property(retain, nonatomic) UILabel* count;
@property(retain, nonatomic) UILabel* title;
@property(readonly, retain, nonatomic) ScrollSpeed* speed;
@property(retain, nonatomic) UICollectionView* collection;
+(void)prerender:(id)prerender;
+(void)initialize;
-(void).cxx_destruct;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)selected;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)updateAlbum;
-(void)model:(id)model updated:(id)updated;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumRowModel : PhotoAlbumModel {
	BOOL _locked;
}
@property(assign, nonatomic) BOOL locked;
-(void)handleMove:(id)move :(id)arg2;
-(void)handleReorder:(id)reorder :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)handleUpload:(id)upload :(id)arg2;
-(void)deletePhoto:(id)photo :(id)arg2;
-(void)addPhoto:(id)photo :(id)arg2;
-(void)markIndexReset:(id)reset;
-(void)registerForEvents:(id)events;
-(id)browsingContextForPhoto:(id)photo;
-(id)process:(id)process;
-(void)lock:(BOOL)lock;
-(BOOL)shouldLoad:(id)load;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface PostEditOptionsController : XXUnknownSuperclass {
	PostEditContext* _context;
	UIDatePicker* _timerPicker;
}
@property(retain, nonatomic) PostEditContext* context;
@property(retain, nonatomic) UIDatePicker* timerPicker;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)roundUpDate:(id)date toIntervalMinutes:(int)intervalMinutes;
-(id)applyServerShift:(id)shift;
-(void)actionTimer:(id)timer;
-(void)actionOptionChanged:(id)changed;
-(void)actionDone:(id)done;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AppWidgetSportMatch : VKRenderable {
	SportMatch* _match;
}
@property(retain, nonatomic) SportMatch* match;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AppWidgetSportMatchGrid : VKRenderable {
	NSArray* _matches;
}
@property(retain, nonatomic) NSArray* matches;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface OptionSelectionItem : XXUnknownSuperclass {
	id _value;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) id value;
+(id)value:(id)value title:(id)title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface OptionSelectionController : XXUnknownSuperclass {
	NSArray* _optionsIndex;
	NSArray* _footers;
	OptionSelectionItem* _selectedItem;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) OptionSelectionItem* selectedItem;
@property(copy, nonatomic) NSArray* footers;
@property(retain, nonatomic) NSArray* optionsIndex;
+(id)controllerWithSelectedItem:(id)selectedItem index:(id)index handler:(id)handler;
+(id)controller;
-(void).cxx_destruct;
-(id)childViewControllerForStatusBarStyle;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)completeWithItem:(id)item;
-(id)itemAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface DefaultHighlightButton : XXUnknownSuperclass {
}
-(id)_imageForState:(unsigned)state usesImageForNormalState:(BOOL*)normalState;
@end

__attribute__((visibility("hidden")))
@interface ConverterPair : XXUnknownSuperclass {
	VKMGifLoader* _loader;
	VKAVGifConverter* _converter;
	VKDoc* _document;
	double _progress;
}
@property(assign, nonatomic) double progress;
@property(retain, nonatomic) VKDoc* document;
@property(retain, nonatomic) VKAVGifConverter* converter;
@property(retain, nonatomic) VKMGifLoader* loader;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKMGifManager : XXUnknownSuperclass <NSURLSessionDelegate, NSURLSessionDataDelegate, VKAVGifConverterDelegate, NSCacheDelegate> {
	VKSession* _weakSession;
	NSURLSession* _gifSession;
	NSObject<OS_dispatch_queue>* _processingQueue;
	NSCache* _fileCache;
	NSMutableDictionary* _converters;
	int _reachibilityStatus;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VKSession* weakSession;
@property(assign) int reachibilityStatus;
@property(readonly, assign) NSMutableDictionary* converters;
@property(readonly, assign, nonatomic) NSCache* fileCache;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* processingQueue;
@property(readonly, assign, nonatomic) NSURLSession* gifSession;
+(id)shared;
-(void).cxx_destruct;
-(void)updateReachibility:(id)reachibility;
-(BOOL)shouldAutoplayGif:(id)gif;
-(void)cache:(id)cache willEvictObject:(id)object;
-(void)completeWithURL:(id)url forInfo:(id)info;
-(void)cancelLoader:(id)loader;
-(void)gifConverter:(id)converter didFailedForGifWithURL:(id)url withError:(id)error;
-(void)gifConverter:(id)converter reportedDownloadProgress:(float)progress;
-(void)gifConverter:(id)converter didFinishConvertingGifWithURL:(id)url resultFileURL:(id)url3 size:(CGSize)size;
-(void)reportProgressForPair:(id)pair progress:(double)progress;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)load:(id)load;
-(BOOL)checkPairAndLoad:(id)load;
-(id)initWithMaxOperations:(int)maxOperations;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NewsSearchModel : FeedSearchModel {
}
-(BOOL)feedModelComplete:(id)complete loaded:(int)loaded;
-(id)nextFrom:(id)from data:(id)data count:(int)count;
-(id)feedRequestBuilderForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NewsSearchController : VKMLiveController <UISearchBarDelegate> {
	BOOL _willAppearOnceCalled;
	SearchModelUpdater* _searchUpdater;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) SearchModelUpdater* searchUpdater;
-(void).cxx_destruct;
-(void)didDismissSearchController:(id)controller;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)model:(id)model updated:(id)updated;
-(id)titleComponent;
-(id)model:(id)model componentForObject:(id)object withContext:(id)context;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(id)VKMTableCreateSearchController80;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(int)VKMTableSearchMode;
@end

__attribute__((visibility("hidden")))
@interface NewsSearchControllerLegacy : FeedController <UISearchBarDelegate> {
	UISearchBar* _searchBar;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) LoadingModel<SearchModel>* model;
@property(retain, nonatomic) UISearchBar* searchBar;
-(void).cxx_destruct;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)VKMScrollViewRefreshLoading;
-(BOOL)VKMScrollViewDisablePTR;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumsListController : VKMLiveController {
}
-(void)actionTeaserButton:(id)button;
-(void)actionEdit:(id)edit;
-(id)editButtonItem;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKCountersUpdater : XXUnknownSuperclass <UIWebViewDelegate> {
	NSDate* _last;
	UIWebView* _webView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIWebView* webView;
@property(retain, nonatomic) NSDate* last;
-(void).cxx_destruct;
-(void)touch;
-(void)update;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LandscapeNavigationController : VKMNavigationController {
	BOOL _landscape;
	UINavigationController* _origin;
	LandscapePresenter* _presenter;
}
@property(retain, nonatomic) LandscapePresenter* presenter;
@property(assign, nonatomic) BOOL landscape;
@property(retain, nonatomic) UINavigationController* origin;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LandscapePresenter : XXUnknownSuperclass {
	BOOL rotationLock;
	BOOL _working;
	BOOL _rotating;
	id<LandscapePresenterDelegate> _delegate;
	UIViewController* _weakController;
	int _specificInterfaceOrientation;
	UIView* _transitionView;
}
@property(assign, nonatomic) int specificInterfaceOrientation;
@property(assign, nonatomic) BOOL rotating;
@property(assign, nonatomic) BOOL working;
@property(assign, nonatomic) UIViewController* weakController;
@property(assign, nonatomic) id<LandscapePresenterDelegate> delegate;
@property(retain, nonatomic) UIView* transitionView;
+(BOOL)isPresentedIn:(id)anIn;
+(id)backTitleForController:(id)controller;
-(void)landscapeNavigation:(id)navigation willPopAnimated:(BOOL)animated;
-(void)landscapeNavigation:(id)navigation willPush:(id)push animated:(BOOL)animated;
-(void)clearNow;
-(void)updateOrientation;
-(void)notificationRotated:(id)rotated;
-(id)originalNavigation;
-(void)unlockSpecificInterfaceOrientation;
-(void)lockSpecificInterfaceOrientation:(int)orientation;
-(void)dealloc;
-(void)foreground:(id)foreground;
-(void)background:(id)background;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKCircleProgressView : XXUnknownSuperclass {
	BOOL _indeterminate;
	float _progress;
	float _strokeLineWidth;
	CAShapeLayer* _strokeLayer;
	CAShapeLayer* _progressLayer;
}
@property(retain, nonatomic) UIColor* strokeColor;
@property(retain, nonatomic) UIColor* tintColor;
@property(assign, nonatomic) float strokeLineWidth;
@property(assign, nonatomic) float lineWidth;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) BOOL indeterminate;
@property(retain, nonatomic) CAShapeLayer* progressLayer;
@property(retain, nonatomic) CAShapeLayer* strokeLayer;
-(void).cxx_destruct;
-(void)setProgress:(float)progress animated:(BOOL)animated duration:(float)duration;
-(void)setProgressHidden:(BOOL)hidden;
-(void)layoutSubviews;
-(void)commonInit;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKMLabelRender : XXUnknownSuperclass {
	float targetWidth;
	float maxHeight;
	CGSize size;
	NSString* _text;
	NSDictionary* _attributes;
	CTFrameRef _frame;
}
@property(readonly, retain, nonatomic) NSDictionary* attributes;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) CTFrameRef frame;
+(id)injectCTAlignment:(unsigned char)alignment forAttributes:(id)attributes;
+(id)renderForText:(id)text attributes:(id)attributes width:(float)width height:(float)height;
-(void).cxx_destruct;
-(id)duplicateRender:(id)render;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMLabel : XXUnknownSuperclass {
	VKMLabelRender* _render;
	VKMLabelRender* _renderHighlighted;
}
@property(retain, nonatomic) VKMLabelRender* renderHighlighted;
@property(retain, nonatomic) VKMLabelRender* render;
-(void).cxx_destruct;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)drawRect:(CGRect)rect;
-(void)render:(id)render;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsLinkComponent : Component5 {
}
+(id)linkComponentWithLink:(id)link;
@end

__attribute__((visibility("hidden")))
@interface ScrollToTopDetectionView : XXUnknownSuperclass <UIScrollViewDelegate> {
	id<ScrollToTopDetectionViewDelegate> _scrollToTopDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<ScrollToTopDetectionViewDelegate> scrollToTopDelegate;
-(void).cxx_destruct;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)dealloc;
-(id)initDetectionViewWithWidth:(float)width;
@end

__attribute__((visibility("hidden")))
@interface VKConversationSettings : XXUnknownSuperclass {
	BOOL _sound;
	NSNumber* _disabled_until;
}
@property(retain, nonatomic) NSNumber* disabled_until;
@property(assign, nonatomic) BOOL sound;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKPushSettings : VKDomain {
	BOOL _enabledMsg;
	BOOL _enabledChat;
	BOOL _enabledFriends;
	BOOL _enabledApps;
	BOOL _enabledCounterMessages;
	NSNumber* _disabled_until;
	NSDictionary* _conversations;
	NSDictionary* _settings;
}
@property(assign, nonatomic) BOOL enabledCounterMessages;
@property(assign, nonatomic) BOOL enabledApps;
@property(assign, nonatomic) BOOL enabledFriends;
@property(assign, nonatomic) BOOL enabledChat;
@property(assign, nonatomic) BOOL enabledMsg;
@property(retain, nonatomic) NSDictionary* settings;
@property(retain, nonatomic) NSDictionary* conversations;
@property(retain, nonatomic) NSNumber* disabled_until;
+(id)derivedEvents;
+(id)defaultSettings;
+(id)enableNoText:(BOOL)text settings:(id)settings;
+(BOOL)isNoTextSettings:(id)settings;
+(id)updatedSettings:(id)settings block:(id)block;
+(BOOL)enabledType:(id)type inSettings:(id)settings;
+(id)optionsForType:(id)type inSettings:(id)settings;
+(id)initialSettings:(id)settings;
-(void).cxx_destruct;
-(id)updateWithSettings:(id)settings;
-(void)_updateCounters;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AdsStatsData : BasicStatsData {
}
-(id)request;
-(int)batchLimit;
-(int)eventsLimit;
-(id)batchKey;
@end

__attribute__((visibility("hidden")))
@interface AdsStatsManager : PersistentStatsManager {
}
-(void)actionForAd:(id)ad type:(int)type;
-(void)viewAd:(id)ad;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderGift : ActionOptionsProviderActionBuilder {
	VKGiftListObject* _gift;
}
@property(readonly, assign, nonatomic) VKGiftListObject* gift;
+(id)gift:(id)gift;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(id)initWithGift:(id)gift;
@end

__attribute__((visibility("hidden")))
@interface AudioAudiosBlock : AudioBlock {
	NSArray* _audios;
}
@property(retain, nonatomic) NSArray* audios;
-(void).cxx_destruct;
-(id)items;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface AudioAudiosSpecialBlock : AudioAudiosBlock {
	NSArray* _thumbs;
}
@property(retain, nonatomic) NSArray* thumbs;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AppPlainActivityRenderer : Renderer {
}
@property(retain, nonatomic) id<VKAPIAppActivity> domain;
+(void)build:(id)build;
+(BOOL)includeGameInfo;
+(void)prepareLayout:(id)layout;
+(id)rendererElements;
-(void)actionMainPhoto:(id)photo;
-(BOOL)cellSelected:(id)selected;
-(void)renderCell:(id)cell;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface AppActivityRenderer : AppPlainActivityRenderer {
}
@property(retain, nonatomic) id<VKAPIAppActivity> domain;
+(void)build:(id)build;
+(BOOL)includeGameInfo;
+(void)prepareLayout:(id)layout;
+(id)rendererElements;
-(BOOL)cellSelected:(id)selected;
@end

__attribute__((visibility("hidden")))
@interface AppActivityAllCell : VKMCell {
}
@property(readonly, retain, nonatomic) VKAPIAppActivityAll* domain;
+(void)prerender:(id)prerender;
-(BOOL)selected;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface SuggesionsFeedModel : NewsFeedModel {
}
+(int)handlesSourcesBans;
+(id)newsFeedMethod;
-(id)feedStatContext;
-(id)feedRequestBuilderForContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface BackgroundTaskWrapper : XXUnknownSuperclass {
	unsigned _taskIdentifier;
}
@property(assign, nonatomic) unsigned taskIdentifier;
-(void)end;
-(void)begin;
-(BOOL)active;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MainNewsFeedModel : NewsFeedModel {
	NSNumber* _unsynced;
	MainNewsFeedModelDeferredUpdate* _deferredUpdate;
	NSDate* _lastActivityDate;
	NSDate* _lastNotificationsSync;
}
@property(retain, nonatomic) NSDate* lastActivityDate;
@property(retain, nonatomic) MainNewsFeedModelDeferredUpdate* deferredUpdate;
@property(retain, nonatomic) NSNumber* unsynced;
@property(retain, nonatomic) MainNewsFeedModelContext* lastContext;
@property(retain, nonatomic) NSDate* lastNotificationsSync;
+(int)handlesSourcesBans;
+(id)newsFeedMethod;
-(void).cxx_destruct;
-(id)feedStatContext;
-(BOOL)canInsertPost:(id)post;
-(void)discovered:(id)discovered;
-(id)processNotificationsData:(id)data forIndex:(id)index context:(id)context;
-(void)checkFreshNewsWithContext:(id)context;
-(BOOL)shouldCheckFreshNews;
-(void)processActivateResult:(id)result oldIndex:(id)index context:(id)context;
-(void)handleAdd:(id)add :(id)arg2;
-(void)applyDeferredUpdate;
-(void)changeUnsynced:(int)unsynced;
-(void)addUnsyncedCount:(int)count;
-(id)componentForObject:(id)object withContext:(id)context;
-(void)changeIndex:(id)index withUpdate:(id)update;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(void)handleEnableTopNewsfeed:(id)newsfeed :(id)arg2;
-(void)hideAppNotification:(id)notification :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)resetUnsynced;
-(void)resetWithContext:(id)context;
-(void)resetWithEmptyIndex:(BOOL)emptyIndex;
-(void)resetWithMode:(int)mode;
-(id)resetContext;
-(id)notificationsRequest;
-(id)feedRequestBuilderForContext:(id)context;
-(id)requestForContext:(id)context;
-(BOOL)isSameModel:(id)model;
-(id)spawnContext:(id)context;
-(BOOL)isEmpty;
@end

__attribute__((visibility("hidden")))
@interface MainNewsFeedUpdateContext : XXUnknownSuperclass {
	int _awayTime;
	int _position;
	NSString* _postIdentity;
	unsigned _startTime;
	int _mode;
}
@property(readonly, assign, nonatomic) int mode;
@property(readonly, assign, nonatomic) unsigned startTime;
@property(readonly, copy, nonatomic) NSString* postIdentity;
@property(readonly, assign, nonatomic) int position;
@property(readonly, assign, nonatomic) int awayTime;
+(id)startTime:(unsigned)time;
+(id)awayTime:(int)time position:(int)position postIdentity:(id)identity;
-(void).cxx_destruct;
-(id)initWithStartTime:(unsigned)startTime;
-(id)initWithAwayTime:(int)awayTime position:(int)position postIdentity:(id)identity;
@end

__attribute__((visibility("hidden")))
@interface MainNewsFeedModelContext : FeedModelContext {
	BOOL _syncMode;
	BOOL _clearIndex;
	int _mode;
	MainNewsFeedUpdateContext* _updateContext;
	double _resetTimeout;
}
@property(retain, nonatomic) MainNewsFeedUpdateContext* updateContext;
@property(assign, nonatomic) BOOL clearIndex;
@property(assign, nonatomic) BOOL syncMode;
@property(assign, nonatomic) int mode;
@property(assign, nonatomic) double resetTimeout;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface MainNewsFeedModelDeferredUpdate : XXUnknownSuperclass {
	Index* _index;
	MainNewsFeedModelContext* _context;
	NSDate* _creationDate;
}
@property(retain, nonatomic) NSDate* creationDate;
@property(retain, nonatomic) MainNewsFeedModelContext* context;
@property(retain, nonatomic) Index* index;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchHintsModel : SearchModel {
}
-(id)requestForContext:(id)context;
-(id)process:(id)process;
-(id)method;
@end

__attribute__((visibility("hidden")))
@interface FreshNewsButton : XXUnknownSuperclass {
	BOOL _buttonHidden;
	BOOL _loading;
	UIButton* _button;
	UIActivityIndicatorView* _activity;
}
@property(assign, nonatomic, getter=isLoading) BOOL loading;
@property(assign, nonatomic, getter=isButtonHidden) BOOL buttonHidden;
@property(retain, nonatomic) UIActivityIndicatorView* activity;
@property(retain, nonatomic) UIButton* button;
-(void).cxx_destruct;
-(void)setButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MainNewsFeedController : NewsFeedController <MainNewsFeedModelObserver> {
	BOOL waitingUpdate;
	BOOL startedLoading;
	FreshNewsButton* _freshNewsPanel;
	StoryFeedPreviewViewController* _storyPreviewBarViewController;
	NewsFeedPostAndStoryCreationButtonBar* _storyAndPostCreationButtonBar;
	NewsFeedPostCreationButton* _postCreationButton;
	UIView* _newsFeedHeaderContainerView;
	PopupWindow* _vkLivePromoPopupWindow;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MainNewsFeedModel* model;
@property(retain, nonatomic) PopupWindow* vkLivePromoPopupWindow;
@property(retain, nonatomic) UIView* newsFeedHeaderContainerView;
@property(retain, nonatomic) NewsFeedPostCreationButton* postCreationButton;
@property(retain, nonatomic) NewsFeedPostAndStoryCreationButtonBar* storyAndPostCreationButtonBar;
@property(retain, nonatomic) StoryFeedPreviewViewController* storyPreviewBarViewController;
@property(retain, nonatomic) FreshNewsButton* freshNewsPanel;
-(void).cxx_destruct;
-(void)notificationActivity:(id)activity;
-(id)VKMControllerStatsRef;
-(int)VKMLiveAudioContext;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)updateUserActivityDate;
-(void)freshNewsButtonSetOffscreenHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)mainNewsFeedModel:(id)model didChangeDeferredUpdate:(id)update;
-(void)mainNewsFeedModelUnsyncedCountChangedFromValue:(id)value toValue:(id)value2;
-(void)handleMainStoriesUpdatedNotification:(id)notification;
-(void)actionPostPhoto:(id)photo;
-(void)actionCreateLive:(id)live;
-(void)actionVKLiveOpenAppStore:(id)store;
-(void)actionShowLivePromo:(id)promo;
-(void)actionCreateStory:(id)story;
-(void)actionPost:(id)post;
-(void)actionSync:(id)sync;
-(id)postIdentity;
-(void)syncTop;
-(void)syncRecent;
-(void)vkm_scrollToTop;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)model:(id)model updated:(id)updated;
-(void)modelLoadingChanged:(id)changed;
-(void)actionTeaserButton:(id)button;
-(void)updateNewsFeedHeader;
-(void)VKMScrollViewFullscreenUpdated:(BOOL)updated;
-(void)VKMScrollViewFullscreenUpdated;
-(void)scrollToTopAnimated:(BOOL)topAnimated;
-(void)checkFreshNews;
-(void)VKMControllerTouch;
-(void)viewWillLayoutSubviews;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface NewsFeedPostAndStoryCreationButtonBar : XXUnknownSuperclass {
	UIButton* _createPostButton;
	UIButton* _createStoryButton;
	UIButton* _createLiveButton;
	NSArray* _separatorLines;
	int _options;
	int _buttonsCount;
}
@property(readonly, retain, nonatomic) UIButton* createLiveButton;
@property(readonly, retain, nonatomic) UIButton* createStoryButton;
@property(readonly, retain, nonatomic) UIButton* createPostButton;
@property(assign, nonatomic) int buttonsCount;
@property(assign, nonatomic) int options;
@property(retain, nonatomic) NSArray* separatorLines;
+(id)withFrame:(CGRect)frame options:(int)options;
-(void).cxx_destruct;
-(id)createButtonWithTitle:(id)title imageName:(id)name;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame options:(int)options;
@end

__attribute__((visibility("hidden")))
@interface NewsFeedPostCreationButton : HighlightableBackgroundButton {
	VKMImageView* _avatarView;
	UILabel* _label;
	UIButton* _cameraButton;
}
@property(retain, nonatomic) UIButton* cameraButton;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) VKMImageView* avatarView;
-(void).cxx_destruct;
-(void)renderPhotoWithUrl:(id)url;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface HintsSearchModel : SearchModel {
	BOOL _initialAndStale;
	BOOL _initialStale;
	NSString* _qpending;
	NSString* _qfiltered;
	Index* _initial;
	NSDate* _initialUpdated;
}
@property(assign, nonatomic) BOOL initialAndStale;
@property(assign, nonatomic) BOOL initialStale;
@property(retain) NSDate* initialUpdated;
@property(retain) Index* initial;
@property(retain) NSString* qfiltered;
@property(retain, nonatomic) NSString* qpending;
-(void).cxx_destruct;
-(void)filter:(id)filter;
-(void)changeIndex:(id)index withUpdate:(id)update;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)parameters:(id)parameters;
-(id)countString;
-(id)method;
@end

__attribute__((visibility("hidden")))
@interface CountryCallingCodeController : XXUnknownSuperclass {
	CountryCallingCodesIndex* _index;
	id _handlerIsoCode;
}
@property(copy, nonatomic) id handlerIsoCode;
@property(retain, nonatomic) CountryCallingCodesIndex* index;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)actionCancel:(id)cancel;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface HintsSearchDisplayController : VKMLiveSearchController {
	NSDataDetector* _detector;
	VKMenuHintsLinkItem* _link;
	UIView* _transitionalBackgroundView;
}
@property(retain, nonatomic) HintsSearchModel* model;
@property(retain, nonatomic) UIView* transitionalBackgroundView;
@property(retain, nonatomic) VKMenuHintsLinkItem* link;
@property(retain, nonatomic) NSDataDetector* detector;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(id)initWithSearchBar:(id)searchBar contentsController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterBackgroundColor : VKImageFilter {
	UIColor* _color;
}
@property(readonly, assign, nonatomic) UIColor* color;
+(id)color:(id)color;
-(void).cxx_destruct;
-(id)infoString;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(id)initWithColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKFriendRequest : VKDomain {
	BOOL _confirmed;
	BOOL _noHide;
	BOOL _outcoming;
	VKUser* _user;
	NSString* _info;
	VKText* _message;
	NSArray* _mutual;
	VKUser* _from;
	NSDictionary* _photosMap;
}
@property(assign, nonatomic) BOOL outcoming;
@property(assign, nonatomic) BOOL noHide;
@property(assign, nonatomic) BOOL confirmed;
@property(retain, nonatomic) NSDictionary* photosMap;
@property(retain, nonatomic) VKUser* from;
@property(retain, nonatomic) NSArray* mutual;
@property(retain, nonatomic) VKText* message;
@property(retain, nonatomic) NSString* info;
@property(retain, nonatomic) VKUser* user;
-(void).cxx_destruct;
-(id)iden;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKFriendAllSuggestions : VKRenderable <VKTitleableColor> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)titleColor;
-(id)titleFont;
-(float)titleOffsetX;
-(BOOL)disclosure;
-(id)title;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKRating : VKRenderable {
	NSNumber* _stars;
	NSNumber* _reviews;
}
@property(retain, nonatomic) NSNumber* reviews;
@property(retain, nonatomic) NSNumber* stars;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumsInfoToolbar : XXUnknownSuperclass {
	VideoAlbumContext* _context;
	UISegmentedControl* _segmentedControl;
}
@property(retain, nonatomic) UISegmentedControl* segmentedControl;
@property(retain, nonatomic) VideoAlbumContext* context;
+(id)toolbarForAlbumsInfo;
-(void).cxx_destruct;
-(void)handleSegmentActionWithContext:(id)context;
-(id)controllerForSection:(int)section main:(id)main;
-(void)selectSection:(int)section;
-(void)enumerateSegments:(id)segments;
-(void)renderAlbumsContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FriendRequestRenderer : Renderer {
}
@property(retain, nonatomic) VKFriendRequest* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)initialize;
+(id)rendererElements;
-(void)actionHide:(id)hide;
-(void)actionAdd:(id)add;
-(void)actionMutual:(id)mutual;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface AppWidget : VKRenderable {
	int _type;
	NSString* _title;
	NSNumber* _titleCounter;
	NSString* _more;
	id<VKRemoteAction> _titleAction;
	id<VKRemoteAction> _moreAction;
	AppWidgetSportMatch* _match;
	AppWidgetSportMatchGrid* _matchGrid;
	AppWidgetTable* _table;
}
@property(retain, nonatomic) AppWidgetTable* table;
@property(retain, nonatomic) AppWidgetSportMatchGrid* matchGrid;
@property(retain, nonatomic) AppWidgetSportMatch* match;
@property(retain, nonatomic) id<VKRemoteAction> moreAction;
@property(retain, nonatomic) id<VKRemoteAction> titleAction;
@property(retain, nonatomic) NSString* more;
@property(retain, nonatomic) NSNumber* titleCounter;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKEnvironment : XXUnknownSuperclass {
}
+(id)session;
+(id)startUrl;
+(BOOL)isTesting;
+(id)envData;
@end

__attribute__((visibility("hidden")))
@interface ReportAction : Action <DomainEvent> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(int)domainType;
@end

__attribute__((visibility("hidden")))
@interface ReportContentAction : ReportAction {
}
@property(retain, nonatomic) VKIdentity* target;
-(void)runInContext:(id)context;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface ReportAdAction : ReportAction {
}
@property(retain, nonatomic) VKFeedAdsItem* target;
-(void)runInContext:(id)context;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface ReportWebAppAction : ReportAction {
}
@property(retain, nonatomic) WebAppTarget* target;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMenuSubtitleItem : VKDomainDerived {
	BOOL _verified;
	NSString* _subtitle;
}
@property(assign, nonatomic) BOOL verified;
@property(retain, nonatomic) NSString* subtitle;
@property(retain, nonatomic) VKDomain<VKSource>* domain;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKMenuHintItem : VKMenuSubtitleItem {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKMenuBirthdayItem : VKMenuHintItem {
	BOOL _today;
}
@property(assign, nonatomic) BOOL today;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKMenuHintsLinkItem : VKMenuSubtitleItem {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKMenuAdvancedSearchItem : VKMenuSubtitleItem {
	NSString* _searchString;
}
@property(retain, nonatomic) NSString* searchString;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface MenuSubtitleCell : VKMCell {
	VKMImageView* _image;
	UILabel* _name;
	UILabel* _status;
	UIButton* _online;
	UIImageView* _verified;
}
@property(retain, nonatomic) VKMenuSubtitleItem* domain;
@property(retain, nonatomic) UIImageView* verified;
@property(readonly, retain, nonatomic) UIButton* online;
@property(readonly, retain, nonatomic) UILabel* status;
@property(readonly, retain, nonatomic) UILabel* name;
@property(readonly, retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(void)dealloc;
-(float)photoSize;
-(float)photoPaddingTop;
-(UIEdgeInsets)labelEdgeInsets;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MenuHintsCell : MenuSubtitleCell {
}
+(void)prerender:(id)prerender;
-(void)layoutSubviews;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(UIEdgeInsets)labelEdgeInsets;
@end

__attribute__((visibility("hidden")))
@interface MenuBirthdayCell : MenuHintsCell {
	UIButton* _giftButton;
}
@property(retain, nonatomic) UIButton* giftButton;
+(void)prerender:(id)prerender;
+(void)initialize;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)actionSendGift:(id)gift;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(float)photoSize;
-(float)photoPaddingTop;
-(UIEdgeInsets)labelEdgeInsets;
@end

__attribute__((visibility("hidden")))
@interface MenuHintsLinkCell : MenuSubtitleCell {
}
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface VKMenuAdvancedSearchCell : MenuSubtitleCell {
}
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface ModelActionPollVote : ModelAction {
	BOOL _board;
	NSNumber* _answer;
	VKPoll* _result;
}
@property(retain, nonatomic) VKPoll* result;
@property(retain, nonatomic) NSNumber* answer;
@property(assign, nonatomic) BOOL board;
@property(retain, nonatomic) VKIdentity* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)actionShowsSuccessConfirmation;
@end

__attribute__((visibility("hidden")))
@interface ModelActionPollEdit : ModelActionEdit {
	VKPoll* _original;
	VKPoll* _result;
}
@property(retain, nonatomic) VKPoll* result;
@property(retain, nonatomic) VKPoll* original;
@property(retain, nonatomic) VKPoll* target;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ExtrasTabBarItem : XXUnknownSuperclass {
	BOOL _enabled;
	BOOL _shouldAnimateBadge;
	NSString* _badgeValue;
	NSString* _title;
	NSString* _customClassTag;
	UIImage* _image;
	UIImage* _selectedImage;
	VKStoreProductSticker* _product;
}
@property(retain, nonatomic) VKStoreProductSticker* product;
@property(retain, nonatomic) UIImage* selectedImage;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) BOOL shouldAnimateBadge;
@property(assign, nonatomic) BOOL enabled;
@property(retain, nonatomic) NSString* customClassTag;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* badgeValue;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ExtrasTabBar : XXUnknownSuperclass <UICollectionViewDataSource, UICollectionViewDelegate> {
	id<ExtrasTabBarDelegate> _delegate;
	NSArray* _items;
	ExtrasTabBarItem* _selectedItem;
	UICollectionView* _collectionView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ExtrasTabBarItem* selectedItem;
@property(retain, nonatomic) NSArray* items;
@property(assign, nonatomic) __weak id<ExtrasTabBarDelegate> delegate;
@property(retain, nonatomic) UICollectionView* collectionView;
-(void).cxx_destruct;
-(BOOL)collectionView:(id)view shouldSelectItemAtIndexPath:(id)indexPath;
-(void)setSelectedItem:(id)item animated:(BOOL)animated;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)scrollToIndexPath:(id)indexPath animated:(BOOL)animated;
-(void)scrollToItem:(id)item animated:(BOOL)animated;
-(void)layoutSubviews;
-(BOOL)shouldSelectItem:(id)item;
-(id)initWithFrame:(CGRect)frame shouldBlur:(BOOL)blur;
@end

__attribute__((visibility("hidden")))
@interface VKMNeedValidationSiteAction : VKMSiteAction {
	NSURL* _redirect_url;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSURL* redirect_url;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)complete:(int)complete userId:(id)anId token:(id)token;
-(void)cancel;
-(id)targetURL;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SnippetComponent : Component5 {
}
+(id)futureSnippet:(id)snippet completion:(id)completion;
+(id)snippet:(id)snippet type:(int)type;
+(id)snippet:(id)snippet;
+(id)bigSnippet:(id)snippet;
+(id)smallSnippet:(id)snippet;
+(id)descriptionForSnippet:(id)snippet type:(int)type;
+(id)descriptionForSmallSnippet:(id)smallSnippet;
+(id)descriptionForBigSnippet:(id)bigSnippet;
+(id)descriptionComponentForRating:(id)rating;
+(id)buttonComponent:(id)component;
+(id)snippetButtonWithText:(id)text handler:(id)handler;
+(id)separatedTextComponentWithTitle:(id)title description:(id)description;
+(id)combinedTextComponentWithTitle:(id)title description:(id)description numberOfLines:(unsigned)lines;
+(id)combinedTextWithTitle:(id)title description:(id)description styleSheet:(id)sheet;
+(id)descriptionTextStyleWithStyleSheet:(id)styleSheet;
+(id)titleTextStyleWithStyleSheet:(id)styleSheet;
+(id)tapableSnippetComponent:(id)component handler:(id)handler;
+(id)shadowDecoratedComponent:(id)component;
+(id)leftSnippetDecoratedPhotoComponent:(id)component;
+(id)topSnippetDecoratedPhotoComponent:(id)component;
+(id)snippetDecoratedComponentWithBackground:(id)background;
+(id)snippetDecoratedComponent:(id)component;
+(id)rightSnippetDecoratedComponent:(id)component;
+(id)leftSnippetDecoratedComponent:(id)component;
+(id)bottomSnippetDecoratedComponent:(id)component;
+(id)topSnippetDecoratedComponent:(id)component;
+(id)_snippetDecoratedComponent:(id)component image:(id)image;
@end

__attribute__((visibility("hidden")))
@interface VKDB : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* _queue;
	NSNumber* _oid;
	MOSQLite* _db;
	NSDictionary* _states;
}
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(retain, nonatomic) MOSQLite* db;
@property(retain, nonatomic) NSNumber* oid;
@property(retain) NSDictionary* states;
-(void)friendLoadUpcomingBirthdays:(id)birthdays;
-(void)friendList:(id)list add:(BOOL)add user:(id)user;
-(void)friendUpsert:(id)upsert;
-(void)friendDelete:(id)aDelete;
-(void)friendLoadBirthdays:(id)birthdays;
-(void)friendLoad:(id)load list:(id)list;
-(void)friendReset:(id)reset list:(id)list;
-(void)flistUpsert:(id)upsert;
-(void)flistDelete:(id)aDelete;
-(void)flistLoad:(id)load;
-(void)flistReset:(id)reset;
-(void)_usersAdd:(id)add;
-(BOOL)validateFriendsCount:(int)count;
-(BOOL)stateFriendsFresh;
-(int)state:(int)state;
-(BOOL)stateMissing:(int)missing;
-(BOOL)state:(int)state dateMissingOrOlder:(int)older;
-(void)_stateUpdateDateNow:(int)now;
-(void)_stateUpdate:(int)update value:(int)value;
-(BOOL)stateLoaded;
-(void)_notify:(id)notify;
-(void)logSchema;
-(void)load;
-(BOOL)_schemaApply;
-(BOOL)_migrate;
-(void)dealloc;
-(id)initWithPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppRequest : VKDomain {
	BOOL _unread;
	NSNumber* _app_id;
	int _type;
	NSNumber* _from_id;
	NSString* _text;
	NSString* _key;
	NSString* _name;
	unsigned _date;
	VKAPIApp* _app;
	VKUser* _user;
}
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) VKAPIApp* app;
@property(assign, nonatomic, getter=isRead) BOOL unread;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* key;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSNumber* from_id;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSNumber* app_id;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppRequestsAll : VKRenderable {
	NSNumber* _appID;
	unsigned _count;
	int _type;
}
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) unsigned count;
@property(readonly, retain, nonatomic) NSNumber* appID;
+(id)allRequestsWithCount:(unsigned)count appID:(id)anId type:(int)type;
+(id)allInvitesWithCount:(unsigned)count appID:(id)anId;
+(id)allRequestsWithCount:(unsigned)count appID:(id)anId;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ProfileInfoModel : ItemModel {
	VKPhoto* _profilePhoto;
	NSString* _photoBig;
}
@property(retain, nonatomic) NSString* photoBig;
@property(retain, nonatomic) VKPhoto* profilePhoto;
@property(retain, nonatomic) VKProfileInfo* item;
+(id)profileInfoRequest;
-(void).cxx_destruct;
-(id)profilePhotoURL;
-(void)resetWithInfo:(id)info;
-(void)updateProfilePhoto:(id)photo;
-(id)process:(id)process context:(id)context;
-(void)readPhotoData:(id)data;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMSiteAction : XXUnknownSuperclass <UIWebViewDelegate> {
	SiteActionController* _weakController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) SiteActionController* weakController;
+(BOOL)handledBlankRedirect:(id)redirect block:(id)block;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)cancel;
-(id)targetURL;
@end

__attribute__((visibility("hidden")))
@interface SiteActionController : VKMController <UIWebViewDelegate> {
	VKMSiteAction* _action;
	UIWebView* _webView;
	UIScrollView* _webScrollView;
	NSURL* _targetURL;
	UILabel* _errorLabel;
	UIActivityIndicatorView* _activityView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIWebView* webView;
@property(retain, nonatomic) VKMSiteAction* action;
@property(retain, nonatomic) UIActivityIndicatorView* activityView;
@property(retain, nonatomic) UILabel* errorLabel;
@property(retain, nonatomic) NSURL* targetURL;
@property(retain, nonatomic) UIScrollView* webScrollView;
-(void).cxx_destruct;
-(void)actionCancel:(id)cancel;
-(void)close;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)completeURL:(id)url;
-(void)loadTarget:(id)target;
-(void)VKMControllerChromeInsetsApply;
-(void)viewWillAppear:(BOOL)view;
-(void)configureLeftBarButtonItem;
-(void)configureNavigationItemTitleView;
-(void)viewDidLoad;
-(void)clear;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMEditableController : VKMLiveController {
}
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterOverlayColor : VKImageFilter {
	UIColor* _color;
}
@property(readonly, assign, nonatomic) UIColor* color;
+(id)color:(id)color;
-(void).cxx_destruct;
-(id)infoString;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(id)initWithColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface Component5HostView : XXUnknownSuperclass <Component5StateListener> {
	Component5* _component;
	Component5Node* _node;
	id<VKMNavDelegate> _navDelegate;
	CGPoint _componentOrigin;
	UIEdgeInsets _componentInsets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) UIEdgeInsets componentInsets;
@property(assign, nonatomic) CGPoint componentOrigin;
@property(assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
@property(retain, nonatomic) Component5Node* node;
@property(retain, nonatomic) Component5* component;
-(void).cxx_destruct;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)setFrame:(CGRect)frame;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)nodeEnsure;
-(CGRect)nodeRectForBounds:(CGRect)bounds;
-(CGRect)nodeRect;
-(id)nodeWithSize:(CGSize)size;
-(void)layoutSubviews;
-(void)setNeedsUpdateNode;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKP2PViewController : VKMLiveController {
}
@property(retain, nonatomic) VKP2PListModel* model;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface ModelActionSetNewsfeedMode : ModelAction {
	int _mode;
}
@property(readonly, assign, nonatomic) int mode;
+(int)domainType;
+(id)mode:(int)mode;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionSetNewsfeedSections : ModelAction {
	NSArray* _sections;
}
@property(readonly, copy, nonatomic) NSArray* sections;
+(int)domainType;
+(id)sections:(id)sections;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TouchHighlightButton : XXUnknownSuperclass {
	BOOL _highlightsTouches;
	BOOL _animated;
	float _highlightStraight;
	UIEdgeInsets _hitTestAreaExtent;
}
@property(assign, nonatomic) BOOL animated;
@property(assign, nonatomic) UIEdgeInsets hitTestAreaExtent;
@property(assign, nonatomic) float highlightStraight;
@property(assign, nonatomic) BOOL highlightsTouches;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(CGSize)intrinsicContentSize;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)updateHighlight;
-(void)updateHighlight:(BOOL)highlight animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface TouchHighlightControl : XXUnknownSuperclass {
	BOOL _animated;
}
@property(assign, nonatomic) BOOL animated;
-(void)rebuildAccessibility;
-(void)layoutSubviews;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)updateHighlight;
-(void)updateHighlight:(BOOL)highlight animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MOSQLite : XXUnknownSuperclass {
	sqlite3* _db;
	NSString* _path;
}
@property(readonly, copy, nonatomic) NSString* path;
-(void).cxx_destruct;
-(BOOL)batchArray:(id)array writer:(id)writer sql:(id)sql;
-(BOOL)batch:(id)batch writer:(id)writer sql:(id)sql;
-(id)queryArray:(Class)array reader:(id)reader ctx:(void*)ctx sql:(id)sql;
-(BOOL)query:(id)query class:(Class)aClass reader:(id)reader ctx:(void*)ctx sql:(id)sql;
-(BOOL)query:(id)query sql:(id)sql;
-(int)queryInt:(id)int;
-(BOOL)query:(id)query;
-(void)transaction:(id)transaction;
-(BOOL)batch:(id)batch sql:(id)sql;
-(BOOL)query:(id)query sql:(id)sql params:(void*)params;
-(BOOL)run:(id)run params:(void*)params exec:(id)exec;
-(void)_logLastError:(id)error;
-(int)changes;
-(BOOL)hadError;
-(int)lastErrorCode;
-(id)lastErrorMessage;
-(BOOL)ready;
-(BOOL)close;
-(BOOL)open;
-(sqlite3*)db;
-(id)initWithPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface AudioDashboardModelContext : ListModelContext {
	BOOL _canCreatePlaylists;
	NSArray* _playlists;
}
@property(retain, nonatomic) NSArray* playlists;
@property(assign, nonatomic) BOOL canCreatePlaylists;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface AudioDashboardModel : ListModel {
	AudioPlaylistsInlineModel* _playlistsModel;
}
@property(retain, nonatomic) AudioPlaylistsInlineModel* playlistsModel;
@property(retain, nonatomic) AudioDashboardModelContext* lastContext;
+(id)with:(id)with;
-(void).cxx_destruct;
-(void)fillActionsForBuilder:(id)builder audio:(id)audio;
-(void)handleDeleteAudio:(id)audio :(id)arg2;
-(void)handleAddAudiosToPlaylist:(id)playlist :(id)arg2;
-(void)handleAddAudio:(id)audio :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)handlePlaylistsModelUpdated:(id)updated;
-(id)createShuffleButton;
-(id)createAddPlaylistButton;
-(id)createPlaylistsDomain;
-(int)resultForRequestResponse:(id)requestResponse;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)process:(id)process;
-(id)countKey;
-(id)playlists;
-(id)spawnContext:(id)context;
-(void)setOwner:(id)owner;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKFriend : VKUser {
	int _byear;
	int _bmonth;
	int _bday;
}
@property(assign, nonatomic) int bday;
@property(assign, nonatomic) int bmonth;
@property(assign, nonatomic) int byear;
+(void)load;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFriendBday : VKDomainDerived {
	BOOL _today;
	StatContext* _stat_context;
}
@property(assign, nonatomic) BOOL today;
@property(retain, nonatomic) StatContext* stat_context;
@property(retain, nonatomic) VKFriend* domain;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface ChatEditItemComponent : XXUnknownSuperclass {
}
+(float)cellContentInset;
+(id)componentForItem:(id)item context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StoreStickerItemCell : VKMCell <VKMImageLoaderDelegate, VKMNavProxyDelegate, StoreProductItemCell> {
	VKMImageLoader* _loader;
	UIImageView* _indicatorNew;
	StoreStatusButton* _button;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKStoreStockItem* domain;
@property(retain, nonatomic) StoreStatusButton* button;
@property(retain, nonatomic) UIImageView* indicatorNew;
@property(retain, nonatomic) VKMImageLoader* loader;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(id)currentNavDelegate;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(float)centerOffsetX;
-(float)imageWidth;
-(float)imageSize;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(void)loader:(id)loader complete:(id)complete;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StoreVotesItemCell : StoreStickerItemCell <StoreProductItemCell> {
	float _fixedButtonWidth;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) float fixedButtonWidth;
+(id)purchaseText;
+(void)prerender:(id)prerender;
-(float)centerOffsetX;
-(float)imageWidth;
-(float)imageSize;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKAudioPlaylistGenre : VKDomain {
	NSString* _name;
}
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FriendsBDaysModel : LoadingModel {
	StatContext* _statContext;
}
@property(retain, nonatomic) StatContext* statContext;
+(id)indexFromSortedFriends:(id)sortedFriends statContext:(id)context;
-(void).cxx_destruct;
-(id)withStatContext:(id)statContext;
-(void)cachedIndexForContext:(id)context withCompletion:(id)completion;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AdsAppSliderModel : Model {
}
-(void)viewed:(id)viewed;
-(BOOL)requireViewed;
@end

__attribute__((visibility("hidden")))
@interface AdsAppSliderCollectionViewComponentState : UICollectionViewComponentState {
}
@end

__attribute__((visibility("hidden")))
@interface AdsAppSliderCollectionViewComponent : UICollectionViewModelComponent {
}
@property(retain, nonatomic) AdsAppSliderCollectionViewComponentState* state;
@end

__attribute__((visibility("hidden")))
@interface AdsAppSliderCollectionViewComponentController : UICollectionViewModelComponentController {
}
@property(retain, nonatomic) AdsAppSliderCollectionViewComponent* component;
+(id)createLayout;
+(Class)modelClass;
-(BOOL)requiresScreenBounds;
@end

__attribute__((visibility("hidden")))
@interface AdsAppSliderComponent : Component5 {
}
@property(readonly, assign, nonatomic) VKFeedAds* ads;
+(id)ads:(id)ads;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FriendBdayCell : VKMCell {
	int now_year;
	int now_month;
	int now_day;
	VKMImageView* _image;
	UILabel* _name;
	UILabel* _status;
	UIButton* _giftButton;
	StatContext* _stat_context;
}
@property(retain, nonatomic) StatContext* stat_context;
@property(retain, nonatomic) VKFriend* domain;
@property(retain, nonatomic) UIButton* giftButton;
@property(retain, nonatomic) UILabel* status;
@property(retain, nonatomic) UILabel* name;
@property(retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)actionSendGift:(id)gift;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenTransitionManager : XXUnknownSuperclass <UIGestureRecognizerDelegate, UIViewControllerTransitioningDelegate> {
	UIViewController<PanGestureDrivenDismissableTransitionViewController>* _panGestureDismissableViewController;
	UIPanGestureRecognizer* _dismissTransitionPanGestureRecognizer;
	StoryFromFullscreenDismissTransitionAnimationController* _dismissTransitionAnimationController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) StoryFromFullscreenDismissTransitionAnimationController* dismissTransitionAnimationController;
@property(retain, nonatomic) UIPanGestureRecognizer* dismissTransitionPanGestureRecognizer;
@property(assign, nonatomic) __weak UIViewController<PanGestureDrivenDismissableTransitionViewController>* panGestureDismissableViewController;
-(void).cxx_destruct;
-(void)cleanUpDismissTransitionPanGestureRecognizer;
-(void)cleanUpAfterInteractiveDismissTransitionCompletedFinished:(BOOL)finished;
-(void)finishInteractiveDismissTransition;
-(void)cancelInteractiveDismissTransition;
-(void)beginInteractiveDismissTransition;
-(float)dismissInteractiveTransitionProgressFromPanGestureRecognizer:(id)panGestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)handleDismissTransitionPanGesture:(id)gesture;
-(void)setupInteractiveDismissTransitionForStoryFullscreenViewController:(id)storyFullscreenViewController;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StoryToFullscreenTransitionAnimationController : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	double _animationDuration;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) double animationDuration;
-(id)storyPageViewControllerFromContext:(id)context;
-(void)performDefaultTransition:(id)transition;
-(void)performTransitionFromFeedPreviewCell:(id)feedPreviewCell context:(id)context;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

__attribute__((visibility("hidden")))
@interface StoryFromFullscreenDismissTransitionAnimationController : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning, UIViewControllerInteractiveTransitioning> {
	BOOL _interactive;
	BOOL _useFallbackAnimation;
	BOOL _finishTransitionAsSoonAsStarted;
	BOOL _cancelTransitionAsSoonAsStarted;
	float _percentComplete;
	StoryFeedPreviewViewController* _storyFeedPreviewVC;
	StoryFeedPreviewAvatarCell* _targetCell;
	id<UIViewControllerContextTransitioning> _interactiveTransitionContext;
	UIView* _backdrop;
	id _transitionCompletionBlock;
	double _transitionDuration;
}
@property(readonly, assign, nonatomic) BOOL wantsInteractiveStart;
@property(readonly, assign, nonatomic) int completionCurve;
@property(readonly, assign, nonatomic) float completionSpeed;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL interactive;
@property(copy, nonatomic) id transitionCompletionBlock;
@property(assign, nonatomic) BOOL cancelTransitionAsSoonAsStarted;
@property(assign, nonatomic) BOOL finishTransitionAsSoonAsStarted;
@property(retain, nonatomic) UIView* backdrop;
@property(retain, nonatomic) id<UIViewControllerContextTransitioning> interactiveTransitionContext;
@property(retain, nonatomic) StoryFeedPreviewAvatarCell* targetCell;
@property(retain, nonatomic) StoryFeedPreviewViewController* storyFeedPreviewVC;
@property(assign, nonatomic) BOOL useFallbackAnimation;
@property(assign, nonatomic) float percentComplete;
@property(assign, nonatomic) double transitionDuration;
-(void).cxx_destruct;
-(id)toViewControllerForContext:(id)context;
-(id)storyPageViewControllerFromContext:(id)context;
-(void)performFallbackTransitionWithContext:(id)context completion:(id)completion;
-(void)performTransitionWithContext:(id)context completion:(id)completion;
-(void)setupWithTransitionContext:(id)transitionContext;
-(void)finishInteractiveTransitionWithCompletion:(id)completion;
-(void)cancelInteractiveTransitionWithCompletion:(id)completion;
-(void)updateInteractiveTransition:(float)transition;
-(void)startInteractiveTransition:(id)transition;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LookupProcessIndicatorLayer : XXUnknownSuperclass {
	BOOL _isAnimating;
	unsigned _circlesCount;
	float _arcWidth;
	float _arcDistance;
	float _centerCircleRadius;
	float _selectedCircleIndex;
}
@property(assign, nonatomic) float centerCircleRadius;
@property(assign, nonatomic) float arcDistance;
@property(assign, nonatomic) float arcWidth;
@property(assign, nonatomic) unsigned circlesCount;
@property(assign, nonatomic) float selectedCircleIndex;
+(BOOL)needsDisplayForKey:(id)key;
-(void)refreshAnimation;
-(BOOL)isAnimating;
-(BOOL)hasAnimation;
-(void)stopAnimating;
-(void)startAnimating;
-(void)drawInContext:(CGContextRef)context;
@end

__attribute__((visibility("hidden")))
@interface LookupProcessIndicatorView : XXUnknownSuperclass {
	LookupProcessIndicatorLayer* _circlesLayer;
}
@property(assign, nonatomic) float centerCircleRadius;
@property(assign, nonatomic) float arcDistance;
@property(assign, nonatomic) float arcWidth;
@property(assign, nonatomic) unsigned circlesCount;
@property(retain, nonatomic) LookupProcessIndicatorLayer* circlesLayer;
-(void).cxx_destruct;
-(BOOL)isAnimating;
-(void)stopAnimating;
-(void)startAnimating;
-(void)willMoveToWindow:(id)window;
-(void)refreshAnimation;
-(void)layoutSublayersOfLayer:(id)layer;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MenuNotificationCell : TitleMenuCell {
}
+(id)menuNotificationCell:(id)cell;
-(void)addDisclosureButton;
@end

__attribute__((visibility("hidden")))
@interface VKOnlineStore : XXUnknownSuperclass {
	NSSet* _online;
	NSSet* _online_mobile;
	NSDate* _date;
}
@property(retain) NSDate* date;
@property(retain) NSSet* online_mobile;
@property(retain) NSSet* online;
-(void).cxx_destruct;
-(void)applyEnumerator:(id)enumerator;
-(BOOL)fresh;
-(void)resetOnline:(id)online mobile:(id)mobile;
@end

__attribute__((visibility("hidden")))
@interface NotificationEvent : XXUnknownSuperclass {
	BOOL _sound;
	BOOL _vibration;
	BOOL _alert;
	NSString* _imageURL;
	NSString* _image;
	NSAttributedString* _atext;
	NSString* _alertStyleStatsKey;
}
@property(retain, nonatomic) NSString* alertStyleStatsKey;
@property(assign, nonatomic) BOOL alert;
@property(assign, nonatomic) BOOL vibration;
@property(assign, nonatomic) BOOL sound;
@property(copy, nonatomic) NSAttributedString* atext;
@property(copy, nonatomic) NSString* image;
@property(copy, nonatomic) NSString* imageURL;
-(void).cxx_destruct;
-(id)controlerForEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface NotificationSpecialRootController : XXUnknownSuperclass {
}
-(void)loadView;
-(id)targetChildController;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(id)childViewControllerForStatusBarHidden;
-(id)childViewControllerForStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface ProfileCoverImageView : VKMImageView {
	UIImageView* _scrimView;
	UIView* _overlayView;
}
@property(retain, nonatomic) UIView* overlayView;
@property(retain, nonatomic) UIImageView* scrimView;
-(void).cxx_destruct;
-(void)changeImage:(id)image animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ProfileAppButton : TouchHighlightButton {
}
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface ProfileView : XXUnknownSuperclass {
	BOOL _shortMode;
	BOOL _skipAnimation;
	BOOL _cover;
	UILabel* _name;
	ProfileCoverImageView* _coverView;
	PhotoStreamController* _stream;
	VKProfileContentBlockView* _mainSectionView;
	VKMImageView* _photo;
	UIImageView* _verified;
	UIButton* _buttonInfo;
	UILabel* _subtitle;
	UILabel* _status;
	UIButton* _buttonMessage;
	UIButton* _buttonStatus;
	NSMutableArray* _blocks;
	UIButton* _buttonPost;
	UIButton* _buttonPhoto;
	UIButton* _buttonPlace;
	UIButton* _buttonSuggest;
	UIScrollView* _blocksScroll;
	UIButton* _buttonPhotos;
	UIView* _separatorBlocks;
	UIView* _separatorPhotos;
	UIView* _separatorActons;
	UIView* _footer;
	UIView* _separatorAppButton;
	UIButton* _appButton;
	Component5HostView* _appWidgetView;
	UIView* _separatorWidgetButton;
	UIView* _separatorMarket;
	UIView* _temporaryPostPanelSeparator;
}
@property(retain, nonatomic) VKProfileContentBlockView* mainSectionView;
@property(retain, nonatomic) PhotoStreamController* stream;
@property(retain, nonatomic) ProfileCoverImageView* coverView;
@property(retain, nonatomic) UILabel* name;
@property(assign, nonatomic) BOOL cover;
@property(assign, nonatomic) BOOL skipAnimation;
@property(assign, nonatomic) BOOL shortMode;
@property(retain, nonatomic) UIView* temporaryPostPanelSeparator;
@property(retain, nonatomic) UIView* separatorMarket;
@property(retain, nonatomic) UIView* separatorWidgetButton;
@property(retain, nonatomic) Component5HostView* appWidgetView;
@property(retain, nonatomic) UIButton* appButton;
@property(retain, nonatomic) UIView* separatorAppButton;
@property(retain, nonatomic) UIView* footer;
@property(retain, nonatomic) UIView* separatorActons;
@property(retain, nonatomic) UIView* separatorPhotos;
@property(retain, nonatomic) UIView* separatorBlocks;
@property(retain, nonatomic) UIButton* buttonPhotos;
@property(retain, nonatomic) UIScrollView* blocksScroll;
@property(retain, nonatomic) UIButton* buttonSuggest;
@property(retain, nonatomic) UIButton* buttonPlace;
@property(retain, nonatomic) UIButton* buttonPhoto;
@property(retain, nonatomic) UIButton* buttonPost;
@property(retain, nonatomic) NSMutableArray* blocks;
@property(retain, nonatomic) UIButton* buttonStatus;
@property(retain, nonatomic) UIButton* buttonMessage;
@property(retain, nonatomic) UILabel* status;
@property(retain, nonatomic) UILabel* subtitle;
@property(retain, nonatomic) UIButton* buttonInfo;
@property(retain, nonatomic) UIImageView* verified;
@property(retain, nonatomic) VKMImageView* photo;
-(void).cxx_destruct;
-(void)actionProfileAppButton:(id)button;
-(void)actionProfileViewAllPhotos:(id)photos;
-(void)actionPostPlace:(id)place;
-(void)actionPostPhoto:(id)photo;
-(void)actionPost:(id)post;
-(void)actionBlock:(id)block;
-(void)actionStatus:(id)status;
-(void)actionMessage:(id)message;
-(void)actionInfo:(id)info;
-(void)actionProfilePhoto:(id)photo;
-(id)hostController;
-(float)renderProfile:(id)profile user:(BOOL)user owner:(BOOL)owner mainSection:(id)section appWidget:(id)widget;
-(float)renderProfile:(id)profile user:(BOOL)user owner:(BOOL)owner;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKVideoPlayerItem : VKDomain {
	VKLiveVideoSettings* _liveVideoSettings;
	VKVideo* _video;
}
@property(retain, nonatomic) VKVideo* video;
@property(retain, nonatomic) VKLiveVideoSettings* liveVideoSettings;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKVideoPlayerItemContext : XXUnknownSuperclass {
	VKIdentity* _videoIden;
}
@property(readonly, assign, nonatomic) VKIdentity* videoIden;
+(id)contextWithVideoIden:(id)videoIden;
-(void).cxx_destruct;
-(id)initVideoIden:(id)iden;
@end

__attribute__((visibility("hidden")))
@interface NHandlerSound : XXUnknownSuperclass <NotificationHandler> {
	NSDate* _last;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDate* last;
-(void).cxx_destruct;
-(void)clearImmediatly;
-(void)handle:(id)handle;
@end

__attribute__((visibility("hidden")))
@interface ColorPaletteView : XXUnknownSuperclass <UICollectionViewDataSource, UICollectionViewDelegate> {
	BOOL _outlineWhiteColor;
	id<ColorPaletteViewDelegate> _delegate;
	NSArray* _colors;
	UICollectionView* _collectionView;
	NSIndexPath* _selectedIndexPath;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL outlineWhiteColor;
@property(assign, nonatomic) int selectedIndex;
@property(copy, nonatomic) NSArray* colors;
@property(assign, nonatomic) __weak id<ColorPaletteViewDelegate> delegate;
@property(retain, nonatomic) NSIndexPath* selectedIndexPath;
@property(retain, nonatomic) UICollectionView* collectionView;
-(void).cxx_destruct;
-(BOOL)collectionView:(id)view shouldSelectItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(void)setSelectedIndexPath:(id)path animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame colors:(id)colors;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ColorPaletteSwatchCell : XXUnknownSuperclass {
	UIColor* _color;
	UIImageView* _circleImageView;
	UIImageView* _borderImageView;
	UIImageView* _selectionIndicatorImageView;
}
@property(copy, nonatomic) UIColor* color;
@property(retain, nonatomic) UIImageView* selectionIndicatorImageView;
@property(retain, nonatomic) UIImageView* borderImageView;
@property(retain, nonatomic) UIImageView* circleImageView;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected;
-(void)updateOutlineWhiteColor:(BOOL)color;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StatsManager : XXUnknownSuperclass {
	id<StatsManagerDelegate> _delegate;
	Class _dataClass;
	id<StatsData> _currentData;
	id<StatsData> _pendingData;
	id<StatsData> _nextData;
}
@property(assign, nonatomic) __weak id<StatsManagerDelegate> delegate;
@property(retain, nonatomic) id<StatsData> nextData;
@property(retain, nonatomic) id<StatsData> pendingData;
@property(retain, nonatomic) id<StatsData> currentData;
@property(retain, nonatomic) Class dataClass;
-(void).cxx_destruct;
-(BOOL)isPending;
-(void)submittedData:(id)data success:(BOOL)success;
-(id)collectData;
-(void)registerEvent:(id)event batch:(BOOL)batch;
-(id)initWithDataClass:(Class)dataClass;
@end

__attribute__((visibility("hidden")))
@interface BasicStatsData : XXUnknownSuperclass <PersistentStatsData> {
	NSMutableArray* _events;
	NSMutableDictionary* _batchedEvents;
	NSMutableDictionary* _batchedKeys;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableDictionary* batchedKeys;
@property(retain, nonatomic) NSMutableDictionary* batchedEvents;
@property(retain, nonatomic) NSMutableArray* events;
-(void).cxx_destruct;
-(void)loadFromJSONRepresentation:(id)jsonrepresentation;
-(id)request;
-(id)JSONRepresentation;
-(BOOL)hasEvents;
-(void)registerEvent:(id)event batch:(BOOL)batch;
-(int)batchLimit;
-(int)eventsLimit;
-(id)batchKey;
-(id)copyWithZone:(NSZone*)zone;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface PersistentStatsManager : StatsManager {
	BOOL dirty;
	NSURL* _url;
}
@property(retain, nonatomic) NSURL* url;
-(void).cxx_destruct;
-(void)notificaitonResignActive:(id)active;
-(void)persistIfNeeded;
-(void)submittedData:(id)data success:(BOOL)success;
-(void)registerEvent:(id)event batch:(BOOL)batch;
-(void)dealloc;
-(id)initWithDataClass:(Class)dataClass fileURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface NHandlerVibration : XXUnknownSuperclass <NotificationHandler> {
	NSDate* _last;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDate* last;
-(void).cxx_destruct;
-(void)clearImmediatly;
-(void)handle:(id)handle;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorOptionSimple : XXUnknownSuperclass <VKSelectorOption> {
	NSString* _title;
	UIImage* _icon;
	id _userInfo;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id userInfo;
@property(retain, nonatomic) UIImage* icon;
@property(retain, nonatomic) NSString* title;
+(id)optionWithTitle:(id)title icon:(id)icon;
+(id)optionWithTitle:(id)title icon:(id)icon userInfo:(id)info;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title icon:(id)icon userInfo:(id)info;
@end

__attribute__((visibility("hidden")))
@interface LinkAttachmentView : AttachmentView {
	ImageAttachmentView* _imageView;
	NSNumber* _userId;
}
@property(retain, nonatomic) ImageAttachmentView* imageView;
@property(readonly, retain, nonatomic) NSNumber* userId;
-(void).cxx_destruct;
-(id)attachment;
-(void)render:(id)render reuse:(double)reuse;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setSelected:(BOOL)selected;
-(id)initWithFrame:(CGRect)frame currentUserId:(id)anId;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NDialogEvent : NotificationEvent {
	NSNumber* _dialogId;
}
@property(readonly, retain, nonatomic) NSNumber* dialogId;
+(id)eventWithDialogId:(id)dialogId;
-(void).cxx_destruct;
-(id)controlerForEvent:(id)event;
-(id)eventText:(id)text;
-(id)eventSource:(id)source;
-(void)renderWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface NEventMessage : NDialogEvent {
	VKMessage* _message;
}
@property(readonly, retain, nonatomic) VKMessage* message;
+(id)eventWithMessage:(id)message inDialog:(id)dialog;
-(void).cxx_destruct;
-(id)eventText:(id)text;
-(id)eventSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface NEventDialogError : NDialogEvent {
	NSString* _text;
}
@property(readonly, retain, nonatomic) NSString* text;
+(id)eventWithText:(id)text inDialog:(id)dialog;
-(void).cxx_destruct;
-(id)eventText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface SelectDisabledTextView : XXUnknownSuperclass {
}
-(BOOL)canBecomeFirstResponder;
@end

__attribute__((visibility("hidden")))
@interface StoreStockItemView : XXUnknownSuperclass <MOScrollPagingMediatorDelegate, UIScrollViewDelegate> {
	UIEdgeInsets textViewInsets;
	id<StoreStockItemViewDelegate> _stockViewDelegate;
	VKStoreStockItem* _item;
	UIView* _headerView;
	VKMImageView* _backgroundImageView;
	MOScrollPagingMediator* _paging;
	NSArray* _pages;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	StoreStatusButton* _statusButton;
	UITextView* _textView;
	UIView* _sendGiftButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIView* sendGiftButton;
@property(retain, nonatomic) UITextView* textView;
@property(retain, nonatomic) StoreStatusButton* statusButton;
@property(retain, nonatomic) UILabel* subtitleLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) NSArray* pages;
@property(retain, nonatomic) MOScrollPagingMediator* paging;
@property(retain, nonatomic) VKMImageView* backgroundImageView;
@property(retain, nonatomic) UIView* headerView;
@property(retain, nonatomic) VKStoreStockItem* item;
@property(assign, nonatomic) __weak id<StoreStockItemViewDelegate> stockViewDelegate;
-(void).cxx_destruct;
-(void)sendGift:(id)gift;
-(void)renderItem:(id)item;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)pagingMediatorShouldResetForScrollResize:(id)pagingMediator;
-(void)pagingMediator:(id)mediator renderPage:(int)page;
-(void)sizeToFit;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithSession:(id)session referrerContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StoreStockItemController : VKMController <VKMNavProxyDelegate, StoreStockItemViewDelegate, PopupWindowController> {
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	StoreStockItemView* _itemView;
	UIActivityIndicatorView* _activityIndicatorView;
	VKStoreProductStickerReferrerContext* _referrerContext;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) StoreStockItemModel* model;
@property(retain, nonatomic) VKStoreProductStickerReferrerContext* referrerContext;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(retain, nonatomic) StoreStockItemView* itemView;
+(id)main:(id)main model:(id)model referrerContext:(id)context;
-(void).cxx_destruct;
-(id)currentNavDelegate;
-(void)model:(id)model updated:(id)updated;
-(void)modelLoadingChanged:(id)changed;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(void)stockItemViewGiftButtonPressed:(id)pressed;
-(void)show:(BOOL)show animated:(BOOL)animated completion:(id)completion;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewWillLayoutSubviews;
-(void)loadView;
-(void)notificationLoading:(id)loading;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model referrerContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StoreActiveModelContext : ModelContext {
	BOOL _skipMarkAsViewed;
	VKTimeout* _checkForNewItemsTimeout;
}
@property(assign, nonatomic) BOOL skipMarkAsViewed;
@property(retain, nonatomic) VKTimeout* checkForNewItemsTimeout;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface StoreActiveModel : LoadingModel {
	BOOL _isCheckingNewItems;
	int _productType;
	id<ModelCacheHandler> _cacheHandler;
	NSNumber* _selectedProductId;
	NSDictionary* _stockItemsMap;
}
@property(retain, nonatomic) NSDictionary* stockItemsMap;
@property(retain, nonatomic) NSNumber* selectedProductId;
@property(retain, nonatomic) id<ModelCacheHandler> cacheHandler;
@property(assign, nonatomic) int productType;
@property(retain, nonatomic) StoreActiveModelContext* lastContext;
+(void)activate:(BOOL)activate product:(id)product context:(id)context fromManageController:(BOOL)manageController;
-(void).cxx_destruct;
-(void)updateNewItemsIfNeeded:(BOOL)needed;
-(void)updateWithProduct:(id)product;
-(void)handleActivate:(id)activate :(id)arg2;
-(void)handleReorder:(id)reorder :(id)arg2;
-(void)handlePurchased:(id)purchased :(id)arg2;
-(void)handleMarkAsRead:(id)read :(id)arg2;
-(void)checkAddActiveProduct:(id)product append:(BOOL)append :(id)arg3;
-(void)registerForEvents:(id)events;
-(void)changeIndex:(id)index withUpdate:(id)update;
-(void)cachedIndexForContext:(id)context withCompletion:(id)completion;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)withProductType:(int)productType;
@end

__attribute__((visibility("hidden")))
@interface StoreStockItemsModel : MultiIndexModel {
	int _productType;
	NSArray* _banners;
	VKGiftsContext* _gifts_context;
	GiftsStatContext* _gifts_stats_context;
	NSDictionary* _indexesMap;
}
@property(retain, nonatomic) GiftsStatContext* gifts_stats_context;
@property(retain, nonatomic) VKGiftsContext* gifts_context;
@property(retain, nonatomic) NSArray* banners;
@property(assign, nonatomic) int productType;
@property(retain) NSDictionary* indexesMap;
+(id)stockSections;
-(void).cxx_destruct;
-(void)handleGift:(id)gift :(id)arg2;
-(void)handleActivate:(id)activate :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)indexForMode:(unsigned)mode;
-(id)countKeyForMode:(unsigned)mode;
-(unsigned)modes;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)withProductType:(int)productType;
@end

__attribute__((visibility("hidden")))
@interface SketchBrushViewController : XXUnknownSuperclass {
	id<SketchBrushViewControllerDelegate> _delegate;
	UIColor* _color;
	NSArray* _buttons;
	UISlider* _slider;
	UIColor* _baseColor;
}
@property(readonly, assign, nonatomic) UIColor* color;
@property(assign, nonatomic) __weak id<SketchBrushViewControllerDelegate> delegate;
@property(readonly, assign, nonatomic) UIColor* baseColor;
@property(retain, nonatomic) UISlider* slider;
@property(retain, nonatomic) NSArray* buttons;
-(void).cxx_destruct;
-(void)updateSliderThumbImage;
-(id)renderThumbImage;
-(void)sliderDidEndChanging:(id)slider;
-(void)sliderChanged:(id)changed;
-(void)selectBrush:(float)brush;
-(void)buttonAction:(id)action;
-(void)loadView;
-(CGSize)partSize;
-(CGSize)preferredContentSize;
-(BOOL)isEraser;
-(BOOL)isWhite;
-(id)initWithColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface NHandlerStatus : MTStatusBarOverlay <NotificationHandler> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)sharedHandler;
-(void)clearImmediatly;
-(void)handle:(id)handle;
@end

__attribute__((visibility("hidden")))
@interface NEventBDays : NotificationEvent {
	NSArray* _friends;
}
@property(copy, nonatomic) NSArray* friends;
+(id)eventWithFriends:(id)friends today:(BOOL)today;
-(void).cxx_destruct;
-(id)controlerForEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface ActionOptionsProviderCommentsSubscription : ActionOptionsProviderActionBuilder {
	VKIdentity* _iden;
}
@property(readonly, assign, nonatomic) VKIdentity* iden;
+(id)target:(id)target;
-(void).cxx_destruct;
-(void)fillOptionsForBuilder:(id)builder context:(id)context;
-(id)initWithTarget:(id)target;
@end

__attribute__((visibility("hidden")))
@interface NotificationBannerWindow : XXUnknownSuperclass {
	float bannerHeight;
	BOOL visible;
	float initialAngle;
	id<NotificationBannerWindowDelegate> _displayDelegate;
	UIView* _contentView;
}
@property(assign, nonatomic) __weak id<NotificationBannerWindowDelegate> displayDelegate;
@property(retain, nonatomic) UIView* contentView;
-(void).cxx_destruct;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)panGestureRecognized:(id)recognized;
-(void)hideImmediatly:(BOOL)immediatly;
-(void)showContentView:(id)view;
-(void)hideAfterDelay;
-(void)clearTimeout;
-(void)performHide;
-(void)toggle:(BOOL)toggle animated:(BOOL)animated;
-(void)becomeKeyWindow;
-(void)notificationDidRotate:(id)notification;
-(void)dealloc;
-(id)initWithHeight:(float)height;
@end

__attribute__((visibility("hidden")))
@interface FeedItemExtra : XXUnknownSuperclass <NSCopying> {
	BOOL _canSubscribe;
	BOOL _subscribed;
	VKFeedActivity* _activity;
	VKPostCaption* _caption;
	NSMutableSet* _expanded;
}
@property(retain, nonatomic) VKPostCaption* caption;
@property(retain, nonatomic) VKFeedActivity* activity;
@property(assign, nonatomic) BOOL subscribed;
@property(assign, nonatomic) BOOL canSubscribe;
@property(retain, nonatomic) NSMutableSet* expanded;
-(void).cxx_destruct;
-(BOOL)isExpanded:(id)expanded;
-(void)setExpanded:(BOOL)expanded iden:(id)iden;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface FeedExtras : XXUnknownSuperclass <NSCopying> {
	NSMutableDictionary* _extras;
}
@property(retain, nonatomic) NSMutableDictionary* extras;
-(void).cxx_destruct;
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(id)extraForIden:(id)iden;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NHandlerBanner : XXUnknownSuperclass <NotificationBannerWindowDelegate, NotificationHandler> {
	id<NHandlerBannerDelegate> _delegate;
	NotificationBannerWindow* _banner;
	CommonBannerView* _commonView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<NHandlerBannerDelegate> delegate;
@property(retain, nonatomic) CommonBannerView* commonView;
@property(retain, nonatomic) NotificationBannerWindow* banner;
+(id)sharedHandler;
-(void).cxx_destruct;
-(void)notificationBannerWindowDidHide;
-(void)clearImmediatly;
-(void)handle:(id)handle;
-(void)actionBanner:(id)banner;
-(void)actionClose:(id)close;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBContactCollectionViewEntryCell : XXUnknownSuperclass {
	BOOL _enabled;
	id<UITextFieldDelegateImproved> _delegate;
	UIFont* _font;
	UITextField* _contactEntryTextField;
}
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) BOOL enabled;
@property(copy, nonatomic) NSString* text;
@property(assign, nonatomic) __weak id<UITextFieldDelegateImproved> delegate;
@property(assign, nonatomic) __weak UITextField* contactEntryTextField;
-(void).cxx_destruct;
-(BOOL)isFirstResponder;
-(float)widthForText:(id)text;
-(void)removeFocus;
-(void)setFocus;
-(void)reset;
-(void)setup;
-(void)layoutSubviews;
-(void)awakeFromNib;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface CommonBannerView : XXUnknownSuperclass {
	UIEdgeInsets textInsets;
	VKMImageView* _thumb;
	UIButton* _buttonClose;
	UILabel* _bannerText;
}
@property(retain, nonatomic) UIButton* buttonClose;
@property(retain, nonatomic) VKMImageView* thumb;
@property(retain, nonatomic) UILabel* bannerText;
+(id)commonBannerView;
-(void).cxx_destruct;
-(void)render:(id)render;
-(void)layoutSubviews;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioExtendedPlaylistsBlockItemCollectionCell : AudioPlaylistInlineCell {
}
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface MainMenuPlayer : XXUnknownSuperclass {
	UIButton* _playerButton;
	UIButton* _playerTouch;
	UILabel* _playerPerformer;
	UILabel* _playerTitle;
}
@property(retain, nonatomic) UILabel* playerTitle;
@property(retain, nonatomic) UILabel* playerPerformer;
@property(retain, nonatomic) UIButton* playerTouch;
@property(retain, nonatomic) UIButton* playerButton;
-(void).cxx_destruct;
-(void)highlightUpdated;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)clear;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MainMenuSearchBar : VKMSearchBar {
	BOOL _ledged;
}
@property(assign, nonatomic) BOOL ledged;
-(void)setFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface TemporaryViewController : XXUnknownSuperclass {
}
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface KeepNavAlphaNavigationController : FixedNavigationController {
	BOOL _willHide;
}
@property(assign, nonatomic) BOOL willHide;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
@end

__attribute__((visibility("hidden")))
@interface NavWindowPresenter : XXUnknownSuperclass {
	UIViewController<NavWindowPresenterController>* _weakController;
	VKMNavigationController* _weakNavigation;
	UIWindow* _weakHostWindow;
	id _context;
}
@property(retain, nonatomic) id context;
@property(assign, nonatomic) UIWindow* weakHostWindow;
@property(assign, nonatomic) VKMNavigationController* weakNavigation;
@property(assign, nonatomic) UIViewController<NavWindowPresenterController>* weakController;
+(id)presenterForPresentedWindow:(id)presentedWindow;
-(void).cxx_destruct;
-(void)togglePresented:(BOOL)presented keepInNav:(BOOL)nav;
-(void)dismissAnimated:(BOOL)animated;
-(void)presentAnimated;
-(void)presentForNavigation:(id)navigation context:(id)context animated:(BOOL)animated;
-(id)presentedWindow;
-(BOOL)presented;
@end

__attribute__((visibility("hidden")))
@interface TintedWindow : XXUnknownSuperclass {
	UIView* _tintView;
}
@property(retain, nonatomic) UIView* tintView;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PlaceSelectionController : VKMLiveController <CLLocationManagerDelegate, MKMapViewDelegate, LocationCellDelegate> {
	BOOL autoUserTracking;
	BOOL locationAccessEnabled;
	BOOL allowInaccurate;
	CLLocationManager* _locationManager;
	UIView* _header;
	MKMapView* _mapView;
	CLLocation* _location;
	NSDate* _locationUpdate;
	CLGeocoder* _geocoder;
	UIBarButtonItem* _buttonReload;
	UIView* _privacyView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PlacesSearchModel* model;
@property(retain, nonatomic) UIView* privacyView;
@property(retain, nonatomic) UIBarButtonItem* buttonReload;
@property(retain, nonatomic) CLGeocoder* geocoder;
@property(retain, nonatomic) NSDate* locationUpdate;
@property(retain, nonatomic) CLLocation* location;
@property(retain, nonatomic) MKMapView* mapView;
@property(retain, nonatomic) UIView* header;
@property(retain, nonatomic) CLLocationManager* locationManager;
-(void).cxx_destruct;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)clearTimers;
-(void)updateInaccurate;
-(void)updateLocation;
-(id)searchModel;
-(id)currentLocation;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)layoutMap;
-(void)VKMTableUpdatedIndex;
-(void)actionRefresh:(id)refresh;
-(void)notificationAppActive:(id)active;
-(void)updateLocationAccess;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)updateAddress:(id)address searching:(BOOL)searching;
-(id)lazyPrivacyView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)VKMControllerChromeInsetsApply;
-(void)setRightButton:(id)button;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(void)viewDidLoad;
-(BOOL)VKMScrollViewDisablePTR;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)loadView;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface PlacesSearchModelContext : SearchModelContext {
	CLLocation* _location;
}
@property(retain, nonatomic) CLLocation* location;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface PlacesSearchModel : SearchModel {
	CLLocation* _location;
	VKPlaceMap* _placeCurrent;
	VKPlaceAdd* _placeAdd;
}
@property(retain, nonatomic) PlacesSearchModelContext* lastContext;
@property(retain, nonatomic) VKPlaceAdd* placeAdd;
@property(retain, nonatomic) VKPlaceMap* placeCurrent;
@property(retain, nonatomic) CLLocation* location;
-(void).cxx_destruct;
-(void)updateAddress:(id)address searching:(BOOL)searching;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(void)touch;
-(id)setupCurrent:(BOOL)current add:(BOOL)add;
@end

__attribute__((visibility("hidden")))
@interface VKPlace : VKDomain <VKPlaceDescription, MKAnnotation> {
	NSString* _title;
	NSString* _fullTitle;
	NSNumber* _group_id;
	NSString* _group_photo;
	int _checkins;
	NSString* _address;
	NSString* _country;
	NSString* _city;
	CLLocationCoordinate2D _coordinate;
}
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* address;
@property(assign, nonatomic) int checkins;
@property(retain, nonatomic) NSString* group_photo;
@property(retain, nonatomic) NSNumber* group_id;
@property(retain, nonatomic) NSString* fullTitle;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)placeDescription;
-(id)placeTitle;
-(id)descriptionVariantAtIndex:(unsigned)index;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKPlaceMap : VKRenderable <VKPlaceDescription> {
	BOOL _searching;
	NSString* _address;
	CLLocationCoordinate2D _coordinate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL searching;
@property(retain, nonatomic) NSString* address;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
+(id)placeMapWithCoordinates:(CLLocationCoordinate2D)coordinates address:(id)address;
-(void).cxx_destruct;
-(id)placeDescription;
-(id)placeTitle;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKPlaceAdd : VKRenderable <VKPlaceDescription> {
	BOOL _searching;
	NSString* _address;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL searching;
@property(retain, nonatomic) NSString* address;
-(void).cxx_destruct;
-(id)placeDescription;
-(id)placeTitle;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKPlaceDetail : VKDomainDerived {
	VKGroup* _group;
	NSString* _groupActivity;
	NSArray* _checkinUsers;
}
@property(retain, nonatomic) NSArray* checkinUsers;
@property(retain, nonatomic) NSString* groupActivity;
@property(retain, nonatomic) VKGroup* group;
@property(retain, nonatomic) VKPlace* domain;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsButtonCell : VKMCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PlaceCell : VKMCell {
	VKMImageView* _image;
	UILabel* _title;
	UILabel* _status;
	UILabel* _checkins;
}
@property(assign, nonatomic) __weak id<LocationCellDelegate> delegate;
@property(retain, nonatomic) VKRenderable* domain;
@property(readonly, retain, nonatomic) UILabel* checkins;
@property(readonly, retain, nonatomic) UILabel* status;
@property(readonly, retain, nonatomic) UILabel* title;
@property(readonly, retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)dealloc;
-(UIEdgeInsets)layoutMargins;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PlaceCurrentCell : PlaceCell {
}
+(id)statusForAddress:(id)address searching:(BOOL)searching;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PlaceAddCell : PlaceCell {
}
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NewsSourcesModel : MultiIndexModel {
	Index* _users;
	Index* _groups;
}
@property(retain, nonatomic) Index* groups;
@property(retain, nonatomic) Index* users;
-(void).cxx_destruct;
-(void)handleBan:(id)ban :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)countKeyForMode:(unsigned)mode;
-(id)indexForMode:(unsigned)mode;
-(unsigned)modes;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VMRaiseToRecordActivator : XXUnknownSuperclass {
	BOOL _enabled;
	BOOL _raised;
	id<VMRaiseToRecordActivatorDelegate> _delegate;
	id<RaiseManager> _manager;
}
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) __weak id<VMRaiseToRecordActivatorDelegate> delegate;
@property(assign, nonatomic) BOOL raised;
@property(retain, nonatomic) id<RaiseManager> manager;
-(void).cxx_destruct;
-(void)notificationUIDeviceProximityStateDidChange:(id)notificationUIDeviceProximityState;
-(void)releaseIfNeeded;
-(void)raiseIfNeeded;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMURLScheme : XXUnknownSuperclass {
}
+(id)generalUrlScheme;
+(id)fbAppIdFromURLScheme;
+(id)authScheme;
+(id)routeScheme;
+(id)loadSchemas;
@end

__attribute__((visibility("hidden")))
@interface NewsSourcesController : VKMMultiIndexController {
}
-(BOOL)VKMScrollViewShouldShowTeaserForMode:(unsigned)vkmscrollView;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKNewsList : VKDomain {
	int _type;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int type;
+(id)custom:(id)custom owner:(id)owner;
+(id)type:(int)type owner:(id)owner;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PromotedNewsList : VKDomain {
	BOOL _unavailable;
	BOOL _hidden;
	NSString* _list_id;
	NSString* _title;
}
@property(assign, nonatomic, getter=isAvailable) BOOL available;
@property(assign, nonatomic, getter=isHidden) BOOL hidden;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* list_id;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NewsListsModel : ListModel {
}
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
@end

__attribute__((visibility("hidden")))
@interface PlaceModel : ItemModel {
}
@property(retain, nonatomic) VKPlaceDetail* item;
-(id)process:(id)process context:(id)context;
-(id)request;
-(id)setupPlace:(id)place;
@end

__attribute__((visibility("hidden")))
@interface VKPhotosListAttach : VKDomain {
	NSArray* _photos;
}
@property(retain, nonatomic) NSArray* photos;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayExternalStats : XXUnknownSuperclass <VideoPlayStats> {
	BOOL _s3;
	BOOL _p25;
	BOOL _p50;
	BOOL _p75;
	BOOL _p95;
	VKAdData* _adData;
	VKVideo* _video;
	ExternalAdsStatsManager* _externalAdsStatsManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) ExternalAdsStatsManager* externalAdsStatsManager;
@property(readonly, assign, nonatomic) VKVideo* video;
@property(readonly, assign, nonatomic) VKAdData* adData;
+(id)adsStats:(id)stats video:(id)video adData:(id)data;
-(void).cxx_destruct;
-(void)toggleFullscreen:(BOOL)fullscreen;
-(void)toggleVolume:(BOOL)volume;
-(void)percent:(double)percent;
-(void)progress:(double)progress;
-(void)complete;
-(void)resume;
-(void)pause;
-(void)play:(BOOL)play;
-(void)trackEvent:(int)event;
-(id)initWithAdsStats:(id)adsStats video:(id)video adData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface VMPlayingSession : XXUnknownSuperclass <VMSession> {
	BOOL _active;
	id<VMPlayingSessionDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VMPlayingSessionDelegate> delegate;
@property(assign, nonatomic) BOOL active;
-(void).cxx_destruct;
-(void)deactivate;
-(void)activate;
-(void)notificationAVAudioSessionRouteChange:(id)change;
-(void)notificationUIDeviceProximityStateDidChange:(id)notificationUIDeviceProximityState;
-(void)notificationAVAudioSessionInterruption:(id)interruption;
-(void)notificationUIApplicationWillResignActive:(id)notificationUIApplication;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKAPAudioAlbumModel : AudioListModel {
}
-(id)setupSearch;
-(id)process:(id)process;
@end

__attribute__((visibility("hidden")))
@interface AddressBookSyncModel : XXUnknownSuperclass {
}
+(void)syncWithSessionIfRequired:(id)sessionIfRequired;
+(void)storeLoadedContacts:(id)contacts withSession:(id)session;
+(void)syncWithSession:(id)session;
+(BOOL)shouldSyncWithSession:(id)session;
+(BOOL)isEnabled;
@end

__attribute__((visibility("hidden")))
@interface AudioExtendedPlaylistsBlockCell : AudioBlockCellWithCollectionView {
}
@property(retain, nonatomic) AudioExtendedPlaylistsBlock* domain;
+(Class)collectionCellClass;
-(void)actionShowAllButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface BadgeAccessoryView : XXUnknownSuperclass {
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
-(void).cxx_destruct;
-(void)sizeToFit;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface FriendRequestsPreviewItemCell : VKMCell <VKMImageLoaderDelegate> {
	BOOL forcedLoad;
	VKMImageView* _imageLoadingView;
	VKMImageLoader* _imageLoader;
	int _imageNumber;
	BadgeAccessoryView* _badge;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) BadgeAccessoryView* badge;
@property(assign, nonatomic) int imageNumber;
@property(readonly, retain, nonatomic) VKMImageLoader* imageLoader;
@property(readonly, retain, nonatomic) VKMImageView* imageLoadingView;
@property(retain, nonatomic) FriendRequestsPreviewItem* domain;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)loadNextImage;
-(void)loadCurrentImage;
-(void)loader:(id)loader complete:(id)complete;
-(void)didMoveToWindow;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MapViewCell : VKMCell {
	MKMapView* _mapView;
}
@property(retain, nonatomic) MKMapView* mapView;
-(void).cxx_destruct;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PlaceController : VKMTableController {
	VKMImageView* _image;
	UILabel* _placeTitle;
	UILabel* _placeActiity;
	UILabel* _address;
	UILabel* _checkinsCount;
	UIView* _checkinsHost;
	MapViewCell* _cellMap;
	VKMCell* _cellCheckins;
	UITableViewCell* _cellAction;
}
@property(retain, nonatomic) PlaceModel* model;
@property(retain, nonatomic) UITableViewCell* cellAction;
@property(retain, nonatomic) VKMCell* cellCheckins;
@property(retain, nonatomic) MapViewCell* cellMap;
@property(retain, nonatomic) UIView* checkinsHost;
@property(retain, nonatomic) UILabel* checkinsCount;
@property(retain, nonatomic) UILabel* address;
@property(retain, nonatomic) UILabel* placeActiity;
@property(retain, nonatomic) UILabel* placeTitle;
@property(retain, nonatomic) VKMImageView* image;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)actionGroup:(id)group;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(void)viewDidLoad;
-(int)VKMTableStyle;
-(void)_clear;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface CommentPostSourceCollectionModel : ListModel {
}
-(void)updateSelectionWithSender:(id)sender;
-(void)setDataWithSources:(id)sources;
@end

__attribute__((visibility("hidden")))
@interface TextKitLabelInteractiveDefaultBehavior : XXUnknownSuperclass <TextKitLabelDelegate> {
	id<TextKitLabelInteractiveDefaultBehaviorDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<TextKitLabelInteractiveDefaultBehaviorDelegate> delegate;
-(void).cxx_destruct;
-(void)textKitLabel:(id)label didLongPressAttribute:(id)attribute;
-(BOOL)textKitLabel:(id)label shouldLongPressAttribute:(id)attribute;
-(void)textKitLabel:(id)label didSelectAttribute:(id)attribute;
-(BOOL)textKitLabel:(id)label shouldHighlightAttribute:(id)attribute;
-(BOOL)textKitLabel:(id)label shouldSelectAttribute:(id)attribute;
@end

__attribute__((visibility("hidden")))
@interface WeakHolder : XXUnknownSuperclass {
	MaskEngineWrapper2* _weakObject;
}
@property(assign, nonatomic) __weak MaskEngineWrapper2* weakObject;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MaskEngineWrapper2 : XXUnknownSuperclass {
	MaskEngine2* _maskEngine;
	BOOL _assetsLoaded;
	BOOL _maskLoaded;
	id<MaskEngineWrapper2Delegate> _delegate;
}
@property(assign, nonatomic) __weak id<MaskEngineWrapper2Delegate> delegate;
@property(assign, nonatomic) BOOL maskLoaded;
@property(assign, nonatomic) BOOL assetsLoaded;
+(unsigned)engineVersion;
-(void).cxx_destruct;
-(void)onMaskEngine_VideoDataReady:(VideoData*)ready;
-(void)onMaskEngine_MaskLoadStatusChanged:(const char*)changed :(int)arg2;
-(void)onMaskEngine_RenderLoadStatusChanged:(bool)changed;
-(void)onMaskEngine_ModelLoadStatusChanged:(bool)changed;
-(void)pushPixelBuffer:(char*)buffer width:(unsigned)width height:(unsigned)height backCamera:(BOOL)camera photo:(BOOL)photo timestampMs:(unsigned)ms;
-(void)unloadMask;
-(void)loadMaskWithJsonFilePath:(id)jsonFilePath;
-(void)loadAssetsWithPath:(id)path;
-(id)init;
-(void)cleanup;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface StatContext : XXUnknownSuperclass {
	NSString* _statName;
}
@property(copy, nonatomic) NSString* statName;
+(id)contextWithStatName:(id)statName;
-(void).cxx_destruct;
-(id)statsEventWithAction:(id)action;
-(id)statsEventWithParams:(id)params;
@end

__attribute__((visibility("hidden")))
@interface CheckinsContext : ListModelContext {
	NSMutableSet* _userIds;
}
@property(retain, nonatomic) NSMutableSet* userIds;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface CheckinsModel : ListModel {
}
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)request:(int)request count:(int)count;
-(id)countKey;
-(id)spawnContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NewsSectionsModel : ListModel {
}
-(id)itemsToAppend:(id)append to:(id)to context:(id)context;
-(id)process:(id)process;
-(id)requestForContext:(id)context;
-(void)handleSetNewsFeedSections:(id)sections :(id)arg2;
-(void)registerForEvents:(id)events;
@end

__attribute__((visibility("hidden")))
@interface InterestingPagesModel : ListModel {
}
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface LikePopupView : XXUnknownSuperclass {
}
+(id)likePopup;
-(void)popup:(BOOL)popup host:(id)host image:(id)image complete:(id)complete;
@end

__attribute__((visibility("hidden")))
@interface VKRemoteActionOpenUrl : VKRenderable <VKRemoteAction> {
	NSURL* _url;
	int _target;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int target;
@property(retain, nonatomic) NSURL* url;
+(id)actionWithUrl:(id)url target:(int)target;
-(void).cxx_destruct;
-(void)runInContext:(id)context completion:(id)completion;
-(BOOL)process:(id)process context:(id)context;
-(id)initWithUrl:(id)url target:(int)target;
-(int)remoteActionType;
@end

__attribute__((visibility("hidden")))
@interface VKRemoteActionEnableTopNewsfeed : VKRenderable <VKRemoteAction> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)url;
-(void)runInContext:(id)context completion:(id)completion;
-(int)remoteActionType;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKRemoteActionJoinGroup : VKRenderable <VKRemoteAction> {
	NSNumber* _groupId;
	NSString* _source;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* source;
@property(retain, nonatomic) NSNumber* groupId;
+(id)actionWithGroupId:(id)groupId;
-(void).cxx_destruct;
-(id)url;
-(void)runInContext:(id)context completion:(id)completion;
-(BOOL)process:(id)process context:(id)context;
-(id)initWithGroupId:(id)groupId;
-(int)remoteActionType;
@end

__attribute__((visibility("hidden")))
@interface VKRemoteActionJoinGroupOpenUrl : VKRenderable <VKRemoteAction> {
	VKRemoteActionJoinGroup* _joinGroupAction;
	VKRemoteActionOpenUrl* _openUrlAction;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKRemoteActionOpenUrl* openUrlAction;
@property(retain, nonatomic) VKRemoteActionJoinGroup* joinGroupAction;
-(void).cxx_destruct;
-(id)url;
-(void)runInContext:(id)context completion:(id)completion;
-(BOOL)process:(id)process context:(id)context;
-(int)remoteActionType;
@end

__attribute__((visibility("hidden")))
@interface AppRequestRenderer : Renderer {
}
@property(retain, nonatomic) VKAPIAppRequest* domain;
+(void)buildExtra:(id)extra;
+(void)build:(id)build;
+(BOOL)shouldAddSpaceBetweenFirstLineAndSecondLine;
+(unsigned)buttonPriorityForButtonPlace:(unsigned)buttonPlace;
+(void)prepareLayout:(id)layout;
+(id)rendererElements;
-(void)actionMainPhoto:(id)photo;
-(void)setupCell:(id)cell;
-(id)appID;
-(int)requestType;
-(void)actionHide:(id)hide;
-(void)actionPlay:(id)play;
@end

__attribute__((visibility("hidden")))
@interface AppRequestInviteRenderer : AppRequestRenderer {
}
+(void)buildExtra:(id)extra;
+(BOOL)shouldAddSpaceBetweenFirstLineAndSecondLine;
+(unsigned)buttonPriorityForButtonPlace:(unsigned)buttonPlace;
+(id)rendererElements;
-(id)appID;
-(int)requestType;
@end

__attribute__((visibility("hidden")))
@interface AppRequestAllCell : VKMCell {
}
@property(readonly, retain, nonatomic) VKAPIAppRequestsAll* domain;
+(void)prerender:(id)prerender;
+(CGSize)cellSize;
-(BOOL)selected;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface OffsetTextField : XXUnknownSuperclass {
}
-(CGRect)textRectForBounds:(CGRect)bounds;
@end

__attribute__((visibility("hidden")))
@interface SimpleAnnotation : XXUnknownSuperclass <MKAnnotation> {
	CLLocationCoordinate2D _coordinate;
}
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
@end

__attribute__((visibility("hidden")))
@interface AddPlaceController : VKMTableController <MKMapViewDelegate, UITextFieldDelegate> {
	float MAP_HEIGHT;
	float keyboardOffset;
	BOOL pendingGeo;
	BOOL trackLocation;
	VKPlace* _place;
	id _handler;
	UIView* _header;
	MKMapView* _mapView;
	SimpleAnnotation* _annotation;
	NSArray* _cells;
	TextFieldGroupedCell* _cellName;
	TextFieldGroupedCell* _cellStreet;
	CLGeocoder* _geocoder;
	UIActivityIndicatorView* _indicator;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) VKPlace* place;
@property(retain, nonatomic) UIActivityIndicatorView* indicator;
@property(retain, nonatomic) CLGeocoder* geocoder;
@property(retain, nonatomic) TextFieldGroupedCell* cellStreet;
@property(retain, nonatomic) TextFieldGroupedCell* cellName;
@property(retain, nonatomic) NSArray* cells;
@property(retain, nonatomic) SimpleAnnotation* annotation;
@property(retain, nonatomic) MKMapView* mapView;
@property(retain, nonatomic) UIView* header;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)selectCoordinate:(CLLocationCoordinate2D)coordinate;
-(void)updateDone;
-(void)actionAdd:(id)add;
-(void)actionTextChanged:(id)changed;
-(void)actionTap:(id)tap;
-(void)notificationKeyboard:(id)keyboard;
-(void)updateLayout:(id)layout;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)layoutMap;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)VKMScrollViewDisablePTR;
-(int)VKMTableStyle;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface DoubleTapGestureRecognizer : XXUnknownSuperclass {
	BOOL pending;
	double _delay;
}
@property(assign, nonatomic) double delay;
-(void)actionFail;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)reset;
@end

__attribute__((visibility("hidden")))
@interface VKProfileInfo : VKDomain {
	BOOL _relation_pending;
	NSString* _first_name;
	NSString* _last_name;
	NSString* _maiden_name;
	int _sex;
	int _relation;
	VKUser* _relation_partner;
	NSArray* _relation_requests;
	NSDate* _bdate;
	int _bdate_visibility;
	NSString* _home_town;
	VKCountry* _country;
	VKCity* _city;
	VKNameRequest* _name_request;
}
@property(retain, nonatomic) VKNameRequest* name_request;
@property(retain, nonatomic) VKCity* city;
@property(retain, nonatomic) VKCountry* country;
@property(retain, nonatomic) NSString* home_town;
@property(assign, nonatomic) int bdate_visibility;
@property(retain, nonatomic) NSDate* bdate;
@property(retain, nonatomic) NSArray* relation_requests;
@property(assign, nonatomic) BOOL relation_pending;
@property(retain, nonatomic) VKUser* relation_partner;
@property(assign, nonatomic) int relation;
@property(assign, nonatomic) int sex;
@property(retain, nonatomic) NSString* maiden_name;
@property(retain, nonatomic) NSString* last_name;
@property(retain, nonatomic) NSString* first_name;
-(void).cxx_destruct;
-(BOOL)isEqual:(id)equal;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface VKNameRequest : VKDomain {
	int _status;
	NSString* _first_name;
	NSString* _last_name;
	NSNumber* _repeat_date;
}
@property(retain, nonatomic) NSNumber* repeat_date;
@property(retain, nonatomic) NSString* last_name;
@property(retain, nonatomic) NSString* first_name;
@property(assign, nonatomic) int status;
-(void).cxx_destruct;
-(BOOL)isEqual:(id)equal;
-(BOOL)canCancel;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface RelationRequestPartner : VKRenderable {
	VKUser* _user;
	int _relation;
}
@property(assign, nonatomic) int relation;
@property(retain, nonatomic) VKUser* user;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface UsersSelection : VKRenderable {
	NSArray* _users;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSArray* users;
-(void).cxx_destruct;
-(id)mapUsers;
@end

__attribute__((visibility("hidden")))
@interface CreateDialogController : VKMLiveController <UITextFieldDelegate> {
	UsersSelection* _selection;
	TextFieldGroupedCell* _cellTitle;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UsersSelection* selection;
@property(retain, nonatomic) TextFieldGroupedCell* cellTitle;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)actionDone:(id)done;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)VKMScrollViewDisablePTR;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface TextFieldGroupedCell : VKMCell {
	UITextField* _textField;
}
@property(retain, nonatomic) UITextField* textField;
+(id)class:(Class)aClass placeholder:(id)placeholder bold:(BOOL)bold;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface CreateGroupItemCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface CreateGroupItem : VKRenderable {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface UsersSelectionController : VKMLiveController {
	BOOL _multi;
	BOOL _createDialog;
	BOOL _allowClear;
	NSDictionary* _userData;
	NSMutableDictionary* _selectedUsers;
	UIImage* _check;
	UIImage* _checkSelect;
}
@property(copy, nonatomic) NSDictionary* userData;
@property(assign, nonatomic) BOOL allowClear;
@property(assign, nonatomic) BOOL createDialog;
@property(assign, nonatomic) BOOL multi;
@property(retain, nonatomic) UIImage* checkSelect;
@property(retain, nonatomic) UIImage* check;
@property(retain, nonatomic) NSMutableDictionary* selectedUsers;
-(void).cxx_destruct;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)VKMLiveSearchWillDisplayCell:(id)vkmliveSearch indexPath:(id)path inTable:(id)table;
-(void)updateCell:(id)cell;
-(void)VKMLiveSearchWillEndSearch;
-(BOOL)VKMLiveSearchHandleCell:(id)cell select:(BOOL)select;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(void)VKMSearchCustomizeResultsTableView:(id)view;
-(void)actionClear:(id)clear;
-(void)actionDone:(id)done;
-(void)updateMulti;
-(void)routeUsers:(id)users;
-(id)setupMulti:(BOOL)multi createDialog:(BOOL)dialog allowClear:(BOOL)clear;
-(int)VKMLiveSearchSkipSections;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(void)viewDidLoad;
-(void)customizeTable:(id)table;
@end

__attribute__((visibility("hidden")))
@interface AudioSelection : VKRenderable {
	NSMutableArray* _audios;
}
@property(retain, nonatomic) NSMutableArray* audios;
-(void).cxx_destruct;
-(id)items;
-(unsigned)count;
-(BOOL)contains:(id)contains;
-(void)remove:(id)remove;
-(void)add:(id)add;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface BatchAsyncOperation : AsyncOperation {
	int current;
	NSArray* _operations;
	AsyncOperation* _currentOperation;
}
@property(retain, nonatomic) AsyncOperation* currentOperation;
@property(retain, nonatomic) NSArray* operations;
+(id)operations:(id)operations;
-(void).cxx_destruct;
-(void)cancel;
-(void)runAsync;
-(void)runCurrent;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)updateProgress;
-(void)clear;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface DocsUploadContext : UploadContext <DomainEvent> {
	NSNumber* _gid;
	id _fileSizeAvailable;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id fileSizeAvailable;
@property(retain, nonatomic) NSNumber* gid;
@property(retain, nonatomic) VKDoc* result;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(id)requestForUploadServer;
-(id)withGid:(id)gid;
@end

__attribute__((visibility("hidden")))
@interface DocsSketchUploadContext : DocsUploadContext {
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
+(id)docsSketchContextWithSession:(id)session image:(id)image;
-(void).cxx_destruct;
-(void)loadUploadData:(id)data;
-(id)requestForUploadServer;
@end

__attribute__((visibility("hidden")))
@interface AudioExtendedPlaylistsBlock : AudioBlock {
	NSArray* _extended_playlists;
}
@property(retain, nonatomic) NSArray* extended_playlists;
+(float)interitemDistance;
-(void).cxx_destruct;
-(id)items;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface DefaultPostInteractionStats : XXUnknownSuperclass {
}
+(id)statsForPostIden:(id)postIden adData:(id)data session:(id)session;
+(id)statsForPost:(id)post session:(id)session;
@end

__attribute__((visibility("hidden")))
@interface AudioListSearchModel : AudioSearchModel {
}
-(id)process:(id)process;
@end

__attribute__((visibility("hidden")))
@interface PhotoUploadContext : UploadContext {
	VKPPAssetData* _assetData;
	NSNumber* _forceDimension;
	NSNumber* _forceQuality;
}
@property(retain, nonatomic) NSNumber* forceQuality;
@property(retain, nonatomic) NSNumber* forceDimension;
@property(retain) VKPPAssetData* assetData;
+(id)photoContextWithSession:(id)session assetData:(id)data;
-(void).cxx_destruct;
-(void)loadUploadData:(id)data;
-(void)willUseImage:(id)image;
-(BOOL)forceHighQuality;
-(void)makeThumbnail;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadContext : UploadContext <IVideoUploadContext> {
	BOOL _converted;
	NSURL* _fileURL;
	VKVideo* _video;
	PHAsset* _asset;
	VKPrivacySetting* _privacy_view;
	VKPrivacySetting* _privacy_comment;
	NSNumber* _dialog_id;
	NSNumber* _album_id;
	NSData* _uploadResumeData;
	int _target;
	float _videoDuration;
	AVAssetExportSession* _exportSession;
	long long _totalBytesUploaded;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) long long totalBytesUploaded;
@property(assign, nonatomic) int target;
@property(retain, nonatomic) NSData* uploadResumeData;
@property(retain, nonatomic) NSNumber* album_id;
@property(retain, nonatomic) NSNumber* dialog_id;
@property(retain, nonatomic) VKPrivacySetting* privacy_comment;
@property(retain, nonatomic) VKPrivacySetting* privacy_view;
@property(retain, nonatomic) AVAssetExportSession* exportSession;
@property(assign, nonatomic) BOOL converted;
@property(assign, nonatomic) float videoDuration;
@property(retain, nonatomic) PHAsset* asset;
@property(retain, nonatomic) VKVideo* video;
@property(retain, nonatomic) NSURL* fileURL;
-(void).cxx_destruct;
-(void)saveVideoThumbnail;
-(id)createOperation;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(void)getAVAssetForSessionPreset:(id)sessionPreset withCompletition:(id)completition;
-(void)loadUploadData:(id)data;
-(id)requestForUploadServer;
-(void)fetchVideoMetaInfo;
-(id)withDialog:(id)dialog asset:(id)asset video:(id)video;
-(id)withPrivacyView:(id)privacyView privacyComment:(id)comment target:(int)target asset:(id)asset video:(id)video albumId:(id)anId;
-(void)cleanTemporaryFiles;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AudioStats : XXUnknownSuperclass <AudioStats> {
	CommonStatsManager* _statsManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) CommonStatsManager* statsManager;
+(id)statsManager:(id)manager;
-(void).cxx_destruct;
-(void)playAudio:(id)audio ref:(id)ref;
-(id)initWithStatsManager:(id)statsManager;
@end

__attribute__((visibility("hidden")))
@interface PostInteractionAudioStats : XXUnknownSuperclass <AudioStats> {
	VKIdentity* _post;
	CommonStatsManager* _statsManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) CommonStatsManager* statsManager;
@property(readonly, assign, nonatomic) VKIdentity* post;
+(id)post:(id)post statsManager:(id)manager;
-(void).cxx_destruct;
-(void)playAudio:(id)audio ref:(id)ref;
-(id)initWithPost:(id)post statsManager:(id)manager;
@end

__attribute__((visibility("hidden")))
@interface AudioStatsGroup : XXUnknownSuperclass <AudioStats> {
	NSArray* _stats;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSArray* stats;
+(id)stats:(id)stats;
-(void).cxx_destruct;
-(void)playAudio:(id)audio ref:(id)ref;
-(id)initWithStats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface DocsPhotoUploadEditAttachment : UploadEditAttachment {
}
@property(retain, nonatomic) DocsPhotoUploadContext* context;
-(float)defaultAttachmentRenderHeight;
-(float)domainAttachmentImageRatio;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface DocsController : VKMLiveController {
}
@property(retain, nonatomic) DocsModel* model;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)actionAdd:(id)add;
-(void)VKMControllerSetAutocloseButton:(id)button;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDocsDelete : ModelActionDelete {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDocsAdd : ModelActionAdd {
}
@property(retain, nonatomic) VKDoc* added;
@property(retain, nonatomic) VKDoc* target;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface DMDialog : XXUnknownSuperclass {
}
@property(assign, nonatomic) BOOL left;
@property(assign, nonatomic) BOOL kicked;
@property(retain, nonatomic) NSSet* messages;
@property(retain, nonatomic) DMMessage* head_message;
@property(retain, nonatomic) NSString* photo;
@property(retain, nonatomic) NSNumber* users_count;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* did;
@property(retain, nonatomic) NSString* chat_active;
@property(retain, nonatomic) NSNumber* admin_id;
@end

__attribute__((visibility("hidden")))
@interface DMMessage : XXUnknownSuperclass {
}
@property(retain, nonatomic) DMDialog* head_dialog;
@property(retain, nonatomic) DMDialog* dialog;
@property(retain, nonatomic) NSNumber* random_id;
@property(retain, nonatomic) NSNumber* action;
@property(retain, nonatomic) NSNumber* sender_uid;
@property(retain, nonatomic) NSNumber* read_state;
@property(retain, nonatomic) NSNumber* mid;
@property(retain, nonatomic) NSNumber* is_preview;
@property(retain, nonatomic) NSNumber* is_deleted;
@property(retain, nonatomic) NSString* geo_point;
@property(retain, nonatomic) NSData* fwd_messages;
@property(retain, nonatomic) NSNumber* date;
@property(retain, nonatomic) NSString* body;
@property(retain, nonatomic) NSData* action_data;
@property(retain, nonatomic) NSData* attachments;
@end

__attribute__((visibility("hidden")))
@interface ChatActionCell : MessageCell {
	XXStruct_UOIMaD type;
	UsersModel* _usersModel;
	MOCTLabel* _label;
	VKMImageView* _imageLoadingView;
}
@property(readonly, retain, nonatomic) VKMImageView* imageLoadingView;
@property(readonly, retain, nonatomic) MOCTLabel* label;
@property(readonly, retain, nonatomic) UsersModel* usersModel;
+(void)prerender:(id)prerender users:(id)users;
+(void)initialize;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)notificationUserUpdated:(id)updated;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate multidialog:(BOOL)multidialog selfdialog:(BOOL)selfdialog identifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface GroupMembersSearchModel : UsersSearchModel {
	NSNumber* _group_id;
}
@property(retain, nonatomic) NSNumber* group_id;
+(id)withSession:(id)session groupId:(id)anId;
-(void).cxx_destruct;
-(id)parameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface AudioOverlayButton : DefaultHighlightButton {
	UIColor* _circleFillColor;
	float _overlayCornerRadius;
	UIColor* _overlayFillColor;
	CAShapeLayer* _overlayLayer;
	CAShapeLayer* _roundLayer;
	CGSize _circleSize;
}
@property(retain, nonatomic) UIColor* overlayFillColor;
@property(assign, nonatomic) float overlayCornerRadius;
@property(retain, nonatomic) UIColor* circleFillColor;
@property(assign, nonatomic) CGSize circleSize;
@property(retain, nonatomic) CAShapeLayer* roundLayer;
@property(retain, nonatomic) CAShapeLayer* overlayLayer;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)createSublayers;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ChatPhotoUploadContext : PhotoUploadContext {
	NSNumber* _chat_id;
	NSDictionary* _cropParams;
	NSData* _preparedData;
	CGAffineTransform _forcedCrop;
}
@property(retain, nonatomic) NSNumber* chat_id;
@property(retain, nonatomic) NSData* preparedData;
@property(retain, nonatomic) NSDictionary* cropParams;
@property(assign, nonatomic) CGAffineTransform forcedCrop;
+(id)photoContextWithSession:(id)session assetData:(id)data;
-(void).cxx_destruct;
-(id)createOperation;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(id)requestForUploadServer;
-(void)willUseImage:(id)image;
-(void)loadUploadData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface ChatPhotoUploadOperation : ClientBasedUploadOperation {
}
@property(retain, nonatomic) ChatPhotoUploadContext* context;
-(void)runAsync;
@end

__attribute__((visibility("hidden")))
@interface MapEditAttachment : EditAttachment {
	UIImage* _image;
	CLLocationCoordinate2D _coord;
}
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) CLLocationCoordinate2D coord;
-(void).cxx_destruct;
-(void)updateCoordinate:(CLLocationCoordinate2D)coordinate image:(id)image;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface ProfileBannedModel : ListModel {
}
-(void)handleBlacklist:(id)blacklist :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface ProfileBannedController : VKMLiveController {
}
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)VKMTableUpdatedIndex;
-(void)VKMScrollViewRefreshLoading;
-(void)checkEditButton;
@end

__attribute__((visibility("hidden")))
@interface MessageCell : XXUnknownSuperclass {
	BOOL unread;
	BOOL pendingRead;
	BOOL _multidialog;
	BOOL _selfdialog;
	VKMessage* _message;
	id<VKMNavDelegate> _delegate;
	UIButton* _checkmark;
}
@property(readonly, assign, nonatomic) BOOL selfdialog;
@property(readonly, assign, nonatomic) BOOL multidialog;
@property(assign, nonatomic) __weak id<VKMNavDelegate> delegate;
@property(retain, nonatomic) VKMessage* message;
@property(retain, nonatomic) UIButton* checkmark;
-(void).cxx_destruct;
-(void)copyMessage:(id)message;
-(void)deleteMessage:(id)message;
-(void)replyMessage:(id)message;
-(void)selectMessage:(id)message;
-(void)deattach;
-(void)messageUpdated:(id)updated;
-(id)retrieveUserById:(id)anId;
-(void)transitionToReadState;
-(void)updateReadState;
-(void)didMoveToWindow;
-(void)actionMarkRead:(id)read;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)updateChecked:(BOOL)checked;
-(void)updateBackground:(BOOL)background;
-(void)didTransitionToState:(unsigned)state;
-(void)willTransitionToState:(unsigned)state;
-(void)prepareForReuse;
-(id)initWithDelegate:(id)delegate multidialog:(BOOL)multidialog selfdialog:(BOOL)selfdialog identifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface CommentSourceCell : CommentSourceCellBase {
	VKMImageView* _image;
	UILabel* _titleLabel;
}
@property(readonly, retain, nonatomic) UILabel* titleLabel;
@property(readonly, retain, nonatomic) VKMImageView* image;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutSubviews;
-(void)loadImage:(id)image expectedReuse:(double)reuse;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKLinkPage : VKDomain <VKTextPage> {
	VKLink* _link;
	NSURL* _url;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSURL* url;
@property(retain, nonatomic) VKLink* link;
+(id)pageForLink:(id)link;
-(void).cxx_destruct;
-(id)URLForTextPage;
@end

__attribute__((visibility("hidden")))
@interface WebAppTarget : XXUnknownSuperclass {
	NSNumber* _appId;
	NSNumber* _ownerId;
	NSString* _screenTitle;
	NSURL* _urlForLoad;
	NSURL* _urlForCopy;
}
@property(retain, nonatomic) NSURL* urlForCopy;
@property(retain, nonatomic) NSURL* urlForLoad;
@property(copy, nonatomic) NSString* screenTitle;
@property(retain, nonatomic) NSNumber* ownerId;
@property(retain, nonatomic) NSNumber* appId;
+(id)appLinkInfo:(id)info original_url:(id)url view_url:(id)url3 screen_title:(id)title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WebAppReportAction : ModelAction {
	unsigned _reason;
}
@property(assign, nonatomic) unsigned reason;
@property(retain, nonatomic) WebAppTarget* target;
+(int)domainType;
+(id)target:(id)target reason:(unsigned)reason;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface WebAppBrowserNavigationController : VKMModalNavigationController {
	Class _lastPresentedViewController;
}
@property(assign, nonatomic) Class lastPresentedViewController;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WebAppBrowserController : VKMController <WKNavigationDelegate> {
	WebAppTarget* _target;
	WKWebView* _webView;
	UIView* _loadingTitleView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WebAppTarget* target;
@property(retain, nonatomic) UIView* loadingTitleView;
@property(retain, nonatomic) WKWebView* webView;
-(void).cxx_destruct;
-(void)setupTitleLoading;
-(void)setupTitleFail;
-(void)setupTitleNormal;
-(void)webView:(id)view decidePolicyForNavigationAction:(id)navigationAction decisionHandler:(id)handler;
-(void)webView:(id)view didFailNavigation:(id)navigation withError:(id)error;
-(void)webView:(id)view didFinishNavigation:(id)navigation;
-(void)webView:(id)view didFailProvisionalNavigation:(id)navigation withError:(id)error;
-(void)webView:(id)view didStartProvisionalNavigation:(id)navigation;
-(int)VKMControllerStatusBarStyle;
-(int)VKMNavigationBarStyle;
-(void)actionActions:(id)actions;
-(void)actionCancel:(id)cancel;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithMain:(id)main target:(id)target;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface EditAttachmentStyle : XXUnknownSuperclass {
	BOOL _textShadow;
	NSString* _backgroundImage;
	NSString* _deleteImage;
	UIFont* _font1;
	UIFont* _font2;
	UIFont* _font3;
	float _cornerRadius;
	float _titlePadding;
	float _titleY;
	float _titleH1;
	float _titleH2;
	float _titleH3;
	CGSize _size;
	CGPoint _deleteOffset;
	UIEdgeInsets _borderInset;
	UIEdgeInsets _viewInset;
}
@property(assign, nonatomic) BOOL textShadow;
@property(assign, nonatomic) float titleH3;
@property(assign, nonatomic) float titleH2;
@property(assign, nonatomic) float titleH1;
@property(assign, nonatomic) float titleY;
@property(assign, nonatomic) float titlePadding;
@property(assign, nonatomic) CGPoint deleteOffset;
@property(assign, nonatomic) float cornerRadius;
@property(assign, nonatomic) UIEdgeInsets viewInset;
@property(assign, nonatomic) UIEdgeInsets borderInset;
@property(assign, nonatomic) CGSize size;
@property(retain, nonatomic) UIFont* font3;
@property(retain, nonatomic) UIFont* font2;
@property(retain, nonatomic) UIFont* font1;
@property(retain, nonatomic) NSString* deleteImage;
@property(retain, nonatomic) NSString* backgroundImage;
+(id)post;
+(id)messages;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface EditAttachment : XXUnknownSuperclass {
	int _state;
}
@property(assign, nonatomic) int state;
-(void)attachmentViewTapped;
-(void)cancel;
-(void)clearResources;
-(id)createOperation;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
-(void)startUploadInQueue:(id)queue;
-(void)notifyRender;
-(void)switchState:(int)state;
@end

__attribute__((visibility("hidden")))
@interface DomainEditAttachment : EditAttachment {
	VKDomain* _domain;
}
@property(retain, nonatomic) VKDomain* domain;
+(id)attachmentForDomain:(id)domain;
-(void).cxx_destruct;
-(float)defaultAttachmentRenderHeight;
-(id)imageVariants;
-(float)domainAttachmentImageRatio;
@end

__attribute__((visibility("hidden")))
@interface EditAttachmentView : XXUnknownSuperclass {
	EditAttachment* _attachment;
	UIImageView* _backgroundView;
	UIView* _renderView;
	UIButton* _cancelButton;
}
@property(readonly, retain, nonatomic) UIView* renderView;
@property(readonly, retain, nonatomic) UIImageView* backgroundView;
@property(readonly, retain, nonatomic) EditAttachment* attachment;
@property(retain, nonatomic) UIButton* cancelButton;
+(id)createRenderView;
-(void).cxx_destruct;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)notificationRender:(id)render;
-(void)actionDelete:(id)aDelete;
-(void)actionTapped:(id)tapped;
-(void)dealloc;
-(id)initWithAttachment:(id)attachment style:(id)style;
-(id)initWithAttachment:(id)attachment style:(id)style enableDeletion:(BOOL)deletion;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailEditAttachmentView : EditAttachmentView {
	id<VKImageFilter> _imageFilter;
}
@property(retain, nonatomic) id<VKImageFilter> imageFilter;
@property(readonly, retain, nonatomic) VKMImageView* renderView;
+(id)createRenderView;
-(void).cxx_destruct;
-(void)renderImage:(id)image;
-(void)renderUrl:(id)url;
-(void)dealloc;
-(id)initWithAttachment:(id)attachment style:(id)style;
@end

__attribute__((visibility("hidden")))
@interface UploadEditAttachmentView : ThumbnailEditAttachmentView <RoundedProgressOverlayViewDelegate> {
	UILabel* _failed;
	RoundedProgressOverlayView* _progress;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* failed;
@property(retain, nonatomic) RoundedProgressOverlayView* progress;
@property(readonly, retain, nonatomic) UploadEditAttachment* attachment;
-(void).cxx_destruct;
-(void)progressViewDidCancel:(id)progressView;
-(void)renderFinish;
-(void)renderFailed:(BOOL)failed;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)initWithAttachment:(id)attachment style:(id)style;
@end

__attribute__((visibility("hidden")))
@interface VideoEditAttachmentView : UploadEditAttachmentView {
	UILabel* _durationLabel;
}
@property(retain, nonatomic) VideoUploadEditAttachment* attachment;
@property(retain, nonatomic) UILabel* durationLabel;
-(void).cxx_destruct;
-(void)renderFinish;
-(void)renderFailed:(BOOL)failed;
-(void)renderDuration:(float)duration;
-(void)notificationThumbnail:(id)thumbnail;
-(void)dealloc;
-(id)initWithAttachment:(id)attachment style:(id)style;
@end

__attribute__((visibility("hidden")))
@interface PhotoEditAttachment : DomainEditAttachment {
}
@property(retain, nonatomic) VKPhoto* domain;
-(float)domainAttachmentImageRatio;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface VideoEditAttachment : DomainEditAttachment {
}
@property(retain, nonatomic) VKVideo* domain;
-(float)domainAttachmentImageRatio;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface TitledEditAttachmentView : EditAttachmentView {
	UILabel* _type;
	UILabel* _title;
	UILabel* _subtitle;
}
@property(retain, nonatomic) UILabel* subtitle;
@property(retain, nonatomic) UILabel* title;
@property(retain, nonatomic) UILabel* type;
+(id)createRenderView;
-(void).cxx_destruct;
-(void)renderType:(id)type title:(id)title subtitle:(id)subtitle;
-(id)initWithAttachment:(id)attachment style:(id)style;
@end

__attribute__((visibility("hidden")))
@interface VKSubscriptionPromoViewController : VKMController <PopupWindowController> {
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	UIActivityIndicatorView* _indicatorView;
	UIButton* _buyButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) VKSubscriptionItemModel* model;
@property(retain, nonatomic) UIButton* buyButton;
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) PopupWindowView* view;
-(void).cxx_destruct;
-(id)buyButtonAttributedString;
-(void)updateBuyButtonState:(BOOL)state;
-(void)notificationPurchase:(id)purchase;
-(void)notificationStore:(id)store;
-(void)model:(id)model updated:(id)updated;
-(void)modelLoadingChanged:(id)changed;
-(void)actionNotNowButton:(id)button;
-(void)actionBuyButton:(id)button;
-(id)contentView;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface VKSubscriptionPromoParagraphView : XXUnknownSuperclass {
}
-(id)initWithFrame:(CGRect)frame image:(id)image title:(id)title stringAttachImage:(id)image4;
-(id)initWithFrame:(CGRect)frame image:(id)image title:(id)title;
@end

__attribute__((visibility("hidden")))
@interface AttachmentsLayout : XXUnknownSuperclass {
	BOOL skipUpdate;
	AttachmentsContainer* _container;
	EditAttachmentStyle* _style;
	UIView* _view;
	NSMutableArray* _attachmentViews;
	NSArray* _extraViews;
}
@property(retain, nonatomic) NSArray* extraViews;
@property(retain, nonatomic) NSMutableArray* attachmentViews;
@property(retain, nonatomic) UIView* view;
@property(readonly, assign, nonatomic) EditAttachmentStyle* style;
@property(readonly, retain, nonatomic) AttachmentsContainer* container;
-(void).cxx_destruct;
-(CGSize)layoutSize;
-(void)animateAttachments:(id)attachments;
-(void)alignAttachments:(id)attachments;
-(int)indexForPoint:(CGPoint)point;
-(void)gestureLongPress:(id)press;
-(BOOL)checkCanAdd;
-(void)updateLayout;
-(void)resetLayout;
-(void)updateLayoutAnimated:(BOOL)animated delay:(double)delay animate:(id)animate completion:(id)completion;
-(void)change:(id)change animated:(BOOL)animated delay:(double)delay animate:(id)animate completion:(id)completion;
-(void)useExtraViews:(id)views;
-(void)notificationViewDelete:(id)aDelete;
-(void)notificationUpdated:(id)updated;
-(void)dealloc;
-(id)initWithContainer:(id)container style:(id)style;
@end

__attribute__((visibility("hidden")))
@interface WrapAttachmentsLayout : AttachmentsLayout {
	int _padding;
	int _cols;
	int _width;
	float _attachment_size;
	float _attachment_padding_x;
	float _attachment_padding_y;
	UIEdgeInsets _insets;
}
@property(assign, nonatomic) UIEdgeInsets insets;
@property(assign, nonatomic) float attachment_padding_y;
@property(assign, nonatomic) float attachment_padding_x;
@property(assign, nonatomic) float attachment_size;
-(CGSize)layoutSize;
-(void)alignAttachments:(id)attachments;
-(void)refresh;
-(int)indexForPoint:(CGPoint)point;
-(id)initWithContainer:(id)container style:(id)style;
@end

__attribute__((visibility("hidden")))
@interface AttachmentsContainer : XXUnknownSuperclass {
	int _limit;
	NSOperationQueue* _queue;
	NSMutableArray* _mutableAttachments;
}
@property(readonly, retain, nonatomic) NSArray* attachments;
@property(readonly, retain, nonatomic) NSOperationQueue* queue;
@property(readonly, assign, nonatomic) int limit;
@property(retain, nonatomic) NSMutableArray* mutableAttachments;
-(void).cxx_destruct;
-(void)notificationAttachment:(id)attachment;
-(id)firstDomainAttachmentOfType:(int)type;
-(void)changeLimit:(int)limit;
-(BOOL)allAttachmentsReady;
-(BOOL)canAddAttachmemt;
-(int)attachmentsLeft;
-(BOOL)hasAttachments;
-(void)activateAttachment:(id)attachment;
-(void)changeAttachments:(id)attachments;
-(void)cleanup;
-(void)_dropAttachment:(id)attachment;
-(void)dealloc;
-(id)initWithLimit:(int)limit queue:(id)queue;
@end

__attribute__((visibility("hidden")))
@interface ScrollAttachmentsLayout : AttachmentsLayout {
	float offset;
}
@property(retain, nonatomic) UIScrollView* view;
-(void)alignAttachments:(id)attachments;
-(int)indexForPoint:(CGPoint)point;
-(id)initWithContainer:(id)container style:(id)style;
@end

__attribute__((visibility("hidden")))
@interface AttachmentsConverter : XXUnknownSuperclass {
}
+(id)editsFromAttachments:(id)attachments;
+(id)attachmentsFromEdits:(id)edits pending:(BOOL)pending;
+(void)filterDomainAttachments:(id)attachments block:(id)block;
+(id)attachmentForDomain:(id)domain;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface ExternalPostInteractionStats : XXUnknownSuperclass <FeedPostInteractionStats> {
	VKPost* _post;
	ExternalAdsStatsManager* _statsManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) ExternalAdsStatsManager* statsManager;
@property(readonly, assign, nonatomic) VKPost* post;
+(id)post:(id)post statsManager:(id)manager;
-(void).cxx_destruct;
-(void)openImage:(id)image ref:(id)ref;
-(void)playAudio:(id)audio ref:(id)ref;
-(void)action:(int)action context:(id)context;
-(void)tapLinkAttachment:(id)attachment ref:(id)ref;
-(void)tapSnippetButton:(id)button ref:(id)ref;
-(void)tapSnippet:(id)snippet ref:(id)ref;
-(id)initWithPost:(id)post statsManager:(id)manager;
@end

__attribute__((visibility("hidden")))
@interface GeneralEditAttachment : DomainEditAttachment {
}
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface VKAudioThumb : VKDomain <VKImage> {
	NSMutableDictionary* _variants;
	float _ratio;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) NSMutableDictionary* variants;
-(void).cxx_destruct;
-(id)thumbnailUrl;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
-(id)pickVariantForSize:(CGSize)size;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LinkEditAttachment : DomainEditAttachment {
	NSString* _originUrl;
}
@property(retain, nonatomic) NSString* originUrl;
@property(retain, nonatomic) VKLink* domain;
-(void).cxx_destruct;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface CommentEditContext : PostEditContext {
	VKIdentity* _parentIdentity;
	VKStickerReferrerContext* _stickerReferrerContext;
	NSNumber* _fromGroup;
}
@property(retain, nonatomic) NSNumber* fromGroup;
@property(retain, nonatomic) VKStickerReferrerContext* stickerReferrerContext;
@property(retain, nonatomic) VKIdentity* parentIdentity;
@property(retain, nonatomic) VKComment* domain;
+(int)attachmentsLimit;
-(void).cxx_destruct;
-(unsigned)textLengthMax;
-(unsigned)textLengthMin;
-(id)title;
-(id)buildPostOptions;
-(void)useDomain:(id)domain edit:(BOOL)edit;
-(id)uploadTarget;
-(BOOL)autoDetectLinks;
-(id)confirmAction:(id)action;
-(id)withGroup:(id)group;
-(id)withParentIdentity:(id)parentIdentity;
@end

__attribute__((visibility("hidden")))
@interface VKAPLocationStorage : XXUnknownSuperclass {
	CLLocation* _location;
}
@property(retain, nonatomic) CLLocation* location;
+(id)sharedCache;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKFeedRecommendedFriends : VKFeed {
	NSString* _blockId;
	NSString* _type;
	NSArray* _friends;
	id _nextFrom;
	NSNumber* _accountImportBlockPos;
}
@property(retain, nonatomic) NSNumber* accountImportBlockPos;
@property(readonly, retain, nonatomic) id nextFrom;
@property(readonly, retain, nonatomic) NSArray* friends;
@property(readonly, retain, nonatomic) NSString* type;
@property(readonly, retain, nonatomic) NSString* blockId;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface EditContext : XXUnknownSuperclass {
	BOOL _edit;
	VKDomain* _domain;
	id _delayedModel;
	MainModel* _main;
	id _complete;
}
@property(copy, nonatomic) id complete;
@property(retain, nonatomic) MainModel* main;
@property(retain, nonatomic) id delayedModel;
@property(assign, nonatomic) BOOL edit;
@property(retain, nonatomic) VKDomain* domain;
+(id)context;
-(void).cxx_destruct;
-(id)confirmAction:(id)action;
-(Class)editControllerClass;
-(id)withComplete:(id)complete;
-(void)useDomain:(id)domain edit:(BOOL)edit;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumCell : VKMCell {
	VKMImageView* _thumbnailView;
	UILabel* _albumTitleLabel;
	UILabel* _countLabel;
}
@property(readonly, retain, nonatomic) UILabel* countLabel;
@property(readonly, retain, nonatomic) UILabel* albumTitleLabel;
@property(readonly, retain, nonatomic) VKMImageView* thumbnailView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WallExtraModel : FeedModel {
	VKWallExtra* _extra;
}
@property(retain, nonatomic) VKWallExtra* extra;
-(void).cxx_destruct;
-(void)handleAdd:(id)add :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)process:(id)process context:(id)context statContext:(id)context3;
-(id)requestForContext:(id)context;
-(int)resultDomain;
-(id)countKey;
-(id)withExtra:(id)extra;
@end

__attribute__((visibility("hidden")))
@interface TextEditContext : EditContext {
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
-(void).cxx_destruct;
-(id)placeholderText;
-(id)tooShortFormatKey;
-(unsigned)textLengthMax;
-(unsigned)textLengthMin;
-(id)title;
-(Class)editControllerClass;
@end

__attribute__((visibility("hidden")))
@interface ItemEditContext : EditContext {
	NSString* _title;
	NSString* _descr;
	VKPrivacySetting* _privacy_view;
	VKPrivacySetting* _privacy_comment;
}
@property(retain, nonatomic) VKPrivacySetting* privacy_comment;
@property(retain, nonatomic) VKPrivacySetting* privacy_view;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(int)descrMax;
-(int)descrMin;
-(int)titleMax;
-(int)titleMin;
-(id)descrPlaceholder;
-(id)titlePlaceholder;
-(BOOL)editPrivacy;
-(id)editTitle;
-(Class)editControllerClass;
@end

__attribute__((visibility("hidden")))
@interface StickerSuggestionsInfo : VKDomain {
	NSString* _baseURL;
	NSDictionary* _stickersForKey;
	NSSet* _availableStickersIds;
}
@property(retain, nonatomic) NSSet* availableStickersIds;
@property(retain, nonatomic) NSDictionary* stickersForKey;
@property(copy, nonatomic) NSString* baseURL;
-(void).cxx_destruct;
-(id)availableStickersIdsForStickersIds:(id)stickersIds;
-(id)suggestedStickersIdsForText:(id)text recentStickersIds:(id)ids;
-(id)stickersIdsForText:(id)text;
-(id)keyForText:(id)text;
-(id)signinficantTextForText:(id)text;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface SafariSharingActivity : XXUnknownSuperclass {
	NSURL* _url;
}
@property(copy, nonatomic) NSURL* url;
-(void).cxx_destruct;
-(void)performActivity;
-(void)prepareWithActivityItems:(id)activityItems;
-(BOOL)canPerformWithActivityItems:(id)activityItems;
-(id)activityImage;
-(id)activityTitle;
-(id)activityType;
@end

__attribute__((visibility("hidden")))
@interface PostEditOption : XXUnknownSuperclass {
	BOOL _on;
	BOOL _enabled;
	BOOL _marks;
	unsigned _tag;
	NSString* _text;
	NSString* _section;
	NSString* _renderIcon;
	NSString* _renderText;
	UIView* _renderView;
}
@property(retain, nonatomic) UIView* renderView;
@property(retain, nonatomic) NSString* renderText;
@property(retain, nonatomic) NSString* renderIcon;
@property(retain, nonatomic) NSString* section;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) BOOL marks;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) BOOL on;
@property(assign, nonatomic) unsigned tag;
+(void)lookupOptions:(id)options block:(id)block;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PostEditContext : TextEditContext {
	BOOL _timerAllowed;
	BOOL _timerEnabled;
	BOOL _shouldApplyServerTimeOffset;
	AttachmentsContainer* _attachmentsContainer;
	id<VKPlaceDescription> _place;
	NSArray* _postOptions;
	NSDate* _timerDate;
	NSNumber* _guid;
}
@property(retain, nonatomic) NSNumber* guid;
@property(retain, nonatomic) NSDate* timerDate;
@property(assign, nonatomic) BOOL shouldApplyServerTimeOffset;
@property(assign, nonatomic) BOOL timerEnabled;
@property(assign, nonatomic) BOOL timerAllowed;
@property(retain, nonatomic) NSArray* postOptions;
@property(retain, nonatomic) id<VKPlaceDescription> place;
@property(retain, nonatomic) AttachmentsContainer* attachmentsContainer;
+(int)attachmentsLimit;
-(void).cxx_destruct;
-(void)postOptionsChanged:(id)changed;
-(id)buildPostOptions;
-(id)uploadTarget;
-(BOOL)allowAudioPlaylists;
-(BOOL)allowPolls;
-(BOOL)autoDetectLinks;
-(int)locationType;
-(id)safeTimerDate;
-(void)resetGuid;
-(id)withAttachments:(id)attachments;
-(Class)editControllerClass;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface UploadBatchContext : XXUnknownSuperclass {
	id _serverData;
	double _timestamp;
	double _timeout;
}
@property(retain) id serverData;
@property(assign) double timeout;
@property(assign) double timestamp;
-(void).cxx_destruct;
-(id)freshServerData;
-(void)invalidate:(id)invalidate;
-(void)useServerData:(id)data timeout:(double)timeout;
-(void)useServerData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface DocsSketchUploadEditAttachment : UploadEditAttachment {
}
@property(readonly, retain, nonatomic) ClientBasedUploadOperation* operation;
@property(retain, nonatomic) DocsSketchUploadContext* context;
-(id)domain;
@end

__attribute__((visibility("hidden")))
@interface CoalescedPerformer : XXUnknownSuperclass {
	double last;
	BOOL pending;
	id _block;
	id<CoalescedPerformerDelegate> _delegate;
	double _interval;
}
@property(assign, nonatomic) __weak id<CoalescedPerformerDelegate> delegate;
@property(copy, nonatomic) id block;
@property(assign, nonatomic) double interval;
-(void).cxx_destruct;
-(void)clear;
-(void)invalidate;
-(void)resetDelay;
-(void)performWithBlock:(id)block force:(BOOL)force;
-(void)perform:(BOOL)perform;
-(void)perform;
-(void)_perform:(id)perform;
@end

__attribute__((visibility("hidden")))
@interface VKGift : VKDomain <VKImage> {
	NSMutableDictionary* _variants;
	float _ratio;
	NSNumber* _stickers_product_id;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSNumber* stickers_product_id;
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) NSMutableDictionary* variants;
-(void).cxx_destruct;
-(id)thumbnailUrl;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKStickerReferrerContext : XXUnknownSuperclass {
	int _source;
	NSString* _keyword;
}
@property(copy, nonatomic) NSString* keyword;
@property(assign, nonatomic) int source;
+(id)contextSuggestionWithKeyword:(id)keyword;
+(id)contextKeyboard;
-(void).cxx_destruct;
-(id)stringRepresentation;
@end

__attribute__((visibility("hidden")))
@interface VKSticker : VKDomain <VKImage> {
	NSMutableDictionary* _variants;
	float _ratio;
	NSString* _knownBaseURL;
	NSNumber* _productId;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSNumber* productId;
@property(retain, nonatomic) NSString* knownBaseURL;
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) NSMutableDictionary* variants;
+(id)prepareForSendingSticker:(id)sendingSticker baseURL:(id)url referenceImage:(id)image;
+(id)stickerWithId:(id)anId image:(id)image baseURL:(id)url ratio:(float)ratio;
+(void)initialize;
-(void).cxx_destruct;
-(id)thumbnailUrl;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MBContactPicker : XXUnknownSuperclass <UITableViewDataSource, UITableViewDelegate, MBContactCollectionViewDelegate> {
	BOOL _allowsCompletionOfSelectedContacts;
	BOOL _enabled;
	BOOL _showPrompt;
	BOOL _hasLoadedData;
	id<MBContactPickerDelegate> _delegate;
	id<MBContactPickerDataSource> _datasource;
	NSString* _prompt;
	float _maxVisibleRows;
	float _keyboardHeight;
	float _animationSpeed;
	UIFont* _font;
	MBContactCollectionView* _contactCollectionView;
	UIView* _searchTableView;
	NSArray* _filteredContacts;
	NSArray* _contacts;
	UIView* _weakSearchTable;
	CGSize _contactCollectionViewContentSize;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) BOOL showPrompt;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) BOOL allowsCompletionOfSelectedContacts;
@property(assign, nonatomic) float animationSpeed;
@property(readonly, assign, nonatomic) float currentContentHeight;
@property(assign, nonatomic) float maxVisibleRows;
@property(copy, nonatomic) NSString* prompt;
@property(assign, nonatomic) int cellHeight;
@property(readonly, assign, nonatomic) NSArray* contactsSelected;
@property(assign, nonatomic) __weak id<MBContactPickerDataSource> datasource;
@property(assign, nonatomic) __weak id<MBContactPickerDelegate> delegate;
@property(assign, nonatomic) __weak UIView* weakSearchTable;
@property(assign, nonatomic) BOOL hasLoadedData;
@property(assign, nonatomic) CGSize contactCollectionViewContentSize;
@property(assign, nonatomic) float keyboardHeight;
@property(retain, nonatomic) NSArray* contacts;
@property(retain, nonatomic) NSArray* filteredContacts;
@property(retain, nonatomic) UIView* searchTableView;
@property(assign, nonatomic) __weak MBContactCollectionView* contactCollectionView;
-(void).cxx_destruct;
-(void)updateCollectionViewHeightConstraints;
-(void)hideSearchTableView;
-(void)showSearchTableView;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(void)resetLastInput;
-(void)addToSelectedContacts:(id)selectedContacts;
-(BOOL)contactCollectionView:(id)view shouldRemoveContact:(id)contact;
-(BOOL)contactCollectionView:(id)view shouldAddContact:(id)contact;
-(void)contactCollectionView:(id)view didEnterCustomContact:(id)contact;
-(void)contactCollectionView:(id)view didSelectContact:(id)contact;
-(void)contactCollectionView:(id)view didAddContact:(id)contact;
-(void)contactCollectionView:(id)view didRemoveContacts:(id)contacts;
-(void)contactCollectionView:(id)view didRemoveContact:(id)contact;
-(void)contactCollectionView:(id)view entryTextDidChange:(id)entryText;
-(void)contactCollectionView:(id)view willChangeContentSizeTo:(CGSize)to;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)removeContacts:(id)contacts withCompletion:(id)completion;
-(void)addToSelectedContacts:(id)selectedContacts withCompletion:(id)completion;
-(void)reloadData;
-(CGRect)searchTableFrame;
-(void)keyboardChangedStatus:(id)status;
-(BOOL)delegateHasOwnSearchTable;
-(void)setup;
-(void)willMoveToWindow:(id)window;
-(void)didMoveToWindow;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKButtonExtraTouchArea : XXUnknownSuperclass {
	float _extraTouchAreaSize;
}
@property(assign, nonatomic) float extraTouchAreaSize;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleModelContext : ListModelContext {
	SearchPeopleFilter* _filter;
}
@property(retain, nonatomic) SearchPeopleFilter* filter;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleModel : ListModel {
	SearchPeopleFilterRenderable* _filterRenderable;
}
@property(retain, nonatomic) SearchPeopleModelContext* lastContext;
@property(retain, nonatomic) SearchPeopleFilterRenderable* filterRenderable;
-(void).cxx_destruct;
-(id)countString;
-(void)handleAddFriend:(id)aFriend :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)clearIndex;
-(void)resetWithSearchQuery:(id)searchQuery;
-(id)currentFilter;
-(void)applyFilter:(id)filter;
-(id)indexWithUsers:(id)users;
-(id)process:(id)process;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsModelAddressBookContext : ModelContext {
	NSArray* _records;
	NSArray* _contacts;
}
@property(retain, nonatomic) NSArray* contacts;
@property(retain, nonatomic) NSArray* records;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsModelAddressBook : LookupFriendsModel {
	AddressBook* _addressBook;
}
@property(retain, nonatomic) AddressBook* addressBook;
-(void).cxx_destruct;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)lookupResponseWithData:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)recordsFromAddressBook:(id)addressBook;
-(id)contactsForRecords:(id)records;
-(BOOL)shouldLoad:(id)load;
-(id)spawnContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsModelFacebook : LookupFriendsModel {
	FacebookContactsLoader* _loader;
	NSArray* _friendIdentifiers;
}
@property(retain, nonatomic) FacebookContactsLoader* loader;
@property(retain, nonatomic) NSArray* friendIdentifiers;
-(void).cxx_destruct;
-(void)loadFriendsIdentifiers;
-(id)lookupResponseWithData:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(BOOL)shouldLoad:(id)load;
-(void)activate;
-(void)reset;
@end

__attribute__((visibility("hidden")))
@interface PromotionComponent : Component5 {
}
+(id)promotionComponent:(id)component withTitleComponent:(id)titleComponent;
+(id)promotionComponent:(id)component withTitle:(id)title detailsComponent:(id)component3;
+(id)promotionComponent:(id)component withTitle:(id)title;
+(id)titleComponentWithText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface VKAPGiftsViewController : GiftsCatalogController <VKAPTabViewControllerProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)scrollView;
-(BOOL)VKMScrollViewDisablePTR;
-(void)VKMNavigationBarUpdate;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface StickersSuggestionsModel : ItemModel {
	BOOL _dirty;
}
@property(retain, nonatomic) StickerSuggestionsInfo* item;
@property(assign, nonatomic) BOOL dirty;
+(id)uploadDateXAttrValue;
+(id)uploadDateXAttrName;
+(id)versionXAttrValue;
+(id)versionXAttrName;
-(id)process:(id)process context:(id)context;
-(id)request;
-(void)cachedIndexForContext:(id)context withCompletion:(id)completion;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(BOOL)isCacheNotExpired;
-(BOOL)isCacheVersionOK;
-(id)cacheFileURL;
-(void)touch;
-(void)markAsDirty;
-(void)notificationProductPurchased:(id)purchased;
-(void)handleActionActivate:(id)activate :(id)arg2;
-(void)handleActionReorder:(id)reorder :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)initWithSession:(id)session;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface TransparentToolbar : XXUnknownSuperclass {
	BOOL _passThroughBackgoundTouches;
}
@property(assign, nonatomic) BOOL passThroughBackgoundTouches;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryUIFactory : XXUnknownSuperclass {
}
+(id)transparentToolbarWithFrame:(CGRect)frame autoresizingMask:(unsigned)mask;
+(id)bottomScrimImageViewAlignedInFrame:(CGRect)frame;
+(id)topScrimImageViewAlignedInFrame:(CGRect)frame;
+(id)scrimImageViewWithImageNamed:(id)imageNamed autoresizingMask:(unsigned)mask;
+(id)buttonWithNormalStateImageNamed:(id)normalStateImageNamed selectedStateImageNamed:(id)named hitTestAreaExtent:(UIEdgeInsets)extent;
+(id)barButtonItemWithNormalStateImageNamed:(id)normalStateImageNamed selectedStateImageNamed:(id)named target:(id)target action:(SEL)action;
+(id)barButtonItemWithImageNamed:(id)imageNamed target:(id)target action:(SEL)action;
+(id)fixedSpace:(float)space;
@end

__attribute__((visibility("hidden")))
@interface FacebookContactsLoader : XXUnknownSuperclass {
	NSString* _token;
}
@property(readonly, copy, nonatomic) NSString* token;
+(id)loaderWithFacebookAuth:(id)facebookAuth;
+(id)loaderWithFacebookToken:(id)facebookToken;
-(void).cxx_destruct;
-(void)loadFriendsIdentifiersWithCompletion:(id)completion;
-(id)friendIdentifiersWithData:(id)data;
-(id)initWithFacebookAuth:(id)facebookAuth;
-(id)initWithFacebookToken:(id)facebookToken;
@end

__attribute__((visibility("hidden")))
@interface RecommendedFriendsModelContext : ListModelContext {
	id _from;
}
@property(retain, nonatomic) id from;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface RecommendedFriendsModel : ListModel {
	NSMutableSet* _displayedUsers;
}
@property(retain, nonatomic) NSMutableSet* displayedUsers;
+(id)with:(id)with;
-(void).cxx_destruct;
-(void)viewed:(id)viewed;
-(BOOL)requireViewed;
-(id)recommendedFriendAtIndexPath:(id)indexPath;
-(void)handleAddressBook:(id)book :(id)arg2;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)handleDelete:(id)aDelete :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)updateBuilder:(id)builder enumerateFriend:(id)aFriend withBlock:(id)block;
-(BOOL)isForegroundModelForEventContext:(id)eventContext;
-(id)itemsToAppend:(id)append to:(id)to;
-(id)process:(id)process;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestFrom:(id)from count:(int)count;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface GoogleContact : XXUnknownSuperclass {
	NSString* _email;
	NSString* _name;
	NSString* _imageUrlString;
}
@property(copy, nonatomic) NSString* imageUrlString;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* email;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface GoogleContactsFeed : XXUnknownSuperclass {
	NSArray* _contacts;
	GoogleContact* _author;
}
@property(retain, nonatomic) GoogleContact* author;
@property(retain, nonatomic) NSArray* contacts;
+(id)feedWithDictionary:(id)dictionary error:(id*)error;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface DocsAudioMessageUploadContext : DocsUploadContext {
	VKAudioMessage* _representationByLocalAudioMessage;
	NSData* _recordData;
}
@property(retain, nonatomic) VKAudioMessage* representationByLocalAudioMessage;
@property(retain, nonatomic) NSData* recordData;
+(id)docsAudioMessageContextWithSession:(id)session opusRecord:(id)record;
-(void).cxx_destruct;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(void)loadUploadData:(id)data;
-(id)requestForUploadServer;
@end

__attribute__((visibility("hidden")))
@interface AddressBookNewContactViewController : XXUnknownSuperclass <ABUnknownPersonViewControllerDelegate> {
	ABUnknownPersonViewController* _legacyPersonViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ABUnknownPersonViewController* legacyPersonViewController;
+(id)contactViewControllerWithPhone:(id)phone;
-(void).cxx_destruct;
-(BOOL)unknownPersonViewController:(id)controller shouldPerformDefaultActionForPerson:(void*)person property:(int)property identifier:(int)identifier;
-(void)unknownPersonViewController:(id)controller didResolveToPerson:(void*)person;
-(void)actionDismiss:(id)dismiss;
-(void)viewWillAppear:(BOOL)view;
-(id)initWithPerson:(void*)person;
@end

__attribute__((visibility("hidden")))
@interface LocationStat : XXUnknownSuperclass {
	int _status;
	CLLocation* _location;
}
@property(readonly, assign, nonatomic) CLLocation* location;
@property(readonly, assign, nonatomic) int status;
+(id)statWithLocationNotDetermined;
+(id)statWithLocationDenied;
+(id)statWithLocation:(id)location;
-(void).cxx_destruct;
-(id)initWithStatus:(int)status location:(id)location;
@end

__attribute__((visibility("hidden")))
@interface GoogleOAuthAuthorization : XXUnknownSuperclass <NSCoding> {
	NSString* _token_type;
	NSNumber* _expires_in;
	NSString* _access_token;
	NSString* _refresh_token;
	NSString* _id_token;
}
@property(copy, nonatomic) NSString* id_token;
@property(copy, nonatomic) NSString* refresh_token;
@property(copy, nonatomic) NSString* access_token;
@property(copy, nonatomic) NSNumber* expires_in;
@property(copy, nonatomic) NSString* token_type;
+(id)authorizationObjectWithDictionary:(id)dictionary;
+(void)removeStoredAuthorization;
+(id)storedAuthorization;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
-(void)save;
@end

__attribute__((visibility("hidden")))
@interface GoogleOAuthClient : XXUnknownSuperclass {
	id<GoogleOauthClientConfiguration> _configuration;
	AFHTTPClient* _httpClient;
	id _handler;
}
@property(retain, nonatomic) id<GoogleOauthClientConfiguration> configuration;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) AFHTTPClient* httpClient;
+(id)sharedClient;
-(void).cxx_destruct;
-(void)loadContactsUsingAuthorization:(id)authorization completion:(id)completion;
-(void)authorizeForContactsAccessWithCompletion:(id)completion;
-(void)performRequest:(id)request completion:(id)completion;
-(id)authorizeRequest:(id)request withAuthorization:(id)authorization;
-(void)authorizeWithScopes:(id)scopes completion:(id)completion;
-(void)authorizeWithCode:(id)code completion:(id)completion;
-(void)obtainAuthorizationCodeWithScopes:(id)scopes completion:(id)completion;
-(BOOL)handleOpenUrl:(id)url;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface GoogleOAuthClientConfiguration : XXUnknownSuperclass <GoogleOauthClientConfiguration> {
	NSString* _redirectUri;
	NSString* _clientIdentifier;
	NSString* _clientSecret;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* clientSecret;
@property(copy, nonatomic) NSString* clientIdentifier;
@property(copy, nonatomic) NSString* redirectUri;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsModelGmail : LookupFriendsModel {
	GmailContactsLoader* _loader;
	GoogleContactsFeed* _contactsFeed;
}
@property(retain, nonatomic) GmailContactsLoader* loader;
@property(retain, nonatomic) GoogleContactsFeed* contactsFeed;
-(void).cxx_destruct;
-(id)lookupResponseWithData:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(BOOL)shouldLoad:(id)load;
-(void)loadFeed;
-(void)activate;
-(void)reset;
@end

__attribute__((visibility("hidden")))
@interface VKLivePromoView : XXUnknownSuperclass {
	UIButton* _downloadButton;
}
@property(retain, nonatomic) UIButton* downloadButton;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKLivePromoController : XXUnknownSuperclass <PopupWindowController> {
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	id _target;
	SEL _action;
	PopupWindowView* _popupWindowView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) SEL action;
@property(assign, nonatomic) __weak id target;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) PopupWindowView* popupWindowView;
-(void).cxx_destruct;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(void)loadView;
-(int)preferredStatusBarStyle;
-(unsigned)supportedInterfaceOrientations;
@end

__attribute__((visibility("hidden")))
@interface GmailContactsLoader : XXUnknownSuperclass {
	GoogleOAuthAuthorization* _authorization;
	GoogleOAuthClient* _client;
}
@property(retain, nonatomic) GoogleOAuthClient* client;
@property(retain, nonatomic) GoogleOAuthAuthorization* authorization;
+(id)loaderWithClient:(id)client authorization:(id)authorization;
-(void).cxx_destruct;
-(void)loadContactsWithCompletion:(id)completion;
-(id)initWithClient:(id)client authorization:(id)authorization;
@end

__attribute__((visibility("hidden")))
@interface Wizard : XXUnknownSuperclass {
	NSArray* _steps;
	VKMController* _currentStepViewController;
}
@property(readonly, assign, nonatomic) NSArray* steps;
@property(assign, nonatomic) __weak VKMController* currentStepViewController;
+(void)beginWithSteps:(id)steps navContext:(id)context animated:(BOOL)animated;
-(void).cxx_destruct;
-(void)bindViewController:(id)controller;
-(void)skip;
-(BOOL)isLastStep;
-(void)actionDone:(id)done;
-(void)actionNext:(id)next;
-(id)nextStepWizard;
-(id)initWithSteps:(id)steps;
-(id)currentStepInfo;
-(void)showWithContext:(id)context animated:(BOOL)animated;
-(void)continueWithContext:(id)context;
-(void)prepareViewControllerWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface LookupContactRecord : XXUnknownSuperclass {
	NSString* _label;
	NSString* _contact;
	int _serviceType;
}
@property(assign, nonatomic) int serviceType;
@property(copy, nonatomic) NSString* contact;
@property(copy, nonatomic) NSString* label;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LookupContactOther : VKRenderable {
	BOOL _invited;
	NSString* _subtitle;
	NSString* _firstName;
	NSString* _lastName;
	NSString* _imageUrlString;
	UIImage* _image;
	NSArray* _records;
}
@property(retain, nonatomic) NSArray* records;
@property(assign, nonatomic) BOOL invited;
@property(retain, nonatomic) UIImage* image;
@property(copy, nonatomic) NSString* imageUrlString;
@property(copy, nonatomic) NSString* lastName;
@property(copy, nonatomic) NSString* firstName;
@property(copy, nonatomic) NSString* subtitle;
-(void).cxx_destruct;
-(id)fullName;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface LookupContactOtherCell : LookupContactCell {
}
-(void)setContactInvited:(BOOL)invited;
-(void)inviteContact;
-(id)makeInviteButton;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsModel : LoadingModel {
}
-(void)handleAddFriend:(id)aFriend :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)countKey;
-(id)responseWithSordedValues:(id)sordedValues;
-(int)resultForRequestResponse:(id)requestResponse;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)initWithSession:(id)session;
-(id)lookupResponseWithData:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsResponse : XXUnknownSuperclass {
	NSArray* _foundUsers;
	NSArray* _notFoundUsers;
}
@property(retain, nonatomic) NSArray* notFoundUsers;
@property(retain, nonatomic) NSArray* foundUsers;
+(id)addressBookLookupResponseWithData:(id)data combinedWithRecords:(id)records;
+(id)responseWithFacebookLookupResponse:(id)facebookLookupResponse;
+(id)responseWithGmailLookupResponse:(id)gmailLookupResponse combinedWithFeed:(id)feed;
+(id)responseWithTwitterLookupResponse:(id)twitterLookupResponse combinedWithFriends:(id)friends;
-(void).cxx_destruct;
-(id)initWithAddressBookLookupResponseWithData:(id)data combinedWithRecords:(id)records;
-(id)initWithFacebookLookupResponse:(id)facebookLookupResponse;
-(id)initWithGmailLookupResponse:(id)gmailLookupResponse combinedWithFeed:(id)feed;
-(id)initWithTwitterLookupResponse:(id)twitterLookupResponse combinedWithFriends:(id)friends;
@end

__attribute__((visibility("hidden")))
@interface StoryStatContext : StatContext {
	BOOL actionsUsage[4];
	BOOL actionsFinalUsage[4];
	unsigned _storyType;
	int _length;
	NSArray* _stickerIds;
}
@property(retain, nonatomic) NSArray* stickerIds;
@property(assign, nonatomic) int length;
@property(assign, nonatomic) unsigned storyType;
+(id)context;
-(void).cxx_destruct;
-(id)statsEvent;
-(void)resetFinalUsage;
-(void)markFinalUsageOfActionType:(unsigned)actionType;
-(void)markUsageOfActionType:(unsigned)actionType;
@end

__attribute__((visibility("hidden")))
@interface FindFriendsOptionCell : VKMCell <CLLocationManagerDelegate> {
	CLLocationManager* _locationManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) CLLocationManager* locationManager;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)searchPeople;
-(void)nearbySearchShowScreen;
-(void)processNearby;
-(void)processTwitter;
-(void)processGmail;
-(void)processFacebook;
-(void)processAddressBook;
-(BOOL)selected;
-(void)layoutSubviews;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface FindFriendsOptionRenderable : VKRenderable {
	int _option;
}
@property(assign, nonatomic) int option;
+(id)renderableWithOption:(int)option;
-(Class)cellClass;
-(id)initWithOption:(int)option;
@end

__attribute__((visibility("hidden")))
@interface VKMFindFriendsOptionsModel : ListModel {
	int _introMask;
	NSArray* _findFriendsOptions;
}
@property(assign, nonatomic) int introMask;
@property(retain, nonatomic) NSArray* findFriendsOptions;
+(int)introStep;
-(void).cxx_destruct;
-(void)handleAddFriend:(id)aFriend :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)countKey;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)indexWithUsers:(id)users;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VKCity : VKDomain {
	BOOL _important;
	NSString* _title;
	NSString* _areaName;
	NSString* _regionName;
}
@property(copy, nonatomic) NSString* regionName;
@property(copy, nonatomic) NSString* areaName;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) BOOL important;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
-(id)description;
-(id)details;
@end

__attribute__((visibility("hidden")))
@interface AudioSimilarModel : ListModel {
	VKIdentity* _audioIden;
}
@property(retain, nonatomic) VKIdentity* audioIden;
-(void).cxx_destruct;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)request:(int)request count:(int)count;
-(id)process:(id)process;
-(int)defaultPage;
-(id)countKey;
-(id)setupAudioIden:(id)iden;
@end

__attribute__((visibility("hidden")))
@interface VKCountry : VKDomain {
	NSString* _title;
}
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface LiveVideoGradientViewComponent : Component5 {
}
+(id)liveView;
@end

__attribute__((visibility("hidden")))
@interface LiveVideoGradientViewComponentController : Component5Controller {
}
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface MBContactCollectionViewFlowLayout : XXUnknownSuperclass {
}
-(void)finalizeCollectionViewUpdates;
-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)boundsChange;
-(id)layoutAttributesForItemAtIndexPath:(id)indexPath;
-(id)layoutAttributesForElementsInRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFilter : XXUnknownSuperclass <NSCopying> {
	NSString* _queryString;
	int _status;
	VKCountry* _country;
	VKCity* _city;
	int _sex;
	unsigned _ageFrom;
	unsigned _ageTo;
}
@property(assign, nonatomic) unsigned ageTo;
@property(assign, nonatomic) unsigned ageFrom;
@property(assign, nonatomic) int sex;
@property(retain, nonatomic) VKCity* city;
@property(retain, nonatomic) VKCountry* country;
@property(assign, nonatomic) int status;
@property(copy, nonatomic) NSString* queryString;
+(id)emptyFilter;
-(void).cxx_destruct;
-(BOOL)isEqualToFilter:(id)filter;
-(BOOL)hasParameters;
-(BOOL)isEmptyFilter;
-(id)copyWithZone:(NSZone*)zone;
-(id)detailedDescription;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFilterRenderable : VKRenderable {
	SearchPeopleFilter* _filter;
}
@property(retain, nonatomic) SearchPeopleFilter* filter;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface CitySelectionModel : ListModel {
	VKCountry* _country;
	VKCity* _selectedCity;
}
@property(retain, nonatomic) VKCity* selectedCity;
@property(retain, nonatomic) VKCountry* country;
-(void).cxx_destruct;
-(id)countKey;
-(id)process:(id)process;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistDetailContext : ListModelContext {
	VKAudioPlaylist* _playlist;
	id<VKSource> _source;
}
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) VKAudioPlaylist* playlist;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistDetailModel : ListModel {
	BOOL _editing;
	VKIdentity* _playlistIden;
	id<AudioPlaylistDetailModelDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<AudioPlaylistDetailModelDelegate> delegate;
@property(retain, nonatomic) VKIdentity* playlistIden;
@property(retain, nonatomic) AudioPlaylistDetailContext* lastContext;
@property(readonly, retain, nonatomic) VKAudioPlaylist* playlist;
-(void).cxx_destruct;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)fillAudioActionsForBuilder:(id)builder item:(id)item;
-(void)fillActions:(id)actions;
-(void)didUpdatePlaylist;
-(void)didDeletePlaylist;
-(void)resetIndex;
-(void)handleUpdateAudioPlaylistCover:(id)cover :(id)arg2;
-(void)handleReorderAudio:(id)audio :(id)arg2;
-(void)handleRemoveAudioFromPlaylist:(id)playlist :(id)arg2;
-(void)handleAddAudiosToPlaylist:(id)playlist :(id)arg2;
-(void)handleEditAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleDeleteAudioPlaylist:(id)playlist :(id)arg2;
-(void)handleFollowAudioPlaylist:(id)playlist :(id)arg2;
-(void)registerForEvents:(id)events;
-(int)resultForRequestResponse:(id)requestResponse;
-(id)buttonForEditingMode:(id)editingMode audioCount:(unsigned)count;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)process:(id)process;
-(int)totalDurationSecs;
-(id)countString;
-(id)countKey;
-(id)audiosToPlay;
-(id)source;
-(id)spawnContext:(id)context;
-(id)setupAudioPlaylistIden:(id)iden;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsOverlayView : XXUnknownSuperclass {
	NSArray* _focusViews;
	id<PhotoTagsOverlayViewDelegate> _delegate;
	VKPhotoTag* _selectedTag;
	VKPhotoTags* _tags;
	UIView* _focusView;
	CGRect _photoRect;
}
@property(assign, nonatomic) CGRect photoRect;
@property(retain, nonatomic) UIView* focusView;
@property(retain, nonatomic) VKPhotoTags* tags;
@property(retain, nonatomic) VKPhotoTag* selectedTag;
@property(assign, nonatomic) __weak id<PhotoTagsOverlayViewDelegate> delegate;
-(void).cxx_destruct;
-(void)setSelectedTag:(id)tag animated:(BOOL)animated;
-(void)layoutFocusViewsForFrame:(CGRect)frame;
-(void)setActive:(BOOL)active animated:(BOOL)animated;
-(void)performBlock:(id)block animated:(BOOL)animated;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)tagAtPoint:(CGPoint)point;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(CGRect)frameForImage;
-(CGRect)frameForTag:(id)tag;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsOverlayComponentState : XXUnknownSuperclass {
	VKPhotoTags* _tags;
	VKPhotoTag* _selectedTag;
}
@property(retain, nonatomic) VKPhotoTag* selectedTag;
@property(retain, nonatomic) VKPhotoTags* tags;
+(id)stateWithTags:(id)tags selectedTag:(id)tag;
-(void).cxx_destruct;
-(id)stateWithSelectedTag:(id)selectedTag;
-(id)initWithTags:(id)tags selectedTag:(id)tag;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsOverlayComponent : Component5 {
	ThumbnailComponent* _thumbnailComponent;
}
@property(retain, nonatomic) ThumbnailComponent* thumbnailComponent;
+(id)photoTags:(id)tags;
+(id)photo:(id)photo;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsOverlayComponentController : Component5Controller <PhotoTagsOverlayViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)createView;
-(CGRect)photoTagsOverlayView:(id)view rectForTag:(id)tag;
-(id)photoTagsOverlayView:(id)view tagAtPoint:(CGPoint)point;
-(void)photoTagsOverlayView:(id)view didSelectTag:(id)tag;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)setComponent:(id)component;
-(id)initWithView:(id)view context:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsTextComponentState : XXUnknownSuperclass {
	VKPhotoTags* _tags;
	VKPhotoTag* _selectedTag;
}
@property(retain, nonatomic) VKPhotoTag* selectedTag;
@property(retain, nonatomic) VKPhotoTags* tags;
+(id)stateWithTags:(id)tags selectedTag:(id)tag;
-(void).cxx_destruct;
-(id)stateWithSelectedTag:(id)selectedTag;
-(id)initWithTags:(id)tags selectedTag:(id)tag;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsTextComponent : Component5 {
	ThumbnailComponent* _thumbnailComponent;
	TextComponentInteractive* _textComponent;
}
@property(retain, nonatomic) ThumbnailComponent* thumbnailComponent;
@property(retain, nonatomic) TextComponentInteractive* textComponent;
+(id)photoTags:(id)tags;
-(void).cxx_destruct;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsTextComponentController : Component5Controller <TextKitLabelDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)createView;
-(BOOL)textKitLabel:(id)label shouldSelectAttribute:(id)attribute;
-(BOOL)textKitLabel:(id)label shouldHighlightAttribute:(id)attribute;
-(BOOL)thumbnailViewHasImage;
-(void)textKitLabel:(id)label didSelectAttribute:(id)attribute;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)setNode:(id)node;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsComponent : Component5 <Component5StateListener> {
	PhotoTagsOverlayComponent* _overlayComponent;
	PhotoTagsTextComponent* _textComponent;
	ThumbnailsComponent* _thumbnailsComponent;
	ThumbnailComponent* _thumbnailComponent;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) ThumbnailComponent* thumbnailComponent;
@property(readonly, assign, nonatomic) ThumbnailsComponent* thumbnailsComponent;
@property(readonly, assign, nonatomic) PhotoTagsTextComponent* textComponent;
@property(readonly, assign, nonatomic) PhotoTagsOverlayComponent* overlayComponent;
+(id)photo:(id)photo;
-(void).cxx_destruct;
-(id)nodeForState:(id)state context:(id)context;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(id)initWithState:(id)state;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PhotoTagsComponentController : Component5Controller {
}
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface CountryLocalSearchOperation : IndexSearchOperation {
}
-(void)main;
@end

__attribute__((visibility("hidden")))
@interface CountrySelectionModel : LoadingModel {
}
-(id)countKey;
-(id)process:(id)process;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface CitySearchModel : SearchModel {
	VKCountry* _country;
}
@property(retain, nonatomic) VKCountry* country;
-(void).cxx_destruct;
-(id)countKey;
-(id)process:(id)process;
-(id)method;
-(id)parameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsAddButton : VKDomain {
}
-(float)renderHeight;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorModelDataSource : XXUnknownSuperclass <VKSelectorOptionsProvider, ModelObserver> {
	Model* _model;
	NSArray* _options;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) Model* model;
@property(retain, nonatomic) NSArray* options;
+(id)model:(id)model;
-(void).cxx_destruct;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(id)optionsFromIndex:(id)index;
-(id)initWithModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MasksButtonRemove : TouchHighlightButton {
	UIImageView* _backgroundImageView;
	UIImageView* _imageView_vk;
}
@property(retain, nonatomic) UIImageView* imageView_vk;
@property(retain, nonatomic) UIImageView* backgroundImageView;
+(id)button;
-(void).cxx_destruct;
-(void)updateHighlight:(BOOL)highlight animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface MasksButton : TouchHighlightButton {
	int _counter;
	UIButton* _counterLabel;
	UILabel* _titleLabel_vk;
	UIImageView* _imageView_vk;
	UIImageView* _backgroundImageView;
}
@property(assign, nonatomic) int counter;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(retain, nonatomic) UIImageView* imageView_vk;
@property(retain, nonatomic) UILabel* titleLabel_vk;
@property(retain, nonatomic) UIButton* counterLabel;
+(id)button;
-(void).cxx_destruct;
-(void)updateHighlight:(BOOL)highlight animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface VKMHTTPCookieAcceptPolicyManager : XXUnknownSuperclass {
}
+(void)setDefaultCookieAcceptPolicy;
+(void)setCookieAcceptPolicy:(unsigned)policy;
@end

__attribute__((visibility("hidden")))
@interface VKCityCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKMSubtitleCell : VKMCell {
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	VKMImageView* _vkImageView;
}
@property(readonly, retain, nonatomic) VKMImageView* vkImageView;
@property(readonly, retain, nonatomic) UILabel* subtitleLabel;
@property(readonly, retain, nonatomic) UILabel* titleLabel;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(float)spaceBetweenImageAndLabel;
-(CGRect)frameForTitleLabelWithSubtitle:(BOOL)subtitle;
-(CGRect)subtitleLabelFrame;
-(float)contentHeight;
-(float)photoPaddingY;
-(float)paddingX;
-(float)labelsPaddingYWithSubtitle:(BOOL)subtitle;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFiltersViewController : VKMTableController <SearchPeopleStatusSelectionViewControllerDelegate> {
	BOOL _ageFilterEnabled;
	NSNumber* _initialResultsCount;
	SearchPeopleFiltersLoadingView* _loadingView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) SearchPeopleModel* model;
@property(retain, nonatomic) NSNumber* initialResultsCount;
@property(retain, nonatomic) SearchPeopleFiltersLoadingView* loadingView;
@property(assign, nonatomic) BOOL ageFilterEnabled;
-(void).cxx_destruct;
-(void)modelLoadingChanged:(id)changed;
-(void)VKMTableDiscovered:(id)discovered cell:(id)cell;
-(void)model:(id)model updated:(id)updated;
-(void)VKMControllerTouch;
-(void)updateModel;
-(void)didUpdateAgeRange:(id)range;
-(void)ageFilterEnabledChanged:(id)changed;
-(void)sexChanged:(id)changed;
-(void)statusSelectionViewController:(id)controller didSelectStatus:(int)status;
-(void)selectStatus;
-(void)selectCity;
-(void)selectCountry;
-(void)actionShowResults:(id)results;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view statusSectionCellForRow:(int)row;
-(id)tableView:(id)view ageSectionCellForRow:(int)row;
-(id)tableView:(id)view sexSectionCellForRow:(int)row;
-(id)tableView:(id)view regionSectionCellForRow:(int)row;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(int)VKMTableStyle;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface VKRangeSlider : XXUnknownSuperclass {
	BOOL _highlightsHandlesOnTouch;
	BOOL _noEventsOnPropertySettings;
	UIColor* _handleNormalColor;
	UIColor* _handleHighlightedColor;
	UIColor* _pathColor;
	UIColor* _pathHighlightedColor;
	unsigned _upperValue;
	unsigned _lowerValue;
	unsigned _minValue;
	unsigned _maxValue;
	unsigned _handleRadius;
	unsigned _minDistanceBetweenHandles;
	UIView* _upperHandle;
	UIView* _lowerHandle;
	UITouch* _upperHandleTouch;
	UITouch* _lowerHandleTouch;
	UIView* _pathView;
	UIView* _highlightedPathView;
}
@property(assign, nonatomic) BOOL noEventsOnPropertySettings;
@property(assign, nonatomic) BOOL highlightsHandlesOnTouch;
@property(assign, nonatomic) unsigned minDistanceBetweenHandles;
@property(assign, nonatomic) unsigned handleRadius;
@property(assign, nonatomic) unsigned maxValue;
@property(assign, nonatomic) unsigned minValue;
@property(assign, nonatomic) unsigned lowerValue;
@property(assign, nonatomic) unsigned upperValue;
@property(retain, nonatomic) UIColor* pathHighlightedColor;
@property(retain, nonatomic) UIColor* pathColor;
@property(retain, nonatomic) UIColor* handleHighlightedColor;
@property(retain, nonatomic) UIColor* handleNormalColor;
@property(retain, nonatomic) UIView* highlightedPathView;
@property(retain, nonatomic) UIView* pathView;
@property(retain, nonatomic) UITouch* lowerHandleTouch;
@property(retain, nonatomic) UITouch* upperHandleTouch;
@property(retain, nonatomic) UIView* lowerHandle;
@property(retain, nonatomic) UIView* upperHandle;
-(void).cxx_destruct;
-(void)layoutHighlightedPathView;
-(void)layoutPathView;
-(void)layoutSubviews;
-(void)updateHandlePositionsOnRangeValues;
-(void)setLowerValue:(unsigned)value upperValue:(unsigned)value2 animated:(BOOL)animated;
-(void)updateRangeValues;
-(void)updateLowerHandleLocationWithX:(float)x;
-(void)updateUpperHandleLocationWithX:(float)x;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)handle:(id)handle shouldInteractWithPoint:(CGPoint)point;
-(void)beginLowerHandleDraggingWithTouchPoint:(CGPoint)touchPoint touch:(id)touch;
-(void)beginUpperHandleDraggingWithTouchPoint:(CGPoint)touchPoint touch:(id)touch;
-(void)handle:(id)handle setHighlighted:(BOOL)highlighted;
-(float)currentXForUpperHandle;
-(float)currentXForLowerHandle;
-(float)minXForUpperHandle;
-(float)currentMinXForUpperHandle;
-(float)maxXForUpperHandle;
-(float)minXForLowerHandle;
-(float)maxXForLowerHandle;
-(float)currentMaxXForLowerHandle;
-(unsigned)valueRange;
-(float)maxDistanceForLowerHandle;
-(float)maxDistanceForUpperHandle;
-(float)distanceBetweenHandleCenters;
-(float)maxX;
-(float)minX;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryCameraViewController : VKMController <CameraManagerDelegate, StoryMediaPickerViewControllerDelegate, UIGestureRecognizerDelegate, MasksContainerControllerDelegate, MaskLoaderObserver, CameraPreviewViewDelegate, MaskLoaderDimProgressViewDelegate, MaskAssetsLoaderDelegate> {
	BOOL _trackVolumeButtonForCapture;
	BOOL _skipVolumeChange;
	id<StoryCameraViewControllerDelegate> _delegate;
	CameraCaptureButton* _captureButton;
	UIButton* _cancelButton;
	UIButton* _flashModeButton;
	UIButton* _settingsButton;
	CameraManager* _cameraManager;
	CameraPreviewView* _cameraPreviewView;
	UIButton* _photoLibraryButton;
	UIButton* _flipCameraButton;
	UIView* _insertNoAccessViewAboveMeView;
	UILongPressGestureRecognizer* _captureButtonLongPressGesture;
	float _captureLongPressGestureBeginY;
	float _zoomFactorAtContinuedChangeBeginning;
	UIImpactFeedbackGenerator* _feedbackGenerator;
	NSTimer* _recordingProgressUpdateTimer;
	NSDate* _videoRecordingStartTime;
	NSDate* _videoRecordingStopTime;
	KVOObserver* _audioSessionObserver;
	float _initialSystemVolume;
	UIView* _volumeView;
	MasksSectionsModel* _masksSectionModel;
	MasksContainerController* _masksContainerController;
	MaskLoader* _maskLoader;
	MaskLoaderDimProgressView* _maskLoaderDimProgressView;
	MasksButton* _masksButton;
	UIButton* _masksRemoveButton;
	UISwipeGestureRecognizer* _maskPanelShowSwipeGesture;
	UISwipeGestureRecognizer* _maskPanelHideSwipeGesture;
	UILabel* _maskHintLabel;
	VKMask* _startingMask;
	MaskAssetsLoader* _maskAssetsLoader;
	MaskAuthorView* _maskAuthorView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) CameraCaptureButton* captureButton;
@property(assign, nonatomic) __weak id<StoryCameraViewControllerDelegate> delegate;
@property(retain, nonatomic) MaskAuthorView* maskAuthorView;
@property(retain, nonatomic) MaskAssetsLoader* maskAssetsLoader;
@property(retain, nonatomic) VKMask* startingMask;
@property(retain, nonatomic) UILabel* maskHintLabel;
@property(retain, nonatomic) UISwipeGestureRecognizer* maskPanelHideSwipeGesture;
@property(retain, nonatomic) UISwipeGestureRecognizer* maskPanelShowSwipeGesture;
@property(retain, nonatomic) UIButton* masksRemoveButton;
@property(retain, nonatomic) MasksButton* masksButton;
@property(retain, nonatomic) MaskLoaderDimProgressView* maskLoaderDimProgressView;
@property(retain, nonatomic) MaskLoader* maskLoader;
@property(retain, nonatomic) MasksContainerController* masksContainerController;
@property(retain, nonatomic) MasksSectionsModel* masksSectionModel;
@property(retain, nonatomic) UIView* volumeView;
@property(assign, nonatomic) BOOL skipVolumeChange;
@property(assign, nonatomic) float initialSystemVolume;
@property(retain, nonatomic) KVOObserver* audioSessionObserver;
@property(retain, nonatomic) NSDate* videoRecordingStopTime;
@property(retain, nonatomic) NSDate* videoRecordingStartTime;
@property(retain, nonatomic) NSTimer* recordingProgressUpdateTimer;
@property(assign, nonatomic) BOOL trackVolumeButtonForCapture;
@property(retain, nonatomic) UIImpactFeedbackGenerator* feedbackGenerator;
@property(assign, nonatomic) float zoomFactorAtContinuedChangeBeginning;
@property(assign, nonatomic) float captureLongPressGestureBeginY;
@property(retain, nonatomic) UILongPressGestureRecognizer* captureButtonLongPressGesture;
@property(retain, nonatomic) UIView* insertNoAccessViewAboveMeView;
@property(retain, nonatomic) UIButton* flipCameraButton;
@property(retain, nonatomic) UIButton* photoLibraryButton;
@property(retain, nonatomic) CameraPreviewView* cameraPreviewView;
@property(retain, nonatomic) CameraManager* cameraManager;
@property(retain, nonatomic) UIButton* settingsButton;
@property(retain, nonatomic) UIButton* flashModeButton;
@property(retain, nonatomic) UIButton* cancelButton;
-(void).cxx_destruct;
-(void)hideMaskHintLabel;
-(void)showMaskHintLabelWithText:(id)text;
-(void)showOrHideMaskHintLabelForMask:(id)mask;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)tryInitializeMaskAssetsLoaderIfNotAlready;
-(BOOL)statsMasksModelURLandModelVersionAreReady;
-(id)statsMasksModelVersion;
-(id)statsMasksModelURL;
-(void)dismissMaskLoaderDimProgressViewAndAttachSwipeGesturesToPreview;
-(void)presentMaskLoaderDimProgressViewAndAttachSwipeGesturesToIt;
-(void)tryEnableMasksButtonAndSwipeGestures;
-(void)applyMask:(id)mask withJsonPath:(id)jsonPath;
-(void)applyMaskAndDismissProgressIfBothAssetsAndMaskAreReady;
-(void)maskAssetsLoaderHandleFailedOrCanceled;
-(void)maskAssetsLoaderCanceled:(id)canceled;
-(void)maskAssetsLoaderFailed:(id)failed;
-(void)maskAssetsLoaderFinished:(id)finished;
-(void)maskAssetsLoaderUpdatedProgress:(id)progress;
-(void)maskLoader:(id)loader masksCacheCleanedMaskWithIden:(id)iden;
-(void)maskLoader:(id)loader canceledLoadingMask:(id)mask;
-(void)maskLoader:(id)loader failedLoadingMask:(id)mask;
-(void)maskLoader:(id)loader finishLoadingMask:(id)mask;
-(void)maskLoader:(id)loader loadingMask:(id)mask updatedProgress:(id)progress;
-(void)updateDimProgressViewProgress;
-(void)maskLoader:(id)loader startLoadingMask:(id)mask;
-(void)maskLoader:(id)loader changeCurrentMask:(id)mask;
-(void)masksContainerController:(id)controller didSelectMask:(id)mask;
-(void)changeMask:(id)mask;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)storyMediaPickerViewController:(id)controller didFinishWithAsset:(id)asset;
-(void)cameraManager:(id)manager changedMaskLoaded:(BOOL)loaded;
-(void)cameraManager:(id)manager didFinishRecordingToOutputFileAtURL:(id)url error:(id)error;
-(void)cameraManager:(id)manager didStarRecordingToOutputFileAtURL:(id)url;
-(void)cameraManager:(id)manager didProcessCapturedPhoto:(id)photo metadata:(id)metadata;
-(void)cameraManagerDidCapturePhoto:(id)cameraManager;
-(void)cameraManagerWillCapturePhoto:(id)cameraManager;
-(void)actionSettingsButton:(id)button;
-(void)actionGrantCameraAndMicAccessButton:(id)button;
-(void)animateToVideoRecordingState;
-(void)actionCaptureButtonLongPressGesture:(id)gesture;
-(void)actionCaptureButton:(id)button;
-(void)actionPhotoLibraryButton:(id)button;
-(void)actionFlipCameraButton:(id)button;
-(void)actionFlashModeButton:(id)button;
-(void)actionCancelButton:(id)button;
-(void)hideMaskPanel;
-(void)actionCameraPreviewTapGestureWhileMasksPanelIsShown:(id)shown;
-(void)showMasksPanelGUI;
-(void)actionMaskButtonOrSwipe:(id)swipe;
-(void)loadAssetsIntoMaskEngineIfTheyAreReady;
-(void)actionMasksRemoveButton:(id)button;
-(void)getLastPhoto:(id)photo;
-(void)showNeedsPhotosPermissionAlert;
-(void)presentMediaPickerViewController;
-(void)resetUIAfterRecording;
-(void)updateVideoRecordingProgress;
-(void)stopRecordingProgressUpdateTimer;
-(void)startRecordingProgressUpdateTimer;
-(void)unfreezeCameraPreview;
-(void)freezeCameraPreview;
-(void)stopVideoRecording;
-(void)startVideoRecording;
-(void)capturePhoto;
-(void)switchFlashMode;
-(void)flipCamera;
-(void)updateFlashModeAndFlipCameraButtonsAppearanceForCurrentCameraDevice;
-(void)setSystemVolume:(float)volume;
-(void)removeMPVolumeViewHidingSystemVolumeHUD;
-(void)addMPVolumeViewHidingSystemVolumeHUD;
-(void)notificationSystemVolumeDidChange:(id)notificationSystemVolume;
-(void)tearDownVolumeButtonHandler;
-(void)setupVolumeButtonHandler;
-(id)initialCameraConfig;
-(void)maskLoaderDimProgressViewBlankTap:(id)tap;
-(void)maskLoaderDimProgressViewPressCancel:(id)cancel;
-(void)cameraPreviewViewAttemptToFlipCamera:(id)flipCamera;
-(void)cameraPreviewView:(id)view attemptToFocusAtPoint:(CGPoint)point;
-(void)cameraPreviewView:(id)view attemptToZoomWithScale:(float)scale;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarUpdateAnimation;
-(int)preferredStatusBarStyle;
-(BOOL)prefersStatusBarHidden;
-(void)showNoAccessView;
-(void)setPhotoLibraryButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setFlipCameraButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setFlashModeButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)maskPanelSwipeGesture:(id)gesture;
-(void)actionMaskAuthorButton:(id)button;
-(void)viewDidLoad;
-(BOOL)masksAvailable;
-(void)notificationUIApplicationWillEnterForeground:(id)notificationUIApplication;
-(id)initWithMain:(id)main andModel:(id)model startingMask:(id)mask;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFiltersOptionCell : VKMCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFiltersAgeRangeCell : VKMCell {
	VKRangeSlider* _slider;
	UILabel* _valueLabel;
}
@property(retain, nonatomic) UILabel* valueLabel;
@property(retain, nonatomic) VKRangeSlider* slider;
-(void).cxx_destruct;
-(void)updateLabelText;
-(void)sliderValueChanged:(id)changed;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleSexSelectionSegmentedControl : XXUnknownSuperclass {
}
@property(assign, nonatomic) int sex;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFiltersSexSelectionCell : VKMCell {
	SearchPeopleSexSelectionSegmentedControl* _sexSegmentedControl;
}
@property(retain, nonatomic) SearchPeopleSexSelectionSegmentedControl* sexSegmentedControl;
-(void).cxx_destruct;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleStatusSelectionViewController : VKMTableController {
	id<SearchPeopleStatusSelectionViewControllerDelegate> _delegate;
	int _selectedStatus;
	int _sex;
}
@property(assign, nonatomic) int sex;
@property(assign, nonatomic) int selectedStatus;
@property(assign, nonatomic) __weak id<SearchPeopleStatusSelectionViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didSelectStatus:(int)status;
-(void)clearFilter;
-(void)configureClearButton;
-(id)makeCheckmarkView;
-(BOOL)VKMScrollViewDisablePTR;
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKCountryCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PhotoAlbumComponent : Component5 {
}
+(id)album:(id)album;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppContainerFactory : XXUnknownSuperclass {
}
+(id)reportWebAppContainerControllerWithAction:(id)action context:(id)context;
+(id)reportAdContainerControllerWithAction:(id)action context:(id)context;
+(id)reportContainerControllerWithAction:(id)action context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface InvitationAction : Action {
}
+(id)lookupContactInvitationActionWithContact:(id)contact serviceType:(int)type;
+(id)lookupContactInvitationActionsBuilderWithContact:(id)contact completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface VKMailInvitationComposeViewController : XXUnknownSuperclass {
	MailInvitationAction* _invitationOperation;
}
@property(retain, nonatomic) MailInvitationAction* invitationOperation;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MailInvitationAction : InvitationAction <MFMailComposeViewControllerDelegate> {
	NSString* _contact;
	NSString* _subject;
	NSString* _message;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* subject;
@property(retain, nonatomic) NSString* contact;
-(void).cxx_destruct;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterVKMImageType : XXUnknownSuperclass <VKImageFilter> {
	XXStruct_UOIMaD _type;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) XXStruct_UOIMaD type;
+(id)imageType:(XXStruct_UOIMaD)type;
-(id)infoString;
-(id)process:(id)process;
-(id)initWithImageType:(XXStruct_UOIMaD)imageType;
@end

__attribute__((visibility("hidden")))
@interface VKStory : VKDomain <VKImage> {
	BOOL _seen;
	BOOL _isPrivate;
	BOOL _expired;
	BOOL _can_comment;
	unsigned _type;
	VKPhoto* _photo;
	VKVideo* _video;
	NSNumber* _views;
	NSString* _previewBase64;
}
@property(readonly, assign, nonatomic) float ratio;
@property(readonly, retain, nonatomic) NSMutableDictionary* variants;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL can_comment;
@property(readonly, assign, nonatomic) unsigned date;
@property(copy, nonatomic) NSString* previewBase64;
@property(assign, nonatomic) BOOL expired;
@property(assign, nonatomic) BOOL isPrivate;
@property(assign, nonatomic) BOOL seen;
@property(retain, nonatomic) NSNumber* views;
@property(retain, nonatomic) VKVideo* video;
@property(retain, nonatomic) VKPhoto* photo;
@property(assign, nonatomic) unsigned type;
-(void).cxx_destruct;
-(id)thumbnailUrl;
-(id)messagesPlaceholder;
-(XXStruct_UOIMaD)messagesRenderType;
-(BOOL)forceZoom;
-(int)pickSizeForRatio:(float)ratio width:(float)width height:(float)height;
-(id)messagesVariant;
-(id)fullVariant;
-(id)thumbnailVariant;
-(id)photoOrVideo;
-(unsigned)parseStoryTypeFromString:(id)string;
-(void)domainOnEditCopy:(id)copy;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMessageInvitationComposeViewController : XXUnknownSuperclass {
	MessageInvitationAction* _invitationOperation;
}
@property(retain, nonatomic) MessageInvitationAction* invitationOperation;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MessageInvitationAction : InvitationAction <MFMessageComposeViewControllerDelegate> {
	NSString* _contact;
	NSString* _message;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* contact;
-(void).cxx_destruct;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StoryVideoPlayer : XXUnknownSuperclass {
	BOOL _startedPlaying;
	BOOL _playbackStalled;
	BOOL _failedToPlay;
	BOOL _shouldPlay;
	AVPlayer* _player;
	AVPlayerItem* _playerItem;
	AVAsset* _asset;
	NSError* _error;
	StoryAssetResourceLoaderDelegate* _assetResourceLoaderDelegate;
	KVOObserver* _playerObserver;
	KVOObserver* _playerItemObserver;
	id _playerPeriodicTimeObserver;
}
@property(readonly, assign, nonatomic) AVAsset* asset;
@property(assign, nonatomic) BOOL shouldPlay;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) BOOL failedToPlay;
@property(assign, nonatomic) BOOL playbackStalled;
@property(assign, nonatomic) BOOL startedPlaying;
@property(retain, nonatomic) StoryAssetResourceLoaderDelegate* assetResourceLoaderDelegate;
@property(retain, nonatomic) id playerPeriodicTimeObserver;
@property(retain, nonatomic) KVOObserver* playerItemObserver;
@property(retain, nonatomic) KVOObserver* playerObserver;
@property(retain, nonatomic) AVPlayerItem* playerItem;
@property(retain, nonatomic) AVPlayer* player;
-(void).cxx_destruct;
-(void)reload;
-(void)pause;
-(void)play;
-(void)seekToStart;
-(void)failWithError:(id)error;
-(void)handlePlayerItemFailedToPlayToEndTime:(id)endTime;
-(void)handlePlaybackBufferEmpty:(BOOL)empty;
-(void)cleanUpPlayerTimeObserver;
-(void)setupPlayerTimeObserver;
-(void)setupKVOObservers;
-(void)createAndSetupPlayerItem;
-(void)dealloc;
-(id)initWithURL:(id)url assetResourceLoaderDelegate:(id)delegate;
-(id)initWithAsset:(id)asset;
@end

__attribute__((visibility("hidden")))
@interface StoryVideoPlayerView : XXUnknownSuperclass {
	StoryVideoPlayer* _player;
	VKAVPlayerLayerView* _playerLayerView;
	KVOObserver* _playerLayerObserver;
}
@property(retain, nonatomic) StoryVideoPlayer* player;
@property(retain, nonatomic) KVOObserver* playerLayerObserver;
@property(retain, nonatomic) VKAVPlayerLayerView* playerLayerView;
-(void).cxx_destruct;
-(void)setupPlayerLayerKVOObserver;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryAssetResourceLoaderDelegate : XXUnknownSuperclass <NSURLConnectionDataDelegate, AVAssetResourceLoaderDelegate> {
	NSString* _originalURLScheme;
	NSObject<OS_dispatch_queue>* _workingQueue;
	NSMutableData* _videoData;
	NSURLConnection* _connection;
	NSHTTPURLResponse* _response;
	NSMutableArray* _pendingRequests;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* workingQueue;
@property(retain, nonatomic) NSString* originalURLScheme;
@property(retain, nonatomic) NSMutableArray* pendingRequests;
@property(retain, nonatomic) NSHTTPURLResponse* response;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSMutableData* videoData;
-(void).cxx_destruct;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)asyncOnWorkingQueue:(id)queue;
-(void)resourceLoader:(id)loader didCancelLoadingRequest:(id)request;
-(BOOL)resourceLoader:(id)loader shouldWaitForLoadingOfRequestedResource:(id)requestedResource;
-(BOOL)respondWithDataForRequest:(id)request;
-(void)fillInContentInformation:(id)contentInformation;
-(void)processPendingRequests;
-(void)dealloc;
-(id)initWithQueue:(id)queue;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface RecommendedContact : LookupContactVK {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface PushSubscriptionContact : LookupContactVK {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFiltersLoadingView : XXUnknownSuperclass {
	UIButton* _button;
	UIActivityIndicatorView* _activityIndicator;
}
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
-(void).cxx_destruct;
-(void)stopLoadingWithNumber:(unsigned)number;
-(void)stopLoadingWithoutNumber;
-(void)stopLoadingWithErrorMessage:(id)errorMessage;
-(void)beginLoading;
-(void)setLoading:(BOOL)loading;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleViewController : VKMLiveController <UISearchBarDelegate, SearchPeopleFilterContainer> {
	UISearchBar* _searchBar;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UISearchBar* searchBar;
@property(retain, nonatomic) SearchPeopleModel* model;
-(void).cxx_destruct;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)updateFilterCell;
-(void)clearFilter;
-(void)applyFilter:(id)filter;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)showFilters;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)VKMLiveSearchHandleCell:(id)cell select:(BOOL)select;
@end

__attribute__((visibility("hidden")))
@interface LookupContactVK : VKRenderable {
	BOOL _verified;
	BOOL _request_sent;
	BOOL _me;
	VKUser* _user;
	unsigned _common_count;
	NSString* _universityName;
	NSNumber* _graduation;
	VKCity* _city;
	VKCity* _country;
}
@property(assign, nonatomic, getter=isMe) BOOL me;
@property(retain, nonatomic) VKCity* country;
@property(retain, nonatomic) VKCity* city;
@property(copy, nonatomic) NSNumber* graduation;
@property(copy, nonatomic) NSString* universityName;
@property(assign, nonatomic) unsigned common_count;
@property(assign, nonatomic) BOOL request_sent;
@property(assign, nonatomic) BOOL verified;
@property(retain, nonatomic) VKUser* user;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
-(BOOL)isEqualIdentity:(id)identity;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VKUserExtended : VKUser {
	NSDictionary* _last_seen;
}
@property(copy, nonatomic) NSDictionary* last_seen;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LookupContactVKCell : LookupContactCell {
}
@property(retain, nonatomic) LookupContactVK* domain;
-(void)makeFriends;
-(id)makeInviteButton;
-(BOOL)selected;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface LookupContactCell : VKMSubtitleCell {
	UIButton* _inviteButton;
	UIImageView* _checkmarkImageView;
	UIImageView* _verifiedIconView;
}
@property(readonly, retain, nonatomic) UIImageView* verifiedIconView;
@property(readonly, retain, nonatomic) UIImageView* checkmarkImageView;
@property(readonly, retain, nonatomic) UIButton* inviteButton;
-(void).cxx_destruct;
-(void)showCheckmarkAnimated;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)makeFriends;
-(id)makeInviteButton;
@end

__attribute__((visibility("hidden")))
@interface VKMFindFriendsOptionsViewController : VKMLiveController {
}
@property(retain, nonatomic) VKMFindFriendsOptionsModel* model;
-(void)viewDidLoad;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsViewController : VKMLiveController {
}
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface LookupAddressBookFriendsViewController : LookupFriendsViewController {
	LookupAddressbookTeaserViewController* _lookupTeaserViewController;
}
@property(retain, nonatomic) LookupAddressbookTeaserViewController* lookupTeaserViewController;
-(void).cxx_destruct;
-(void)actionTeaserButton:(id)button;
-(void)VKMScrollViewUpdateTeaserViewInsets;
-(void)VKMScrollViewUpdateTeaserView;
-(BOOL)VKMScrollViewShouldShowTeaser;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFilterCell : VKMCell <SearchPeopleFiltersViewDelegate> {
	SearchPeopleFiltersView* _filtersView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) SearchPeopleFiltersView* filtersView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)searchPeopleFiltersViewDidClearFilter:(id)searchPeopleFiltersView;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SearchPeopleFiltersView : XXUnknownSuperclass {
	id<SearchPeopleFiltersViewDelegate> _delegate;
	UIView* _parametersDisplayContainer;
	UILabel* _filtersDescriptionLabel;
	UIView* _parametersButtonContainer;
}
@property(assign, nonatomic) __weak id<SearchPeopleFiltersViewDelegate> delegate;
@property(retain, nonatomic) UIView* parametersButtonContainer;
@property(retain, nonatomic) UILabel* filtersDescriptionLabel;
@property(retain, nonatomic) UIView* parametersDisplayContainer;
+(float)heightWithDescription:(id)description width:(float)width;
-(void).cxx_destruct;
-(void)didClearFilter:(id)filter;
-(void)setFilterDescription:(id)description;
-(void)setShowingDescription:(BOOL)description animated:(BOOL)animated;
-(BOOL)isShowingDescription;
-(void)makeParametersDisplay;
-(void)makeParametersButtonContainer;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsAddButtonCell : VKMCell {
}
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsNearbyViewController : VKMLiveController <VKLookupSourceLocationDelegate> {
	UILabel* _descriptionLabel;
	LookupProcessIndicatorView* _lookupActivityView;
	UIButton* _settingsButton;
}
@property(retain, nonatomic) UIButton* settingsButton;
@property(retain, nonatomic) LookupProcessIndicatorView* lookupActivityView;
@property(retain, nonatomic) UILabel* descriptionLabel;
-(void).cxx_destruct;
-(void)openSystemSettings;
-(void)lookupSourceLocation:(id)location didBecomeAuthorized:(BOOL)authorized;
-(void)updateHeaderView;
-(BOOL)VKMScrollViewDisablePTR;
-(void)viewDidLoad;
-(int)VKMTableStyle;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKLookupSourceFake : Model <TimerTargetDelegate> {
	TimerTarget* _timer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) TimerTarget* timer;
-(void).cxx_destruct;
-(id)fakeUsers;
-(id)fakeUser;
-(void)timerTargetFired:(id)fired;
-(void)stop;
-(void)start;
-(void)activate;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKLookupSourceLocationContext : ModelContext {
	CLLocation* _location;
	NSDate* _date;
}
@property(copy, nonatomic) NSDate* date;
@property(retain, nonatomic) CLLocation* location;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKLookupSourceLocation : LoadingModel <CLLocationManagerDelegate, TimerTargetDelegate> {
	id<VKLookupSourceLocationDelegate> _locationSourceDelegate;
	CLLocationManager* _locationManager;
	TimerTarget* _updateTimer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isAuthorizationDetermined) BOOL authorizationDetermined;
@property(readonly, assign, nonatomic, getter=isAuthorized) BOOL authorized;
@property(assign, nonatomic) __weak id<VKLookupSourceLocationDelegate> locationSourceDelegate;
@property(retain, nonatomic) TimerTarget* updateTimer;
@property(retain, nonatomic) CLLocationManager* locationManager;
-(void).cxx_destruct;
-(void)handleAddFriend:(id)aFriend :(id)arg2;
-(void)registerForEvents:(id)events;
-(void)timerTargetFired:(id)fired;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(BOOL)shouldLoad:(id)load;
-(void)authorize;
-(void)stopUpdatingNearbyUsers;
-(void)stop;
-(void)startUpdatingNearbyUsers;
-(id)spawnContext:(id)context;
-(void)reset;
-(void)activate;
-(id)usersRequestWithLocation:(id)location;
-(BOOL)lastLocationManagerLocationIsActual;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(BOOL)isAuthorizedWithStatus:(int)status;
-(void)dealloc;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VKRequestNearbyParams : XXUnknownSuperclass {
	int _radius;
	double _accuracy;
	double _timeout;
	CLLocationCoordinate2D _coordinate;
}
@property(assign, nonatomic) int radius;
@property(assign, nonatomic) double timeout;
@property(assign, nonatomic) double accuracy;
@property(assign, nonatomic) CLLocationCoordinate2D coordinate;
+(id)paramsWithLocation:(id)location radius:(int)radius;
-(id)initWithLocation:(id)location radius:(int)radius;
@end

__attribute__((visibility("hidden")))
@interface TwitterClient : XXUnknownSuperclass {
	NSString* _consumerKey;
	NSString* _consumerSecret;
	NSString* _oauthTokenSecret;
	NSString* _oauthToken;
	NSString* _callbackUrl;
	AFHTTPClient* _httpClient;
}
@property(copy, nonatomic) NSString* callbackUrl;
@property(copy, nonatomic) NSString* oauthToken;
@property(copy, nonatomic) NSString* oauthTokenSecret;
@property(copy, nonatomic) NSString* consumerSecret;
@property(copy, nonatomic) NSString* consumerKey;
@property(retain, nonatomic) AFHTTPClient* httpClient;
+(void)authorizeWithConsumerKey:(id)consumerKey consumerSecret:(id)secret progress:(id)progress completion:(id)completion;
+(void)authorizeUsingSystemAccountWithConsumerKey:(id)consumerKey consumerSecret:(id)secret progress:(id)progress completion:(id)completion;
+(BOOL)isSystemAuthorizationAvailable;
+(void)authorizeUsingSystemAccount:(id)account consumerKey:(id)key consumerSecret:(id)secret progress:(id)progress completion:(id)completion;
+(void)requestAccessToSystemAccountWithCompletion:(id)completion;
+(void)authorizeUsingSafariWithConsumerKey:(id)consumerKey consumerSecret:(id)secret progress:(id)progress completion:(id)completion;
+(id)sharedInteropHandler;
-(void)rateLimitWithCompletion:(id)completion;
-(void)verifyCredentialsWithCompletion:(id)completion;
-(void)sendDirectMessage:(id)message toProfileWithScreenName:(id)screenName completion:(id)completion;
-(void)sendDirectMessage:(id)message toProfile:(id)profile completion:(id)completion;
-(void)requestFriendsWithCompletion:(id)completion;
-(void)requestFollowersWithCompletion:(id)completion;
-(void)loadCollectionWithMethod:(id)method path:(id)path parameters:(id)parameters dataKey:(id)key dataItemTransformer:(id)transformer completion:(id)completion;
-(void)obtainAccessTokenWithRequestToken:(id)requestToken requestTokenSecret:(id)secret verifier:(id)verifier completion:(id)completion;
-(void)authorizeWithRequestToken:(id)requestToken completion:(id)completion;
-(void)obtainRequestTokenWithCompletion:(id)completion;
-(void)obtainRequestTokenResponseWithParameters:(id)parameters completion:(id)completion;
-(void)performSignedRequestWithMethod:(id)method path:(id)path parameters:(id)parameters completion:(id)completion;
-(void)performSignedRequest:(id)request withCompletion:(id)completion;
-(void)performRequest:(id)request withCompletion:(id)completion;
-(id)oauthSignedRequest:(id)request;
-(id)requestWithMethod:(id)method path:(id)path parameters:(id)parameters;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface TwitterProfile : XXUnknownSuperclass {
	NSString* _uid;
	NSString* _name;
	NSString* _screenName;
	NSString* _imageUrlString;
}
@property(copy, nonatomic) NSString* imageUrlString;
@property(copy, nonatomic) NSString* screenName;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* uid;
-(void).cxx_destruct;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LookupFriendsModelTwitter : LookupFriendsModel {
	BOOL twitterTouched;
	TwitterClient* _twitterClient;
	NSArray* _friends;
	TwitterProfile* _myProfile;
}
@property(retain, nonatomic) TwitterClient* twitterClient;
@property(retain, nonatomic) TwitterProfile* myProfile;
@property(retain, nonatomic) NSArray* friends;
-(void).cxx_destruct;
-(id)lookupResponseWithData:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(BOOL)shouldLoad:(id)load;
-(id)combineFriends:(id)friends withFollowers:(id)followers;
-(void)loadFriends;
-(void)verifyCredentials;
-(void)reset;
-(void)touch;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface EmojiPopup : XXUnknownSuperclass {
	UIImageView* _decorationView;
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIImageView* decorationView;
-(void).cxx_destruct;
-(void)setEmoji:(id)emoji;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface EmojiSelectionView : XXUnknownSuperclass <UIScrollViewDelegate, ExtrasTabBarTabController> {
	id<ExtrasTabBarScrollingDelegate> _scrollingDelegate;
	id<EmojiInputDelegate> _delegate;
	EmojiPopup* _emojiPopup;
	EmojiGridView* _emojiGridView;
	UIScrollView* _scrollView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) id<EmojiInputDelegate> delegate;
@property(assign, nonatomic) id<ExtrasTabBarScrollingDelegate> scrollingDelegate;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) EmojiGridView* emojiGridView;
@property(retain, nonatomic) EmojiPopup* emojiPopup;
-(void).cxx_destruct;
-(void)extrasTabBarActiveTabSelected;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)actionBackspace:(id)backspace;
-(void)delayedDelete:(id)aDelete;
-(void)handleEmojiTap:(id)tap;
-(void)handleEmojiHighlight:(id)highlight;
-(void)emojiPopup:(id)popup updateForSelectedIndexPath:(id)selectedIndexPath;
-(void)emojiPopup:(id)popup moveToIndexPath:(id)indexPath;
-(CGRect)emojiFrame:(CGRect)frame forPopup:(id)popup;
-(void)configureHighlight;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface TwitterInvitationAction : InvitationAction {
	NSString* _screenName;
	NSString* _message;
	TwitterClient* _client;
}
@property(retain, nonatomic) TwitterClient* client;
@property(copy, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* screenName;
-(void).cxx_destruct;
-(void)runInContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LookupContactTwitterCell : LookupContactOtherCell {
}
-(void)inviteContact;
@end

__attribute__((visibility("hidden")))
@interface LookupContactTwitter : LookupContactOther {
	TwitterClient* _twitterClient;
}
@property(retain, nonatomic) TwitterClient* twitterClient;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VKNearbyBrowser : XXUnknownSuperclass <MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate, MCSessionDelegate> {
	id<VKNearbyBrowserDelegate> _delegate;
	VKUser* _user;
	MCNearbyServiceAdvertiser* _advertiser;
	MCNearbyServiceBrowser* _browser;
	MCPeerID* _localPeerID;
	NSObject<OS_dispatch_queue>* _sessionsQueue;
	NSMutableArray* _sessions;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKNearbyBrowserDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* sessions;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* sessionsQueue;
@property(retain, nonatomic) MCPeerID* localPeerID;
@property(retain, nonatomic) MCNearbyServiceBrowser* browser;
@property(retain, nonatomic) MCNearbyServiceAdvertiser* advertiser;
@property(retain, nonatomic) VKUser* user;
+(BOOL)isAvailable;
-(void).cxx_destruct;
-(void)session:(id)session didFinishReceivingResourceWithName:(id)name fromPeer:(id)peer atURL:(id)url withError:(id)error;
-(void)session:(id)session didStartReceivingResourceWithName:(id)name fromPeer:(id)peer withProgress:(id)progress;
-(void)session:(id)session didReceiveStream:(id)stream withName:(id)name fromPeer:(id)peer;
-(void)session:(id)session didReceiveData:(id)data fromPeer:(id)peer;
-(void)session:(id)session peer:(id)peer didChangeState:(int)state;
-(void)browser:(id)browser lostPeer:(id)peer;
-(void)browser:(id)browser foundPeer:(id)peer withDiscoveryInfo:(id)discoveryInfo;
-(void)browser:(id)browser didNotStartBrowsingForPeers:(id)peers;
-(void)advertiser:(id)advertiser didReceiveInvitationFromPeer:(id)peer withContext:(id)context invitationHandler:(id)handler;
-(void)advertiser:(id)advertiser didNotStartAdvertisingPeer:(id)peer;
-(void)stop;
-(void)start;
-(id)registerNewSession;
-(void)dealloc;
-(id)initWithUser:(id)user;
@end

__attribute__((visibility("hidden")))
@interface VKAPViewController : XXUnknownSuperclass <VKAPContentViewControllerSizeDelegate, VKAPModelDelegate> {
	UIImageView* navBarHairlineImageView;
	BOOL _lightStatusBar;
	VKAPTabsContentViewController* _vkAPTabsContentViewController;
	VKAPTabsCollectionViewController* _vkAPTabsViewController;
	UIView* _dimmingView;
	VKAPBottomToolbar* _pickerToolbar;
	VKAPModel* _model;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKAPModel* model;
@property(retain, nonatomic) VKAPBottomToolbar* pickerToolbar;
@property(assign, nonatomic) BOOL lightStatusBar;
@property(retain, nonatomic) UIView* dimmingView;
@property(retain, nonatomic) VKAPTabsCollectionViewController* vkAPTabsViewController;
@property(retain, nonatomic) VKAPTabsContentViewController* vkAPTabsContentViewController;
-(void).cxx_destruct;
-(id)contentScrollView;
-(id)findHairlineImageViewUnder:(id)under;
-(void)dimmingViewTapped:(id)tapped;
-(void)prepareDimmingView;
-(void)viewWillLayoutSubviews;
-(void)updateContainerAlpha;
-(void)updateTabsAlpha;
-(void)initializeChildViewControllers;
-(void)hideNavigationBar:(BOOL)bar;
-(void)dismissVCAnimated:(BOOL)animated;
-(void)dismissVKAPAnimated:(BOOL)animated;
-(void)hideVKAP;
-(void)dismissVKAP;
-(void)setVKAPOrigin:(float)origin;
-(void)setVKAPHidden:(BOOL)hidden;
-(void)VKAPTabsContentViewControllerShouldChangeCenter:(CGPoint)vkaptabsContentViewController;
-(void)configureNavBar;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(int)preferredInterfaceOrientationForPresentation;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(void)configureStatusBar;
-(float)statusBarHeight;
-(int)preferredStatusBarStyle;
-(void)vkapModelSelectedLimit:(id)limit;
-(void)vkapModelNeedUpdateToolbar:(id)toolbar;
-(void)vkapModelNeedDismissPicker:(id)picker;
-(void)vkapModel:(id)model shouldUpdateTitle:(id)title;
-(void)vkapModel:(id)model didChangeTab:(int)tab;
-(id)initWithModel:(id)model options:(int)options;
@end

__attribute__((visibility("hidden")))
@interface VKDomainSelectionViewController : VKMLiveController {
	VKDomain* _selectedObject;
}
@property(retain, nonatomic) VKDomain* selectedObject;
-(void).cxx_destruct;
-(void)didSelectObject:(id)object;
-(BOOL)VKMLiveSearchHandleCell:(id)cell select:(BOOL)select;
-(void)VKMLiveSearchWillDisplayCell:(id)vkmliveSearch indexPath:(id)path inTable:(id)table;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)applyCheckmarkToCell:(id)cell withDomain:(id)domain;
-(void)clearSelection;
-(void)configureClearButton;
-(Class)expectedClass;
-(id)makeCheckmarkView;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKLookupSourceMultipeer : Model <VKNearbyBrowserDelegate> {
	BOOL _started;
	VKNearbyBrowser* _browser;
	VKUser* _user;
	VKRequest* _userRequest;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL started;
@property(retain, nonatomic) VKRequest* userRequest;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) VKNearbyBrowser* browser;
-(void).cxx_destruct;
-(void)nearbyBrowser:(id)browser didFailWithError:(id)error;
-(void)nearbyBrowser:(id)browser didFoundUser:(id)user;
-(void)loadUsers:(id)users;
-(void)configureBrowserWithUser:(id)user;
-(void)loadUserInfoAndConfigureBrowser;
-(void)configureBrowser;
-(void)stop;
-(void)start;
-(void)touch;
-(void)didFailWithError:(id)error;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface CommentPostSourceController : VKMCollectionController {
	id<CommentPostSourceDelegate> _delegate;
	UIActivityIndicatorView* _activityView;
}
@property(assign, nonatomic) __weak id<CommentPostSourceDelegate> delegate;
@property(retain, nonatomic) CommentPostSourceCollectionModel* model;
@property(retain, nonatomic) UIActivityIndicatorView* activityView;
-(void).cxx_destruct;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)model:(id)model updated:(id)updated;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(id)VKMCollectionCreateLayout;
-(void)VKMControllerTouch;
-(void)modelLoadingChanged:(id)changed;
-(void)viewDidLoad;
-(void)loadView;
-(id)VKMScrollViewBackgroundColor;
@end

__attribute__((visibility("hidden")))
@interface RecommendedPagesModel : ListModel {
	int _introMask;
}
@property(assign, nonatomic) int introMask;
+(int)introStep;
-(void)handleAddGroup:(id)group :(id)arg2;
-(void)handleAddFriend:(id)aFriend :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)countKey;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
@end

__attribute__((visibility("hidden")))
@interface NewsSelectorController : VKSelectorContainerControllerDropdown {
}
@end

__attribute__((visibility("hidden")))
@interface RecommendedGroup : VKGroup {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface RecommendedGroupCell : GroupCell {
	UIImageView* _checkmarkImageView;
	UIButton* _inviteButton;
	UIImageView* _verifiedIconView;
}
@property(readonly, retain, nonatomic) UIImageView* verifiedIconView;
@property(retain, nonatomic) UIButton* inviteButton;
@property(retain, nonatomic) UIImageView* checkmarkImageView;
-(void).cxx_destruct;
-(void)joinGroup:(id)group;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)showCheckmarkAnimated;
-(void)prepareForReuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VKRegionSelectionViewController : VKDomainSelectionViewController {
}
-(int)VKMNavigationBarStyle;
-(int)VKMControllerStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface VideoAutoplayComponent : FeedAutoplayedComponent {
}
+(id)feedVideoAutoplay:(id)autoplay hasTitleOrViewsCounter:(BOOL*)counter;
+(id)autoplayComponent:(id)component;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VideoAutoplayComponentController : Component5Controller <FeedVideoViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)createView;
-(id)navDelegate;
-(id)statsForVideo:(id)video;
-(BOOL)shouldStartAutoplayForVideo:(id)video;
-(void)feedVideoViewRetry:(id)retry;
-(void)feedVideoViewDidTap:(id)feedVideoView;
-(void)didEndDisplaying;
-(void)setNode:(id)node;
@end

__attribute__((visibility("hidden")))
@interface VKMAccessibilityTableView : XXUnknownSuperclass {
}
-(BOOL)touchesShouldCancelInContentView:(id)touches;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(id)accessibilityElementAtIndex:(int)index;
-(int)accessibilityElementCount;
-(BOOL)isAccessibilityElement;
@end

__attribute__((visibility("hidden")))
@interface IOS7TableViewWithForcedBottomSeparator : VKMAccessibilityTableView {
}
-(BOOL)_hasHeaderFooterBelowRowAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface ExtrasBadgeView : XXUnknownSuperclass {
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
-(void).cxx_destruct;
-(id)badgeValue;
-(void)setBadgeValue:(id)value;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ExtrasTabBarButton : XXUnknownSuperclass <VKMImageLoaderDelegate> {
	VKMImageView* _imageView;
	ExtrasTabBarItem* _extraTabItem;
	ExtrasBadgeView* _badge;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ExtrasTabBarItem* extraTabItem;
@property(retain, nonatomic) VKMImageView* imageView;
@property(retain, nonatomic) ExtrasBadgeView* badge;
+(void)initialize;
-(void).cxx_destruct;
-(void)setSelected:(BOOL)selected;
-(id)accessibilityLabel;
-(void)loader:(id)loader complete:(id)complete;
-(void)setTabItem:(id)item;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)badgeValue;
-(void)performBadgeAnimation;
-(void)setBadgeValue:(id)value;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface TeaserView : XXUnknownSuperclass {
	UIImageView* _imageView;
	UIButton* _button;
	UILabel* _labelTitle;
	UILabel* _labelText;
	UIEdgeInsets _contentInsets;
}
@property(assign, nonatomic) UIEdgeInsets contentInsets;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UILabel* labelText;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) UIButton* button;
-(void).cxx_destruct;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(id)accessibilityElementAtIndex:(int)index;
-(int)accessibilityElementCount;
-(BOOL)isAccessibilityElement;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)initWithImage:(id)image title:(id)title text:(id)text buttonTitle:(id)title4;
@end

__attribute__((visibility("hidden")))
@interface TeaserViewConfig : XXUnknownSuperclass {
	NSString* _imageName;
	NSString* _titleKey;
	NSString* _textKey;
	NSString* _buttonKey;
}
@property(retain, nonatomic) NSString* buttonKey;
@property(retain, nonatomic) NSString* textKey;
@property(retain, nonatomic) NSString* titleKey;
@property(retain, nonatomic) NSString* imageName;
+(id)image:(id)image title:(id)title text:(id)text button:(id)button;
-(void).cxx_destruct;
-(id)createTeaserView;
@end

__attribute__((visibility("hidden")))
@interface ExtrasInputViewRecentStickersTab : XXUnknownSuperclass <ExtrasInputViewStickersTab> {
	BOOL hasReloaded;
	StickersRecentModel* _model;
	ExtrasTabBarItem* _tabBarItem;
	StickerSelectionView* _stickerSelectionView;
	NSArray* _stickerIds;
	NSString* _stickersBaseUrl;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* stickersBaseUrl;
@property(retain, nonatomic) NSArray* stickerIds;
@property(retain, nonatomic) StickerSelectionView* stickerSelectionView;
@property(readonly, retain, nonatomic) ExtrasTabBarItem* tabBarItem;
@property(readonly, retain, nonatomic) StickersRecentModel* model;
+(id)tabWithRecentStickersModel:(id)recentStickersModel;
-(void).cxx_destruct;
-(id)stickerSelectionViewBaseUrl:(id)url;
-(id)stickerSelectionViewStickerIds:(id)ids;
-(void)reloadIfNeeded;
-(void)setNeedsReload;
-(id)init;
-(id)initWithRecentStickersModel:(id)recentStickersModel;
@end

__attribute__((visibility("hidden")))
@interface SimpleBrowserController : XXUnknownSuperclass {
}
@property(readonly, retain, nonatomic) UIWebView* webView;
-(id)childViewControllerForStatusBarStyle;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface HiddenAdsBrowserController : SimpleBrowserController <UIWebViewDelegate> {
	BOOL _finished;
	NSURL* _targetLink;
	NSTimer* _destructionTimer;
	VKHUD* _hud;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL finished;
@property(retain, nonatomic) VKHUD* hud;
@property(retain, nonatomic) NSTimer* destructionTimer;
@property(retain, nonatomic) NSURL* targetLink;
-(void).cxx_destruct;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)finish:(BOOL)finish;
-(void)linkRouted;
-(void)finish;
-(void)viewDidLoad;
-(void)show;
-(id)initWithLink:(id)link;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface HiddenNotificationsBrowserController : HiddenAdsBrowserController {
	id<VKMNavDelegate> _navDelegate;
	id _completeBlock;
}
@property(copy, nonatomic) id completeBlock;
@property(assign, nonatomic) id<VKMNavDelegate> navDelegate;
-(void).cxx_destruct;
-(void)finish:(BOOL)finish;
@end

__attribute__((visibility("hidden")))
@interface GroupRequestRenderer : Renderer {
}
@property(retain, nonatomic) VKGroupInvite* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)initialize;
+(XXStruct_X102JB)strategyForGroupInvites;
+(id)rendererElements;
-(void)actionHide:(id)hide;
-(void)actionAdd:(id)add;
-(void)actionInviterPhoto:(id)photo;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface TGLocationCurrentLocationCell : XXUnknownSuperclass {
	UIImageView* _iconView;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	bool _isCurrentLocation;
}
-(void).cxx_destruct;
-(id)sharedAccuracyFormatter;
-(void)layoutSubviews;
-(id)_subtitleForAddress:(id)address;
-(void)configureForCustomLocationWithAddress:(id)address;
-(UIEdgeInsets)layoutMargins;
-(void)configureForCurrentLocationWithAccuracy:(double)accuracy;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface FPSMeasurer : XXUnknownSuperclass {
	UILabel* _label;
	XXStruct_32J64A _input;
	XXStruct_32J64A _output;
}
@property(retain, nonatomic) UILabel* label;
@property(assign, nonatomic) XXStruct_32J64A output;
@property(assign, nonatomic) XXStruct_32J64A input;
-(void).cxx_destruct;
-(void)updateLabel;
-(void)increment:(unsigned)increment;
@end

__attribute__((visibility("hidden")))
@interface CameraManager : XXUnknownSuperclass <AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, MovieRecorderDelegate, MaskEngineWrapper2Delegate> {
	BOOL _videoRecordingInProgress;
	BOOL _freezeSampleBufferDisplayLayer;
	BOOL _recording;
	BOOL _recorededFirstFrameOfVideo;
	BOOL _maskEngineLoadingOrLoaded;
	unsigned _captureSessionSetupResult;
	CameraConfig* _cameraConfig;
	id<CameraManagerDelegate> _delegate;
	unsigned _cameraPosition;
	float _zoomFactor;
	UILabel* _measurementsLabel;
	FPSMeasurer* _fpsMeasurer;
	MovieRecorder* _recorder;
	NSObject<OS_dispatch_queue>* _sessionQueue;
	NSObject<OS_dispatch_queue>* _videoDataOutputQueue;
	NSObject<OS_dispatch_queue>* _audioDataOutputQueue;
	AVCaptureSession* _videoSession;
	AVCaptureSession* _audioSession;
	AVCaptureDevice* _backfacingCameraDevice;
	AVCaptureDeviceInput* _backfacingCameraDeviceInput;
	AVCaptureDevice* _frontfacingCameraDevice;
	AVCaptureDeviceInput* _frontfacingCameraDeviceInput;
	AVCaptureDevice* _microphoneDevice;
	AVCaptureDeviceInput* _microphoneDeviceInput;
	AVCaptureDevice* _currentCameraDevice;
	AVCaptureVideoDataOutput* _videoDataOutput;
	AVCaptureAudioDataOutput* _audioDataOutput;
	AVCaptureStillImageOutput* _stillImageOutput;
	AVCaptureConnection* _videoConnection;
	AVCaptureConnection* _audioConnection;
	KVOObserver* _stillImageOutputKVOObserver;
	KVOObserver* _currentDeviceKVOObserver;
	unsigned _backgroundRecordingId;
	opaqueCMFormatDescription* _outputVideoFormatDescription;
	opaqueCMFormatDescription* _outputAudioFormatDescription;
	int _videoBufferOrientation;
	NSDictionary* _videoCompressionSettings;
	NSDictionary* _audioCompressionSettings;
	NSURL* _recordingURL;
	MaskEngineWrapper2* _maskEngine;
	AVSampleBufferDisplayLayer* _sampleBufferDisplayLayer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* measurementsLabel;
@property(assign, nonatomic) BOOL freezeSampleBufferDisplayLayer;
@property(assign, nonatomic) float zoomFactor;
@property(readonly, assign, nonatomic) BOOL videoRecordingInProgress;
@property(readonly, assign, nonatomic) BOOL currentCameraDeviceHasTorch;
@property(readonly, assign, nonatomic) BOOL currentCameraDeviceHasFlash;
@property(assign, nonatomic) __weak id<CameraManagerDelegate> delegate;
@property(retain, nonatomic) AVSampleBufferDisplayLayer* sampleBufferDisplayLayer;
@property(assign, nonatomic) BOOL maskEngineLoadingOrLoaded;
@property(retain, nonatomic) MaskEngineWrapper2* maskEngine;
@property(assign, nonatomic) BOOL recorededFirstFrameOfVideo;
@property(assign, nonatomic) BOOL recording;
@property(copy, nonatomic) NSURL* recordingURL;
@property(retain, nonatomic) NSDictionary* audioCompressionSettings;
@property(retain, nonatomic) NSDictionary* videoCompressionSettings;
@property(assign, nonatomic) int videoBufferOrientation;
@property(retain, nonatomic) opaqueCMFormatDescription* outputAudioFormatDescription;
@property(retain, nonatomic) opaqueCMFormatDescription* outputVideoFormatDescription;
@property(assign, nonatomic) unsigned cameraPosition;
@property(assign, nonatomic) unsigned backgroundRecordingId;
@property(retain, nonatomic) KVOObserver* currentDeviceKVOObserver;
@property(retain, nonatomic) KVOObserver* stillImageOutputKVOObserver;
@property(retain, nonatomic) AVCaptureConnection* audioConnection;
@property(retain, nonatomic) AVCaptureConnection* videoConnection;
@property(retain, nonatomic) AVCaptureStillImageOutput* stillImageOutput;
@property(retain, nonatomic) AVCaptureAudioDataOutput* audioDataOutput;
@property(retain, nonatomic) AVCaptureVideoDataOutput* videoDataOutput;
@property(retain, nonatomic) AVCaptureDevice* currentCameraDevice;
@property(retain, nonatomic) AVCaptureDeviceInput* microphoneDeviceInput;
@property(retain, nonatomic) AVCaptureDevice* microphoneDevice;
@property(retain, nonatomic) AVCaptureDeviceInput* frontfacingCameraDeviceInput;
@property(retain, nonatomic) AVCaptureDevice* frontfacingCameraDevice;
@property(retain, nonatomic) AVCaptureDeviceInput* backfacingCameraDeviceInput;
@property(retain, nonatomic) AVCaptureDevice* backfacingCameraDevice;
@property(retain, nonatomic) AVCaptureSession* audioSession;
@property(retain, nonatomic) AVCaptureSession* videoSession;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* audioDataOutputQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* videoDataOutputQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* sessionQueue;
@property(retain, nonatomic) MovieRecorder* recorder;
@property(retain, nonatomic) CameraConfig* cameraConfig;
@property(assign, nonatomic) unsigned captureSessionSetupResult;
@property(retain, nonatomic) FPSMeasurer* fpsMeasurer;
+(BOOL)backfacingCameraDeviceAvailable;
+(BOOL)frontfacingCameraDeviceAvailable;
+(id)sessionPresetForStoryFrontfacingCamera;
+(id)sessionPresetForStoryBackfacingCamera;
+(id)sessionPresetForStoryCameraForPosition:(unsigned)position;
+(id)cameraDeviceWithPosition:(int)position;
-(void).cxx_destruct;
-(void)stopApplyingMask;
-(void)applyMaskWithJsonFilePath:(id)jsonFilePath;
-(void)loadMaskEngineWithAssetsPathIfNotAlready:(id)assetsPathIfNotAlready;
-(void)movieRecorderDidFinishPreparing:(id)movieRecorder;
-(void)movieRecorder:(id)recorder didFailWithError:(id)error;
-(void)movieRecorderDidFinishRecording:(id)movieRecorder;
-(void)appendAudioSampleBufferToRecorderIfNeeded:(opaqueCMSampleBuffer*)recorderIfNeeded;
-(void)appendVideoSampleBufferToRecorderIfNeeded:(opaqueCMSampleBuffer*)recorderIfNeeded;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)receiveSampleBufferWithApplyingMask:(opaqueCMSampleBuffer*)applyingMask;
-(void)maskEngineWrapper2:(id)a2 pixelBufferReady:(char*)ready width:(unsigned)width height:(unsigned)height backCamera:(BOOL)camera photo:(BOOL)photo timestampMs:(unsigned)ms;
-(void)maskEngineWrapper2:(id)a2 maskLoadStatusChanged:(id)changed maskLoadStatus:(unsigned)status;
-(void)maskEngineWrapper2:(id)a2 renderLoadStatusChanged:(BOOL)changed;
-(void)maskEngineWrapper2:(id)a2 modelLoadStatusChanged:(BOOL)changed;
-(void)maskEngineWrapper2:(id)a2 changedMaskLoaded:(BOOL)loaded;
-(CGAffineTransform)transformFromVideoBufferOrientationToOrientation:(int)orientation withAutoMirroring:(BOOL)autoMirroring;
-(void)addInputToSessionIfPossible:(id)sessionIfPossible input:(id)input;
-(void)removeInputFromSessionIfExists:(id)sessionIfExists input:(id)input;
-(BOOL)session:(id)session containsInput:(id)input;
-(void)addInputToSessionIfPossible:(id)sessionIfPossible;
-(void)removeInputFromSessionIfExists:(id)sessionIfExists;
-(BOOL)sessionContainsInput:(id)input;
-(void)askUserForPermissionIfNeededWithMediaType:(id)mediaType withCompletion:(id)completion;
-(void)handleCurrentCameraDeviceAdjustingExposureChange:(BOOL)change;
-(void)handleCurrentCameraDeviceAdjustingFocusChange:(BOOL)change;
-(void)handleStillImageOutputCapturingStillImageChange:(BOOL)change;
-(void)focusAndAdjustWhiteBalanceAtAdjustedPoint:(CGPoint)adjustedPoint;
-(void)stopAudioSession;
-(void)startAudioSession;
-(void)stopVideoRecording;
-(void)startVideoRecording;
-(void)capturePhoto;
-(void)setCameraConfig:(id)config asyncWithCompletion:(id)completion;
-(id)createKVOObserverForCurrentDevice:(id)currentDevice;
-(void)setupFocusAndExposureForDevice:(id)device;
-(void)applyCameraPosition:(unsigned)position;
-(void)applyConfiguration:(id)configuration lockSessionForConfiguration:(BOOL)configuration2;
-(id)createKVOObserverForStillImageOutput:(id)stillImageOutput;
-(void)initializeAndStartSessionWithConfig:(id)config requestCameraPermissionIfNeeded:(BOOL)needed requestMicrophonePermissionIfNeeded:(BOOL)needed3 sampleBufferDisplayLayer:(id)layer completion:(id)completion;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface CameraConfig : XXUnknownSuperclass <NSCopying, NSMutableCopying> {
	unsigned _preferredPosition;
	unsigned _flashMode;
	NSString* _sessionPreset;
	NSArray* _sessionPresetsFallback;
}
@property(copy, nonatomic) NSArray* sessionPresetsFallback;
@property(copy, nonatomic) NSString* sessionPreset;
@property(assign, nonatomic) unsigned flashMode;
@property(assign, nonatomic) unsigned preferredPosition;
-(void).cxx_destruct;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MutableCameraConfig : CameraConfig {
}
@property(copy, nonatomic) NSArray* sessionPresetsFallback;
@property(copy, nonatomic) NSString* sessionPreset;
@property(assign, nonatomic) unsigned flashMode;
@property(assign, nonatomic) unsigned preferredPosition;
-(void)switchFlashMode;
-(void)switchPreferredPosition;
-(id)initWithConfig:(id)config;
@end

__attribute__((visibility("hidden")))
@interface KVOObserver : XXUnknownSuperclass {
	BOOL _skipChanges;
	id _objectToObserve;
	NSDictionary* _changeHandlers;
}
@property(assign, nonatomic) BOOL skipChanges;
@property(assign, nonatomic) __weak id objectToObserve;
@property(retain, nonatomic) NSDictionary* changeHandlers;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)unobserveAll;
-(void)unobserve:(id)unobserve;
-(void)observe:(id)observe handler:(id)handler;
-(void)dealloc;
-(id)initWithObjectToObserve:(id)observe;
-(void)observeFloatForKeyPath:(id)keyPath handler:(id)handler;
-(void)observeDoubleForKeyPath:(id)keyPath handler:(id)handler;
-(void)observeIntegerForKeyPath:(id)keyPath handler:(id)handler;
-(void)observeBoolForKeyPath:(id)keyPath handler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface KVOBlockChangeHandler : XXUnknownSuperclass <KVOChangeHandler> {
	id _handlerBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id handlerBlock;
+(id)changeHandlerWithBlock:(id)block;
-(void).cxx_destruct;
-(void)handleKVOChange:(id)change;
@end

__attribute__((visibility("hidden")))
@interface KVOChangeData : XXUnknownSuperclass {
	NSString* _keyPath;
	unsigned _kind;
	id _newValue;
	id _oldValue;
	NSIndexSet* _indexes;
}
@property(readonly, assign, nonatomic) NSIndexSet* indexes;
@property(readonly, assign, nonatomic) id oldValue;
@property(readonly, assign, nonatomic) id newValue;
@property(readonly, assign, nonatomic) unsigned kind;
@property(readonly, assign, nonatomic) NSString* keyPath;
+(id)changeDataWithChangeDictionary:(id)changeDictionary keyPath:(id)path;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface FeedVideoView : XXUnknownSuperclass <VKThumbnailView, TrackingBoundsView, ViewControllerAppearanceStateHandler, VKVideoPlayerHolder, VideoPlayerToFullScreenTransitionDelegate, VideoPlayerFromFullScreenTransitionVideoViewDestination> {
	BOOL _manuallyPausedVideo;
	BOOL _didTransitionToFullScreen;
	BOOL _fullScreenTransitionInProgress;
	BOOL _wasPlayingBeforeApplicationResignedActive;
	VKVideoPlayer* _videoPlayer;
	VKVideo* _domain;
	int _renderedSize;
	float _trackingBoundsPercentsVisible;
	int _viewControllerVisibility;
	id<FeedVideoViewDelegate> _delegate;
	NSURL* _currentURL;
	FeedVideoIndicatorView* _indicatorView;
	UIImageView* _playImageView;
	FinishedVideoActionsOverlayView* _finishedVideoActionsOverlayView;
	VideoPlayerErrorOverlayView* _errorOverlayView;
	VKImageVariant* _previewImage;
	KVOObserver* _playerObserver;
	NSTimer* _trackingBoundsUpdateThrottleTimer;
}
@property(readonly, assign, nonatomic) UIImage* image;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<FeedVideoViewDelegate> delegate;
@property(assign, nonatomic) int viewControllerVisibility;
@property(assign, nonatomic) float trackingBoundsPercentsVisible;
@property(assign, nonatomic) int renderedSize;
@property(retain, nonatomic) VKVideo* domain;
@property(assign, nonatomic) BOOL wasPlayingBeforeApplicationResignedActive;
@property(retain, nonatomic) NSTimer* trackingBoundsUpdateThrottleTimer;
@property(retain, nonatomic) KVOObserver* playerObserver;
@property(assign, nonatomic) BOOL fullScreenTransitionInProgress;
@property(assign, nonatomic) BOOL didTransitionToFullScreen;
@property(assign, nonatomic) BOOL manuallyPausedVideo;
@property(retain, nonatomic) VKImageVariant* previewImage;
@property(retain, nonatomic) VideoPlayerErrorOverlayView* errorOverlayView;
@property(retain, nonatomic) FinishedVideoActionsOverlayView* finishedVideoActionsOverlayView;
@property(retain, nonatomic) UIImageView* playImageView;
@property(retain, nonatomic) FeedVideoIndicatorView* indicatorView;
@property(retain, nonatomic) VKVideoPlayer* videoPlayer;
@property(retain, nonatomic) NSURL* currentURL;
-(void).cxx_destruct;
-(void)parentViewControllerViewDidAppear;
-(void)parentViewControllerViewDidDisappear;
-(void)parentViewControllerViewWillDisappear;
-(void)updateForParentViewControllerVisibility:(int)parentViewControllerVisibility;
-(void)checkIfNeedToPlayForTrackingBoundsPercentsVisible:(float)trackingBoundsPercentsVisible previousPercentsVisible:(float)visible throttle:(BOOL)throttle;
-(void)handleAudioSessionInterruptionNotification:(id)notification;
-(void)handleAudioSessionRouteChangeNotification:(id)notification;
-(void)handleApplicationDidBecomeActiveNotification:(id)handleApplication;
-(void)handleApplicationWillResignActiveNotification:(id)handleApplication;
-(void)handleErrorOverlayTryAgainButtonTap:(id)tap;
-(void)handleFinishedVideoActionsOverlayViewButtonTap:(id)tap;
-(void)handleTap:(id)tap;
-(void)didEndTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)didCancelTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)willEndTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)willBeginTransitionFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(void)performExtraChangesAlongTransitionAnimatinFromFullScreenWithVideoPlayer:(id)videoPlayer;
-(CGRect)animationDestinationFrameInView:(id)view;
-(BOOL)isValidForFromFullScreenTransitionWithVideo:(id)video;
-(void)didEndTransitionToFullScreen;
-(void)willBeginTransitionToFullScreen;
-(void)attachVideoPlayer:(id)player;
-(void)deattachCurrentVideoPlayer;
-(void)setupPlayerWithVideo:(id)video videoURL:(id)url preview:(id)preview;
-(void)ensureHasVideoPlayerSetupIt:(BOOL)it;
-(void)handleVideoPlayerCurrentTimeChanged:(double)changed;
-(void)handleVideoPlayerStateChange:(id)change prevState:(id)state;
-(void)updateForVideoPlayerState;
-(void)resetView;
-(void)attach:(id)attach previewVariant:(id)variant;
-(void)setPlayImageViewHiddenIfNotGif:(BOOL)gif;
-(void)tearDownVideoPlayerKVOObserver;
-(void)setupVideoPlayerKVOObserver;
-(int)previewAspectMode;
-(void)layoutSubviews;
-(void)prepareToReload;
-(void)reuse;
-(void)initializeSubviews;
-(void)initialize;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface FeedVideoIndicatorView : XXUnknownSuperclass {
	unsigned _type;
	unsigned _state;
	UIImageView* _backgroundImageView;
	UILabel* _durationLabel;
	RoundedProgressOverlayView* _loadingProgressView;
	VideoAutoplayEqualizerIndicatorView* _equalizerView;
	UIImageView* _liveRedDotImageView;
	VKLiveVideoGradientView* _gradientView;
	double _duration;
}
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) double duration;
@property(assign, nonatomic) unsigned type;
@property(retain, nonatomic) VKLiveVideoGradientView* gradientView;
@property(retain, nonatomic) UIImageView* liveRedDotImageView;
@property(retain, nonatomic) VideoAutoplayEqualizerIndicatorView* equalizerView;
@property(retain, nonatomic) RoundedProgressOverlayView* loadingProgressView;
@property(retain, nonatomic) UILabel* durationLabel;
@property(retain, nonatomic) UIImageView* backgroundImageView;
-(void).cxx_destruct;
-(void)setHidden:(BOOL)hidden;
-(void)setBackgroundImageViewAlpha:(float)alpha animated:(BOOL)animated delay:(double)delay;
-(void)updateForState:(unsigned)state;
-(void)updateForDuration:(double)duration;
-(id)backgroundImageViewTintColorForType:(unsigned)type;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(void)didMoveToWindow;
-(void)initialize;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface FinishedVideoActionsOverlayView : XXUnknownSuperclass {
	UIButton* _replayButton;
	UIButton* _likeButton;
	UIButton* _addVideoButton;
}
@property(retain, nonatomic) UIButton* addVideoButton;
@property(retain, nonatomic) UIButton* likeButton;
@property(retain, nonatomic) UIButton* replayButton;
-(void).cxx_destruct;
-(id)buttonWithNormalStateImage:(id)normalStateImage selectedStateImage:(id)image;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame buttonsTapTarget:(id)target action:(SEL)action;
@end

__attribute__((visibility("hidden")))
@interface VKFeedActivity : VKRenderable {
	VKIdentity* _target;
	int _type;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) VKIdentity* target;
+(id)parse:(id)parse context:(id)context;
-(void).cxx_destruct;
-(void)acceptSources:(id)sources;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedActivityComment : VKFeedActivity {
	VKComment* _comment;
}
@property(retain, nonatomic) VKComment* comment;
-(void).cxx_destruct;
-(void)acceptSources:(id)sources;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKFeedActivityLikes : VKFeedActivity {
	NSArray* _user_ids;
	NSArray* _sources;
	int _count;
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) int count;
@property(retain, nonatomic) NSArray* sources;
@property(retain, nonatomic) NSArray* user_ids;
-(void).cxx_destruct;
-(void)acceptSources:(id)sources;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGroupInvite : VKDomain {
	BOOL _answered;
	BOOL _confirmed;
	BOOL _not_sure;
	VKGroup* _group;
	VKPlace* _place;
	VKUser* _invited_by;
	int _members_count;
}
@property(assign, nonatomic) int members_count;
@property(assign, nonatomic) BOOL not_sure;
@property(assign, nonatomic) BOOL confirmed;
@property(assign, nonatomic) BOOL answered;
@property(retain, nonatomic) VKUser* invited_by;
@property(retain, nonatomic) VKPlace* place;
@property(retain, nonatomic) VKGroup* group;
-(void).cxx_destruct;
-(id)iden;
-(Class)rendererClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGroupAllInvites : VKRenderable <VKTitleableColor> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)titleColor;
-(id)titleFont;
-(float)titleOffsetX;
-(BOOL)disclosure;
-(id)title;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface ColoredTitleableRenderer : TitleableRenderer {
}
@property(retain, nonatomic) id<VKTitleableColor> domain;
+(void)t;
+(id)rendererElements;
-(void)renderCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface VKGroupsCatalogInfo : VKDomain {
	BOOL _enabled;
	NSArray* _categories;
}
@property(retain, nonatomic) NSArray* categories;
@property(assign, nonatomic) BOOL enabled;
-(void).cxx_destruct;
-(id)categoryIds;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface GroupsCatalogModel : ListModel {
	int _categoryId;
}
@property(assign, nonatomic) int categoryId;
-(void)handleAddGroup:(id)group :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)setupCategory:(int)category;
-(id)process:(id)process;
-(id)requestForContext:(id)context;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface StoryUploadContext : XXUnknownSuperclass {
	BOOL _addToNews;
	BOOL _saveRenderingResultToCameraRoll;
	VKClient* _client;
	id _responseData;
	int _error;
	float _progress;
	NSArray* _userIds;
	id<StoryEditorRenderingTask> _renderingTask;
	NSString* _fileName;
	NSString* _fieldName;
	VKMask* _mask;
}
@property(retain, nonatomic) VKMask* mask;
@property(assign, nonatomic) BOOL saveRenderingResultToCameraRoll;
@property(readonly, copy, nonatomic) NSString* fieldName;
@property(readonly, copy, nonatomic) NSString* fileName;
@property(readonly, assign, nonatomic) id<StoryEditorRenderingTask> renderingTask;
@property(readonly, copy, nonatomic) NSArray* userIds;
@property(readonly, assign, nonatomic) BOOL addToNews;
@property(readonly, assign, nonatomic) float progress;
@property(readonly, assign, nonatomic) VKClient* client;
@property(assign, nonatomic) int error;
@property(retain, nonatomic) id responseData;
-(void).cxx_destruct;
-(void)resetContext;
-(void)operationFailedWithError:(int)error;
-(void)operationFinishedSuccessfullyWithResponseData:(id)responseData;
-(id)uploadServerURLFromGetUploadServerResponse:(id)getUploadServerResponse;
-(void)provideFileURLForUploadAsync:(id)uploadAsync;
-(id)getUploadServerRequest;
-(id)initWithClient:(id)client renderingTask:(id)task addToNews:(BOOL)news userIds:(id)ids;
@end

__attribute__((visibility("hidden")))
@interface StoryUploadOperation : AsyncOperation {
	StoryUploadContext* _context;
	unsigned _bgTaskIdentifier;
}
@property(assign, nonatomic) unsigned bgTaskIdentifier;
@property(readonly, assign, nonatomic) StoryUploadContext* context;
-(void).cxx_destruct;
-(void)startUploadPhaseWithFileURL:(id)fileURL uploadServerURL:(id)url;
-(void)getUploadFileURLAndStartUploadPhaseWithUploadServerURL:(id)uploadServerURL;
-(void)startGetUploadServerPhase;
-(void)asyncOpFinish;
-(void)runAsync;
-(id)initWithContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StoryPhotoUploadContext : StoryUploadContext {
}
-(id)fileName;
-(id)fieldName;
-(id)getUploadServerRequest;
@end

__attribute__((visibility("hidden")))
@interface StoryVideoUploadContext : StoryUploadContext {
}
-(id)fieldName;
-(id)getUploadServerRequest;
-(id)initWithClient:(id)client renderingTask:(id)task addToNews:(BOOL)news userIds:(id)ids;
@end

__attribute__((visibility("hidden")))
@interface UploadingStory : XXUnknownSuperclass {
	BOOL _uploadAnimationShown;
	StoryUploadContext* _context;
	float _progress;
	StoryIdentity* _storyIden;
	unsigned _state;
	StoryUploadOperation* _operation;
	KVOObserver* _operationObserver;
}
@property(assign, nonatomic) BOOL uploadAnimationShown;
@property(readonly, copy, nonatomic) StoryIdentity* storyIden;
@property(readonly, assign, nonatomic) StoryUploadContext* context;
@property(retain, nonatomic) KVOObserver* operationObserver;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) StoryUploadOperation* operation;
+(id)uploadingStoryWithUploadContext:(id)uploadContext storyIden:(id)iden;
-(void).cxx_destruct;
-(void)cleanUpOperation;
-(void)createAndSetupOperation;
-(void)cancelUpload;
-(void)restartUpload;
-(void)startUpload;
-(void)dealloc;
-(id)initWithUploadContext:(id)uploadContext storyIden:(id)iden;
@end

__attribute__((visibility("hidden")))
@interface VKSnapperAttach : VKDomain {
	NSNumber* _id;
	NSNumber* _owner_id;
	NSString* _src_blur;
	NSString* _src_big;
	NSString* _label;
	NSString* _app_name;
	NSString* _app_icon;
	NSNumber* _app_id;
	NSString* _app_url;
	int _timer;
}
@property(assign, nonatomic) int timer;
@property(retain, nonatomic) NSString* app_url;
@property(retain, nonatomic) NSNumber* app_id;
@property(retain, nonatomic) NSString* app_icon;
@property(retain, nonatomic) NSString* app_name;
@property(retain, nonatomic) NSString* label;
@property(retain, nonatomic) NSString* src_big;
@property(retain, nonatomic) NSString* src_blur;
@property(retain, nonatomic) NSNumber* owner_id;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKExternalAppAuthContainer : XXUnknownSuperclass {
}
+(void)checkStatus:(long)status;
+(void)delete:(id)aDelete;
+(id)load:(id)load;
+(void)save:(id)save data:(id)data;
+(id)getKeychainQuery:(id)query;
+(BOOL)appAuthTokenAvailable;
+(void)requestAndSaveExternalAppAuthToken:(id)token;
+(void)removeExternalAppAuthToken;
@end

__attribute__((visibility("hidden")))
@interface SnapperView : AbstractMessagesAttachmentView {
	id<SnapperViewDelegate> _delegate;
	VKMImageView* _imageView;
	VKMImageView* _logoView;
	UILabel* _appNameLabel;
	UILabel* _textLabel;
	UILabel* _openLabel;
	VKSnapperAttach* _attach;
}
@property(assign, nonatomic) __weak id<SnapperViewDelegate> delegate;
@property(retain, nonatomic) VKSnapperAttach* attach;
@property(retain, nonatomic) UILabel* openLabel;
@property(retain, nonatomic) UILabel* textLabel;
@property(retain, nonatomic) UILabel* appNameLabel;
@property(retain, nonatomic) VKMImageView* logoView;
@property(retain, nonatomic) VKMImageView* imageView;
-(void).cxx_destruct;
-(void)openSnapper:(id)snapper;
-(void)renderSnapper:(id)snapper reuse:(double)reuse;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SettingsSection : XXUnknownSuperclass <NSFastEnumeration> {
	NSArray* _items;
	NSString* _header;
	NSString* _footer;
	float _footerHeight;
}
@property(readonly, assign) unsigned count;
@property(copy, nonatomic) NSString* footer;
@property(copy, nonatomic) NSString* header;
@property(copy, nonatomic) NSArray* items;
@property(assign, nonatomic) float footerHeight;
+(id)sectionWithItems:(id)items header:(id)header footer:(id)footer;
-(void).cxx_destruct;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)objectAtIndex:(unsigned)index;
-(id)initWithItems:(id)items header:(id)header footer:(id)footer;
@end

__attribute__((visibility("hidden")))
@interface BaseSectionedSettingsController : BaseSettingsController {
}
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(BOOL)customizeFooterForSection:(unsigned)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)section:(unsigned)section;
-(void)resetSections;
-(void)addSection:(id)section;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayStatsGroup : XXUnknownSuperclass <VideoPlayStats> {
	NSArray* _stats;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSArray* stats;
+(id)stats:(id)stats;
-(void).cxx_destruct;
-(void)toggleFullscreen:(BOOL)fullscreen;
-(void)toggleVolume:(BOOL)volume;
-(void)progress:(double)progress;
-(void)complete;
-(void)resume;
-(void)pause;
-(void)play:(BOOL)play;
-(id)initWithStats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface VKAPTabObject : XXUnknownSuperclass {
	BOOL _showPromo;
	NSString* _title;
	NSString* _tabButtonImagesTitle;
	int _tabType;
	UIViewController<VKAPTabViewControllerProtocol>* _controller;
}
@property(retain, nonatomic) UIViewController<VKAPTabViewControllerProtocol>* controller;
@property(assign, nonatomic) BOOL showPromo;
@property(assign, nonatomic) int tabType;
@property(copy, nonatomic) NSString* tabButtonImagesTitle;
@property(copy, nonatomic) NSString* title;
+(id)createVkApTabsWithOptions:(int)options model:(id)model stats:(id)stats;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title imageName:(id)name tabType:(int)type controller:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface ModernAccountSettings : BaseSectionedSettingsController {
	UITableViewCell* _cellPhoneNumber;
	UITableViewCell* _cellEmail;
	UITableViewCell* _cellPassword;
	UITableViewCell* _cellShortname;
	UITableViewCell* _cellOnlyMyPosts;
	UITableViewCell* _cellCommentsEnabled;
	UITableViewCell* _cellCommunityComments;
	UITableViewCell* _cellLoading;
	SettingsSection* _wallSettingsSection;
}
@property(retain, nonatomic) SettingsSection* wallSettingsSection;
@property(retain, nonatomic) UITableViewCell* cellLoading;
@property(retain, nonatomic) UITableViewCell* cellCommunityComments;
@property(retain, nonatomic) UITableViewCell* cellCommentsEnabled;
@property(retain, nonatomic) UITableViewCell* cellOnlyMyPosts;
@property(retain, nonatomic) UITableViewCell* cellShortname;
@property(retain, nonatomic) UITableViewCell* cellPassword;
@property(retain, nonatomic) UITableViewCell* cellEmail;
@property(retain, nonatomic) UITableViewCell* cellPhoneNumber;
-(void).cxx_destruct;
-(void)switchOnlyMyPosts:(id)posts;
-(void)switchAdminCommentsEnabled:(id)enabled;
-(void)switchCommentsEnabled:(id)enabled;
-(void)showCommunityCommentsOptions;
-(void)showWallPostsOptions;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)customizeFooterForSection:(unsigned)section;
-(void)render;
-(void)resetSections;
-(void)reload;
-(void)viewDidLoad;
-(void)notificationActivity:(id)activity;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ModernSettingsController : BaseSettingsController <TimePickerControllerDelegate> {
	VKMImageView* _image;
	UILabel* _name;
	VKButtonExtraTouchArea* _editButton;
	VKMCell* _cellNotifications;
	VKMCell* _cellDontDisturb;
	VKMCell* _cellHelp;
	VKMCell* _cellGeneral;
	VKMCell* _cellAccount;
	VKMCell* _cellPrivacy;
	VKMCell* _cellBlacklist;
	VKMCell* _cellLogout;
	VKMCell* _cellBalance;
	VKMCell* _cellSubscriptions;
	VKMCell* _cellP2P;
	VKMCell* _cellAbout;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKMCell* cellAbout;
@property(retain, nonatomic) VKMCell* cellP2P;
@property(retain, nonatomic) VKMCell* cellSubscriptions;
@property(retain, nonatomic) VKMCell* cellBalance;
@property(retain, nonatomic) VKMCell* cellLogout;
@property(retain, nonatomic) VKMCell* cellBlacklist;
@property(retain, nonatomic) VKMCell* cellPrivacy;
@property(retain, nonatomic) VKMCell* cellAccount;
@property(retain, nonatomic) VKMCell* cellGeneral;
@property(retain, nonatomic) VKMCell* cellHelp;
@property(retain, nonatomic) VKMCell* cellDontDisturb;
@property(retain, nonatomic) VKMCell* cellNotifications;
@property(retain, nonatomic) VKButtonExtraTouchArea* editButton;
@property(retain, nonatomic) UILabel* name;
@property(retain, nonatomic) VKMImageView* image;
-(void).cxx_destruct;
-(void)actionVersion:(id)version;
-(void)openProfileEditing:(id)editing;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)timePickerCancel:(id)cancel;
-(void)timePicker:(id)picker selectedTime:(id)time;
-(BOOL)checkOrNotifyPushEnabled;
-(void)actionProfilePhoto:(id)photo;
-(void)render;
-(BOOL)APNSEnabled;
-(void)viewDidLoad;
-(void)notificationActivity:(id)activity;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorNavigationController : VKMNavigationController <StoryCameraViewControllerDelegate, UINavigationControllerDelegate, StoryEditorPreviewViewControllerDelegate, StoryEditorSendViewControllerDelegate> {
	MainModel* _main;
	Model* _model;
	id<StoryEditorRenderingTask> _currentStoryRenderingTask;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) Model* model;
@property(readonly, assign, nonatomic) MainModel* main;
@property(retain, nonatomic) id<StoryEditorRenderingTask> currentStoryRenderingTask;
-(void).cxx_destruct;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)storyEditorSendViewController:(id)controller sendStoryTo:(id)to;
-(void)storyEditorPreviewViewControllerDidFinish:(id)storyEditorPreviewViewController;
-(void)storyCameraViewController:(id)controller setShouldShowHoldToRecordTip:(BOOL)showHoldToRecordTip;
-(BOOL)shouldShowHoldToRecordTipForStoryCameraViewController:(id)storyCameraViewController;
-(void)storyCameraViewController:(id)controller didRecordAsset:(id)asset mask:(id)mask;
-(void)storyCameraViewController:(id)controller didCapturePhoto:(id)photo metadata:(id)metadata mask:(id)mask;
-(void)storyCameraViewControllerDidCancel:(id)storyCameraViewController;
-(unsigned)navigationControllerSupportedInterfaceOrientations:(id)orientations;
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(void)navigateToSendViewControllerFromStoryEditorPreviewViewController:(id)storyEditorPreviewViewController;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model startingMask:(id)mask;
@end

__attribute__((visibility("hidden")))
@interface ProfileModelContext : ModelContext {
	ProfileContentBlock* _audioBlock;
	ProfileContentBlock* _marketBlock;
	ProfileContentBlock* _mainSection;
	AppWidget* _appWidget;
}
@property(retain, nonatomic) AppWidget* appWidget;
@property(retain, nonatomic) ProfileContentBlock* mainSection;
@property(retain, nonatomic) ProfileContentBlock* marketBlock;
@property(retain, nonatomic) ProfileContentBlock* audioBlock;
-(void).cxx_destruct;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface DefaultProfileModel : ItemModel {
	Index* _profileInfoIndex;
	id _completedItem;
}
@property(retain, nonatomic) ProfileModelContext* lastContext;
@property(retain, nonatomic) id completedItem;
@property(retain, nonatomic) Index* profileInfoIndex;
-(void).cxx_destruct;
-(id)recreateProfileIndex:(id)index;
-(void)renderProfileInfo;
-(id)componentForContentItem:(id)contentItem;
-(id)componentForGiftsItem:(id)giftsItem;
-(id)componentForProfileItem:(id)profileItem;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)spawnContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ProfileInfoSection : XXUnknownSuperclass {
	NSString* _title;
	NSArray* _items;
}
@property(retain, nonatomic) NSArray* items;
@property(copy, nonatomic) NSString* title;
+(id)withTitle:(id)title;
-(void).cxx_destruct;
-(id)addItemWithTitle:(id)title subtitle:(id)subtitle photo:(id)photo routeTarget:(id)target;
-(id)addItemWithTitle:(id)title subtitle:(id)subtitle photo:(id)photo;
-(id)addItemWithTitle:(id)title subtitle:(id)subtitle;
-(id)addItem:(id)item;
@end

__attribute__((visibility("hidden")))
@interface DefaultProfileHelper : XXUnknownSuperclass <ProfileModelHelper> {
	DefaultProfileModel* _model;
	id<VKProfile> _item;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VKProfile> item;
@property(retain, nonatomic) DefaultProfileModel* model;
+(id)textAttributes;
+(id)titleAttributes;
+(id)withModel:(id)model item:(id)item;
-(void).cxx_destruct;
-(id)addStatusAudio:(id)audio atSection:(id)section;
-(id)text:(id)text attributes:(id)attributes detector:(BOOL)detector;
-(id)text:(id)text attributes:(id)attributes;
-(id)text:(id)text detector:(BOOL)detector;
-(id)text:(id)text;
-(id)title:(id)title detector:(BOOL)detector;
-(id)title:(id)title;
-(id)createProfileSections;
-(id)generateInfoIndex;
@end

__attribute__((visibility("hidden")))
@interface SettingsChangePasswordController : BaseSectionedSettingsController <UITextFieldDelegate> {
	AuthModel* _authModel;
	VKMInputTextCell* _cellOldPassword;
	VKMInputTextCell* _cellNewPassword;
	VKMInputTextCell* _cellRepeatPassword;
	UILabel* _errorLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) AuthModel* authModel;
@property(retain, nonatomic) UILabel* errorLabel;
@property(retain, nonatomic) VKMInputTextCell* cellRepeatPassword;
@property(retain, nonatomic) VKMInputTextCell* cellNewPassword;
@property(retain, nonatomic) VKMInputTextCell* cellOldPassword;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)textFieldDidChange:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)actionSavePassword:(id)password;
-(void)resetSections;
-(void)resetBarButton;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface MediaPickerHeaderView : XXUnknownSuperclass {
	NSString* _title;
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryMediaPickerViewController : XXUnknownSuperclass <UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, PHPhotoLibraryChangeObserver> {
	id<StoryMediaPickerViewControllerDelegate> _delegate;
	StoryEditorNavigationBar* _customNavigationBar;
	UICollectionView* _collectionView;
	PHFetchResult* _fetchResult;
	EmptyStateView* _emptyStateView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) StoryEditorNavigationBar* customNavigationBar;
@property(assign, nonatomic) __weak id<StoryMediaPickerViewControllerDelegate> delegate;
@property(retain, nonatomic) EmptyStateView* emptyStateView;
@property(retain, nonatomic) PHFetchResult* fetchResult;
@property(retain, nonatomic) UICollectionView* collectionView;
+(id)fetchOptionsForLast24HoursFetch;
+(id)lastAsset;
-(void).cxx_destruct;
-(void)photoLibraryDidChange:(id)photoLibrary;
-(unsigned)supportedInterfaceOrientations;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(int)section;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)handleCancelButtonTap;
-(void)reloadAssets;
-(BOOL)prefersStatusBarHidden;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogModel : ListModel {
	AudioAudiosSpecialBlock* _audiosSpecialBlock;
}
@property(retain, nonatomic) AudioAudiosSpecialBlock* audiosSpecialBlock;
-(void).cxx_destruct;
-(void)actionModelActionAddAudio:(id)audio :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsBlock : AudioBlock {
	NSArray* _playlists;
}
@property(retain, nonatomic) NSArray* playlists;
-(void).cxx_destruct;
-(id)items;
-(BOOL)process:(id)process context:(id)context;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface PositionedLabelHeaderView : XXUnknownSuperclass {
	UILabel* _myTextLabel;
	float _textHeight;
	float _textOffsetX;
}
@property(assign, nonatomic) float textOffsetX;
@property(assign, nonatomic) float textHeight;
@property(readonly, retain, nonatomic) UILabel* myTextLabel;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface ModelActionUpdateAccountInfo : ModelAction {
	NSString* _name;
	id _value;
}
@property(readonly, retain, nonatomic) id value;
@property(readonly, retain, nonatomic) NSString* name;
+(id)name:(id)name value:(id)value;
+(int)domainType;
+(id)wallRepliesDisabled:(BOOL)disabled;
+(id)displayMyPosts:(BOOL)posts;
+(id)adminCommentsEnabled:(BOOL)enabled;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)initWithName:(id)name value:(id)value;
@end

__attribute__((visibility("hidden")))
@interface VKMChangePhoneAction : VKMSiteAction {
	NSURL* _redirect_url;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSURL* redirect_url;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)complete:(int)complete phone:(id)phone phoneStatus:(id)status;
-(void)cancel;
-(id)targetURL;
-(id)initWithURL:(id)url handler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface VMRecording : XXUnknownSuperclass <VMRecordingSessionDelegate, TimerTargetDelegate> {
	id<VMRecordingDelegate> _delegate;
	VMSessionManager* _VMSessionManager;
	VKOpusRecorder* _recorder;
	AVAudioPlayer* _beginRecordSoundPlayer;
	TimerTarget* _timer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VMSessionManager* VMSessionManager;
@property(assign, nonatomic) __weak id<VMRecordingDelegate> delegate;
@property(retain, nonatomic) TimerTarget* timer;
@property(retain, nonatomic) AVAudioPlayer* beginRecordSoundPlayer;
@property(retain, nonatomic) VKOpusRecorder* recorder;
-(void).cxx_destruct;
-(void)timerTargetFired:(id)fired;
-(void)recordingSessionGetCloseToEar:(id)ear;
-(void)recordingSessionGetAwayFromEar:(id)ear;
-(void)recordingSessionApplicationResignActiveOrInterrupted:(id)interrupted;
-(id)stopRecordingAndGetOpusRecord;
-(void)startRecorder;
-(void)startRecoringIsFromRiseToRecord:(BOOL)record;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMChangeEmailAction : VKMSiteAction {
	NSURL* _redirect_url;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSURL* redirect_url;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)complete:(int)complete email:(id)email emailStatus:(id)status;
-(void)cancel;
-(id)targetURL;
-(id)initWithURL:(id)url handler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistsInlineController : VKMCollectionController {
}
@property(retain, nonatomic) AudioPlaylistsInlineModel* model;
-(void)model:(id)model updated:(id)updated;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(id)VKMCollectionCreateLayout;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface AdsComponent : Component5 {
}
+(id)promotedApplicationSlider:(id)slider;
+(id)promotedApplications:(id)applications;
+(id)promotedPost:(id)post extra:(id)extra stats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface VKSearchTrendCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface LinearFooterView : XXUnknownSuperclass {
}
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface ShortNameVariant : VKRenderable <VKTitleable> {
	NSString* _title;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(BOOL)disclosure;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface SettingsChangeShortnameController : BaseSectionedSettingsController <UITextFieldDelegate, MOCTLabelDelegate> {
	float keyboardHeight;
	VKMInputTextCell* _cellShortName;
	NSRegularExpression* _regexpMatcher;
	UILabel* _errorLabel;
	MOCTLabel* _infoMentionLabel;
	MOCTLabel* _linkLabel;
	VKShortNameCheckResult* _lastCheckResult;
	NSString* _currentShortName;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* currentShortName;
@property(retain, nonatomic) VKShortNameCheckResult* lastCheckResult;
@property(retain, nonatomic) MOCTLabel* linkLabel;
@property(retain, nonatomic) MOCTLabel* infoMentionLabel;
@property(retain, nonatomic) UILabel* errorLabel;
@property(retain, nonatomic) NSRegularExpression* regexpMatcher;
@property(retain, nonatomic) VKMInputTextCell* cellShortName;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(void)moctlabel:(id)moctlabel linkClicked:(id)clicked;
-(void)textFieldDidChange:(id)textField;
-(void)setNameAndClose:(id)close;
-(void)actionSaveName:(id)name;
-(void)checkName;
-(id)rendererForShortName:(id)shortName width:(float)width;
-(id)rendererForMention:(id)mention width:(float)width;
-(id)linkRenderAttributes;
-(id)textAttributes;
-(void)render;
-(BOOL)isDifferentShortName;
-(void)resetSections;
-(void)resetBarButton;
-(void)updateForOrientation;
-(void)notificationKeyboard:(id)keyboard;
-(void)viewWillAppear:(BOOL)view;
-(Class)cellClass;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorContainerController : VKMViewControllerContainer <VKSelectorDelegate> {
	VKSelector* _vkSelector;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)main:(id)main selector:(id)selector;
-(void).cxx_destruct;
-(void)selectorDidChangeOptions:(id)selector;
-(void)selector:(id)selector didSelectOption:(id)option;
-(id)vkSelector;
-(id)viewControllerForOption:(id)option;
-(id)initWithMain:(id)main selector:(id)selector;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ModelActionShortName : ModelAction {
	BOOL _onlyCheck;
	VKShortNameCheckResult* _result;
	NSString* _nextShortName;
}
@property(assign, nonatomic) BOOL onlyCheck;
@property(copy, nonatomic) NSString* nextShortName;
@property(retain, nonatomic) VKShortNameCheckResult* result;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)setupOnlyCheck:(BOOL)check;
-(id)setupName:(id)name;
-(BOOL)disableHUD;
@end

__attribute__((visibility("hidden")))
@interface SampleBufferDisplayLayerView : XXUnknownSuperclass {
}
@property(readonly, assign, nonatomic) AVSampleBufferDisplayLayer* sampleBufferDisplayLayer;
+(Class)layerClass;
@end

__attribute__((visibility("hidden")))
@interface CameraPreviewView : XXUnknownSuperclass {
	id<CameraPreviewViewDelegate> _delegate;
	SampleBufferDisplayLayerView* _sampleBufferDisplayLayerView;
	UIView* _shutterBlinkView;
	UIImageView* _focusView;
	UITapGestureRecognizer* _focusTapGesture;
	UITapGestureRecognizer* _flipCameraDoubleTapGesture;
	UIPinchGestureRecognizer* _zoomPinchGesture;
}
@property(assign, nonatomic) __weak id<CameraPreviewViewDelegate> delegate;
@property(retain, nonatomic) UIPinchGestureRecognizer* zoomPinchGesture;
@property(retain, nonatomic) UITapGestureRecognizer* flipCameraDoubleTapGesture;
@property(retain, nonatomic) UITapGestureRecognizer* focusTapGesture;
@property(retain, nonatomic) UIImageView* focusView;
@property(retain, nonatomic) UIView* shutterBlinkView;
@property(retain, nonatomic) SampleBufferDisplayLayerView* sampleBufferDisplayLayerView;
-(void).cxx_destruct;
-(void)showFocusViewAtPoint:(CGPoint)point andHideAfterDelay:(double)delay;
-(void)actionZoomPinchGesture:(id)gesture;
-(void)actionFlipCameraDoubleTapGesture:(id)gesture;
-(void)actionFocusTapGesture:(id)gesture;
-(id)initWithFrame:(CGRect)frame;
-(void)blink;
-(id)sampleBufferDisplayLayer;
@end

__attribute__((visibility("hidden")))
@interface VKShortNameCheckResult : VKDomain {
	NSNumber* _status;
	NSString* _reason;
	NSArray* _suggestions;
}
@property(copy, nonatomic) NSArray* suggestions;
@property(copy, nonatomic) NSString* reason;
@property(retain, nonatomic) NSNumber* status;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface SettingsPrivacyController : VKMLiveController {
}
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface SettingsPrivacyModel : ListModel {
}
+(id)privacyListRegexp;
+(id)preparePrivacyValues:(id)values withUsers:(id)users withLists:(id)lists;
-(void)privacyChanged:(id)changed :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)shouldLoad:(id)load;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKPrivacyValue : XXUnknownSuperclass {
	BOOL _disallowed;
	id _objectValue;
	VKUser* _user;
	VKFriendList* _list;
}
@property(assign, nonatomic) BOOL disallowed;
@property(retain, nonatomic) VKFriendList* list;
@property(retain, nonatomic) VKUser* user;
@property(retain, nonatomic) id objectValue;
-(void).cxx_destruct;
-(id)targetObject;
@end

__attribute__((visibility("hidden")))
@interface VKPrivacySetting : VKDomain {
	NSString* _key;
	NSString* _title;
	NSString* _section;
	NSArray* _value;
	NSArray* _prepared_value;
	NSArray* _supported_values;
}
@property(copy, nonatomic) NSArray* supported_values;
@property(copy, nonatomic) NSArray* prepared_value;
@property(copy, nonatomic) NSArray* value;
@property(copy, nonatomic) NSString* section;
@property(copy, nonatomic) NSString* title;
@property(copy, nonatomic) NSString* key;
+(id)defaultSupportedValues;
-(void).cxx_destruct;
-(id)stringValue;
-(Class)rendererClass;
-(BOOL)process:(id)process context:(id)context;
-(void)domainOnEditCopy:(id)copy;
-(void)domainOnEditCreate;
@end

__attribute__((visibility("hidden")))
@interface VKPrivacyIdentity : VKIdentity {
	NSString* _key;
}
@property(copy, nonatomic) NSString* key;
+(id)idenWithKey:(id)key;
-(void).cxx_destruct;
-(BOOL)isEqualToIdentity:(id)identity;
-(BOOL)isEqual:(id)equal;
@end

__attribute__((visibility("hidden")))
@interface SettingsPrivacyRenderer : Renderer {
}
@property(retain, nonatomic) VKPrivacySetting* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)initialize;
+(id)rendererElements;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface VKGifDecodedFrame : XXUnknownSuperclass {
	UIImage* _frameImage;
	int _frameDelay;
	int _frameNumber;
}
@property(assign, nonatomic) int frameNumber;
@property(assign, nonatomic) int frameDelay;
@property(retain, nonatomic) UIImage* frameImage;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface VKAVGifConverter : XXUnknownSuperclass <VKGifAVReaderDelegate, VKGifAVDecoderDelegate, VKGifAVWriterDelegate> {
	id<VKAVGifConverterDelegate> _delegate;
	NSURL* _sourceURL;
	NSURLSessionConfiguration* _sessionConfiguration;
	NSURL* _targetURL;
	VKGifAVReader* _reader;
	VKGifAVDecoder* _decoder;
	VKGifAVWriter* _writer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKAVGifConverterDelegate> delegate;
@property(retain, nonatomic) VKGifAVWriter* writer;
@property(retain, nonatomic) VKGifAVDecoder* decoder;
@property(retain, nonatomic) VKGifAVReader* reader;
@property(retain, nonatomic) NSURL* targetURL;
@property(retain, nonatomic) NSURL* sourceURL;
@property(retain, nonatomic) NSURLSessionConfiguration* sessionConfiguration;
+(id)converterWithSessionConfiguration:(id)sessionConfiguration;
+(id)converter;
-(void).cxx_destruct;
-(void)gifWriter:(id)writer didFinishedWithFileURL:(id)fileURL videoSize:(CGSize)size;
-(void)gifDecoderDidFinishDecoding:(id)gifDecoder;
-(BOOL)gifDecoder:(id)decoder didDecodeFrame:(id)frame;
-(void)gifAVReader:(id)reader didFoundTotalGifBytes:(long long)bytes;
-(void)gifAVReader:(id)reader didFailedWithError:(id)error;
-(void)gifAVReader:(id)reader didFetchData:(id)data withProgress:(float)progress;
-(void)convertGifWithURL:(id)url outputFileURL:(id)url2;
-(void)convertGifWithURL:(id)url;
-(void)reuse;
-(id)initWithSessionConfiguration:(id)sessionConfiguration;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKGifAVWorker : XXUnknownSuperclass {
	VKAVGifConverter* _converter;
}
@property(assign, nonatomic) __weak VKAVGifConverter* converter;
-(void).cxx_destruct;
-(void)drop;
-(id)initWithConverter:(id)converter;
@end

__attribute__((visibility("hidden")))
@interface VKGifAVReader : VKGifAVWorker <NSURLSessionDataDelegate> {
	long long expectedGifSize;
	long long totalBytesLoaded;
	NSURLSession* _urlSession;
	NSOperationQueue* _networkQueue;
	NSURLSessionTask* _dataTask;
	id<VKGifAVReaderDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKGifAVReaderDelegate> delegate;
@property(assign, nonatomic) __weak NSURLSessionTask* dataTask;
@property(retain, nonatomic) NSOperationQueue* networkQueue;
@property(retain, nonatomic) NSURLSession* urlSession;
-(void).cxx_destruct;
-(void)failWithError:(id)error;
-(void)setDataAvailable:(id)available withProgress:(float)progress;
-(void)setExpectedGifBytes:(long long)bytes;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)drop;
-(void)readLocalFileWithURL:(id)url;
-(void)readFileWithURL:(id)url;
-(id)initWithConverter:(id)converter;
@end

__attribute__((visibility("hidden")))
@interface VKGifCGReader : VKGifAVWorker <NSURLSessionDataDelegate> {
	NSOperationQueue* _networkQueue;
	id<VKGifCGReaderDelegate> _delegate;
	long long _processedBytes;
	long long _totalBytes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) long long totalBytes;
@property(assign, nonatomic) __weak id<VKGifCGReaderDelegate> delegate;
@property(retain, nonatomic) NSOperationQueue* networkQueue;
@property(assign, nonatomic) long long processedBytes;
-(void).cxx_destruct;
-(void)drop;
-(void)readFileWithURL:(id)url;
-(id)initWithConverter:(id)converter;
@end

__attribute__((visibility("hidden")))
@interface AnimatedGifFrame : XXUnknownSuperclass {
	NSData* _header;
	NSData* _data;
	int _disposalMethod;
	int _frameNumber;
	double _delay;
	CGRect _area;
}
@property(assign, nonatomic) CGRect area;
@property(assign, nonatomic) int frameNumber;
@property(assign, nonatomic) int disposalMethod;
@property(assign, nonatomic) double delay;
@property(copy, nonatomic) NSData* data;
@property(copy, nonatomic) NSData* header;
-(void).cxx_destruct;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKGifAVDecoder : VKGifAVWorker {
	NSMutableData* GIF_pointer;
	NSMutableData* GIF_buffer;
	NSMutableData* GIF_screen;
	NSMutableData* GIF_global;
	CGContextRef imageContext;
	AnimatedGifFrame* thisFrame;
	AnimatedGifFrame* lastFrame;
	int GIF_sorted;
	int GIF_colorS;
	int GIF_colorC;
	int GIF_colorF;
	int dataPointer;
	int totalFrames;
	int frameCounter;
	long long totalGifBytes;
	CGSize gifSize;
	NSObject<OS_dispatch_queue>* decodingQueue;
	BOOL decoding;
	opaque_pthread_mutex_t dataMutex;
	opaque_pthread_cond_t dataCondition;
	id<VKGifAVDecoderDelegate> _delegate;
	long long _processedBytes;
	long long _totalBytes;
}
@property(readonly, assign, nonatomic) long long totalBytes;
@property(readonly, assign, nonatomic) long long processedBytes;
@property(assign, nonatomic) __weak id<VKGifAVDecoderDelegate> delegate;
-(void).cxx_destruct;
-(void)eraseData:(int)data;
-(void)checkForDataAvailable:(int)dataAvailable processingBlock:(id)block;
-(BOOL)GIFSkipBytes:(int)bytes;
-(BOOL)GIFGetBytes:(int)bytes onlyPick:(BOOL)pick;
-(BOOL)GIFGetBytes:(int)bytes;
-(void)GIFReadDescriptor;
-(void)GIFReadExtensions;
-(void)drawNextFrame:(id)frame;
-(void)decodeGIF;
-(void)drop;
-(void)startDecoding;
-(void)acceptData:(id)data;
-(void)setTotalBytes:(long long)bytes;
-(void)dealloc;
-(id)initWithConverter:(id)converter;
@end

__attribute__((visibility("hidden")))
@interface VKGifAVWriter : VKGifAVWorker {
	NSObject<OS_dispatch_queue>* mediaInputQueue;
	NSObject<OS_dispatch_semaphore>* frameSemaphore;
	NSObject<OS_dispatch_semaphore>* processedSemaphore;
	NSMutableArray* frameQueueArray;
	XXStruct_pwHToB lastTime;
	int lastProcessedFrame;
	BOOL initialized;
	BOOL finished;
	id<VKGifAVWriterDelegate> _delegate;
	NSURL* _fileURL;
	NSDictionary* _videoSettings;
	AVAssetWriter* _assetWriter;
	AVAssetWriterInput* _writerInput;
	AVAssetWriterInputPixelBufferAdaptor* _bufferAdaptor;
}
@property(retain, nonatomic) AVAssetWriterInputPixelBufferAdaptor* bufferAdaptor;
@property(retain, nonatomic) AVAssetWriterInput* writerInput;
@property(retain, nonatomic) AVAssetWriter* assetWriter;
@property(retain, nonatomic) NSDictionary* videoSettings;
@property(retain, nonatomic) NSURL* fileURL;
@property(assign, nonatomic) __weak id<VKGifAVWriterDelegate> delegate;
+(id)videoSettingsWithWidth:(int)width andHeight:(int)height;
-(void).cxx_destruct;
-(CVBufferRef)newPixelBufferFromCGImage:(CGImageRef)cgimage;
-(void)finish;
-(BOOL)acceptFrame:(id)frame;
-(void)initWriterWithVideoSettings:(id)videoSettings;
-(id)initWithConverter:(id)converter targetFileURL:(id)url;
-(void)drop;
@end

__attribute__((visibility("hidden")))
@interface KeyboardAppearanceObserver : XXUnknownSuperclass {
	BOOL _skipNotifications;
	id<KeyboardAppearanceEventHandler> _eventHandler;
	KeyboardAppearanceInfo* _lastTrackedAppearanceInfo;
}
@property(assign, nonatomic) BOOL skipNotifications;
@property(readonly, assign, nonatomic) KeyboardAppearanceInfo* lastTrackedAppearanceInfo;
@property(assign, nonatomic) __weak id<KeyboardAppearanceEventHandler> eventHandler;
+(void)animationWithDuration:(float)duration animationCurve:(int)curve animation:(id)animation;
-(void).cxx_destruct;
-(id)appearanceInfoFromNotification:(id)notification;
-(void)handleKeyboardAppearanceNotification:(id)notification;
-(void)registerForNotifications;
-(void)dealloc;
-(id)initWithKeyboardAppearanceEventHandler:(id)keyboardAppearanceEventHandler;
@end

__attribute__((visibility("hidden")))
@interface KeyboardAppearanceInfo : XXUnknownSuperclass {
	unsigned _appearanceEventType;
	int _animationCurve;
	double _animationDuration;
	CGRect _keyboardBeginFrame;
	CGRect _keyboardEndFrame;
}
@property(readonly, assign, nonatomic) CGRect keyboardEndFrame;
@property(readonly, assign, nonatomic) CGRect keyboardBeginFrame;
@property(readonly, assign, nonatomic) int animationCurve;
@property(readonly, assign, nonatomic) double animationDuration;
@property(readonly, assign, nonatomic) unsigned appearanceEventType;
-(id)initWithEventType:(unsigned)eventType animationDuration:(double)duration animationCurve:(int)curve keyboardBeginFrame:(CGRect)frame keyboardEndFrame:(CGRect)frame5;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistCoverPhotoUploadContext : PhotoUploadContext {
	VKIdentity* _playlistIden;
	NSDictionary* _cropParams;
	NSData* _preparedData;
	CGAffineTransform _forcedCrop;
}
@property(retain, nonatomic) VKIdentity* playlistIden;
@property(retain, nonatomic) NSData* preparedData;
@property(retain, nonatomic) NSDictionary* cropParams;
@property(assign, nonatomic) CGAffineTransform forcedCrop;
+(id)photoContextWithSession:(id)session assetData:(id)data;
-(void).cxx_destruct;
-(id)createOperation;
-(id)requestForSaving:(id)saving;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)uploadBodyFieldName;
-(id)requestForUploadServer;
-(void)willUseImage:(id)image;
-(void)loadUploadData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistCoverPhotoUploadOperation : ClientBasedUploadOperation {
}
@property(retain, nonatomic) AudioPlaylistCoverPhotoUploadContext* context;
-(void)runAsync;
@end

__attribute__((visibility("hidden")))
@interface PrivacyEditController : VKMLiveController <PrivacyUsersSelectionControllerDelegate> {
	BOOL _whiteBar;
	VKPrivacySetting* _privacy;
	PrivacyVariant* _selectedPrivacyVariant;
	NSArray* _currentPrivacyValues;
	NSMutableArray* _objectsAllowed;
	NSMutableArray* _objectsDisallowed;
}
@property(retain, nonatomic) VKPrivacySetting* privacy;
@property(assign, nonatomic) BOOL whiteBar;
@property(retain, nonatomic) NSMutableArray* objectsDisallowed;
@property(retain, nonatomic) NSMutableArray* objectsAllowed;
@property(retain, nonatomic) NSArray* currentPrivacyValues;
@property(retain, nonatomic) PrivacyVariant* selectedPrivacyVariant;
-(void).cxx_destruct;
-(void)usersSelectionController:(id)controller didSelectObjects:(id)objects;
-(void)usersSelectionControllerDidCancel:(id)usersSelectionController;
-(void)setNewPrivacyValueForVariant:(id)variant;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(int)sectionByApplyingOffsetForPrivacySectionType:(int)privacySectionType;
-(int)sectionsOffset;
-(id)filteredValues:(BOOL)values listsOnly:(BOOL)only;
-(BOOL)filterUnnecessaryDisallowed;
-(BOOL)isPrivacyCorrect;
-(id)rebuildIndex;
-(int)VKMControllerStatusBarStyle;
-(int)VKMNavigationBarStyle;
-(int)VKMTableStyle;
-(BOOL)VKMScrollViewDisablePTR;
-(void)viewDidLoad;
-(id)setupWhiteBar:(BOOL)bar;
-(id)setupPrivacy:(id)privacy;
@end

__attribute__((visibility("hidden")))
@interface PrivacyVariantRenderer : TitleableRenderer {
}
@property(retain, nonatomic) PrivacyVariant* domain;
-(void)renderCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface PrivacyVariant : VKRenderable <VKTitleable> {
	BOOL _selected;
	NSString* _title;
	NSString* _value;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL selected;
@property(copy, nonatomic) NSString* value;
@property(copy, nonatomic) NSString* title;
+(id)privacyWithValue:(id)value;
-(void).cxx_destruct;
-(BOOL)disclosure;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKP2PSiteAction : VKMSiteAction {
	NSURL* _redirect_url;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSURL* redirect_url;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)complete:(int)complete;
-(void)cancel;
-(id)targetURL;
-(id)initWithURL:(id)url handler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface VKAPVideoAlbumViewController : VideoAlbumController <VKAPTabViewControllerProtocol> {
	BOOL searchWorkaroundEnabled;
	id _expandParent;
	VKAPModel* _pickerModel;
	VKVideoAlbum* _selectedAlbum;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VKAPModel* pickerModel;
@property(copy, nonatomic) id expandParent;
@property(retain, nonatomic) VKVideoAlbum* selectedAlbum;
-(void).cxx_destruct;
-(void)clearModelItemsAndReset;
-(void)openAlbumsPickerAction:(id)action;
-(void)updateTitleView;
-(id)scrollView;
-(BOOL)VKMScrollViewDisablePTR;
-(int)VKMTableSearchMode;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(void)VKMNavigationBarUpdate;
-(void)viewWillAppear:(BOOL)view;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(id)vkm_containerController;
-(void)searchControllerDidChangedActive:(id)searchController;
-(void)searchControllerChangedActive:(id)active;
@end

__attribute__((visibility("hidden")))
@interface AudioShuffleButtonCell : VKMCell {
}
@property(retain, nonatomic) AudioShuffleButton* domain;
-(void)layoutSubviews;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface SimpleSnippetAttachmentView : AbstractMessagesAttachmentView {
	UIButton* _button;
	VKMImageView* _imageView;
	UILabel* _titleLabel;
	UILabel* _captionLabel;
}
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* captionLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) VKMImageView* imageView;
-(void).cxx_destruct;
-(void)renderTitle:(id)title caption:(id)caption button:(id)button photo:(id)photo reuse:(double)reuse;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MasksSectionMarkAsViewedAction : ModelAction {
}
@property(retain, nonatomic) VKMaskSection* target;
+(int)domainType;
-(BOOL)disableHUD;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MasksSectionsModel : LoadingModel {
	int _new_masks;
	VKMaskSection* _selectedSection;
}
@property(retain, nonatomic) VKMaskSection* selectedSection;
@property(assign, nonatomic) int new_masks;
-(void).cxx_destruct;
-(void)handleMasksSectionMarkAsViewedAction:(id)action :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)sections;
-(int)resultForRequestResponse:(id)requestResponse;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayLiveStats : XXUnknownSuperclass <VideoPlayStats> {
	int _tracked;
	VKClient* _client;
	VKIdentity* _video;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VKIdentity* video;
@property(readonly, assign, nonatomic) VKClient* client;
+(id)video:(id)video client:(id)client;
-(void).cxx_destruct;
-(void)toggleFullscreen:(BOOL)fullscreen;
-(void)toggleVolume:(BOOL)volume;
-(void)progress:(double)progress;
-(void)complete;
-(void)resume;
-(void)pause;
-(void)play:(BOOL)play;
-(void)heartbeat;
-(id)initWithVideo:(id)video client:(id)client;
@end

__attribute__((visibility("hidden")))
@interface PrivacyAddUsersRenderable : VKRenderable <VKTitleableColor> {
	VKPrivacySetting* _privacy;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKPrivacySetting* privacy;
-(void).cxx_destruct;
-(id)setupPrivacy:(id)privacy;
-(BOOL)disclosure;
-(id)title;
-(id)titleColor;
-(id)titleFont;
-(float)titleOffsetX;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface ModelActionSetPrivacy : ModelAction {
	NSArray* _privacyValue;
	NSArray* _preparedValue;
}
@property(retain, nonatomic) VKPrivacySetting* target;
@property(copy, nonatomic) NSArray* preparedValue;
@property(copy, nonatomic) NSArray* privacyValue;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)init;
-(id)setupPreparedValue:(id)value;
-(id)setupNewValue:(id)value;
@end

__attribute__((visibility("hidden")))
@interface PrivacyUsersSelectionController : UsersSelectionController {
	BOOL _shouldAutoclose;
	id<PrivacyUsersSelectionControllerDelegate> _delegate;
}
@property(assign, nonatomic) BOOL shouldAutoclose;
@property(assign, nonatomic) __weak id<PrivacyUsersSelectionControllerDelegate> delegate;
-(void).cxx_destruct;
-(id)setupWithMulti:(BOOL)multi shouldAutoclose:(BOOL)autoclose;
-(void)VKMDismissModalSelfAnimated;
-(void)routeUsers:(id)users;
@end

__attribute__((visibility("hidden")))
@interface FriendListCell : BaseUserCell {
}
+(void)initialize;
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface ModelActionLoadPrivacy : ModelAction {
	BOOL _loadLists;
	NSDictionary* _resultLists;
	NSDictionary* _resultUsers;
	NSMutableSet* _userIds;
}
@property(retain, nonatomic) NSDictionary* resultUsers;
@property(retain, nonatomic) NSDictionary* resultLists;
@property(assign, nonatomic) BOOL loadLists;
@property(retain, nonatomic) NSMutableSet* userIds;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)addPrivacyToLoad:(id)load;
-(BOOL)disableHUD;
@end

__attribute__((visibility("hidden")))
@interface VKAPModel : XXUnknownSuperclass {
	id _imageSelectionHandler;
	id _attachmentsSelectionHandler;
	id _locationAttachHandler;
	id _completeHandler;
	id _attachVideoAction;
	id _docUploadAction;
	id _graffitiUploadAction;
	id _graffitiSelectionAction;
	NSNumber* _did;
	MainModel* _main;
	VKGiftsContext* _giftContext;
	NSDictionary* _tabs;
	VKPPService* _service;
	VKPPSelector* _selector;
	VKPPModel* _vkppModel;
	int _selectedTab;
	int _initialTab;
	int _mapAttachThumbSize;
	id<VKAPModelDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<VKAPModelDelegate> delegate;
@property(assign, nonatomic) int mapAttachThumbSize;
@property(retain, nonatomic) VKGiftsContext* giftContext;
@property(retain, nonatomic) MainModel* main;
@property(retain, nonatomic) NSNumber* did;
@property(copy, nonatomic) id graffitiSelectionAction;
@property(copy, nonatomic) id graffitiUploadAction;
@property(copy, nonatomic) id docUploadAction;
@property(copy, nonatomic) id attachVideoAction;
@property(copy, nonatomic) id completeHandler;
@property(copy, nonatomic) id locationAttachHandler;
@property(copy, nonatomic) id attachmentsSelectionHandler;
@property(copy, nonatomic) id imageSelectionHandler;
@property(retain, nonatomic) VKPPModel* vkppModel;
@property(retain, nonatomic) VKPPSelector* selector;
@property(retain, nonatomic) VKPPService* service;
@property(assign, nonatomic) int initialTab;
@property(assign, nonatomic) int selectedTab;
@property(retain, nonatomic) NSDictionary* tabs;
+(id)keyForTab:(int)tab;
-(void).cxx_destruct;
-(void)changeTab:(int)tab;
-(id)tabForIndex:(int)index;
-(id)getTabViewController:(int)controller;
-(BOOL)thereIsATab:(int)tab;
-(void)dismissPicker;
-(void)attachLocation:(CLLocationCoordinate2D)location withThumb:(id)thumb;
-(void)sendSelectedGraffiti:(id)graffiti;
-(void)sendGraffitiImage:(id)image;
-(void)uploadDocs:(id)docs;
-(void)attachObject:(id)object;
-(void)handleComplete:(BOOL)complete;
-(void)handleComplete;
-(void)handleCompleteNotification:(id)notification;
-(void)cancelToolbarTap;
-(void)updateToolbar;
-(void)updateNavigationTitle:(id)title;
-(void)notificationSelectLimit:(id)limit;
-(void)notificationAssetSelected:(id)selected;
-(void)dealloc;
-(void)initializeTabsWithOptions:(int)options;
-(id)initWithSelectionLimit:(unsigned)selectionLimit;
@end

__attribute__((visibility("hidden")))
@interface VKCommentSourceGroup : VKGroup <VKCommentSource> {
	BOOL _selected;
}
@property(readonly, assign, nonatomic) BOOL verified;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) int deactivated;
@property(readonly, assign, nonatomic) int sex;
@property(readonly, retain, nonatomic) NSString* photo;
@property(readonly, retain, nonatomic) NSString* name;
@property(readonly, retain, nonatomic) NSNumber* source_id;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL selected;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TextKitLayer : XXUnknownSuperclass {
	VKRenderedText* _text;
}
@property(retain, nonatomic) VKRenderedText* text;
-(void).cxx_destruct;
-(void)drawInContext:(CGContextRef)context;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKMoneyTransferComponent : Component5 {
}
+(id)transfer:(id)transfer numberFormatter:(id)formatter currencySymbol:(id)symbol;
@end

__attribute__((visibility("hidden")))
@interface VKP2PListModelContext : ListModelContext {
	NSDictionary* _sources;
}
@property(retain, nonatomic) NSDictionary* sources;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKP2PListModel : ListModel {
	BOOL _showSendP2PButton;
	NSNumber* _dialog_id;
	NSNumberFormatter* _amountFormatter;
}
@property(assign, nonatomic) BOOL showSendP2PButton;
@property(retain, nonatomic) NSNumberFormatter* amountFormatter;
@property(retain, nonatomic) NSNumber* dialog_id;
+(id)with:(id)with dialogId:(id)anId sendP2PButton:(BOOL)button;
-(void).cxx_destruct;
-(void)changeTransferStatus:(int)status withTransferId:(id)transferId andReload:(id)reload;
-(void)handleSend:(id)send :(id)arg2;
-(void)handleAccept:(id)accept :(id)arg2;
-(void)handleCancel:(id)cancel :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)itemsToAppend:(id)append to:(id)to context:(id)context;
-(id)sendButton;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(id)countKey;
-(id)spawnContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface P2PSendFromSettings : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface ModernPushSettingsController : VKMTableController {
	BOOL syncing;
	NSDictionary* _presentationSettings;
	UIActivityIndicatorView* _indicatorView;
	unsigned _notificationsStyle;
}
@property(retain, nonatomic) ModernPushSettingsModel* model;
@property(assign, nonatomic) unsigned notificationsStyle;
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) NSDictionary* presentationSettings;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(void)actionSwitch:(id)aSwitch;
-(void)updateSettings:(id)settings force:(BOOL)force;
-(void)changeSyncing:(BOOL)syncing;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(void)viewDidLoad;
-(int)VKMTableStyle;
@end

__attribute__((visibility("hidden")))
@interface ModernPushSettingsModel : ItemModel {
}
@property(retain, nonatomic) VKPushSettings* item;
-(id)process:(id)process context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PushSourcesController : VKMLiveController {
}
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)VKMTableUpdatedIndex;
-(void)VKMScrollViewRefreshLoading;
-(void)checkEditButton;
@end

__attribute__((visibility("hidden")))
@interface VKMSearchDisplayController : XXUnknownSuperclass <UISearchBarDelegate> {
	id<VKMSearchDisplayControllerDelegate> _delegate;
	UISearchBar* _searchBar;
	UIViewController* _contentsController;
	UIView* _searchContentsView;
	VKMController* _resultsListViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKMSearchDisplayControllerDelegate> delegate;
@property(retain, nonatomic) VKMController* resultsListViewController;
@property(retain, nonatomic) UIView* searchContentsView;
@property(retain, nonatomic) UIViewController* contentsController;
@property(retain, nonatomic) UISearchBar* searchBar;
-(void).cxx_destruct;
-(void)setResultsListVisible:(BOOL)visible;
-(void)setSearchPanelVisible:(BOOL)visible;
-(void)endSearching;
-(void)beginSearching;
-(void)contentsViewTap:(id)tap;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(int)positionForBar:(id)bar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(id)initWithSearchBar:(id)searchBar contentsController:(id)controller searchResultsController:(id)controller3;
@end

__attribute__((visibility("hidden")))
@interface VKMCollectionViewRenderer : XXUnknownSuperclass <VKMCollectionViewCellRenderer> {
	NSArray* _cellRenderers;
	id<VKMCollectionViewCellRenderer> _defaultRenderer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VKMCollectionViewCellRenderer> defaultRenderer;
@property(readonly, retain, nonatomic) NSArray* cellRenderers;
+(id)rendererWithDefaultRenderer:(id)defaultRenderer;
+(id)rendererWithCellRenderers:(id)cellRenderers;
-(void).cxx_destruct;
-(id)collectionView:(id)view cellForObject:(id)object atIndexPath:(id)indexPath;
-(void)registerToCollectionView:(id)collectionView;
-(BOOL)canRenderObject:(id)object;
-(id)initWithCellRenderers:(id)cellRenderers;
@end

__attribute__((visibility("hidden")))
@interface VKMCollectionViewCellBlockRenderer : XXUnknownSuperclass <VKMCollectionViewCellRenderer> {
	Class _modelClass;
	Class _cellClass;
	id _configurationBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) id configurationBlock;
@property(readonly, retain, nonatomic) Class cellClass;
@property(readonly, retain, nonatomic) Class modelClass;
+(id)rendererWithModelClass:(Class)modelClass cellClass:(Class)aClass block:(id)block;
-(void).cxx_destruct;
-(id)collectionView:(id)view cellForObject:(id)object atIndexPath:(id)indexPath;
-(void)registerToCollectionView:(id)collectionView;
-(id)reuseIdentifier;
-(BOOL)canRenderObject:(id)object;
-(id)initWithModelClass:(Class)modelClass cellClass:(Class)aClass block:(id)block;
@end

__attribute__((visibility("hidden")))
@interface VKMCollectionViewController : VKMScrollViewController <UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout> {
	UICollectionView* _collectionView;
	id<VKMCollectionViewCellRenderer> _collectionViewRenderer;
	ReusableViewsPool* _pool;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VKMCollectionViewCellRenderer> collectionViewRenderer;
@property(retain, nonatomic) ReusableViewsPool* pool;
@property(retain, nonatomic) UICollectionView* collectionView;
-(void).cxx_destruct;
-(void)VKMScrollViewSetFooter:(id)footer;
-(id)setupTeaserViewConfig:(id)config;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(void)VKMCollectionUpdatedIndex;
-(void)model:(id)model updated:(id)updated;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(id)model:(id)model componentForObject:(id)object withContext:(id)context;
-(void)viewDidLoad;
-(id)VKMScrollView;
-(void)loadView;
-(void)VKMRegisterCellsForCollectionView:(id)collectionView;
-(void)VKMDiscovered:(id)discovered;
-(id)VKMCollectionViewWithLayout:(id)layout;
-(id)VKMCollectionViewRenderer;
-(id)VKMCollectionViewLayout;
@end

__attribute__((visibility("hidden")))
@interface Node5Child : XXUnknownSuperclass {
	Node5* _node;
	CGPoint _origin;
}
@property(assign, nonatomic) CGPoint origin;
@property(retain, nonatomic) Node5* node;
+(id)childWithNode:(id)node;
+(id)childWithNode:(id)node atPoint:(CGPoint)point;
-(void).cxx_destruct;
-(id)description;
-(id)initWithNode:(id)node;
-(id)initWithNode:(id)node atPoint:(CGPoint)point;
@end

__attribute__((visibility("hidden")))
@interface Node5 : XXUnknownSuperclass {
	NSMutableDictionary* _userInfo;
	NSArray* _children;
	CGSize _size;
	UIEdgeInsets _alignmentInsets;
}
@property(retain, nonatomic) NSArray* children;
@property(assign, nonatomic) UIEdgeInsets alignmentInsets;
@property(assign, nonatomic) CGSize size;
-(void).cxx_destruct;
-(void)buildChildren:(id)children;
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(id)userInfo;
-(id)description;
-(id)childAtPoint:(CGPoint)point;
@end

__attribute__((visibility("hidden")))
@interface MapComponentState : XXUnknownSuperclass {
	unsigned _zoomLevel;
	CGSize _size;
	CLLocationCoordinate2D _center;
}
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) unsigned zoomLevel;
@property(assign, nonatomic) CLLocationCoordinate2D center;
@end

__attribute__((visibility("hidden")))
@interface MapComponent : Component5 {
}
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PostBodyTextLabelBehavior : TextKitLabelInteractiveDefaultBehavior {
}
@property(assign, nonatomic) __weak id<PostBodyTextLabelBehaviorDelegate> delegate;
-(void)textKitLabel:(id)label didSelectAttribute:(id)attribute;
@end

__attribute__((visibility("hidden")))
@interface PostBodyTextComponent : TextComponentInteractive {
	VKPost* _post;
}
@property(retain, nonatomic) VKPost* post;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PostBodyTextComponentController : TextComponentInteractiveController <PostBodyTextLabelBehaviorDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PostBodyTextComponent* component;
-(void)postBodyTextlabelBehavior:(id)behavior didRouteUrl:(id)url;
-(id)postIdentityForInteractiveLabelBehavior:(id)interactiveLabelBehavior;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface BasicExpandableTextComponent : Component5 {
	VKIdentity* _identity;
	unsigned _maxLinesWhenCollapsed;
	NSAttributedString* _text;
}
@property(readonly, copy, nonatomic) NSAttributedString* text;
@property(readonly, assign, nonatomic) unsigned maxLinesWhenCollapsed;
@property(readonly, assign, nonatomic) VKIdentity* identity;
+(id)componentWithMaxCollapsedLines:(unsigned)maxCollapsedLines text:(id)text identity:(id)identity;
-(void).cxx_destruct;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ExpandableTextComponent : Component5 {
	NSAttributedString* _text;
	VKPost* _host;
	VKIdentity* _expandedPost;
	id<PostInteractionStats> _postStats;
	NSRange _gap;
}
@property(retain, nonatomic) id<PostInteractionStats> postStats;
@property(assign, nonatomic) NSRange gap;
@property(retain, nonatomic) VKIdentity* expandedPost;
@property(retain, nonatomic) VKPost* host;
@property(retain, nonatomic) NSAttributedString* text;
-(void).cxx_destruct;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PostComponentState : XXUnknownSuperclass <NSCopying> {
	BOOL _detail;
	VKPost* _post;
	VKPost* _parentPost;
	id<ActionOptionsProvider> _optionsHandler;
	id<FeedPostInteractionStats> _postStats;
	unsigned _repostLevel;
	FeedItemExtra* _extra;
}
@property(retain, nonatomic) FeedItemExtra* extra;
@property(assign, nonatomic, getter=isDetail) BOOL detail;
@property(readonly, assign, nonatomic) unsigned repostLevel;
@property(readonly, assign, nonatomic, getter=isRepost) BOOL repost;
@property(retain, nonatomic) id<FeedPostInteractionStats> postStats;
@property(retain, nonatomic) id<ActionOptionsProvider> optionsHandler;
@property(retain, nonatomic) VKPost* parentPost;
@property(retain, nonatomic) VKPost* post;
+(id)stateForPost:(id)post detail:(BOOL)detail extra:(id)extra;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(id)stateForRepost:(id)repost;
-(BOOL)isPostExpanded:(id)expanded;
@end

__attribute__((visibility("hidden")))
@interface PostComponent : Component5 {
}
+(id)post:(id)post detail:(BOOL)detail;
+(id)post:(id)post detail:(BOOL)detail extra:(id)extra;
+(id)componentWithState:(id)state;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface PhotoPostComponent : Component5 {
}
+(id)photoPost:(id)post owner:(BOOL)owner displayText:(BOOL)text extra:(id)extra options:(id)options;
@end

__attribute__((visibility("hidden")))
@interface VideoPostComponent : Component5 {
}
+(id)videoPost:(id)post;
@end

__attribute__((visibility("hidden")))
@interface PostCaptionComponent : Component5 {
}
+(id)caption:(id)caption;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterScale : VKImageFilter {
	CGSize _size;
	XXStruct_32J64A _settings;
}
@property(readonly, assign, nonatomic) XXStruct_32J64A settings;
@property(readonly, assign, nonatomic) CGSize size;
+(CGRect)rectToDrawImageWithSize:(CGSize)size canvasSize:(CGSize)size2 mode:(int)mode;
+(CGRect)rectToDrawImageWithSize:(CGSize)size canvasSize:(CGSize)size2 settings:(XXStruct_32J64A)settings;
+(id)scaleToSize:(CGSize)size withMode:(int)mode;
+(id)scaleToSize:(CGSize)size withSettings:(XXStruct_32J64A)settings;
-(id)infoString;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(id)contextForImage:(id)image;
-(id)initWithSize:(CGSize)size mode:(int)mode;
-(id)initWithSize:(CGSize)size settings:(XXStruct_32J64A)settings;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterCornerRadius : VKImageFilter {
	float _radius;
	int _corners;
}
@property(readonly, assign, nonatomic) int corners;
@property(readonly, assign, nonatomic) float radius;
+(id)radius:(float)radius corners:(int)corners;
+(id)radius:(float)radius;
-(id)infoString;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(id)initWithRadius:(float)radius corners:(int)corners;
@end

__attribute__((visibility("hidden")))
@interface VKImageFilterRound : VKImageFilter {
	float _borderWidth;
	UIColor* _borderColor;
}
@property(readonly, assign, nonatomic) UIColor* borderColor;
@property(readonly, assign, nonatomic) float borderWidth;
+(id)filterWithBorderWidth:(float)borderWidth color:(id)color;
+(id)filter;
-(void).cxx_destruct;
-(id)infoString;
-(void)process:(id)process inDrawingContext:(CGContextRef)drawingContext;
-(id)initWithBorderWidth:(float)borderWidth color:(id)color;
@end

__attribute__((visibility("hidden")))
@interface StoryConstants : XXUnknownSuperclass {
}
+(id)storyFullscreenBackgroundColor;
+(id)storyFeedPreviewBackgroundColor;
+(id)storyFeedPreviewCellCreateStoryButtonImage;
+(id)storyFeedPreviewCellErrorIndicatorImage;
+(id)storyFeedPreviewCellUnseenIndicatorImage;
+(float)storyFeedPreviewBarHeight;
+(float)storyFeedPreviewAvatarDiameter;
+(CGSize)storyFeedPreviewCellSize;
+(CGSize)videoRenderSizeForOriginalVideoSize:(CGSize)originalVideoSize;
+(CGSize)photoRenderSize;
+(double)minVideoRecordingDuration;
+(double)maxVideoDuration;
@end

__attribute__((visibility("hidden")))
@interface VKAudioComponent : Component5 {
}
+(id)audio:(id)audio playList:(id)list stats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface SourceComponent : Component5 {
}
+(id)componentForAdsItem:(id)adsItem;
+(id)sourceOnline:(id)online lastSeen:(id)seen textStyle:(id)style whiteOnline:(BOOL)online4;
+(id)sourceOnline:(id)online lastSeen:(id)seen;
+(id)componentByAddingOptionsToComponent:(id)component sideInsets:(UIEdgeInsets)insets optionsHandler:(id)handler;
+(id)combineSourceComponent:(id)component withOptionsComponent:(id)optionsComponent sideInsets:(UIEdgeInsets)insets;
+(id)optionsComponentWithHandler:(id)handler;
+(id)source:(id)source status:(id)status;
+(id)source:(id)source status:(id)status avatarSize:(float)size;
+(id)statusForSource:(id)source status:(id)status;
+(id)statusForPost:(id)post;
+(id)titleForSource:(id)source status:(id)status;
+(id)titleComponent:(id)component subtitleComponent:(id)component2 photo:(id)photo;
+(id)avatarStackComponentForSources:(id)sources;
+(id)avatarStackComponentForSources:(id)sources size:(float)size borderWidth:(float)width borderColor:(id)color distance:(float)distance;
+(id)avatarComponentForSource:(id)source size:(float)size;
+(id)componentForPost:(id)post repost:(BOOL)repost;
@end

__attribute__((visibility("hidden")))
@interface ImageLoaderComponent : Component5 {
	BOOL _animated;
	id<VKImageFilter> _filter;
	int _contentMode;
	UIImage* _placeholder;
	NSNumber* _placeholderContentMode;
	UIColor* _placeholderBackgroundColor;
	UIColor* _backgroundColor;
}
@property(assign, nonatomic) BOOL animated;
@property(retain, nonatomic) UIColor* backgroundColor;
@property(retain, nonatomic) UIColor* placeholderBackgroundColor;
@property(retain, nonatomic) NSNumber* placeholderContentMode;
@property(retain, nonatomic) UIImage* placeholder;
@property(assign, nonatomic) int contentMode;
@property(retain, nonatomic) id<VKImageFilter> filter;
+(id)imageUrl:(id)url;
-(void).cxx_destruct;
-(id)initWithState:(id)state;
@end

__attribute__((visibility("hidden")))
@interface ImageLoaderComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak VKMImageView* view;
@property(retain, nonatomic) ImageLoaderComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoComponentNode : Component5Node {
	VKImageVariant* _variant;
}
@property(retain, nonatomic) VKImageVariant* variant;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoComponent : Component5 {
	BOOL _animated;
	id<VKImageFilter> _filter;
	int _contentMode;
	UIImage* _placeholder;
	NSNumber* _placeholderContentMode;
	UIColor* _placeholderBackgroundColor;
	UIColor* _backgroundColor;
	int _cropMode;
}
@property(retain, nonatomic) id<VKImage> state;
@property(assign, nonatomic) int cropMode;
@property(assign, nonatomic) BOOL animated;
@property(retain, nonatomic) UIColor* backgroundColor;
@property(retain, nonatomic) UIColor* placeholderBackgroundColor;
@property(retain, nonatomic) NSNumber* placeholderContentMode;
@property(retain, nonatomic) UIImage* placeholder;
@property(assign, nonatomic) int contentMode;
@property(retain, nonatomic) id<VKImageFilter> filter;
+(Class)nodeClass;
+(id)photo:(id)photo;
-(void).cxx_destruct;
-(void)addFilter:(id)filter;
-(id)nodeForState:(id)state context:(id)context;
-(id)initWithState:(id)state;
@end

__attribute__((visibility("hidden")))
@interface VKPhotoComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak VKMImageView* view;
@property(retain, nonatomic) VKPhotoComponent* component;
+(id)createView;
-(void)setNode:(id)node;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailComponent : VKPhotoComponent {
}
@end

__attribute__((visibility("hidden")))
@interface ThumbnailComponentController : VKPhotoComponentController {
}
@property(assign, nonatomic) __weak ThumbnailView* view;
@property(retain, nonatomic) ThumbnailComponent* component;
+(id)createView;
-(void)setNode:(id)node;
@end

__attribute__((visibility("hidden")))
@interface GeoPlaceComponent : Component5 {
}
+(id)geo:(id)geo displayMap:(BOOL)map;
+(id)mapComponentWithGeo:(id)geo;
+(id)descriptionComponentWithGeo:(id)geo sizeConstraints:(XXStruct_JC2WWA)constraints;
+(id)descriptionComponentWithGeo:(id)geo;
+(id)placeComponentWithGeo:(id)geo;
+(id)group:(id)group;
@end

__attribute__((visibility("hidden")))
@interface StoreSubscriptionItemCell : VKMCell <VKMImageLoaderDelegate> {
	VKMImageLoader* _loader;
	id<VKImageFilter> _filter;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VKImageFilter> filter;
@property(retain, nonatomic) VKMImageLoader* loader;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(void)loader:(id)loader complete:(id)complete;
-(BOOL)_showSeparatorAtTopOfSection;
-(BOOL)_shouldHideSeparator;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StoreSubscriptionDetailTextCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StoreSubscriptionInfoTextCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StoreSubscriptionPriceTextCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StoreSubscriptionActionButtonCell : VKMCell {
}
+(void)prerender:(id)prerender;
-(void)dealloc;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)notificationStore:(id)store;
@end

__attribute__((visibility("hidden")))
@interface AttachmentComponentState : XXUnknownSuperclass {
	NSString* _title;
	NSString* _descr;
	NSString* _badge;
	UIImage* _icon;
	id _routeObject;
	id<SnippetStats> _snippetStats;
}
@property(retain, nonatomic) id<SnippetStats> snippetStats;
@property(retain, nonatomic) id routeObject;
@property(retain, nonatomic) UIImage* icon;
@property(retain, nonatomic) NSString* badge;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AttachmentComponent : Component5 {
}
+(id)title:(id)title status:(id)status icon:(id)icon;
+(id)titleComponent:(id)component statusComponent:(id)component2 iconComponent:(id)component3;
+(id)textComponentWithTitle:(id)title description:(id)description numberOfLines:(unsigned)lines;
+(id)statusComponentWithText:(id)text;
+(id)titleComponentWithText:(id)text;
+(id)smallPreviewWithTitle:(id)title description:(id)description icon:(id)icon;
+(id)detailedWithPrimaryComponent:(id)primaryComponent descriptionComponent:(id)component;
+(id)detailedWithPrimaryComponent:(id)primaryComponent descriptionComponent:(id)component routeObject:(id)object;
+(id)componentWithState:(id)state;
+(id)attachment:(id)attachment stats:(id)stats;
-(id)nodeForState:(id)state context:(id)context;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailsComponentState : XXUnknownSuperclass {
	VKFeedPhoto* _feedPhoto;
	VKFeedVideo* _feedVideo;
	NSArray* _images;
	NSArray* _components;
	id<PhotoStats> _photoStats;
}
@property(retain, nonatomic) id<PhotoStats> photoStats;
@property(readonly, assign, nonatomic) NSArray* components;
@property(retain, nonatomic) NSArray* images;
@property(retain, nonatomic) VKFeedVideo* feedVideo;
@property(retain, nonatomic) VKFeedPhoto* feedPhoto;
-(void).cxx_destruct;
-(id)componentForImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailsComponent : Component5 {
}
@property(retain, nonatomic) ThumbnailsComponentState* state;
+(id)videoFeed:(id)feed;
+(id)photoFeed:(id)feed;
+(id)images:(id)images;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ThumbnailsComponentController : Component5Controller {
}
@property(retain, nonatomic) ThumbnailsComponent* component;
+(id)createView;
-(void)gestureDoubleTap:(id)tap;
-(void)gestureSingleTap:(id)tap;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PhotoGridComponent : Component5 {
}
+(id)images:(id)images;
@end

__attribute__((visibility("hidden")))
@interface VKMEventEditViewController : XXUnknownSuperclass {
}
-(int)preferredStatusBarStyle;
@end

__attribute__((visibility("hidden")))
@interface GroupProfileInfoHelper : DefaultProfileHelper {
}
@property(retain, nonatomic) VKGroupProfile* item;
@property(retain, nonatomic) GroupModel* model;
-(id)linksSection;
-(id)contactsSection;
-(id)commonSection;
-(id)descriptionSection;
-(id)statusSection;
-(id)createProfileSections;
@end

__attribute__((visibility("hidden")))
@interface SketchCircleButton : XXUnknownSuperclass {
	UIColor* _visualColor;
	UIColor* _borderColor;
	float _borderWidth;
	CALayer* _selectionLayer;
	CALayer* _colorLayer;
}
@property(assign, nonatomic) float borderWidth;
@property(retain, nonatomic) UIColor* borderColor;
@property(retain, nonatomic) UIColor* visualColor;
@property(retain, nonatomic) CALayer* colorLayer;
@property(retain, nonatomic) CALayer* selectionLayer;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected;
-(id)initWithFrame:(CGRect)frame diameter:(float)diameter;
@end

__attribute__((visibility("hidden")))
@interface SketchPaletteButton : SketchCircleButton {
	UIColor* _color;
}
@property(retain, nonatomic) UIColor* color;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface SketchBrushButton : SketchCircleButton {
	float _brush;
}
@property(assign, nonatomic) float brush;
@end

__attribute__((visibility("hidden")))
@interface PostButtonsComponent : Component5 {
}
+(id)regularPost:(id)post;
+(id)postponedPost:(id)post;
+(id)suggestedPost:(id)post;
+(id)approvementButtonsWithApproveText:(id)approveText declineText:(id)text post:(id)post;
+(id)post:(id)post;
@end

__attribute__((visibility("hidden")))
@interface PostSocialButtonsDataSource : XXUnknownSuperclass <SocialButtonsDataSource> {
	VKPost* _post;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VKPost* post;
+(id)post:(id)post;
-(void).cxx_destruct;
-(void)actionShare:(id)share;
-(void)actionComment:(id)comment;
-(void)actionLike:(id)like;
-(BOOL)shared;
-(BOOL)liked;
-(int)numberOfShares;
-(int)numberOfComments;
-(BOOL)canShowViews;
-(int)numberOfViews;
-(int)numberOfLikes;
-(BOOL)canShare;
-(BOOL)canComment;
-(BOOL)canLike;
-(id)initWithPost:(id)post;
@end

__attribute__((visibility("hidden")))
@interface PhotoPostSocialButtonsDataSource : XXUnknownSuperclass <SocialButtonsDataSource> {
	VKPhoto* _photo;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VKPhoto* photo;
+(id)photo:(id)photo;
-(void).cxx_destruct;
-(void)actionShare:(id)share;
-(void)actionComment:(id)comment;
-(void)actionLike:(id)like;
-(BOOL)shared;
-(BOOL)liked;
-(int)numberOfShares;
-(BOOL)canShowViews;
-(int)numberOfViews;
-(int)numberOfComments;
-(int)numberOfLikes;
-(BOOL)canShare;
-(BOOL)canComment;
-(BOOL)canLike;
-(id)initWithPhoto:(id)photo;
@end

__attribute__((visibility("hidden")))
@interface VideoSocialButtonsDataSource : XXUnknownSuperclass <SocialButtonsDataSource> {
	VKVideo* _video;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) VKVideo* video;
+(id)video:(id)video;
-(void).cxx_destruct;
-(void)actionShare:(id)share;
-(void)actionComment:(id)comment;
-(void)actionLike:(id)like;
-(BOOL)shared;
-(BOOL)liked;
-(BOOL)canShowViews;
-(int)numberOfViews;
-(int)numberOfShares;
-(int)numberOfComments;
-(int)numberOfLikes;
-(BOOL)canShare;
-(BOOL)canComment;
-(BOOL)canLike;
-(id)initWithVideo:(id)video;
@end

__attribute__((visibility("hidden")))
@interface SocialButtonsComponent : Component5 {
}
+(id)componentDetailWithDataSource:(id)dataSource;
+(id)componentWithDataSource:(id)dataSource;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorRenderingTaskPhoto : XXUnknownSuperclass <StoryEditorRenderingTask> {
	NSURL* _resultURL;
	NSString* _localIdentifier;
}
@property(readonly, copy, nonatomic) NSString* localIdentifier;
@property(readonly, assign, nonatomic) NSURL* resultURL;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)saveToCameraRollOnCompletion;
-(void)onRenderingCompletion:(id)completion;
-(void)cancel;
-(void)startRendering;
-(id)initWithPhoto:(id)photo;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorRenderingTaskVideo : XXUnknownSuperclass <StoryEditorRenderingTask> {
	BOOL _muted;
	BOOL _rendering;
	BOOL _shouldSaveToCameraRollOnRenderCompletion;
	NSString* _localIdentifier;
	NSURL* _firstFrameURL;
	int _lengthInSeconds;
	UIImage* _attachmentsImage;
	UIImage* _sketchImage;
	AVAsset* _originalAsset;
	id _encoder;
	NSURL* _resultURL;
	id _renderingCompletion;
}
@property(readonly, copy, nonatomic) NSString* localIdentifier;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImage* sketchImage;
@property(retain, nonatomic) UIImage* attachmentsImage;
@property(assign, nonatomic) int lengthInSeconds;
@property(assign, nonatomic) BOOL muted;
@property(retain, nonatomic) NSURL* firstFrameURL;
@property(copy, nonatomic) id renderingCompletion;
@property(assign, nonatomic) BOOL shouldSaveToCameraRollOnRenderCompletion;
@property(retain, nonatomic) NSURL* resultURL;
@property(retain, nonatomic) id encoder;
@property(assign, nonatomic) BOOL rendering;
@property(retain, nonatomic) AVAsset* originalAsset;
+(BOOL)isVideoPortrait:(id)portrait;
-(void).cxx_destruct;
-(void)cancel;
-(void)onRenderingCompletion:(id)completion;
-(void)saveToCameraRollOnCompletion;
-(void)startRendering;
-(id)initWithOriginalVideoAsset:(id)originalVideoAsset;
@end

__attribute__((visibility("hidden")))
@interface VKP2PDetailedViewController : VKMController <PopupWindowController> {
	BOOL _presented;
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	VKP2PDetailedView* _itemView;
	UIActivityIndicatorView* _activityIndicatorView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) VKP2PItemModel* model;
@property(assign, nonatomic) BOOL presented;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(retain, nonatomic) VKP2PDetailedView* itemView;
-(void).cxx_destruct;
-(void)transferRepeatAction:(id)action;
-(void)cancelTransfer;
-(void)transferRejectAction:(id)action;
-(void)transferCancelAction:(id)action;
-(void)transferAcceptAction:(id)action;
-(id)currentNavDelegate;
-(void)model:(id)model updated:(id)updated;
-(void)modelLoadingChanged:(id)changed;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(void)show:(BOOL)show animated:(BOOL)animated completion:(id)completion;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface AudioAudiosBlockCell : VKMCell {
	AudioBlockCellHeaderView* _headerView;
	AudioAudiosPagingView* _audiosPagingView;
}
@property(retain, nonatomic) AudioAudiosBlock* domain;
@property(assign, nonatomic) __weak id<AudioCellDelegate> delegate;
@property(retain, nonatomic) AudioAudiosPagingView* audiosPagingView;
@property(retain, nonatomic) AudioBlockCellHeaderView* headerView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)actionShowAllButton:(id)button;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface InteractiveMapComponentState : XXUnknownSuperclass {
	BOOL _showsUserLocation;
	NSArray* _annotations;
	XXStruct_zkbX1B _region;
}
@property(assign, nonatomic) BOOL showsUserLocation;
@property(retain, nonatomic) NSArray* annotations;
@property(assign, nonatomic) XXStruct_zkbX1B region;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface InteractiveMapComponent : Component5 {
}
-(id)createView;
-(void)configureView:(id)view withState:(id)state;
@end

__attribute__((visibility("hidden")))
@interface AudioPlayButtonComponentState : XXUnknownSuperclass {
	VKAudio* _audio;
	NSArray* _playList;
	id<AudioStats> _stats;
}
@property(readonly, assign, nonatomic) id<AudioStats> stats;
@property(readonly, assign, nonatomic) NSArray* playList;
@property(readonly, assign, nonatomic) VKAudio* audio;
+(id)audio:(id)audio playList:(id)list stats:(id)stats;
-(void).cxx_destruct;
-(id)initWithAudio:(id)audio playList:(id)list stats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface AudioPlayButtonComponent : Component5 {
}
@property(retain, nonatomic) AudioPlayButtonComponentState* state;
+(id)audio:(id)audio playList:(id)list stats:(id)stats;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AudioPlayButtonComponentController : Component5Controller {
	VKAudioQueuePlayer* _player;
}
@property(retain, nonatomic) AudioPlayButtonComponent* component;
@property(readonly, assign, nonatomic) __weak UIButton* view;
@property(readonly, assign, nonatomic) VKAudioQueuePlayer* player;
+(id)createView;
-(void).cxx_destruct;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)playerChangedItem:(id)item;
-(void)playerUpdated:(id)updated;
-(void)update;
-(void)actionTogglePlay:(id)play;
-(void)dealloc;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKProductCategory : VKRenderable {
	NSNumber* _ID;
	NSString* _name;
	NSNumber* _sectionID;
	NSString* _sectionName;
}
@property(copy, nonatomic) NSString* sectionName;
@property(retain, nonatomic) NSNumber* sectionID;
@property(copy, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* ID;
+(void)load;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKShopProduct : VKDomain <VKSourceStatus, VKThumbnailable, VKAttachment> {
	BOOL _can_repost;
	BOOL _can_comment;
	NSString* _title;
	NSString* _desc;
	NSString* _thumbPhoto;
	unsigned _date;
	unsigned _availability;
	VKPrice* _price;
	VKProductCategory* _category;
	NSArray* _photos;
	unsigned _views;
	XXStruct_uR0cxB _likes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) XXStruct_uR0cxB likes;
@property(assign, nonatomic) BOOL can_comment;
@property(assign, nonatomic) BOOL can_repost;
@property(assign, nonatomic) unsigned views;
@property(retain, nonatomic) NSArray* photos;
@property(retain, nonatomic) VKProductCategory* category;
@property(retain, nonatomic) VKPrice* price;
@property(assign, nonatomic) unsigned availability;
@property(assign, nonatomic) unsigned date;
@property(copy, nonatomic) NSString* thumbPhoto;
@property(copy, nonatomic) NSString* desc;
@property(copy, nonatomic) NSString* title;
+(void)load;
-(void).cxx_destruct;
-(id)asLink;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
-(id)thumbnailUrl;
-(int)statusMask;
-(id)statusForSource:(id)source;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKShopProductSearchingDomain : VKDomainWithCustomCellClass {
	unsigned _status;
}
@property(assign, nonatomic) unsigned status;
@property(readonly, retain, nonatomic) VKShopProduct* domain;
+(id)from:(id)from status:(unsigned)status;
@end

__attribute__((visibility("hidden")))
@interface VKShopProductWithGroup : VKDomainWithCustomCellClass {
	VKGroup* _group;
}
@property(readonly, retain, nonatomic) VKGroup* group;
@property(readonly, retain, nonatomic) VKShopProduct* domain;
+(id)from:(id)from group:(id)group;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKSearchTrend : VKRenderable <NSCopying> {
	NSString* _name;
	NSString* _title;
	int _type;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* name;
+(id)news:(id)news;
+(id)audio:(id)audio;
+(id)name:(id)name;
+(id)name:(id)name title:(id)title;
-(void).cxx_destruct;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
-(id)initWithName:(id)name;
-(id)initWithName:(id)name title:(id)title;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface PollAnswerButtonComponentState : XXUnknownSuperclass {
	BOOL _voted;
	BOOL _selected;
	unsigned _votes;
	unsigned _totalVotes;
	unsigned _maxVotes;
	NSNumber* _answerId;
}
@property(assign, nonatomic) BOOL selected;
@property(copy, nonatomic) NSNumber* answerId;
@property(assign, nonatomic) unsigned maxVotes;
@property(assign, nonatomic) unsigned totalVotes;
@property(assign, nonatomic) unsigned votes;
@property(assign, nonatomic) BOOL voted;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PollAnswerButtonComponent : Component5 {
}
@property(retain, nonatomic) PollAnswerButtonComponentState* state;
@end

__attribute__((visibility("hidden")))
@interface PollAnswerButtonComponentController : Component5Controller {
}
+(id)createView;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)updateButtonAnimated:(BOOL)animated;
-(void)setComponent:(id)component;
@end

__attribute__((visibility("hidden")))
@interface UIRightImageButton : XXUnknownSuperclass {
	float _imageLeftInsets;
	float _imageTopInsets;
}
@property(assign, nonatomic) float imageTopInsets;
@property(assign, nonatomic) float imageLeftInsets;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface WeakObservers : XXUnknownSuperclass {
	NSPointerArray* _observers;
}
@property(retain, nonatomic) NSPointerArray* observers;
-(void).cxx_destruct;
-(void)notify:(SEL)notify o1:(id)a1 o2:(id)a2 o3:(id)a3;
-(void)notify:(SEL)notify o1:(id)a1 o2:(id)a2;
-(void)notify:(SEL)notify o1:(id)a1;
-(void)notify:(SEL)notify;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface PollAnswerComponent : CompositionComponent {
	PollAnswerButtonComponent* _buttonComponent;
}
@property(retain, nonatomic) PollAnswerButtonComponent* buttonComponent;
+(id)poll:(id)poll answer:(id)answer;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PollAnswerButton : XXUnknownSuperclass {
	BOOL _pollHasAnswer;
	BOOL _currentAnswer;
	unsigned _votes;
	unsigned _totalVotes;
	unsigned _maxVotes;
	UIView* _progressView;
	UILabel* _percentLabel;
	UILabel* _titleLabel;
	UIImageView* _checkmarkImageView;
	NSNumberFormatter* _percentFormatter;
}
@property(assign, nonatomic, getter=isCurrentAnswer) BOOL currentAnswer;
@property(assign, nonatomic) BOOL pollHasAnswer;
@property(assign, nonatomic) unsigned maxVotes;
@property(assign, nonatomic) unsigned totalVotes;
@property(assign, nonatomic) unsigned votes;
@property(retain, nonatomic) NSNumberFormatter* percentFormatter;
@property(retain, nonatomic) UIImageView* checkmarkImageView;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UILabel* percentLabel;
@property(retain, nonatomic) UIView* progressView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface PollNode : Component5Node {
	NSArray* _answerComponents;
	TextComponent* _descriptionComponent;
	TextStyle* _descriptionTextStyle;
}
@property(retain, nonatomic) TextStyle* descriptionTextStyle;
@property(retain, nonatomic) TextComponent* descriptionComponent;
@property(retain, nonatomic) NSArray* answerComponents;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PollComponent : Component5 {
}
@property(retain, nonatomic) VKPoll* state;
+(id)preview:(id)preview;
+(id)poll:(id)poll;
+(Class)nodeClass;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PollComponentController : Component5Controller {
	DomainEventObserver* _eventHandler;
}
@property(retain, nonatomic) PollComponent* component;
@property(retain, nonatomic) PollNode* node;
+(id)createView;
-(void).cxx_destruct;
-(void)pollVoted:(id)voted;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AlignmentComponent : Component5 {
	BOOL _extendHorizontal;
	BOOL _extendVertical;
	int _horizontalAlignment;
	int _verticalAlignment;
}
@property(assign, nonatomic) BOOL extendVertical;
@property(assign, nonatomic) BOOL extendHorizontal;
@property(assign, nonatomic) int verticalAlignment;
@property(assign, nonatomic) int horizontalAlignment;
+(id)alignCenter:(id)center;
+(id)alignComponent:(id)component horizontalAlignment:(int)alignment verticalAlignment:(int)alignment3;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AlignmentInsetsComponent : Component5 {
	UIEdgeInsets _alignmentInsets;
}
@property(assign, nonatomic) UIEdgeInsets alignmentInsets;
+(id)baselineOffset:(float)offset component:(id)component;
+(id)insets:(UIEdgeInsets)insets component:(id)component;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AbsolutePositioningComponentState : XXUnknownSuperclass {
	Component5* _container;
	Component5* _component;
	CGPoint _position;
}
@property(readonly, assign, nonatomic) CGPoint position;
@property(readonly, assign, nonatomic) Component5* component;
@property(readonly, assign, nonatomic) Component5* container;
+(id)container:(id)container component:(id)component position:(CGPoint)position;
-(void).cxx_destruct;
-(id)initWithContainer:(id)container component:(id)component position:(CGPoint)position;
@end

__attribute__((visibility("hidden")))
@interface AbsolutePositioningComponent : Component5 {
}
@property(retain, nonatomic) AbsolutePositioningComponentState* state;
+(id)positionComponent:(id)component atPoint:(CGPoint)point aboveContainer:(id)container;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FancyDecorationView : XXUnknownSuperclass {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface FancyDecorationComponent : Component5 {
}
+(id)decoratedComponent:(id)component;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FancyDecorationComponentController : Component5Controller {
}
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface InsetComponentState : XXUnknownSuperclass {
	Component5* _component;
	UIEdgeInsets _insets;
}
@property(retain, nonatomic) Component5* component;
@property(assign, nonatomic) UIEdgeInsets insets;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface InsetComponent : Component5 {
}
+(id)inset:(UIEdgeInsets)inset component:(id)component;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MaxWidthComponent : Component5 {
}
+(id)component:(id)component;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MaximizeComponent : Component5 {
}
+(id)maxHeightComponent:(id)component;
+(id)maxWidthComponent:(id)component;
+(id)maxSizeComponent:(id)component;
@end

__attribute__((visibility("hidden")))
@interface ListComponentV : Component5 {
	BOOL _reversed;
	int _alignment;
	float _interItemSpace;
}
@property(assign, nonatomic) BOOL reversed;
@property(assign, nonatomic) float interItemSpace;
@property(assign, nonatomic) int alignment;
+(id)build:(id)build;
+(id)list:(id)list interItemSpace:(float)space;
+(id)list:(id)list;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ListComponentH : Component5 {
	BOOL _rightToLeftPriority;
	BOOL _justify;
	BOOL _equalWidths;
	int _alignment;
	float _interItemSpace;
}
@property(assign, nonatomic) BOOL equalWidths;
@property(assign, nonatomic) BOOL justify;
@property(assign, nonatomic) BOOL rightToLeftPriority;
@property(assign, nonatomic) float interItemSpace;
@property(assign, nonatomic) int alignment;
+(id)build:(id)build;
+(id)list:(id)list interItemSpace:(float)space;
+(id)list:(id)list;
-(id)nodeForState:(id)state context:(id)context;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface GridComponent : Component5 {
	int _horizontalAlignment;
	float _itemRatio;
	float _minimumHorizontalDistance;
	float _minimumVerticalDistance;
	CGSize _itemSize;
}
@property(assign, nonatomic) float minimumVerticalDistance;
@property(assign, nonatomic) float minimumHorizontalDistance;
@property(assign, nonatomic) float itemRatio;
@property(assign, nonatomic) CGSize itemSize;
@property(assign, nonatomic) int horizontalAlignment;
+(id)grid:(id)grid itemRatio:(float)ratio;
+(id)grid:(id)grid itemSize:(CGSize)size;
-(id)nodeForState:(id)state context:(id)context;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface ListComponentState : XXUnknownSuperclass {
	BOOL _reversed;
	BOOL _equalWidth;
	NSArray* _components;
	int _direction;
	int _horizontalAlignment;
	int _verticalAlignment;
	float _interItemSpace;
	int _fillMode;
}
@property(assign, nonatomic) int fillMode;
@property(assign, nonatomic) BOOL equalWidth;
@property(assign, nonatomic) float interItemSpace;
@property(assign, nonatomic) BOOL reversed;
@property(assign, nonatomic) int verticalAlignment;
@property(assign, nonatomic) int horizontalAlignment;
@property(assign, nonatomic) int direction;
@property(retain, nonatomic) NSArray* components;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ListComponent : Component5 {
}
@property(retain, nonatomic) ListComponentState* state;
+(id)build:(id)build;
+(id)build:(id)build completion:(id)completion;
+(id)list:(id)list;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface GradientView : XXUnknownSuperclass {
}
+(Class)layerClass;
-(id)initWithFrame:(CGRect)frame;
-(id)gradientLayer;
@end

__attribute__((visibility("hidden")))
@interface AudioAudiosSpecialBlockView : XXUnknownSuperclass {
	AudioAudiosSpecialBlock* _domain;
	id<VKMNavDelegate> _delegate;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	UIButton* _button;
	NSArray* _covers;
	UIView* _coversView;
}
@property(assign, nonatomic) __weak id<VKMNavDelegate> delegate;
@property(retain, nonatomic) AudioAudiosSpecialBlock* domain;
@property(retain, nonatomic) UIView* coversView;
@property(retain, nonatomic) NSArray* covers;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* subtitleLabel;
@property(retain, nonatomic) UILabel* titleLabel;
+(float)height;
+(float)middleCoverSide;
-(void).cxx_destruct;
-(void)expandPlayerPlaylistWithMoreAudiosIfNeeded:(id)moreAudiosIfNeeded;
-(void)actionPlayButton:(id)button;
-(void)actionShowAllButton:(id)button;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface TapContext : XXUnknownSuperclass <TapContext> {
	id _sender;
	Component5RenderContext* _renderContext;
	id<VKMNavDelegate> _navDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
@property(assign, nonatomic) __weak Component5RenderContext* renderContext;
@property(retain, nonatomic) id sender;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface TapableComponentView : XXUnknownSuperclass {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface TapableComponentController : Component5Controller {
}
@property(retain, nonatomic) TapableComponent* component;
+(id)createView;
-(void)actionTap:(id)tap;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TapableComponentRouteHandler : XXUnknownSuperclass <TapableComponentHandler> {
	id _routeObject;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) id routeObject;
+(id)route:(id)route;
-(void).cxx_destruct;
-(void)handleTapWithContext:(id)context;
-(id)initWithRouteObject:(id)routeObject;
@end

__attribute__((visibility("hidden")))
@interface TapableComponentBlockHandler : XXUnknownSuperclass <TapableComponentHandler> {
	id _block;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) id block;
+(id)handlerWithBlock:(id)block;
-(void).cxx_destruct;
-(void)handleTapWithContext:(id)context;
-(id)initWithBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface TapableComponentTargerActionHandler : XXUnknownSuperclass <TapableComponentHandler> {
	id _target;
	SEL _action;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) SEL action;
@property(readonly, assign, nonatomic) __weak id target;
+(id)handlerWithTarget:(id)target action:(SEL)action;
-(void).cxx_destruct;
-(void)handleTapWithContext:(id)context;
-(id)initWithTarget:(id)target action:(SEL)action;
@end

__attribute__((visibility("hidden")))
@interface TapableComponent : Component5 {
	id<TapableComponentHandler> _handler;
	Component5* _component;
}
@property(readonly, assign, nonatomic) Component5* component;
@property(readonly, assign, nonatomic) id<TapableComponentHandler> handler;
+(id)routeComponent:(id)component withObject:(id)object;
+(id)tapableComponent:(id)component withBlock:(id)block;
+(id)tapableComponent:(id)component withHandler:(id)handler;
-(void).cxx_destruct;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TapableHighlightComponentController : TapableComponentController {
}
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface TapableHighlightComponent : TapableComponent {
}
@end

__attribute__((visibility("hidden")))
@interface DimmingButton : TouchHighlightControl {
	BOOL _dimmingMode;
	UIView* _dimmingView;
	float _backgroundCornerRadius;
	UIColor* _dimmingColor;
}
@property(assign, nonatomic) BOOL dimmingMode;
@property(retain, nonatomic) UIColor* dimmingColor;
@property(assign, nonatomic) float backgroundCornerRadius;
@property(retain, nonatomic) UIView* dimmingView;
-(void).cxx_destruct;
-(void)updateHighlight:(BOOL)highlight animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface TapableBackgroundComponentController : TapableComponentController {
}
@property(assign, nonatomic) __weak DimmingButton* view;
@property(retain, nonatomic) TapableBackgroundComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface TapableBackgroundComponent : TapableComponent {
	BOOL _dimmingMode;
	float _backgroundCornerRadius;
	UIColor* _dimmingColor;
}
@property(assign, nonatomic) BOOL dimmingMode;
@property(retain, nonatomic) UIColor* dimmingColor;
@property(assign, nonatomic) float backgroundCornerRadius;
-(void).cxx_destruct;
-(id)initWithState:(id)state;
@end

__attribute__((visibility("hidden")))
@interface AudioCatalogExtendedPlaylistsListModel : ListModel {
	NSNumber* _blockId;
}
@property(copy, nonatomic) NSNumber* blockId;
-(void).cxx_destruct;
-(id)listFromData:(id)data;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface ImageComponent : Component5 {
}
+(id)image:(id)image;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ImageComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak UIImageView* view;
@property(retain, nonatomic) ImageComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface ImageResourceComponent : Component5 {
}
@property(retain, nonatomic) ImageResource* state;
+(id)imageResource:(id)resource;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ImageResourceComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak UIImageView* view;
@property(retain, nonatomic) ImageResourceComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface AudioOwnersBlockItemCollectionCell : AudioImageAndTitleItemCollectionCell {
}
-(void)attach:(id)attach expectedReuse:(double)reuse;
@end

__attribute__((visibility("hidden")))
@interface Component5Context : XXUnknownSuperclass <NSCopying> {
	ReusableViewsPool* _viewPool;
	Component5Node* _node;
	id<VKMNavDelegate> _navDelegate;
	double _reuse;
}
@property(assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
@property(assign, nonatomic) double reuse;
@property(retain, nonatomic) Component5Node* node;
@property(retain, nonatomic) ReusableViewsPool* viewPool;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface Component5ControllerContext : XXUnknownSuperclass {
	id<VKMNavDelegate> _navDelegate;
}
@property(assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface Component5Controller : XXUnknownSuperclass <Component5StateListener, Component5Delegate> {
	NSMutableSet* _viewBindings;
	Component5* _component;
	Component5Node* _node;
	UIView* _view;
	Component5ControllerContext* _context;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) Component5ControllerContext* context;
@property(readonly, assign, nonatomic) __weak UIView* view;
@property(retain, nonatomic) Component5Node* node;
@property(retain, nonatomic) Component5* component;
+(id)createView;
-(void).cxx_destruct;
-(void)component:(id)component didUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)component:(id)component willUpdateState:(id)state toState:(id)state3 animated:(BOOL)animated;
-(void)registerViewKeyBinding:(id)binding;
-(BOOL)bindView:(id)view forKey:(id)key;
-(void)didEndDisplaying;
-(void)unbindViews;
-(id)initWithView:(id)view context:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface Component5Node : Node5 {
	BOOL _dynamic;
	Component5RenderContext* _renderContext;
}
@property(assign, nonatomic, getter=isDynamic) BOOL dynamic;
@property(retain, nonatomic) Component5* component;
@property(retain, nonatomic) Component5RenderContext* renderContext;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface Component5State : XXUnknownSuperclass {
	StyleSheet* _styleSheet;
	XXStruct_JC2WWA _sizeConstraints;
}
@property(retain, nonatomic) StyleSheet* styleSheet;
@property(assign, nonatomic) XXStruct_JC2WWA sizeConstraints;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface Component5RenderContext : XXUnknownSuperclass <NSCopying> {
	StyleSheet* _styleSheet;
	int _renderContext;
	int _audioContext;
	NSString* _searchString;
	XXStruct_JC2WWA _sizeConstraints;
}
@property(retain, nonatomic) NSString* searchString;
@property(assign, nonatomic) int audioContext;
@property(assign, nonatomic) int renderContext;
@property(retain, nonatomic) StyleSheet* styleSheet;
@property(assign, nonatomic) XXStruct_JC2WWA sizeConstraints;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface Component5 : XXUnknownSuperclass {
	NSPointerArray* _stateListeners;
	NSString* _tag;
	id<Component5Delegate> _delegate;
	NSString* _identifier;
	id _state;
}
@property(retain, nonatomic) id state;
@property(readonly, assign, nonatomic) NSString* identifier;
@property(assign, nonatomic) __weak id<Component5Delegate> delegate;
@property(retain, nonatomic) NSString* tag;
+(void)performBlock:(id)block async:(BOOL)async;
+(void)performBlock:(id)block;
+(void)load;
+(Class)nodeClass;
+(Class)controllerClass;
-(void).cxx_destruct;
-(id)nodeWithContext:(id)context;
-(id)nodeForState:(id)state context:(id)context;
-(BOOL)isUtility;
-(id)preparedViewWithContext:(id)context;
-(id)viewWithContext:(id)context;
-(id)createView;
-(void)didUpdateState:(id)state toState:(id)state2 animated:(BOOL)animated;
-(void)willUpdateState:(id)state toState:(id)state2 animated:(BOOL)animated;
-(void)_updateState:(id)state animated:(BOOL)animated async:(BOOL)async;
-(void)updateStateSync:(id)sync;
-(void)updateStateSync:(id)sync animated:(BOOL)animated;
-(void)updateState:(id)state;
-(void)updateState:(id)state animated:(BOOL)animated;
-(void)removeStateListener:(id)listener;
-(void)addStateListener:(id)listener;
-(id)initWithState:(id)state;
-(id)initWithState:(id)state sizeConstraints:(XXStruct_JC2WWA)constraints;
-(id)init;
-(id)embedUnder:(id)under;
-(id)embedIn:(id)anIn horizontalAlignment:(int)alignment verticalAlignment:(int)alignment3;
-(id)embedInCenter:(id)center;
-(id)embedIn:(id)anIn;
-(id)backgroundColor:(id)color;
-(id)insetRight:(float)right;
-(id)insetLeft:(float)left;
-(id)insetBottom:(float)bottom;
-(id)insetTop:(float)top;
-(id)insetY:(float)y;
-(id)insetX:(float)x;
-(id)insets:(UIEdgeInsets)insets;
-(id)sizeConstraints:(XXStruct_JC2WWA)constraints;
-(id)aspectRatio:(float)ratio;
@end

__attribute__((visibility("hidden")))
@interface CompositionComponent : Component5 {
	BOOL _hasView;
}
+(id)composeComponent:(id)component hasView:(BOOL)view;
+(id)composeComponent:(id)component;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FutureComponent : Component5 {
}
@property(copy, nonatomic) id state;
+(id)componentWithContext:(id)context;
-(BOOL)isUtility;
-(id)nodeForBlock:(id)block context:(id)context;
-(id)nodeForState:(id)state context:(id)context;
-(id)componentWithContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FutureComponentContext : Component5 {
	Component5* _component;
	id _block;
}
@property(copy, nonatomic) id block;
@property(retain, nonatomic) Component5* component;
+(id)component:(id)component block:(id)block;
-(void).cxx_destruct;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FutureComponentAndContext : Component5 {
}
@property(copy, nonatomic) id state;
+(id)block:(id)block;
-(BOOL)isUtility;
-(id)nodeForBlock:(id)block context:(id)context;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface DynamicComponent : Component5 {
}
+(id)component:(id)component;
-(id)nodeForState:(id)state context:(id)context;
-(BOOL)isUtility;
@end

__attribute__((visibility("hidden")))
@interface AudioSearchHistoryVKStats : XXUnknownSuperclass {
	AudioSearchHistoryStorage* _storage;
	VKStats* _stats;
}
@property(readonly, retain, nonatomic) AudioSearchHistoryStorage* storage;
@property(retain, nonatomic) VKStats* stats;
+(id)stats:(id)stats;
-(void).cxx_destruct;
-(void)clear;
-(void)save;
-(id)initWithStats:(id)stats;
@end

__attribute__((visibility("hidden")))
@interface TmpContext : XXUnknownSuperclass {
	UIView* _host;
	NSArray* _nodes;
	CGPoint _origin;
}
@property(assign, nonatomic) CGPoint origin;
@property(retain, nonatomic) NSArray* nodes;
@property(retain, nonatomic) UIView* host;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ReusableViewsPool : XXUnknownSuperclass {
	NSMutableDictionary* _creationBlocks;
	NSMutableDictionary* _pools;
}
-(void).cxx_destruct;
-(void)reuseView:(id)view;
-(BOOL)canReuseView:(id)view;
-(void)tag:(id)tag view:(id)view;
-(void)registerView:(id)view forReuseIdentifier:(id)reuseIdentifier;
-(id)dequeueViewWithReuseIdentifier:(id)reuseIdentifier;
-(id)dequeueViewWithReuseIdentifier:(id)reuseIdentifier tag:(id)tag;
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(void)registerReusableViewIdentifier:(id)identifier withCreationBlock:(id)creationBlock;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ReusableViewsPoolTmp : ReusableViewsPool {
	ReusableViewsPool* _parentPool;
}
@property(retain, nonatomic) ReusableViewsPool* parentPool;
-(void).cxx_destruct;
-(void)reuseView:(id)view;
-(id)dequeueViewWithReuseIdentifier:(id)reuseIdentifier;
-(id)dequeueViewWithReuseIdentifier:(id)reuseIdentifier tag:(id)tag;
-(void)dealloc;
-(void)drain;
@end

__attribute__((visibility("hidden")))
@interface Node5TableViewCell : XXUnknownSuperclass {
	id _userInfo;
}
@property(retain, nonatomic) id userInfo;
-(void).cxx_destruct;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface CGRectBuilder : XXUnknownSuperclass {
	CGRect _rect;
}
@property(assign, nonatomic) CGRect rect;
+(id)updateFrameForView:(id)view withBlock:(id)block;
+(id)builderWithRect:(CGRect)rect;
+(id)builder;
-(id)withCenterXAt:(float)at;
-(id)withCenterYAt:(float)at;
-(id)updateRectByModifyingCurrentRectWithBlock:(id)block;
-(id)rounded;
-(id)roundedSize;
-(id)roundedOrigin;
-(id)withMaxHeight:(float)maxHeight;
-(id)withMaxWidth:(float)maxWidth;
-(id)withMinY:(float)minY;
-(id)withMinX:(float)minX;
-(id)withMaxY:(float)maxY;
-(id)withMaxX:(float)maxX;
-(id)insetByTop:(float)top left:(float)left bottom:(float)bottom right:(float)right;
-(id)insetByX:(float)x y:(float)y;
-(id)insetBy:(UIEdgeInsets)by;
-(id)alignedBottomInRect:(CGRect)rect offset:(float)offset;
-(id)alignedRightInRect:(CGRect)rect offset:(float)offset;
-(id)withSizeScaledAspectFitInRect:(CGRect)rect;
-(id)withSizeScaledAspectFillInRect:(CGRect)rect;
-(id)filledHorizontallyRect:(CGRect)rect;
-(id)filledVerticallyRect:(CGRect)rect;
-(id)centeredInRect:(CGRect)rect;
-(id)centeredVerticallyInRect:(CGRect)rect;
-(id)centeredHorizontallyInRect:(CGRect)rect;
-(id)increasedHeightBy:(float)by;
-(id)increasedWidthBy:(float)by;
-(id)increasedYBy:(float)by;
-(id)increasedXBy:(float)by;
-(id)withFilledBottomEdgeInRect:(CGRect)rect offset:(float)offset;
-(id)withFilledRightEdgeInRect:(CGRect)rect offset:(float)offset;
-(id)withFilledTopEdgeToRect:(CGRect)rect offset:(float)offset;
-(id)withFilledBottomEdgeToRect:(CGRect)rect offset:(float)offset;
-(id)withFilledLeftEdgeToRect:(CGRect)rect offset:(float)offset;
-(id)withFilledRightEdgeToRect:(CGRect)rect offset:(float)offset;
-(id)underRect:(CGRect)rect offset:(float)offset;
-(id)aboveRect:(CGRect)rect offset:(float)offset;
-(id)onLeftOfRect:(CGRect)rect offset:(float)offset;
-(id)onRightOfRect:(CGRect)rect offset:(float)offset;
-(id)withSize:(CGSize)size;
-(id)withOrigin:(CGPoint)origin;
-(id)withHeight:(float)height;
-(id)withWidth:(float)width;
-(id)withY:(float)y;
-(id)withX:(float)x;
-(id)withRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistCell : VKMCell <MultiImageLoaderDelegate> {
	VKMImageView* _coverImageView;
	UILabel* _titleLabel;
	UILabel* _artistLabel;
	UILabel* _subtitleLabel;
	VKMMultiImagePlaylistLoader* _multiloader;
	UIColor* _overlayColor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) UIColor* overlayColor;
@property(readonly, retain, nonatomic) VKMMultiImagePlaylistLoader* multiloader;
@property(readonly, retain, nonatomic) UILabel* subtitleLabel;
@property(readonly, retain, nonatomic) UILabel* artistLabel;
@property(readonly, retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) VKMImageView* coverImageView;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)multiImageLoader:(id)loader complete:(id)complete;
-(void)loadPlaylistImage:(id)image expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(CGRect)imageFrame;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKAudioUser : VKUser <AudioOwnerProtocol> {
	NSString* _photo_200;
}
@property(readonly, assign, nonatomic) BOOL verified;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) int deactivated;
@property(readonly, assign, nonatomic) int sex;
@property(readonly, retain, nonatomic) NSString* photo;
@property(readonly, retain, nonatomic) NSString* name;
@property(readonly, retain, nonatomic) NSNumber* source_id;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* photo_200;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface Node5CollectionViewCell : XXUnknownSuperclass {
}
@end

__attribute__((visibility("hidden")))
@interface AspectRatioComponentState : XXUnknownSuperclass {
	Component5* _component;
	float _ratio;
}
@property(assign, nonatomic) float ratio;
@property(retain, nonatomic) Component5* component;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AspectRatioComponent : Component5 {
}
+(id)component:(id)component ratio:(float)ratio;
-(BOOL)isUtility;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TextBuilder : XXUnknownSuperclass {
	StyleSheet* _styleSheet;
}
@property(readonly, assign, nonatomic) StyleSheet* styleSheet;
+(void)prepare;
+(id)builderWithStyleSheet:(id)styleSheet;
-(void).cxx_destruct;
-(id)highlightBoldInText:(id)text;
-(id)highlightSearchString:(id)string inText:(id)text;
-(id)truncateURLsInString:(id)string maxSize:(CGSize)size;
-(void)detectAddressesInText:(id)text;
-(void)detectMentionsInText:(id)text ranges:(id)ranges;
-(void)detectTagsInText:(id)text ranges:(id)ranges;
-(void)detectPhonesInText:(id)text ranges:(id)ranges;
-(void)detectLinkMentionsInText:(id)text ranges:(id)ranges;
-(void)detectLinksInText:(id)text ranges:(id)ranges;
-(void)detectDataInString:(id)string withDetector:(id)detector block:(id)block;
-(id)detectDataInAttributedString:(id)attributedString withOptions:(int)options;
-(id)detectDataInString:(id)string withOptions:(int)options;
-(id)initWithStyleSheet:(id)styleSheet;
@end

__attribute__((visibility("hidden")))
@interface VKMention : XXUnknownSuperclass {
	NSString* _identifier;
	NSString* _name;
	NSRange _range;
}
@property(readonly, assign, nonatomic) NSString* name;
@property(readonly, assign, nonatomic) NSString* identifier;
@property(readonly, assign, nonatomic) NSRange range;
+(id)linkMentionsInString:(id)string;
+(id)mentionsInString:(id)string;
+(id)mentionsInString:(id)string regexp:(id)regexp;
+(id)mentionWithName:(id)name identifier:(id)identifier characterRange:(NSRange)range;
-(void).cxx_destruct;
-(id)initWithName:(id)name identifier:(id)identifier characterRange:(NSRange)range;
@end

__attribute__((visibility("hidden")))
@interface VKRenderedTextAttributeValue : XXUnknownSuperclass {
	NSString* _attribute;
	id _value;
	NSRange _range;
}
@property(readonly, assign, nonatomic) id value;
@property(readonly, assign, nonatomic) NSRange range;
@property(readonly, assign, nonatomic) NSString* attribute;
+(id)attribute:(id)attribute value:(id)value range:(NSRange)range;
-(id)initWithAttribute:(id)attribute value:(id)value range:(NSRange)range;
@end

__attribute__((visibility("hidden")))
@interface VKRenderedLine : XXUnknownSuperclass {
	CTLineRef _line;
	float _width;
	float _ascent;
	float _descent;
	float _leading;
	CGPoint _origin;
}
@property(readonly, assign, nonatomic) float leading;
@property(readonly, assign, nonatomic) float descent;
@property(readonly, assign, nonatomic) float ascent;
@property(readonly, assign, nonatomic) float width;
@property(readonly, assign, nonatomic) CGPoint origin;
@property(readonly, assign, nonatomic) CTLineRef line;
+(id)line:(CTLineRef)line origin:(CGPoint)origin;
-(void)dealloc;
-(id)initWithLine:(CTLineRef)line origin:(CGPoint)origin;
@end

__attribute__((visibility("hidden")))
@interface VKRenderedTextSettings : XXUnknownSuperclass <VKRenderedTextSettingsWriter, NSCopying> {
	unsigned _maximumNumberOfLines;
	unsigned _minimumNumberOfLines;
	int _alignment;
	CGSize _minimumSize;
	CGSize _maximumSize;
}
@property(assign, nonatomic) CGSize maximumSize;
@property(assign, nonatomic) CGSize minimumSize;
@property(assign, nonatomic) int alignment;
@property(assign, nonatomic) unsigned minimumNumberOfLines;
@property(assign, nonatomic) unsigned maximumNumberOfLines;
-(id)copyChangingValues:(id)values;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VKRenderedText : XXUnknownSuperclass {
	BOOL _truncated;
	NSAttributedString* _text;
	VKRenderedTextSettings* _settings;
	float _baselineOffset;
	float _ascender;
	NSArray* _lines;
	CGSize _size;
}
@property(readonly, assign, nonatomic) NSString* truncationToken;
@property(readonly, assign, nonatomic) float ascender;
@property(readonly, assign, nonatomic) float baselineOffset;
@property(readonly, assign, nonatomic, getter=isTruncated) BOOL truncated;
@property(readonly, assign, nonatomic) unsigned numberOfLines;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, copy, nonatomic) VKRenderedTextSettings* settings;
@property(readonly, copy, nonatomic) NSAttributedString* text;
@property(retain, nonatomic) NSArray* lines;
+(id)renderedText:(id)text minSize:(CGSize)size maxSize:(CGSize)size3 maxNumberOfLinesRange:(NSRange)linesRange alignment:(int)alignment;
+(id)renderedText:(id)text minSize:(CGSize)size maxSize:(CGSize)size3 maxNumberOfLines:(unsigned)lines alignment:(int)alignment;
+(id)renderedText:(id)text withSettings:(id)settings;
-(void).cxx_destruct;
-(id)lastLine;
-(id)lineAtIndex:(unsigned)index;
-(id)lookupAttributes:(id)attributes atPoint:(CGPoint)point;
-(id)lookupAttributesAtPoint:(CGPoint)point;
-(long)characterIndexAtPoint:(CGPoint)point;
-(void)drawInContext:(CGContextRef)context;
-(void)enumerateRectsForAttribute:(id)attribute atPoint:(CGPoint)point block:(id)block;
-(void)enumerateRectsForAttribute:(id)attribute block:(id)block;
-(id)renderedWithText:(id)text;
-(id)renderedWithSettings:(id)settings;
-(id)resized:(float)resized;
@end

__attribute__((visibility("hidden")))
@interface FriendsSelectorController : VKSelectorContainerControllerDropdown {
}
@end

__attribute__((visibility("hidden")))
@interface Colors : XXUnknownSuperclass <NSCopying, NSMutableCopying> {
	UIColor* _placeholderBackgroundColor;
	UIColor* _separatorColor;
	UIColor* _regularTextColor;
	UIColor* _headingTextColor;
	UIColor* _descriptionTextColor;
}
@property(readonly, assign, nonatomic) UIColor* descriptionTextColor;
@property(readonly, assign, nonatomic) UIColor* headingTextColor;
@property(readonly, assign, nonatomic) UIColor* regularTextColor;
@property(readonly, assign, nonatomic) UIColor* separatorColor;
@property(readonly, assign, nonatomic) UIColor* placeholderBackgroundColor;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface Dimensions : XXUnknownSuperclass <NSCopying, NSMutableCopying> {
	float _defaultContentInset;
	float _lightContentInset;
}
@property(readonly, assign, nonatomic) float lightContentInset;
@property(readonly, assign, nonatomic) float defaultContentInset;
-(id)copyWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MutableDimensions : Dimensions {
}
@end

__attribute__((visibility("hidden")))
@interface ImageResource : XXUnknownSuperclass {
	BOOL _hasSize;
	NSString* _name;
	CGSize _size;
}
@property(readonly, assign, nonatomic) BOOL hasSize;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, assign, nonatomic) NSString* name;
+(id)resourceWithImageName:(id)imageName size:(CGSize)size;
+(id)resourceWithImageName:(id)imageName;
-(void).cxx_destruct;
-(id)image;
-(id)initWithImageName:(id)imageName size:(CGSize)size;
-(id)initWithImageName:(id)imageName;
@end

__attribute__((visibility("hidden")))
@interface ImageResourceGroup : XXUnknownSuperclass {
	NSMutableDictionary* _resources;
}
+(id)build:(id)build;
-(void).cxx_destruct;
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

__attribute__((visibility("hidden")))
@interface Resources : XXUnknownSuperclass {
	ImageResourceGroup* _socialButtonLike;
	ImageResourceGroup* _socialButtonViews;
	ImageResourceGroup* _socialButtonComment;
	ImageResourceGroup* _socialButtonShare;
	ImageResource* _verifiedAccountIcon;
	ImageResource* _privatePostIcon;
	ImageResource* _pinnedPostIcon;
	ImageResource* _postSettingsIcon;
	ImageResource* _videoPlayBig;
	ImageResource* _playSmall;
	ImageResource* _recommendationsHide;
	ImageResource* _recommendationsCheck;
	ImageResource* _recommendationsAddFriend;
	ImageResource* _recommendationsAddGroup;
	ImageResource* _watermarkYoutube;
	ImageResource* _watermarkCoub;
	ImageResource* _watermarkRutube;
	ImageResource* _watermarkPladform;
	ImageResource* _watermarkVimeo;
}
@property(retain, nonatomic) ImageResource* watermarkVimeo;
@property(retain, nonatomic) ImageResource* watermarkPladform;
@property(retain, nonatomic) ImageResource* watermarkRutube;
@property(retain, nonatomic) ImageResource* watermarkCoub;
@property(retain, nonatomic) ImageResource* watermarkYoutube;
@property(retain, nonatomic) ImageResource* recommendationsAddGroup;
@property(retain, nonatomic) ImageResource* recommendationsAddFriend;
@property(retain, nonatomic) ImageResource* recommendationsCheck;
@property(retain, nonatomic) ImageResource* recommendationsHide;
@property(retain, nonatomic) ImageResource* playSmall;
@property(retain, nonatomic) ImageResource* videoPlayBig;
@property(retain, nonatomic) ImageResource* postSettingsIcon;
@property(retain, nonatomic) ImageResource* pinnedPostIcon;
@property(retain, nonatomic) ImageResource* privatePostIcon;
@property(retain, nonatomic) ImageResource* verifiedAccountIcon;
@property(retain, nonatomic) ImageResourceGroup* socialButtonShare;
@property(retain, nonatomic) ImageResourceGroup* socialButtonComment;
@property(retain, nonatomic) ImageResourceGroup* socialButtonViews;
@property(retain, nonatomic) ImageResourceGroup* socialButtonLike;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface Drawables : XXUnknownSuperclass {
	NSCache* _cache;
}
@property(readonly, assign, nonatomic) UIImage* notificationCloseButtonBackground;
@property(readonly, assign, nonatomic) UIImage* primaryButtonNormal;
@property(readonly, assign, nonatomic) UIImage* secondaryButtonNormal;
@property(retain, nonatomic) NSCache* cache;
-(void).cxx_destruct;
-(id)cachedImageForKey:(id)key creationBlock:(id)block;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TextStyle : XXUnknownSuperclass {
	NSDictionary* _attributes;
}
@property(readonly, assign, nonatomic) NSDictionary* attributes;
+(id)emptyStyle;
+(id)defaultStyle;
+(id)styleWithAttributes:(id)attributes;
-(void).cxx_destruct;
-(id)initWithAttributes:(id)attributes;
-(id)description;
-(id)withRegularFont;
-(id)withMeduimFont;
-(id)withBoldFont;
-(id)withFontTraitsRemoved:(unsigned)fontTraitsRemoved;
-(id)withFontTraitsAdded:(unsigned)fontTraitsAdded;
-(id)withFontSize:(float)fontSize;
-(id)withFont:(id)font;
-(float)fontSize;
-(id)font;
-(id)withColor:(id)color;
-(id)color;
-(id)withLineHeight:(float)lineHeight;
-(id)withAttributes:(id)attributes;
-(id)withStyle:(id)style;
-(id)route:(id)route;
-(id)url:(id)url type:(int)type;
-(id)url:(id)url;
@end

__attribute__((visibility("hidden")))
@interface StyleSheet : XXUnknownSuperclass <NSCopying, NSMutableCopying> {
	Colors* _colors;
	Dimensions* _dimensions;
	Resources* _resources;
	Drawables* _drawables;
	TextStyle* _headingTextStyle;
	TextStyle* _heavyHeadingTextStyle;
	TextStyle* _heavyDescriptionTextStyle;
	TextStyle* _regularTextStyle;
	TextStyle* _descriptionTextStyle;
	TextStyle* _profileNameTextStyle;
	TextStyle* _recommendationsTitleTextStyle;
	TextStyle* _linkTextStyle;
	TextStyle* _mentionTextStyle;
	TextStyle* _snippetButtonTitleTextStyle;
	TextStyle* _primaryButtonTitleTextStyle;
	TextStyle* _secondaryButtonTitleTextStyle;
	TextStyle* _cellButtonTitleTextStyle;
	TextStyle* _chatMessageTextStyle;
	TextStyle* _teaserTitleTextStyle;
	TextStyle* _teaserSubtitleTextStyle;
}
@property(retain, nonatomic) Drawables* drawables;
@property(retain, nonatomic) Resources* resources;
@property(retain, nonatomic) Dimensions* dimensions;
@property(retain, nonatomic) Colors* colors;
@property(retain, nonatomic) TextStyle* teaserSubtitleTextStyle;
@property(retain, nonatomic) TextStyle* teaserTitleTextStyle;
@property(retain, nonatomic) TextStyle* chatMessageTextStyle;
@property(retain, nonatomic) TextStyle* cellButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* secondaryButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* primaryButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* snippetButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* mentionTextStyle;
@property(retain, nonatomic) TextStyle* linkTextStyle;
@property(retain, nonatomic) TextStyle* recommendationsTitleTextStyle;
@property(retain, nonatomic) TextStyle* profileNameTextStyle;
@property(retain, nonatomic) TextStyle* descriptionTextStyle;
@property(retain, nonatomic) TextStyle* regularTextStyle;
@property(retain, nonatomic) TextStyle* heavyDescriptionTextStyle;
@property(retain, nonatomic) TextStyle* heavyHeadingTextStyle;
@property(retain, nonatomic) TextStyle* headingTextStyle;
+(id)defaultResources;
+(id)darkStyleSheet;
+(id)defaultStyleSheet;
-(void).cxx_destruct;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithStyleSheet:(id)styleSheet;
@end

__attribute__((visibility("hidden")))
@interface StyleSheetMutable : StyleSheet {
}
@property(retain, nonatomic) TextStyle* teaserSubtitleTextStyle;
@property(retain, nonatomic) TextStyle* teaserTitleTextStyle;
@property(retain, nonatomic) TextStyle* chatMessageTextStyle;
@property(retain, nonatomic) TextStyle* cellButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* secondaryButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* primaryButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* snippetButtonTitleTextStyle;
@property(retain, nonatomic) TextStyle* mentionTextStyle;
@property(retain, nonatomic) TextStyle* linkTextStyle;
@property(retain, nonatomic) TextStyle* recommendationsTitleTextStyle;
@property(retain, nonatomic) TextStyle* profileNameTextStyle;
@property(retain, nonatomic) TextStyle* descriptionTextStyle;
@property(retain, nonatomic) TextStyle* regularTextStyle;
@property(retain, nonatomic) TextStyle* heavyDescriptionTextStyle;
@property(retain, nonatomic) TextStyle* heavyHeadingTextStyle;
@property(retain, nonatomic) TextStyle* headingTextStyle;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VKWebAppContainerController : VKMController <WKNavigationDelegate> {
	id<VKWebAppContainerControllerDelegate> _delegate;
	NSURL* _url;
	NSMutableArray* _scriptMessageHandlersKeys;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKWebAppContainerControllerDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* scriptMessageHandlersKeys;
@property(readonly, assign, nonatomic) WKWebView* webView;
@property(copy, nonatomic) NSURL* url;
-(void).cxx_destruct;
-(void)webView:(id)view decidePolicyForNavigationResponse:(id)navigationResponse decisionHandler:(id)handler;
-(void)webView:(id)view didFailProvisionalNavigation:(id)navigation withError:(id)error;
-(void)loadContent;
-(void)dealloc;
-(void)addWKScriptMessageHandler:(id)handler forName:(id)name;
-(void)loadView;
-(id)initWithURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface UICollectionViewComponentState : XXUnknownSuperclass {
	BOOL _pagingEnabled;
	Index* _index;
	float _pagingOffsets;
	CGPoint _contentOffset;
}
@property(assign, nonatomic) float pagingOffsets;
@property(assign, nonatomic, getter=isPagingEnabled) BOOL pagingEnabled;
@property(assign, nonatomic) CGPoint contentOffset;
@property(retain, nonatomic) Index* index;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface UICollectionViewComponentController : Component5Controller <UICollectionViewDelegateFlowLayout, UICollectionViewDataSource> {
	ReusableViewsPool* _pool;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) ReusableViewsPool* pool;
@property(retain, nonatomic) UICollectionViewComponent* component;
+(id)createView;
+(id)createLayout;
-(void).cxx_destruct;
-(BOOL)requiresScreenBounds;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)centerAttributeOfCollectionView:(id)collectionView inRect:(CGRect)rect;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(id)index;
-(id)initWithView:(id)view context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface UICollectionViewComponent : Component5 {
}
@property(retain, nonatomic) UICollectionViewComponentState* state;
@end

__attribute__((visibility("hidden")))
@interface UICollectionViewModelComponentController : UICollectionViewComponentController <ModelObserver, ModelRenderDelegate> {
	Model* _model;
	NSSet* _pendingViewed;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) Model* model;
@property(retain, nonatomic) NSSet* pendingViewed;
+(Class)modelClass;
-(void).cxx_destruct;
-(void)_updateVisibleCellsDisplaying;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(id)model:(id)model componentRenderContextForObject:(id)object context:(id)context;
-(id)model:(id)model componentForObject:(id)object withContext:(id)context;
-(id)model:(id)model renderObject:(id)object withContext:(id)context;
-(id)renderContextForModel:(id)model;
-(void)setComponent:(id)component;
-(id)index;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(id)initWithView:(id)view context:(id)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface UICollectionViewModelComponent : UICollectionViewComponent {
}
@end

__attribute__((visibility("hidden")))
@interface PushSourcesModel : ListModel {
}
-(void)handleSubscribe:(id)subscribe :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)request:(int)request count:(int)count;
-(id)countKey;
@end

__attribute__((visibility("hidden")))
@interface ModelActionPushSourceSubscription : ModelAction {
	BOOL _subscribe;
}
@property(assign, nonatomic) BOOL subscribe;
@property(retain, nonatomic) NSNumber* target;
+(int)domainType;
-(id)actionSuccessMessage:(id)message;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)setupSubscribe:(BOOL)subscribe;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsDocsController : VKMLiveController {
}
-(BOOL)VKMRoute:(id)route context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MasksSectionController : VKMCollectionController {
	id<MasksSectionControllerDelegate> _delegate;
	MaskLoader* _maskLoader;
}
@property(retain, nonatomic) MaskLoader* maskLoader;
@property(assign, nonatomic) __weak id<MasksSectionControllerDelegate> delegate;
@property(retain, nonatomic) LoadingModel<MasksSectionModelProtocol>* model;
-(void).cxx_destruct;
-(void)VKMControllerAppear;
-(void)setLocationInfoIntoModelAndUpdateControllerIfAppearing:(id)appearing;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(BOOL)VKMRoute:(id)route context:(id)context;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface TextKitLabel : XXUnknownSuperclass {
	VKRenderedText* _text;
}
@property(readonly, assign, nonatomic) TextKitLayer* textLayer;
@property(retain, nonatomic) VKRenderedText* text;
+(Class)layerClass;
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)accessibilityLabel;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface BaseUserCell : VKMCell {
	UILabel* _first;
	UILabel* _last;
	VKMImageView* _avatarImage;
	UIButton* _online;
}
@property(readonly, retain, nonatomic) UIButton* online;
@property(readonly, retain, nonatomic) VKMImageView* avatarImage;
@property(readonly, retain, nonatomic) UILabel* last;
@property(readonly, retain, nonatomic) UILabel* first;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)willTransitionToState:(unsigned)state;
-(void)prepareForReuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MBContactCollectionViewPromptCell : XXUnknownSuperclass {
	NSString* _prompt;
	UIFont* _font;
	UILabel* _promptLabel;
	UIEdgeInsets _insets;
}
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) UIEdgeInsets insets;
@property(copy, nonatomic) NSString* prompt;
@property(assign, nonatomic) __weak UILabel* promptLabel;
+(float)widthWithPrompt:(id)prompt;
-(void).cxx_destruct;
-(void)setup;
-(void)awakeFromNib;
-(id)initWithPrompt:(id)prompt;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerModel : ItemModel {
	VKIdentity* _videoIden;
}
@property(retain, nonatomic) VKIdentity* videoIden;
@property(readonly, assign, nonatomic) VKVideoPlayerItem* item;
+(id)videoIden:(id)iden session:(id)session;
+(id)video:(id)video session:(id)session;
-(void).cxx_destruct;
-(void)handleAddDoc:(id)doc :(id)arg2;
-(void)handleDeleteDoc:(id)doc :(id)arg2;
-(void)handleDeleteVideo:(id)video :(id)arg2;
-(void)handleAddVideoToAlbum:(id)album :(id)arg2;
-(void)handleAddVideo:(id)video :(id)arg2;
-(void)handleDeleteComment:(id)comment :(id)arg2;
-(void)handleAddComment:(id)comment :(id)arg2;
-(void)handleRepost:(id)repost :(id)arg2;
-(void)handleLike:(id)like :(id)arg2;
-(void)handleSubscribeLiveVideo:(id)video :(id)arg2;
-(void)refreshItem:(id)item;
-(id)process:(id)process context:(id)context;
-(id)request;
-(void)registerForEvents:(id)events;
@end

__attribute__((visibility("hidden")))
@interface SwitchItemEditController : ItemEditController {
	SwitchItemEditRows rows;
}
@property(retain, nonatomic) ItemEditContext<VKSwitchEditItemContext>* context;
+(id)main:(id)main context:(id)context;
-(void)switchAdmins:(id)admins;
-(void)switchComments:(id)comments;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)setupRows;
@end

__attribute__((visibility("hidden")))
@interface VKConfiguration : XXUnknownSuperclass <VKConfigurationWriter, VKConfigurationReader> {
	NSUserDefaults* _defaults;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSUserDefaults* defaults;
+(id)suiteName;
+(id)sharedInstance;
+(id)privateInstance;
-(void).cxx_destruct;
-(id)dictionary;
-(void)writeSavingWithBlock:(id)block;
-(BOOL)boolForKey:(id)key;
-(id)stringForKey:(id)key;
-(id)objectForKey:(id)key;
-(void)removeObjectForKey:(id)key;
-(void)setBool:(BOOL)aBool forKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)initShared;
-(id)initPrivate;
-(id)initWithSuiteName:(id)suiteName;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StoryFeedPreviewViewController : VKMController <UICollectionViewDataSource, UICollectionViewDelegate> {
	BOOL _lockedForTransition;
	BOOL _needsReloadAfterUnlock;
	UICollectionView* _collectionView;
	NSArray* _items;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UICollectionView* collectionView;
@property(assign, nonatomic) BOOL needsReloadAfterUnlock;
@property(assign, nonatomic) BOOL lockedForTransition;
@property(retain, nonatomic) NSArray* items;
-(void).cxx_destruct;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)unlockForTransition;
-(void)lockForTransition;
-(void)scrollToSource:(id)source animated:(BOOL)animated;
-(void)reloadItems;
-(void)reloadData;
-(void)handleStoriesUpdatedNotification:(id)notification;
-(void)handleStoryMarkedSeenNotification:(id)notification;
-(void)preloadUnseen;
-(void)buildItems;
-(id)navContext;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface TokenProvider : XXUnknownSuperclass {
}
+(id)provider;
-(void)saveToken:(id)token forUserID:(id)userID;
-(id)obtainToken;
@end

__attribute__((visibility("hidden")))
@interface AuthToken : XXUnknownSuperclass <AuthToken> {
	NSNumber* _userID;
	NSString* _token;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* token;
@property(retain, nonatomic) NSNumber* userID;
+(id)authTokenWithUserID:(id)userID token:(id)token;
-(void).cxx_destruct;
-(id)initWithUserID:(id)userID token:(id)token;
@end

__attribute__((visibility("hidden")))
@interface FeedCommentComponent : Component5 {
}
+(id)comment:(id)comment;
@end

__attribute__((visibility("hidden")))
@interface ClientBasedUploadContext : XXUnknownSuperclass {
	id _result;
	VKClient* _client;
	UploadBatchContext* _batch;
	NSString* _filename;
	NSNumber* _uploadDataSize;
	NSURL* _thumbnailURL;
	NSDictionary* _additionalParameters;
	int _error;
}
@property(assign, nonatomic) int error;
@property(retain, nonatomic) NSDictionary* additionalParameters;
@property(retain, nonatomic) NSURL* thumbnailURL;
@property(retain, nonatomic) NSNumber* uploadDataSize;
@property(retain, nonatomic) NSString* filename;
@property(retain, nonatomic) UploadBatchContext* batch;
@property(retain, nonatomic) VKClient* client;
@property(retain, nonatomic) id result;
+(id)contextWithClient:(id)client;
-(void).cxx_destruct;
-(void)cleanTemporaryFiles;
-(id)createTemporaryFileURLWithExtension:(id)extension;
-(BOOL)handleResultServerData:(id)data uploadData:(id)data2 saveData:(id)data3;
-(id)requestForSaving:(id)saving;
-(id)uploadBodyFieldName;
-(id)uploadURLToUse:(id)use;
-(void)loadUploadData:(id)data;
-(id)requestForUploadServer;
-(id)createOperation;
-(id)withBatchContext:(id)batchContext;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ClientBasedUploadOperation : AsyncOperation {
	ClientBasedUploadContext* _context;
}
@property(retain, nonatomic) ClientBasedUploadContext* context;
-(void).cxx_destruct;
-(void)phaseSaveServer:(id)server upload:(id)upload;
-(void)phaseUploadServer:(id)server;
-(id)client;
-(void)runAsync;
@end

__attribute__((visibility("hidden")))
@interface SketchHistoryController : VKMCollectionController <SketchPreviewControllerDelegate, SketchControllerDelegate, VKAPTabViewControllerProtocol> {
	id _upload;
	id _selection;
	UIButton* _drawGraffitiButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id selection;
@property(copy, nonatomic) id upload;
@property(retain, nonatomic) UIButton* drawGraffitiButton;
-(void).cxx_destruct;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)VKMScrollViewDisablePTR;
-(void)VKMNavigationBarUpdate;
-(id)scrollView;
-(void)cancelSketchController:(id)controller;
-(void)sketchController:(id)controller imageReadyToSend:(id)send;
-(void)actionNewGraffiti:(id)graffiti;
-(void)sketchPreviewController:(id)controller confirmSendingGraffitiDoc:(id)doc;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view performAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view canPerformAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view shouldShowMenuForItemAtIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
-(id)VKMCollectionCreateLayout;
@end

__attribute__((visibility("hidden")))
@interface VKMediaAlbums : VKDomainDerived <VKTitleable> {
	BOOL _video;
	NSNumber* _oid;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL video;
@property(retain, nonatomic) NSNumber* oid;
+(id)owner:(id)owner video:(BOOL)video;
-(void).cxx_destruct;
-(BOOL)disclosure;
-(id)title;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKGiftsCatalogItem : VKDomain {
	BOOL _disabled;
	VKGift* _gift;
	NSNumber* _price;
	NSString* _price_str;
	NSString* _descr;
	NSString* _section;
	NSNumber* _gifts_left;
	NSNumber* _real_price;
	VKGiftsContext* _context;
}
@property(assign, nonatomic) BOOL disabled;
@property(retain, nonatomic) VKGiftsContext* context;
@property(retain, nonatomic) NSNumber* real_price;
@property(retain, nonatomic) NSNumber* gifts_left;
@property(retain, nonatomic) NSString* section;
@property(retain, nonatomic) NSString* descr;
@property(retain, nonatomic) NSString* price_str;
@property(retain, nonatomic) NSNumber* price;
@property(retain, nonatomic) VKGift* gift;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGiftsSectionItem : VKGiftsCatalogItem {
}
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface GiftsCatalogController : VKMLiveController {
}
@property(retain, nonatomic) GiftsCatalogModel* model;
-(BOOL)VKMControllerModalOnly;
-(int)VKMControllerModalAutoClosePosition;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(id)VKMScrollViewBackgroundColor;
-(void)VKMScrollViewHasLoaded;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface GiftsCatalogModel : LoadingModel {
	unsigned _balance;
	VKGiftsContext* _giftContext;
}
@property(retain, nonatomic) VKGiftsContext* giftContext;
@property(assign, nonatomic) unsigned balance;
-(void).cxx_destruct;
-(void)handleBalance:(id)balance :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)withContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMobileSupportConfiguration : VKRenderable <NSCopying> {
	NSURL* _url;
	double _interval;
}
@property(assign, nonatomic) double interval;
@property(copy, nonatomic) NSURL* url;
-(void).cxx_destruct;
-(unsigned)hash;
-(BOOL)isEqualToConfiguration:(id)configuration;
-(BOOL)isEqual:(id)equal;
-(BOOL)process:(id)process context:(id)context;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VKMobileSupportSettings : VKRenderable {
	BOOL _enabled;
	VKMobileSupportConfiguration* _configuration;
}
@property(retain, nonatomic) VKMobileSupportConfiguration* configuration;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMobileSupport : XXUnknownSuperclass <TimerTargetDelegate> {
	VKMobileSupportConfiguration* _configuration;
	TimerTarget* _timer;
	NSOperationQueue* _queue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(copy, nonatomic) VKMobileSupportConfiguration* configuration;
@property(retain, nonatomic) NSOperationQueue* queue;
@property(retain, nonatomic) TimerTarget* timer;
+(id)configuration:(id)configuration;
-(void).cxx_destruct;
-(void)ping:(id)ping timeout:(double)timeout;
-(void)timerTargetFired:(id)fired;
-(void)stop;
-(void)start;
-(void)start:(id)start;
-(void)updateConfiguration:(id)configuration;
-(id)initWithConfiguration:(id)configuration;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface GiftsUserController : VKMLiveController {
}
@property(retain, nonatomic) GiftsUserModel* model;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)actionTeaserButton:(id)button;
-(void)VKMScrollViewHasLoaded;
-(void)VKMTableUpdatedIndex;
-(int)VKMTableStyle;
-(void)viewDidLoad;
-(void)checkRightButton;
@end

__attribute__((visibility("hidden")))
@interface GiftsUserModel : ListModel {
	NSNumber* _user_id;
	VKUser* _target_user;
	GiftsStatContext* _stats_context;
}
@property(retain, nonatomic) GiftsStatContext* stats_context;
@property(retain, nonatomic) VKUser* target_user;
@property(retain, nonatomic) NSNumber* user_id;
-(void).cxx_destruct;
-(id)withStatsContext:(id)statsContext;
-(void)handleGiftAdd:(id)add :(id)arg2;
-(void)handleGiftDelete:(id)aDelete :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)componentForObject:(id)object withContext:(id)context;
-(id)requestForContext:(id)context;
-(id)spawnContext:(id)context;
-(BOOL)shouldLoad:(id)load;
-(id)countKey;
-(id)withUser:(id)user;
@end

__attribute__((visibility("hidden")))
@interface GiftSendController : VKMLiveController <MBContactPickerDelegate, MBContactPickerDataSource, InlineFriendsControllerDelegate, PrivacyUsersSelectionControllerDelegate> {
	MBContactPicker* _contactsPicker;
	InlineFriendsController* _friendsController;
	UIView* _headerView;
	NSArray* _selectedContacts;
	GiftSendItemRenderable* _giftInfoRenderable;
	GiftsSendMessageCell* _messageCell;
	UITableViewCell* _privacySwitchCell;
	UIView* _sendFooterView;
	UIButton* _sendButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GiftsSendModel* model;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) UIView* sendFooterView;
@property(retain, nonatomic) UITableViewCell* privacySwitchCell;
@property(retain, nonatomic) GiftsSendMessageCell* messageCell;
@property(retain, nonatomic) GiftSendItemRenderable* giftInfoRenderable;
@property(retain, nonatomic) NSArray* selectedContacts;
@property(retain, nonatomic) UIView* headerView;
@property(retain, nonatomic) InlineFriendsController* friendsController;
@property(retain, nonatomic) MBContactPicker* contactsPicker;
-(void).cxx_destruct;
-(void)usersSelectionControllerDidCancel:(id)usersSelectionController;
-(void)usersSelectionController:(id)controller didSelectObjects:(id)objects;
-(void)addRecipientsFromFriends:(id)friends;
-(void)inlineFriendsController:(id)controller didSelectFriend:(id)aFriend;
-(id)selectedContactsToUid;
-(void)contactsShouldUpdateSearchTable:(id)contacts withSearchQuery:(id)searchQuery;
-(id)contactsPickerCustomSearchController:(id)controller;
-(void)contactCollectionView:(id)view didRemoveContacts:(id)contacts;
-(void)contactCollectionView:(id)view didRemoveContact:(id)contact;
-(void)contactCollectionView:(id)view didAddContact:(id)contact;
-(id)selectedContactModelsForContactPicker:(id)contactPicker;
-(void)contactPicker:(id)picker didUpdateContentHeightTo:(float)to;
-(void)notificationKeyboard:(id)keyboard;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)redirectAfterGiftSent:(id)sent;
-(void)sendGiftWithCurrentState;
-(void)actionSendGift:(id)gift;
-(void)actionPrivacyChanged:(id)changed;
-(void)actionUpdatePrice:(BOOL)price;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(int)VKMControllerModalAutoClosePosition;
-(BOOL)VKMScrollViewDisablePTR;
-(id)VKMScrollViewBackgroundColor;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)initCells;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface GiftsSendMessageCell : VKMCell <UITextViewDelegate> {
	PlaceholderTextView* _textDescription;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PlaceholderTextView* textDescription;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)resignTextView:(id)view;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface CorrectLabelCell : VKMCell {
}
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface PaymentsBalanceController : VKMLiveController <MOCTLabelDelegate> {
	UIView* _headerView;
	UIView* _footerView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIView* footerView;
@property(retain, nonatomic) UIView* headerView;
@property(retain, nonatomic) PaymentsBalanceModel* model;
+(id)boldAttributes;
+(id)textAttributes;
-(void).cxx_destruct;
-(void)moctlabel:(id)moctlabel linkClicked:(id)clicked;
-(void)notificationPurchase:(id)purchase;
-(void)notificationStore:(id)store;
-(id)footerAttributedString;
-(void)actionActions:(id)actions;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(int)VKMTableStyle;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PaymentsPopupView : XXUnknownSuperclass <UIToolbarDelegate> {
	UITableView* _tableView;
	UIToolbar* _topToolbar;
	id<PaymentsPopupViewDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<PaymentsPopupViewDelegate> delegate;
@property(retain, nonatomic) UIToolbar* topToolbar;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(int)positionForBar:(id)bar;
-(void)actionCancel:(id)cancel;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface PaymentsPopupController : VKMLiveController <PaymentsPopupViewDelegate, PopupWindowController> {
	BOOL _result;
	PopupWindow* _cyclePopupWindow;
	unsigned _orientationMask;
	PaymentsPopupView* _itemView;
	UIActivityIndicatorView* _activityIndicatorView;
	id _callback;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned orientationMask;
@property(retain, nonatomic) PopupWindow* cyclePopupWindow;
@property(retain, nonatomic) PaymentsBalanceModel* model;
@property(copy, nonatomic) id callback;
@property(assign, nonatomic) BOOL result;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(retain, nonatomic) PaymentsPopupView* itemView;
-(void).cxx_destruct;
-(void)paymentViewShouldClose;
-(void)popupWindow:(id)window present:(BOOL)present animated:(BOOL)animated completion:(id)completion;
-(void)notificationPurchase:(id)purchase;
-(void)notificationStore:(id)store;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)completeWithSuccess:(BOOL)success;
-(BOOL)route:(id)route;
-(void)VKMScrollViewSetFooter:(id)footer;
-(void)VKMScrollViewHasLoaded;
-(BOOL)VKMScrollViewDisablePTR;
-(id)VKMScrollView;
-(void)loadView;
-(id)withCallback:(id)callback;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface GiftsCategoryController : VKMCollectionController {
}
@property(retain, nonatomic) GiftsCategoryModel* model;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(float)collectionView:(id)view layout:(id)layout minimumInteritemSpacingForSectionAtIndex:(int)index;
-(UIEdgeInsets)collectionView:(id)view layout:(id)layout insetForSectionAtIndex:(int)index;
-(id)VKMScrollViewBackgroundColor;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenViewController : VKMController {
	BOOL _sendMessagePopupPresented;
	BOOL _controlsHidden;
	BOOL _playing;
	BOOL _didStartPlayingCurrentStory;
	NSString* _fromSource;
	id<StoryFullscreenViewControllerDelegate> _delegate;
	id<StoryFullscreenViewModelProvider> _viewModelProvider;
	id<StoryFullscreenViewControllerDataSource> _dataSource;
	NSArray* _storyIdens;
	int _currentIndex;
	id<StoryFullscreenViewModel> _viewModel;
	NSTimer* _currentStoryTimeTimer;
	KVOObserver* _videoPlayerObserver;
	KVOObserver* _viewModelObserver;
}
@property(assign, nonatomic) BOOL controlsHidden;
@property(assign, nonatomic) int currentIndex;
@property(assign, nonatomic) __weak id<StoryFullscreenViewControllerDataSource> dataSource;
@property(assign, nonatomic) __weak id<StoryFullscreenViewModelProvider> viewModelProvider;
@property(assign, nonatomic) __weak id<StoryFullscreenViewControllerDelegate> delegate;
@property(assign, nonatomic) NSString* fromSource;
@property(retain, nonatomic) StoryFullscreenView* view;
@property(assign, nonatomic) BOOL didStartPlayingCurrentStory;
@property(assign, nonatomic) BOOL sendMessagePopupPresented;
@property(assign, nonatomic) BOOL playing;
@property(retain, nonatomic) KVOObserver* viewModelObserver;
@property(retain, nonatomic) KVOObserver* videoPlayerObserver;
@property(retain, nonatomic) NSTimer* currentStoryTimeTimer;
@property(retain, nonatomic) id<StoryFullscreenViewModel> viewModel;
@property(copy, nonatomic) NSArray* storyIdens;
-(void).cxx_destruct;
-(void)handleStoryViewsCountChangedNotification:(id)notification;
-(void)handleStoryViewModelReloadNotification:(id)notification;
-(void)handlePlayerItemDidPlayToEndNotification:(id)handlePlayerItem;
-(void)saveStoryVideoToCameraRoll;
-(void)saveStoryPhotoToCameraRoll;
-(void)handleSaveToCameraRollAction;
-(void)handlePlaybackError:(id)error;
-(void)handleSwipeUpGesture:(id)gesture;
-(void)handleVideoErrorActionButtonTap;
-(void)handleRetryUploadButtonTap;
-(void)handleViewersCountButtonTap;
-(void)handleShareButtonTap;
-(void)handleMoreActionsButtonTap;
-(void)handleSendMessageButtonTap;
-(void)handleSourceViewTap;
-(void)handleCloseButton;
-(void)setControlsHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)showSendMessageWithStoryController:(id)storyController dialog:(id)dialog emptyBodyAllowed:(BOOL)allowed inViewController:(id)viewController completion:(id)completion onCancel:(id)cancel;
-(void)presentActionSheetForStory:(id)story isMy:(BOOL)my;
-(void)resetTimer;
-(void)restart;
-(void)pause;
-(void)playLoaded;
-(void)playForce:(BOOL)force;
-(void)play;
-(void)setStoryIdens:(id)idens withCurrentIndex:(int)currentIndex;
-(id)currentStoryIden;
-(unsigned)footerViewModeForStoryState:(unsigned)storyState;
-(void)markCurrentStoryAsSeenIfNotSeenAlready;
-(void)updateFooterForStoryState:(unsigned)storyState;
-(void)setupViewModelObserverForViewModel:(id)viewModel;
-(void)setupVideoPlayer:(id)player;
-(void)updateContentForViewModel:(id)viewModel;
-(void)prepareForReuse;
-(id)navContext;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenPageViewController : VKMController <UICollectionViewDelegate, UICollectionViewDataSource, StoryFullscreenViewControllerDelegate, UIGestureRecognizerDelegate, PanGestureDrivenDismissableTransitionViewController, StoryFullscreenViewControllerDataSource> {
	BOOL _userDidChangedVolume;
	id _transitionManager;
	NSString* _fromSource;
	StoryFullscreenCollectionView* _collectionView;
	NSArray* _usersStoryIdens;
	NSMutableDictionary* _currentStoryIndexByPageIndex;
	NSDate* _collectionViewTouchesBeganTime;
	int _currentPageIndex;
	UITapGestureRecognizer* _storyViewTapGestureRecognizer;
	int _initialPageIndex;
	NSCache* _videoPlayers;
	AppVolumeIndicatorView* _appVolumeIndicatorView;
	NSTimer* _storyControlsHideTimer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) NSString* fromSource;
@property(retain, nonatomic) id transitionManager;
@property(retain, nonatomic) NSTimer* storyControlsHideTimer;
@property(retain, nonatomic) AppVolumeIndicatorView* appVolumeIndicatorView;
@property(retain, nonatomic) NSCache* videoPlayers;
@property(assign, nonatomic) BOOL userDidChangedVolume;
@property(assign, nonatomic) int initialPageIndex;
@property(retain, nonatomic) UITapGestureRecognizer* storyViewTapGestureRecognizer;
@property(assign, nonatomic) int currentPageIndex;
@property(retain, nonatomic) NSDate* collectionViewTouchesBeganTime;
@property(retain, nonatomic) NSMutableDictionary* currentStoryIndexByPageIndex;
@property(copy, nonatomic) NSArray* usersStoryIdens;
@property(retain, nonatomic) StoryFullscreenCollectionView* collectionView;
-(void).cxx_destruct;
-(id)storyFullscreenViewController:(id)controller provideVideoPlayerForVideoURL:(id)videoURL;
-(BOOL)canBeginPanGestureDismissTransition;
-(id)viewForDismissTransitionPanGesture;
-(id)viewForDismissTransitionAnimation;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)storyFullscreenViewControllerDidStartPlayingCurrentStory:(id)storyFullscreenViewController;
-(void)storyFullscreenViewController:(id)controller didDeleteCurrentStory:(id)story;
-(void)storyFullscreenViewControllerDidEndShowingSendMessagePopup:(id)storyFullscreenViewController;
-(void)storyFullscreenViewControllerWillShowSendMessagePopup:(id)storyFullscreenViewController;
-(void)storyFullscreenViewControllerDidHideCurrentStorySource:(id)storyFullscreenViewController;
-(void)storyFullscreenViewControllerDidPlayCurrentStoryToEnd:(id)storyFullscreenViewController;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)handleBackAreaButtonTouchesDown;
-(void)handleBackAreaButtonTap;
-(void)handleCollectionViewTouchesEnded;
-(void)handleCollectionViewTouchesBegan;
-(void)handleStoryViewTap;
-(void)handleApplicationDidBecomeActiveNotification:(id)handleApplication;
-(void)handleApplicationWillResignActiveNotification:(id)handleApplication;
-(id)currentStoriesSource;
-(void)hideControlsTimerFire:(id)fire;
-(id)videoPlayerForURL:(id)url;
-(void)preloadStory:(id)story;
-(void)preloadNextStory;
-(id)createStoryVideoPlayerForURL:(id)url;
-(void)tearDownAudioSessionIfNeededAndCustomVolumeIndicator;
-(void)setupCustomVolumeIndicator;
-(void)setupAudioSession;
-(void)handleVolumeButtonPress;
-(void)didEndScrollOrDragOrDecelerate;
-(void)scrollAnimatedToPageAtIndex:(int)index;
-(void)unlockAllInteractions;
-(void)lockAllInteractions;
-(id)currentViewController;
-(void)resetTimerOfAllPagesExceptCurrent;
-(void)playCurrentPage;
-(void)pauseAll;
-(id)viewControllerAtPageIndex:(int)pageIndex;
-(id)nextUnseenStoryOrFirstStartingAtPage:(int)page startStoryIndex:(int)index;
-(void)moveToPreviousStory;
-(void)moveToNextStoryShouldMoveToNextSource:(BOOL)moveToNextStory;
-(void)moveToNextStory;
-(void)moveToNextStorySource;
-(void)updateCurrentPageIndexPathBasedOnContentOffset;
-(void)setupStoryViewControllerCell:(id)cell forPageIndex:(int)pageIndex;
-(id)collectionViewIndexPathForPageIndex:(int)pageIndex;
-(BOOL)VKMControllerModalOnly;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarUpdateAnimation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMain:(id)main usersStoryIdens:(id)idens startFromPage:(int)page;
-(id)initWithMain:(id)main storyIden:(id)iden;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenCollectionViewFlowLayout : XXUnknownSuperclass {
}
-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)boundsChange;
-(id)layoutAttributesForElementsInRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface ViewControllerCollectionViewCell : XXUnknownSuperclass {
	UIViewController* _viewController;
}
@property(readonly, assign, nonatomic) UIViewController* viewController;
+(id)instatiateViewController;
-(void).cxx_destruct;
-(void)removeViewControllerFromParentViewController;
-(void)addViewControllerToParentViewController:(id)parentViewController;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenViewControllerCell : ViewControllerCollectionViewCell {
}
@property(readonly, assign, nonatomic) StoryFullscreenViewController* viewController;
+(id)instatiateViewController;
@end

__attribute__((visibility("hidden")))
@interface VKCollectionView : XXUnknownSuperclass {
	BOOL _cancelTouchesForButtons;
	NSMutableArray* _classesToCancelTouches;
}
@property(assign, nonatomic) BOOL cancelTouchesForButtons;
@property(retain, nonatomic) NSMutableArray* classesToCancelTouches;
-(void).cxx_destruct;
-(BOOL)touchesShouldCancelInContentView:(id)touches;
-(void)addClassToCancelTouches:(Class)cancelTouches;
@end

__attribute__((visibility("hidden")))
@interface StoryFullscreenCollectionView : VKCollectionView {
	id _touchesBeganHandler;
	id _touchesCancelledHandler;
	id _touchesEndedHandler;
}
@property(copy, nonatomic) id touchesEndedHandler;
@property(copy, nonatomic) id touchesCancelledHandler;
@property(copy, nonatomic) id touchesBeganHandler;
-(void).cxx_destruct;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKGiftsContext : XXUnknownSuperclass {
	NSNumber* _owner_id;
	NSNumber* _chat_id;
	GiftsStatContext* _stat_context;
}
@property(retain, nonatomic) GiftsStatContext* stat_context;
@property(retain, nonatomic) NSNumber* chat_id;
@property(retain, nonatomic) NSNumber* owner_id;
+(id)withDialogId:(id)dialogId;
+(id)withChatId:(id)chatId;
+(id)withUserId:(id)userId;
-(void).cxx_destruct;
-(id)withStatContext:(id)statContext;
@end

__attribute__((visibility("hidden")))
@interface VKGiftsCatalogSection : VKDomain {
	NSString* _title;
	NSString* _name;
	NSArray* _catalogGifts;
	Index* _index;
	VKGiftsContext* _context;
}
@property(retain, nonatomic) VKGiftsContext* context;
@property(retain, nonatomic) Index* index;
@property(retain, nonatomic) NSArray* catalogGifts;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(Class)cellClass;
-(Class)giftItemClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGiftsCatalogSingleSection : VKGiftsCatalogSection {
}
-(Class)giftItemClass;
@end

__attribute__((visibility("hidden")))
@interface VKMCollectionCell : XXUnknownSuperclass <IVKMCell> {
	id<VKMNavDelegate> _delegate;
	VKRenderable* _domain;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VKMNavDelegate> delegate;
@property(retain, nonatomic) VKRenderable* domain;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)thumbnailView:(id)view selected:(id)selected;
-(void)refresh;
-(BOOL)selected;
-(void)detach;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)addOpaque:(id)opaque;
-(void)prepareForReuse;
@end

__attribute__((visibility("hidden")))
@interface VKCurrency : VKRenderable {
	NSNumber* _id;
	NSString* _name;
}
@property(copy, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* id;
+(id)currencyWithID:(id)anId name:(id)name;
+(void)load;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKMScrollViewController : VKMController <UIScrollViewDelegate> {
	BOOL fullscreenEnabled;
	float baseOffset;
	float* baseOffsetRef;
	float chromeHeight;
	BOOL tableLoaded;
	Index* _index;
	UIRefreshControl* _rptr;
	LoadingFooterView* _footer;
	TeaserView* _teaserView;
	ScrollSpeed* _speed;
	UINavigationController* _assignedNavigationController;
	UINavigationBar* _assignedNavigationBar;
	CGPoint _contentOffset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) UIScrollView* scrollView;
@property(readonly, assign, nonatomic) CGPoint contentOffset;
@property(assign, nonatomic) UINavigationController* assignedNavigationController;
@property(readonly, retain, nonatomic) ScrollSpeed* speed;
@property(retain, nonatomic) TeaserView* teaserView;
@property(retain, nonatomic) LoadingFooterView* footer;
@property(retain, nonatomic) UIRefreshControl* rptr;
@property(retain, nonatomic) Index* index;
@property(assign, nonatomic) UINavigationBar* assignedNavigationBar;
-(void).cxx_destruct;
-(void)VKMScrollInvalidateTeaserView;
-(void)VKMScrollViewUpdateTeaserView;
-(id)VKMScrollViewCreateTeaserView;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)VKMScrollViewUpdateToolbarViewInsets;
-(void)VKMScrollViewUpdateTeaserViewInsets;
-(void)updateScrollChromeAnimated;
-(void)updateScrollChrome;
-(void)VKMControllerChromeInsetsApply;
-(CGRect)VKMControllerViewport;
-(id)VKMScrollViewBackgroundColor;
-(void)VKMScrollViewSetBackgroundView:(id)view;
-(id)VKMScrollViewBackgroundView;
-(BOOL)VKMScrollViewDisablePTR;
-(void)VKMScrollViewReloadData;
-(void)VKMScrollViewReset;
-(void)VKMScrollViewSetFooter:(id)footer;
-(float)VKMScrollViewChromeHeight;
-(float*)VKMScrollViewChromeBaseOffsetRef;
-(void)VKMScrollViewChromeOffset:(float)offset;
-(void)VKMScrollViewFullscreenUpdated:(BOOL)updated;
-(void)VKMScrollViewFullscreenUpdated;
-(BOOL)VKMScrollViewFullscreenEnabled;
-(void)VKMScrollViewHasLoaded;
-(void)VKMScrollViewRefreshLoading;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(id)VKMScrollView;
-(void)modelLoadingChanged:(id)changed;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMCollectionView : XXUnknownSuperclass {
}
-(void)setContentInset:(UIEdgeInsets)inset;
@end

__attribute__((visibility("hidden")))
@interface VKMCollectionController : VKMScrollViewController <UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout> {
	BOOL _useLayoutItemSize;
	UICollectionView* _collectionView;
	UICollectionViewLayout* _customLayout;
	NSMutableSet* _collectionViewCellClasses;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UICollectionViewLayout* customLayout;
@property(assign, nonatomic) BOOL useLayoutItemSize;
@property(retain, nonatomic) LoadingModel* model;
@property(retain, nonatomic) NSMutableSet* collectionViewCellClasses;
@property(retain, nonatomic) UICollectionView* collectionView;
-(void).cxx_destruct;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(void)VKMScrollViewSetFooter:(id)footer;
-(id)VKMScrollView;
-(void)VKMScrollViewRefreshLoading;
-(void)VKMCollectionUpdatedIndex;
-(id)VKMCollectionCreateLayout;
-(void)model:(id)model updated:(id)updated;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithMain:(id)main andModel:(id)model;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKMCollectionReusableContainerView : XXUnknownSuperclass {
}
-(void)setView:(id)view;
@end

__attribute__((visibility("hidden")))
@interface GiftsCategoryModel : ItemModel {
	VKGiftsContext* _giftContext;
	NSString* _categoryName;
}
@property(retain, nonatomic) VKGiftsContext* giftContext;
@property(retain, nonatomic) VKGiftsCatalogSection* item;
@property(retain, nonatomic) NSString* categoryName;
-(void).cxx_destruct;
-(id)process:(id)process context:(id)context;
-(id)request;
-(id)withContext:(id)context;
-(id)withName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface PostInteractionContext : XXUnknownSuperclass <NSCopying> {
	NSURL* _url;
	StatsRef* _ref;
	NSString* _ad_data;
}
@property(copy, nonatomic) NSString* ad_data;
@property(copy, nonatomic) StatsRef* ref;
@property(copy, nonatomic) NSURL* url;
+(id)ref:(id)ref;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface GiftsCatalogItemCell : VKMCollectionCell {
	VKMImageView* _itemImage;
	UILabel* _itemTitle;
}
@property(retain, nonatomic) VKGiftsCatalogItem* domain;
@property(readonly, assign, nonatomic) UILabel* itemTitle;
@property(readonly, assign, nonatomic) VKMImageView* itemImage;
+(void)prerender:(id)prerender;
+(float)cellRenderHeight;
+(void)initialize;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MyStoryCell : SourceCell {
	UILabel* _subtitleLabel;
}
@property(retain, nonatomic) UILabel* subtitleLabel;
+(CGSize)sizeForSubtitleWithText:(id)text;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MyStorySource : VKUser {
	VKUser* _me;
}
@property(readonly, assign, nonatomic) VKUser* me;
-(void).cxx_destruct;
-(id)iden;
-(id)uid;
-(Class)cellClass;
-(id)photo;
-(id)last_name;
-(id)first_name;
-(id)initWithMe:(id)me;
@end

__attribute__((visibility("hidden")))
@interface TitleView : XXUnknownSuperclass {
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
}
@property(retain, nonatomic) UILabel* subtitleLabel;
@property(retain, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(void)updateIsMyStorySelected:(BOOL)selected selectedFriends:(id)friends;
-(id)subtitleForIsMyStorySelected:(BOOL)isMyStorySelected selectedFriends:(id)friends;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StoryEditorSendViewController : UsersSelectionController {
	StoryStatContext* _storyStatsContext;
	id<StoryEditorSendViewControllerDelegate> _delegate;
	id<StoryEditorRenderingTask> _renderingTask;
	VKMask* _mask;
	MyStorySource* _myStorySource;
	UIButton* _sendButton;
	VKMGradientView* _sendButtonGradientViewBackground;
	TitleView* _titleView;
	NSArray* _selectedFriendsInOrder;
}
@property(retain, nonatomic) VKMask* mask;
@property(retain, nonatomic) id<StoryEditorRenderingTask> renderingTask;
@property(assign, nonatomic) __weak id<StoryEditorSendViewControllerDelegate> delegate;
@property(retain, nonatomic) StoryStatContext* storyStatsContext;
@property(retain, nonatomic) NSArray* selectedFriendsInOrder;
@property(retain, nonatomic) TitleView* titleView;
@property(retain, nonatomic) VKMGradientView* sendButtonGradientViewBackground;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) MyStorySource* myStorySource;
-(void).cxx_destruct;
-(int)VKMLiveSearchSkipSections;
-(void)handleBackButtonTap;
-(void)handleSendButtonAction;
-(void)updateMulti;
-(void)updateSelectedFriendsInOrderWithNewSelectedFriends:(id)newSelectedFriends;
-(void)updateSendButtonEnabledState;
-(id)VKMScrollViewIndexFromModel:(id)model;
-(BOOL)prefersStatusBarHidden;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(int)VKMNavigationBarStyle;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface GiftsCatalogSectionCell : VKMCell <UICollectionViewDelegateFlowLayout, UICollectionViewDelegate, UICollectionViewDataSource> {
	UILabel* _titleLabel;
	UICollectionView* _collectionView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKGiftsCatalogSection* domain;
@property(retain, nonatomic) UICollectionView* collectionView;
@property(retain, nonatomic) UILabel* titleLabel;
+(void)prerender:(id)prerender;
+(void)initialize;
-(void).cxx_destruct;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(void)showMore:(id)more;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface GiftsCategoryItemCell : GiftsCatalogItemCell {
}
+(void)prerender:(id)prerender;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface VKGiftListObject : VKDomain <VKSourceStatus> {
	VKGift* _gift;
	id<VKSource> _source;
	NSString* _message;
	NSString* _gift_hash;
	unsigned _date;
	int _privacy;
	NSNumber* _from_id;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int privacy;
@property(assign, nonatomic) unsigned date;
@property(retain, nonatomic) NSString* gift_hash;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) id<VKSource> source;
@property(retain, nonatomic) VKGift* gift;
@property(retain, nonatomic) NSNumber* from_id;
+(id)objectFromSendAction:(id)sendAction profile:(id)profile;
-(void).cxx_destruct;
-(int)statusMask;
-(id)statusForSource:(id)source;
-(id)renderWithSources:(id)sources;
-(Class)rendererClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKGiftEmptyUser : VKUser {
}
-(id)name;
@end

__attribute__((visibility("hidden")))
@interface RecommendedFriendsFeedItem : Component5 {
}
+(id)friends:(id)friends;
@end

__attribute__((visibility("hidden")))
@interface GiftListObjectRenderer : Renderer {
}
@property(retain, nonatomic) VKGiftListObject* domain;
+(id)sendGiftButtonTarget:(id)target action:(SEL)action;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)sendGiftResponse:(id)response;
-(void)setupCell:(id)cell;
@end

__attribute__((visibility("hidden")))
@interface GiftSendButtonRenderer : Renderer {
}
@property(retain, nonatomic) GiftSendButtonRenderable* domain;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)t;
+(id)rendererElements;
-(void)setupCell:(id)cell;
-(void)sendGift:(id)gift;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerFullScreenTransitionManager : XXUnknownSuperclass <UIGestureRecognizerDelegate, UIViewControllerTransitioningDelegate> {
	id<VKVideoPlayerHolder, VideoPlayerToFullScreenTransitionDelegate> _playerProvider;
	UIViewController<PanGestureDrivenDismissableTransitionViewController>* _panGestureDismissableViewController;
	UIPanGestureRecognizer* _dismissTransitionPanGestureRecognizer;
	VideoPlayerFromFullScreenTransitionAnimationController* _dismissTransitionAnimationController;
	VKMScrollViewController* _initiallyPresentingScrollViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak VKMScrollViewController* initiallyPresentingScrollViewController;
@property(retain, nonatomic) VideoPlayerFromFullScreenTransitionAnimationController* dismissTransitionAnimationController;
@property(retain, nonatomic) UIPanGestureRecognizer* dismissTransitionPanGestureRecognizer;
@property(assign, nonatomic) __weak UIViewController<PanGestureDrivenDismissableTransitionViewController>* panGestureDismissableViewController;
@property(assign, nonatomic) __weak id<VKVideoPlayerHolder, VideoPlayerToFullScreenTransitionDelegate> playerProvider;
-(void).cxx_destruct;
-(void)cleanUpDismissTransitionPanGestureRecognizer;
-(void)cleanUpAfterInteractiveDismissTransitionCompletedFinished:(BOOL)finished;
-(void)finishInteractiveDismissTransition;
-(void)cancelInteractiveDismissTransition;
-(void)beginInteractiveDismissTransition;
-(float)dismissInteractiveTransitionProgressFromPanGestureRecognizer:(id)panGestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)handleDismissTransitionPanGesture:(id)gesture;
-(void)setupViewControllerForDismissTransitionIfPossible:(id)dismissTransitionIfPossible;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(void)dealloc;
-(id)initWithPlayerProvider:(id)playerProvider navDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerToFullScreenTransitionAnimationController : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	id _transitionCompletion;
	id<VKVideoPlayerHolder, VideoPlayerToFullScreenTransitionDelegate> _playerProvider;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id transitionCompletion;
@property(assign, nonatomic) __weak id<VKVideoPlayerHolder, VideoPlayerToFullScreenTransitionDelegate> playerProvider;
-(void).cxx_destruct;
-(void)performFallbackTransition:(id)transition;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(id)initWithPlayerProvider:(id)playerProvider;
@end

__attribute__((visibility("hidden")))
@interface VideoPlayerFromFullScreenTransitionAnimationController : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning, UIViewControllerInteractiveTransitioning> {
	BOOL _interactive;
	BOOL _isDirectionUp;
	BOOL _useFallbackAnimation;
	BOOL _finishTransitionAsSoonAsStarted;
	BOOL _cancelTransitionAsSoonAsStarted;
	float _percentComplete;
	UIView* _backdrop;
	UIView* _initialVideoViewSuperview;
	int _initialVideoViewSubviewIndex;
	id<VKVideoPlayerHolder, VideoPlayerFromFullScreenTransitionVideoViewDestination> _videoViewDestination;
	id<UIViewControllerContextTransitioning> _interactiveTransitionContext;
	VKMScrollViewController* _destinationScrollViewController;
	id _transitionCompletionBlock;
	double _transitionDuration;
	CGRect _initialVideoViewFrame;
	CGRect _initialVideoViewFrameInContainerViewCoordinateSystem;
}
@property(readonly, assign, nonatomic) BOOL wantsInteractiveStart;
@property(readonly, assign, nonatomic) int completionCurve;
@property(readonly, assign, nonatomic) float completionSpeed;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL isDirectionUp;
@property(readonly, assign, nonatomic) BOOL interactive;
@property(copy, nonatomic) id transitionCompletionBlock;
@property(assign, nonatomic) BOOL cancelTransitionAsSoonAsStarted;
@property(assign, nonatomic) BOOL finishTransitionAsSoonAsStarted;
@property(assign, nonatomic) __weak VKMScrollViewController* destinationScrollViewController;
@property(retain, nonatomic) id<UIViewControllerContextTransitioning> interactiveTransitionContext;
@property(assign, nonatomic) __weak id<VKVideoPlayerHolder, VideoPlayerFromFullScreenTransitionVideoViewDestination> videoViewDestination;
@property(assign, nonatomic) CGRect initialVideoViewFrameInContainerViewCoordinateSystem;
@property(assign, nonatomic) CGRect initialVideoViewFrame;
@property(assign, nonatomic) int initialVideoViewSubviewIndex;
@property(assign, nonatomic) __weak UIView* initialVideoViewSuperview;
@property(retain, nonatomic) UIView* backdrop;
@property(assign, nonatomic) BOOL useFallbackAnimation;
@property(assign, nonatomic) float percentComplete;
@property(assign, nonatomic) double transitionDuration;
-(void).cxx_destruct;
-(id)viewForAnimatingForContext:(id)context;
-(id)toViewControllerForContext:(id)context;
-(id)fromViewControllerForContext:(id)context;
-(id)findVideoViewDestinationForVideo:(id)video inView:(id)view;
-(void)performTransitionWithContext:(id)context completion:(id)completion;
-(void)setupWithTransitionContext:(id)transitionContext;
-(void)finishInteractiveTransitionWithCompletion:(id)completion;
-(void)cancelInteractiveTransitionWithCompletion:(id)completion;
-(void)updateInteractiveTransition:(float)transition;
-(void)startInteractiveTransition:(id)transition;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(id)initWithIsInteractive:(BOOL)isInteractive destinationScrollViewController:(id)controller;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ModelActionDeleteGift : ModelAction {
}
@property(retain, nonatomic) VKGiftListObject* target;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface GiftSendButtonRenderable : VKRenderable {
	NSNumber* _owner_id;
	GiftsStatContext* _stats_context;
}
@property(retain, nonatomic) GiftsStatContext* stats_context;
@property(retain, nonatomic) NSNumber* owner_id;
-(void).cxx_destruct;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface VKLiveVideoGradientView : XXUnknownSuperclass {
}
@property(retain, nonatomic) CAGradientLayer* layer;
+(Class)layerClass;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface GiftsCatalogVotesHint : VKRenderable {
	unsigned _balance;
	MOCTRender* _labelRender;
}
@property(assign, nonatomic) unsigned balance;
@property(retain, nonatomic) MOCTRender* labelRender;
+(id)clearWithBalance:(unsigned)balance;
-(void).cxx_destruct;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface GiftsCatalogVotesHintCell : VKMCell {
	MOCTLabel* _label;
	UIView* _separator;
}
@property(retain, nonatomic) UIView* separator;
@property(retain, nonatomic) MOCTLabel* label;
@property(retain, nonatomic) GiftsCatalogVotesHint* domain;
+(void)prerender:(id)prerender;
+(id)boldAttributes;
+(id)textAttributes;
+(void)initialize;
-(void).cxx_destruct;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface InlineFriendsController : VKMLiveController {
	id<InlineFriendsControllerDelegate> _delegate;
	NSOperationQueue* _searchQueue;
}
@property(assign, nonatomic) __weak id<InlineFriendsControllerDelegate> delegate;
@property(retain, nonatomic) ProfileFriendsModel* model;
@property(retain, nonatomic) NSOperationQueue* searchQueue;
-(void).cxx_destruct;
-(void)filter:(id)filter handler:(id)handler;
-(void)filter:(id)filter;
-(BOOL)route:(id)route;
-(void)VKMTableUpdatedIndex;
-(int)VKMTableSearchMode;
-(void)viewDidLoad;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface GiftsSendModel : ItemModel {
	NSArray* _targetUsers;
	VKStoreProduct* _stickerProduct;
	unsigned _balance;
	VKGiftsCatalogItem* _targetGiftItem;
	VKGiftsContext* _context;
	NSNumber* _stickersId;
}
@property(retain, nonatomic) VKGiftsContext* context;
@property(assign, nonatomic) unsigned balance;
@property(retain, nonatomic) NSNumber* stickersId;
@property(retain, nonatomic) VKStoreProduct* stickerProduct;
@property(retain, nonatomic) NSArray* targetUsers;
@property(retain, nonatomic) VKGiftsCatalogItem* targetGiftItem;
+(id)availableUsersWithData:(id)data owner:(id)owner;
+(id)checkGiftTargetRequestForUsers:(id)users orChat:(id)chat withProductId:(id)productId;
-(void).cxx_destruct;
-(void)handleBalance:(id)balance :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)process:(id)process context:(id)context;
-(id)requestForContext:(id)context;
-(id)withStickersId:(id)stickersId;
-(id)withGiftItem:(id)giftItem;
-(id)withContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface GiftsSendUser : VKUser {
	BOOL _blacklisted;
}
@property(assign, nonatomic) BOOL blacklisted;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface GiftSendItemRenderable : VKRenderable {
	BOOL _isPrivate;
	NSArray* _recipients;
	VKGiftsCatalogItem* _giftItem;
	NSNumber* _guid;
	unsigned _balance;
}
@property(assign, nonatomic) BOOL isPrivate;
@property(assign, nonatomic) unsigned balance;
@property(retain, nonatomic) NSNumber* guid;
@property(retain, nonatomic) VKGiftsCatalogItem* giftItem;
@property(retain, nonatomic) NSArray* recipients;
-(void).cxx_destruct;
-(id)fromModel:(id)model;
-(Class)rendererClass;
@end

__attribute__((visibility("hidden")))
@interface GiftSendItemRenderer : Renderer <TextKitLabelInteractiveDefaultBehaviorDelegate> {
	TextKitLabelInteractiveDefaultBehavior* _textKitLabelDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GiftSendItemRenderable* domain;
@property(retain, nonatomic) TextKitLabelInteractiveDefaultBehavior* textKitLabelDelegate;
+(void)build:(id)build;
+(void)prepareLayout:(id)layout;
+(void)initialize;
+(void)t;
+(id)rendererElements;
-(id)currentNavDelegate;
-(void)actionTap:(id)tap;
-(void)setupCell:(id)cell;
-(id)initWithMain:(id)main view:(id)view context:(int)context;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface PlaceholderTextView : XXUnknownSuperclass <UITextViewDelegate> {
	NSString* _placeholder;
	UILabel* _textPlaceholder;
	id<UITextViewDelegate> _parentDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* placeholder;
@property(assign, nonatomic) __weak id<UITextViewDelegate> parentDelegate;
@property(retain, nonatomic) UILabel* textPlaceholder;
-(void).cxx_destruct;
-(id)forwardingTargetForSelector:(SEL)selector;
-(BOOL)respondsToSelector:(SEL)selector;
-(id)methodSignatureForSelector:(SEL)selector;
-(void)textViewDidChange:(id)textView;
-(void)setFont:(id)font;
-(void)setTextContainerInset:(UIEdgeInsets)inset;
-(void)setDelegate:(id)delegate;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ModelActionSendGift : ModelAction {
	BOOL _isPrivate;
	NSArray* _receivedUsers;
	NSString* _message;
	NSNumber* _guid;
	NSArray* _users;
}
@property(retain, nonatomic) VKGiftsCatalogItem* target;
@property(assign, nonatomic) BOOL isPrivate;
@property(retain, nonatomic) NSArray* receivedUsers;
@property(copy, nonatomic) NSString* message;
@property(retain, nonatomic) NSArray* users;
@property(retain, nonatomic) NSNumber* guid;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionShowsFailureConfirmation;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(id)withPrivacy:(BOOL)privacy;
-(id)withMessage:(id)message;
-(id)withGuid:(id)guid;
-(id)withRecipientUsers:(id)recipientUsers;
@end

__attribute__((visibility("hidden")))
@interface VKVideoUtil : XXUnknownSuperclass {
}
+(id)fetchThumbnailImageForAVAsset:(id)avasset atURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface MasksSectionListModel : ListModel <MasksSectionModelProtocol> {
	NSNumber* _sectionId;
	MasksSectionsLocationInfo* _locationInfo;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MasksSectionsLocationInfo* locationInfo;
@property(retain, nonatomic) NSNumber* sectionId;
-(void).cxx_destruct;
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
@end

__attribute__((visibility("hidden")))
@interface VKAPDocsViewController : DocsController <VKAPTabViewControllerProtocol> {
	id _docUpload;
	unsigned _selectionLimit;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned selectionLimit;
@property(copy, nonatomic) id docUpload;
-(void).cxx_destruct;
-(id)scrollView;
-(void)actionAdd:(id)add;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(BOOL)VKMScrollViewDisablePTR;
-(void)VKMNavigationBarUpdate;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface PaymentsBalanceModel : ItemModel {
	NSMutableArray* _stock;
	int _renderStyle;
}
@property(retain, nonatomic) NSMutableArray* stock;
@property(assign, nonatomic) int renderStyle;
-(void).cxx_destruct;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)withRenderStyle:(int)renderStyle;
@end

__attribute__((visibility("hidden")))
@interface BrushSizeSlider : XXUnknownSuperclass {
	UISlider* _slider;
	Brush* _brush;
	UIView* _brushPreview;
}
@property(retain, nonatomic) Brush* brush;
@property(assign, nonatomic) float maximumValue;
@property(assign, nonatomic) float minimumValue;
@property(assign, nonatomic) float value;
@property(retain, nonatomic) UISlider* slider;
@property(retain, nonatomic) UIView* brushPreview;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKBalanceDetail : VKRenderable {
	unsigned _balance;
	int _style;
	MOCTRender* _labelRender;
}
@property(retain, nonatomic) MOCTRender* labelRender;
@property(assign, nonatomic) int style;
@property(assign, nonatomic) unsigned balance;
-(void).cxx_destruct;
-(Class)cellClass;
-(id)withStyle:(int)style;
-(id)withBalance:(unsigned)balance;
@end

__attribute__((visibility("hidden")))
@interface BalanceDetailCell : VKMCell {
}
@property(retain, nonatomic) VKBalanceDetail* domain;
+(void)prerender:(id)prerender;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface BalanceCompactDetailCell : VKMCell {
	MOCTLabel* _moctLabel;
}
@property(retain, nonatomic) VKBalanceDetail* domain;
@property(retain, nonatomic) MOCTLabel* moctLabel;
+(void)prerender:(id)prerender;
+(id)boldAttributes;
+(id)textAttributes;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ShowcaseCollectionViewFlowLayout : XXUnknownSuperclass {
}
-(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)scrollingVelocity;
@end

__attribute__((visibility("hidden")))
@interface VKConfigurationMigrator : XXUnknownSuperclass {
}
+(BOOL)migrateFromConfiguration:(id)configuration toConfiguration:(id)configuration2 withVersion:(unsigned)version;
@end

__attribute__((visibility("hidden")))
@interface GiftsCatalogResolver : LookupNavResolver {
}
+(id)withNavigation:(id)navigation;
@end

__attribute__((visibility("hidden")))
@interface ModelActionUpdateBalance : ModelAction {
	unsigned _votes;
}
@property(assign, nonatomic) unsigned votes;
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
-(BOOL)disableHUD;
@end

__attribute__((visibility("hidden")))
@interface AppsGalleryCell : VKMCell <UICollectionViewDelegate, UICollectionViewDataSource> {
	Class _applicationCellClass;
	UICollectionView* _gallery;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) AppsListDomain* domain;
@property(readonly, retain, nonatomic) UICollectionViewFlowLayout* layout;
@property(readonly, retain, nonatomic) UICollectionView* gallery;
+(void)prerender:(id)prerender;
+(Class)sizedApplicationCellClass:(Class)aClass;
-(void).cxx_destruct;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)itemAtIndexPath:(id)indexPath;
-(id)applyItem:(id)item routingDelegate:(id)delegate toCell:(id)cell;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)registerApplicationCellClass:(Class)aClass;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AdminInputPanelView : ExtraInputPanelView {
	UIButton* _senderButton;
	UIButton* _replyToButton;
	id<VKSource> _sender;
	id<VKSource> _replyTo;
	NSNumber* _replyToUser;
	NSNumber* _replyCommentId;
	NSString* _replyInitialText;
	UILabel* _fromLabel;
	UILabel* _replyToLabel;
	NSString* _senderName;
	NSString* _replyToTitle;
}
@property(retain, nonatomic) NSString* replyInitialText;
@property(retain, nonatomic) NSNumber* replyCommentId;
@property(retain, nonatomic) NSNumber* replyToUser;
@property(retain, nonatomic) id<VKSource> replyTo;
@property(retain, nonatomic) id<VKSource> sender;
@property(retain, nonatomic) UIButton* replyToButton;
@property(retain, nonatomic) UIButton* senderButton;
@property(retain, nonatomic) NSString* replyToTitle;
@property(retain, nonatomic) NSString* senderName;
@property(retain, nonatomic) UILabel* replyToLabel;
@property(retain, nonatomic) UILabel* fromLabel;
-(void).cxx_destruct;
-(void)twitchSender;
-(void)resetReplyTo;
-(void)showHideAdminPanel:(BOOL)panel;
-(void)updateAdminPanelHidden:(BOOL)hidden;
-(BOOL)adminPanelHidden;
-(void)updateAdminPanel;
-(void)setReplyTo:(id)to nameDat:(id)dat;
-(void)inputEnable:(BOOL)enable;
-(void)layoutSubviews;
-(id)defaultButtonTitleColor;
-(void)setButton:(id)button titleColor:(id)color;
-(void)setupButton:(id)button;
-(void)setupLabel:(id)label;
-(id)initForComments:(BOOL)comments;
@end

__attribute__((visibility("hidden")))
@interface AppsListDomain : VKDomain {
	Class _cellClass;
	Class _applicationCellClass;
	Index* _applications;
	NSString* _title;
	UIColor* _galleryBackgroundColor;
}
@property(readonly, assign, nonatomic) Class applicationCellClass;
@property(readonly, retain, nonatomic) UIColor* galleryBackgroundColor;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) Index* applications;
-(void).cxx_destruct;
-(Class)cellClass;
-(id)domainFilteredWithPredicate:(id)predicate;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AppsListDomainContext : XXUnknownSuperclass {
	BOOL _largeRepresentation;
	NSArray* _requests;
}
@property(readonly, copy, nonatomic) NSArray* requests;
@property(readonly, assign, nonatomic) BOOL largeRepresentation;
+(id)contextWithRequests:(id)requests isLarge:(BOOL)large;
-(void).cxx_destruct;
-(id)initWithRequests:(id)requests isLarge:(BOOL)large;
@end

__attribute__((visibility("hidden")))
@interface SmallAppItemCell : AppItemCell {
	UILabel* _applicationTitle;
}
@property(readonly, retain, nonatomic) UILabel* applicationTitle;
+(float)interitemSpace;
+(UIEdgeInsets)sectionInset;
+(CGSize)cellSize;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)createSubviews;
@end

__attribute__((visibility("hidden")))
@interface AppItemCell : VKMCollectionCell <AppItemCellWithSize> {
	VKPPBadge* _badge;
	VKMImageView* _applicationImage;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKAPIAppWithRequests* domain;
@property(readonly, retain, nonatomic) VKPPBadge* badge;
@property(readonly, retain, nonatomic) VKMImageView* applicationImage;
+(void)prerender:(id)prerender;
+(float)interitemSpace;
+(UIEdgeInsets)sectionInset;
+(CGSize)cellSize;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(id)imageURLStringForApplication:(id)application;
-(XXStruct_UOIMaD)imageType;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(CGRect)applicationImageFrame;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface TitleWithMoreHeader : XXUnknownSuperclass {
	id _moreButtonTapped;
	HighlightableButtonWithDisclosureImage* _moreButton;
}
@property(copy, nonatomic) id moreButtonTapped;
@property(copy, nonatomic) NSString* moreButtonTitle;
@property(copy, nonatomic) NSString* title;
@property(readonly, retain, nonatomic) HighlightableButtonWithDisclosureImage* moreButton;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)buttonImage;
-(void)buttonTapped;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface HighlightableButtonWithDisclosureImage : TouchHighlightButton {
	float _titleImageSpace;
}
@property(assign, nonatomic) float titleImageSpace;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppGenre : VKDomain {
	NSString* _name;
	unsigned _type;
	unsigned _count;
}
@property(readonly, assign, nonatomic) unsigned count;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, copy, nonatomic) NSString* name;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AppsGenresModel : ListModel {
}
+(id)requestForGenres;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
@end

__attribute__((visibility("hidden")))
@interface HighlightSubviewsButton : XXUnknownSuperclass {
}
-(void)setHighlighted:(BOOL)highlighted;
@end

__attribute__((visibility("hidden")))
@interface AppsListModel : ListModel {
	unsigned _filter;
	NSNumber* _genreID;
}
@property(readonly, assign, nonatomic, getter=isByGenre) BOOL byGenre;
@property(copy, nonatomic) NSNumber* genreID;
@property(readonly, assign, nonatomic) unsigned filter;
+(id)requestWithFilter:(unsigned)filter inRange:(NSRange)range ofGenreID:(id)genreID;
+(id)requestWithFilter:(unsigned)filter inRange:(NSRange)range;
+(id)requestWithFilter:(unsigned)filter;
-(void).cxx_destruct;
-(void)handleRemove:(id)remove :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
-(int)defaultPage;
-(id)withGenreID:(id)genreID;
-(id)filtered:(unsigned)filtered;
@end

__attribute__((visibility("hidden")))
@interface VKMaskSection : VKRenderable {
	BOOL _has_new;
	NSNumber* _id;
	NSString* _icon;
	NSString* _name;
}
@property(assign, nonatomic) BOOL has_new;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* icon;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(BOOL)isEqual:(id)equal;
@end

__attribute__((visibility("hidden")))
@interface SectionItemsGroup : XXUnknownSuperclass {
	NSString* _title;
	NSArray* _items;
}
@property(readonly, copy, nonatomic) NSArray* items;
@property(readonly, copy, nonatomic) NSString* title;
+(id)groupWithTitle:(id)title items:(id)items;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title items:(id)items;
@end

__attribute__((visibility("hidden")))
@interface AudioPlaylistAddMusicButtonCell : VKMCell {
}
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AppsBannersGalleryCell : VKMCell <MOScrollPagingMediatorDelegate, UIScrollViewDelegate> {
	MOScrollPagingMediator* _mediator;
	AutopagingGalleryView* _scroller;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) AppsListDomain* domain;
@property(assign, nonatomic, getter=isAutopagingEnabled) BOOL autopagingEnabled;
@property(readonly, retain, nonatomic) AutopagingGalleryView* scroller;
@property(readonly, retain, nonatomic) MOScrollPagingMediator* mediator;
+(CGSize)cellSize;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(void)scrollerTapped:(id)tapped;
-(void)pagingMediator:(id)mediator renderPage:(int)page;
-(void)preparePagesInScroller:(id)scroller fromDomain:(id)domain;
-(void)detach;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(BOOL)pagingMediatorShouldResetForScrollResize:(id)pagingMediator;
-(id)createSubviews;
-(id)createMediatorWithScroller:(id)scroller delegate:(id)delegate;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface SegmentedTableViewHeaderFooterView : XXUnknownSuperclass {
	BOOL _emulateSeparator;
	UISegmentedControl* _segmentedControl;
	NSMutableArray* _descriptors;
	UIView* _customSeparator;
}
@property(assign, nonatomic, getter=isSelectorEnabled) BOOL selectorEnabled;
@property(assign, nonatomic) BOOL emulateSeparator;
@property(readonly, copy, nonatomic) NSArray* sectionDescriptors;
@property(readonly, retain, nonatomic) UIView* customSeparator;
@property(readonly, copy, nonatomic) NSMutableArray* descriptors;
@property(readonly, retain, nonatomic) UISegmentedControl* segmentedControl;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)removeAllSectionDescriptors;
-(void)selectSectionDescriptorAtIndex:(unsigned)index;
-(void)addSectionDescriptors:(id)descriptors;
-(void)segmentToggled:(id)toggled;
-(id)createSubviews;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface SegmentedHeaderFooterViewSectionDescriptor : XXUnknownSuperclass {
	NSString* _title;
	id _action;
}
@property(readonly, copy, nonatomic) id action;
@property(readonly, copy, nonatomic) NSString* title;
+(id)descriptorWithTitle:(id)title action:(id)action;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title action:(id)action;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppLeaderboard : VKDomain {
	BOOL _currentUser;
	unsigned _place;
	NSNumber* _user_id;
	unsigned _value;
	unsigned _type;
	VKUser* _user;
}
@property(retain, nonatomic) VKUser* user;
@property(assign, nonatomic, getter=isCurrentUser) BOOL currentUser;
@property(assign, nonatomic) unsigned type;
@property(assign, nonatomic) unsigned value;
@property(retain, nonatomic) NSNumber* user_id;
@property(assign, nonatomic) unsigned place;
+(unsigned)leaderboardTypeFromString:(id)string;
+(id)stringifyLeaderboardType:(unsigned)type;
+(void)initialize;
-(void).cxx_destruct;
-(Class)cellClass;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAPIAppLeaderboardContext : XXUnknownSuperclass {
	NSNumber* _currentUserID;
	NSDictionary* _usersByIDs;
	unsigned _type;
	id _placeProvider;
}
@property(readonly, copy, nonatomic) id placeProvider;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, copy, nonatomic) NSDictionary* usersByIDs;
@property(readonly, retain, nonatomic) NSNumber* currentUserID;
+(id)contextWithType:(unsigned)type usersByIDs:(id)ids currentUserID:(id)anId placeProvider:(id)provider;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface AppWithActionCell : VKMCell {
	NSString* _actionButtonTitle;
	VKMImageView* _appIcon;
	UILabel* _title;
	UILabel* _details;
	UIButton* _actionButton;
}
@property(copy, nonatomic) NSString* actionButtonTitle;
@property(readonly, retain, nonatomic) VKAPIAppWithActionButton* domain;
@property(readonly, retain, nonatomic) UIButton* actionButton;
@property(readonly, retain, nonatomic) UILabel* details;
@property(readonly, retain, nonatomic) UILabel* title;
@property(readonly, retain, nonatomic) VKMImageView* appIcon;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(void)actionButtonTapped;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface GiftsStatContext : StatContext {
	NSString* _source;
}
@property(copy, nonatomic) NSString* source;
+(id)contextWithStatName:(id)statName source:(id)source;
-(void).cxx_destruct;
-(id)statsEventWithAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface FriendsBDaysController : VKMLiveController {
}
@property(retain, nonatomic) FriendsBDaysModel* model;
-(id)navContext;
@end

__attribute__((visibility("hidden")))
@interface AppLeaderboardCell : VKMCell {
	UIButton* _userNameButton;
	UILabel* _placeLabel;
	UILabel* _pointsCountLabel;
	VKMImageView* _avatarImageView;
}
@property(retain, nonatomic) VKAPIAppLeaderboard* domain;
@property(readonly, retain, nonatomic) VKMImageView* avatarImageView;
@property(readonly, retain, nonatomic) UILabel* pointsCountLabel;
@property(readonly, retain, nonatomic) UILabel* placeLabel;
@property(readonly, retain, nonatomic) UIButton* userNameButton;
+(id)plainNumberFormatter;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)userNameTapped;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AppItemModel : LoadingModel {
	NSNumber* _appID;
	VKDomainWithCustomCellClass* _application;
}
@property(retain, nonatomic) VKDomainWithCustomCellClass* application;
@property(readonly, retain, nonatomic) NSNumber* appID;
-(void).cxx_destruct;
-(id)processActivities:(id)activities;
-(id)processApplications:(id)applications;
-(id)requestForContext:(id)context;
-(id)requestBuilderForContext:(id)context;
-(id)applicationRequestKey;
-(id)applicationRequestForAppID:(id)appID;
-(id)forAppID:(id)appID;
@end

__attribute__((visibility("hidden")))
@interface VKExpandedLabelView : XXUnknownSuperclass {
	BOOL _expanded;
	NSString* _text;
	UILabel* _descriptionLabel;
	UILabel* _expandLabel;
	unsigned _briefLengthBound;
}
@property(copy, nonatomic) NSString* text;
@property(assign, nonatomic, getter=isExpanded) BOOL expanded;
@property(readonly, assign, nonatomic) unsigned briefLengthBound;
@property(retain, nonatomic) UILabel* expandLabel;
@property(readonly, retain, nonatomic) UILabel* descriptionLabel;
+(XXStruct_SIyEID)calculateWithContainerSize:(CGSize)containerSize text:(id)text expanded:(BOOL)expanded;
+(id)ellipsis;
+(BOOL)shouldCutoffText:(id)text maxLen:(unsigned)len expanded:(BOOL)expanded;
+(id)cutoffText:(id)text toLength:(unsigned)length;
+(CGSize)calculateSizeForText:(id)text maxTextLengthBound:(unsigned)bound constrainedToSize:(CGSize)size expanded:(BOOL)expanded;
+(id)expandLabelFont;
+(id)expandLabelCaption;
+(int)descriptionLabelLineBreakMode;
+(id)descriptionLabelFont;
-(void).cxx_destruct;
-(BOOL)shouldCutoff;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)setExpandButtonVisible:(BOOL)visible;
-(void)updateTextDisplay;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame briefTextLengthBound:(unsigned)bound;
@end

__attribute__((visibility("hidden")))
@interface AppInfoCell : VKMCell <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout> {
	TextKitLabelInteractive* _descriptionView;
	UIButton* _expandButton;
	UICollectionView* _gallery;
	NSMutableDictionary* _images;
	PlaceholderImagesGeneratingCache* _placeholderImages;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKAPIAppWithExpandableInfo* domain;
@property(readonly, retain, nonatomic) PlaceholderImagesGeneratingCache* placeholderImages;
@property(readonly, retain, nonatomic) NSString* galleryCellIdentifier;
@property(readonly, retain, nonatomic) NSMutableDictionary* images;
@property(readonly, retain, nonatomic) UICollectionView* gallery;
@property(readonly, retain, nonatomic) UIButton* expandButton;
@property(readonly, retain, nonatomic) TextKitLabelInteractive* descriptionView;
+(void)prerender:(id)prerender;
+(CGSize)maxGallerySize;
+(float)maxAvailableScreenshotHeightFromDomain:(id)domain boundedToSize:(CGSize)size;
+(CGSize)cellSizeForDomain:(id)domain;
+(id)renderedTextForDomain:(id)domain;
-(void).cxx_destruct;
-(id)screenshotAtIndex:(unsigned)index;
-(CGSize)calculateCellSizeForScreenshotSize:(CGSize)screenshotSize;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(id)applyScreenshotAtIndex:(unsigned)index toCell:(id)cell;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)actionExpand:(id)expand;
-(void)layoutSubviews;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface VMSeekingView : XXUnknownSuperclass {
	id<VMSeekingViewDelegate> _delegate;
	UIPanGestureRecognizer* _panGesture;
	float _xAtBeginning;
	float _progressAtBeginning;
}
@property(assign, nonatomic) __weak id<VMSeekingViewDelegate> delegate;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) float progressAtBeginning;
@property(assign, nonatomic) float xAtBeginning;
@property(retain, nonatomic) UIPanGestureRecognizer* panGesture;
-(void).cxx_destruct;
-(float)progressForTouchX:(float)touchX;
-(void)actionPanGesture:(id)gesture;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AppFriendsPlayingCell : VKMCell {
	UILabel* _friendsPlayingLabel;
	NSMutableArray* _avatars;
}
@property(readonly, retain, nonatomic) VKAPIAppWithFriendsPlaying* domain;
@property(readonly, retain, nonatomic) NSMutableArray* avatars;
@property(readonly, retain, nonatomic) UILabel* friendsPlayingLabel;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(id)createSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AppScreenshotCell : XXUnknownSuperclass {
	UIImageView* _imageView;
}
@property(copy, nonatomic) UIImage* image;
@property(readonly, retain, nonatomic) UIImageView* imageView;
-(void).cxx_destruct;
-(void)prepareForReuse;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ModelActionSendGameInvite : ModelAction {
	NSNumber* _friendID;
	NSNumber* _gameID;
	id _completionBlock;
}
@property(readonly, retain, nonatomic) NSNumber* gameID;
@property(readonly, retain, nonatomic) NSNumber* friendID;
@property(readonly, copy, nonatomic) id completionBlock;
+(int)domainType;
+(id)actionToInviteFriend:(id)inviteFriend toPlayGame:(id)playGame completionBlock:(id)block;
-(void).cxx_destruct;
-(BOOL)actionShowsFailureConfirmation;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsPhotoContext : AlbumPhotoFeedContext {
	NSString* _nextFrom;
}
@property(retain, nonatomic) NSString* nextFrom;
-(void).cxx_destruct;
-(id)parsePhotosData:(id)data;
-(void)addPhotos:(id)photos withData:(id)data;
-(id)codeForNextPage;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsPhotoModel : PhotoAlbumListModel {
}
-(void)updateContext:(id)context withLoadedItems:(id)loadedItems andData:(id)data;
-(id)spawnContext:(id)context;
-(id)process:(id)process;
@end

__attribute__((visibility("hidden")))
@interface MessagesAttachmentsAudioController : VKMLiveController {
}
-(id)VKMControllerStatsRef;
-(int)VKMLiveAudioContext;
-(void)actionShowMore:(id)more;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface AppFriendsModel : LoadingModel {
	NSArray* _friendsSorted;
	Index* _friends;
	Index* _online;
	NSNumber* _appID;
}
@property(readonly, retain, nonatomic) NSNumber* appID;
@property(retain, nonatomic) Index* online;
@property(retain, nonatomic) Index* friends;
@property(copy, nonatomic) NSArray* friendsSorted;
+(id)modelForAppID:(id)appID withSession:(id)session;
-(void).cxx_destruct;
-(void)handleSendInvite:(id)invite builder:(id)builder;
-(void)handleFriend:(id)aFriend :(id)arg2;
-(void)removeUser:(id)user :(id)arg2;
-(void)addUser:(id)user :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(id)countKey;
-(id)usersToBeExcludedByID:(id)beExcludedByID;
@end

__attribute__((visibility("hidden")))
@interface AutopagingGalleryView : XXUnknownSuperclass <UIScrollViewDelegate> {
	BOOL _autopagingEnabled;
	NSArray* _imageURLs;
	NSArray* _imageViews;
	NSTimer* _autoscrollTimer;
	AutopagingScrollViewDelegate* _wrappingDelegate;
	PlaceholderImagesGeneratingCache* _placeholderImageCache;
	double _autopagingInterval;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSArray* imageURLs;
@property(assign, nonatomic, getter=isAutopagingEnabled) BOOL autopagingEnabled;
@property(readonly, retain, nonatomic) PlaceholderImagesGeneratingCache* placeholderImageCache;
@property(retain, nonatomic) AutopagingScrollViewDelegate* wrappingDelegate;
@property(readonly, assign, nonatomic) float pageWidth;
@property(readonly, assign, nonatomic) unsigned currentPage;
@property(retain, nonatomic) NSTimer* autoscrollTimer;
@property(readonly, assign, nonatomic) double autopagingInterval;
@property(copy, nonatomic) NSArray* imageViews;
-(void).cxx_destruct;
-(unsigned)itemIndexForPoint:(CGPoint)point;
-(void)loadImageAtPage:(unsigned)page;
-(void)layoutSubviews;
-(id)imageViewAtIndex:(unsigned)index ofSize:(CGSize)size;
-(id)bindURLs:(id)urls toImageViews:(id)imageViews;
-(id)imageViewsWithCurrentNumber:(unsigned)currentNumber requiredNumber:(unsigned)number withSize:(CGSize)size;
-(id)attachFakesToImageViews:(id)imageViews withSize:(CGSize)size;
-(void)setupImages;
-(CGPoint)replacingContentOffsetForPageIndex:(unsigned)pageIndex;
-(CGPoint)contentOffsetForPageIndex:(unsigned)pageIndex;
-(BOOL)scrollToNextItem;
-(BOOL)shouldHaveCarousel;
-(BOOL)shouldAutopage;
-(void)tick:(id)tick;
-(void)stopAutopagingTimer;
-(id)createScheduledTimer;
-(void)startAutopagingTimer;
-(id)delegate;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame autopagingInterval:(double)interval;
@end

__attribute__((visibility("hidden")))
@interface AutopagingScrollViewDelegate : XXUnknownSuperclass <UIScrollViewDelegate> {
	id<UIScrollViewDelegate> _underlyingDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) id<UIScrollViewDelegate> underlyingDelegate;
-(void).cxx_destruct;
-(void)resumeAutopagingIfEnabledWithScrollView:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(id)initWithUnderlyingDelegate:(id)underlyingDelegate;
@end

__attribute__((visibility("hidden")))
@interface ModelActionMarkAppRequestRead : ModelAction {
	NSNumber* _appID;
}
@property(retain, nonatomic) NSNumber* appID;
+(int)domainType;
-(void).cxx_destruct;
-(BOOL)actionShowsFailureConfirmation;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface StreamCollectionController : XXUnknownSuperclass <UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, ModelObserver> {
	BOOL _expanded;
	id<VKMNavDelegate> _delegate;
	ListModel* _model;
	UICollectionView* _collection;
	Class _cellClass;
	ScrollSpeed* _speed;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) ListModel* model;
@property(readonly, assign, nonatomic) __weak id<VKMNavDelegate> delegate;
@property(assign, nonatomic) BOOL expanded;
@property(readonly, retain, nonatomic) ScrollSpeed* speed;
@property(readonly, assign, nonatomic) Class cellClass;
@property(retain, nonatomic) UICollectionView* collection;
+(id)cellClasses;
-(void).cxx_destruct;
-(id)configureCell:(id)cell atIndexPath:(id)indexPath withModelItem:(id)modelItem;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(void)resizeTableWithFactor:(float)factor;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)model:(id)model willStartLoadingWithContext:(id)context;
-(void)modelLoadingChanged:(id)changed;
-(void)model:(id)model updated:(id)updated;
-(void)bindCollectionToCollectionView:(id)collectionView;
-(void)attach:(id)attach;
-(void)dealloc;
-(id)initWithModel:(id)model delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MarketGalleryImageView : VKMImageView {
}
-(void)loader:(id)loader complete:(id)complete;
@end

__attribute__((visibility("hidden")))
@interface BaseMarketGalleryCell : VKMCollectionCell {
	MarketGalleryImageView* _imageView;
	UILabel* _topTitleLabel;
	UILabel* _bottomTitleLabel;
	id<VKImageFilter> _imageFilter;
}
@property(readonly, retain, nonatomic) VKDomainWithCustomCellClass* domain;
@property(readonly, retain, nonatomic) id<VKImageFilter> imageFilter;
@property(readonly, retain, nonatomic) UILabel* bottomTitleLabel;
@property(readonly, retain, nonatomic) UILabel* topTitleLabel;
@property(readonly, retain, nonatomic) MarketGalleryImageView* imageView;
+(CGSize)imageSize;
+(CGSize)cellSizeWithDomain:(id)domain widthConstraint:(float)constraint;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)attachEntity:(id)entity expectedReuse:(double)reuse;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(void)setOpaque:(BOOL)opaque;
-(void)setBackgroundColor:(id)color;
-(void)customizeSubviews;
-(id)createSubviews;
-(id)createImageFilter;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ProductMarketCell : BaseMarketGalleryCell {
}
+(CGSize)imageSize;
+(float)margin;
+(CGSize)cellSizeWithDomain:(id)domain widthConstraint:(float)constraint;
+(id)bottomLabelFont;
+(id)topLabelFont;
-(void)attachEntity:(id)entity expectedReuse:(double)reuse;
-(void)layoutSubviews;
-(unsigned)numberOfLines;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface ProductMarketCellForProfileGallery : ProductMarketCell {
}
+(CGSize)imageSize;
+(id)bottomLabelFont;
-(void)layoutSubviews;
-(unsigned)numberOfLines;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadOperation : ClientBasedUploadOperation <VideoUploadTaskDelegate> {
	id _serverData;
	id _responseData;
	NSURLSessionTask* _thumbTask;
	int _uploadState;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ClientBasedUploadContext<IVideoUploadContext>* context;
@property(assign) int uploadState;
@property(assign, nonatomic) NSURLSessionTask* thumbTask;
@property(retain, nonatomic) id responseData;
@property(retain, nonatomic) id serverData;
-(void).cxx_destruct;
-(void)notifyUploadState:(int)state;
-(id)videoUploadTaskLocalTaskTargetOwnerId:(id)anId;
-(void)videoUploadTask:(id)task totalBytesSent:(long long)sent totalBytesExpected:(long long)expected;
-(void)videoUploadTask:(id)task finishedWithResponse:(id)response;
-(void)videoUploadTask:(id)task didSuspendedWithError:(id)error;
-(void)uploadThumb:(id)thumb;
-(void)cancel;
-(void)phaseUploadServer:(id)server;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadTask : AsyncOperation <NSCoding, NSURLSessionDataDelegate> {
	BOOL _suspended;
	BOOL _infinite;
	id<VideoUploadTaskDelegate> _delegate;
	NSURLSession* _urlSession;
	NSURL* _fileURL;
	NSURL* _uploadURL;
	unsigned _bgTaskIdentifier;
	NSString* _sessionID;
	NSObject<OS_dispatch_queue>* _tasksQueue;
	NSArray* _uploadingTasksInfo;
	NSMutableDictionary* _activeTasks;
	NSObject<OS_dispatch_queue>* _executionQueue;
	NSObject<OS_dispatch_queue>* _readingQueue;
	NSFileHandle* _fileHandle;
	UILocalNotification* _scheduledLocalNotification;
	long long _contentLength;
	long long _bytesSend;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL infinite;
@property(assign, nonatomic) __weak id<VideoUploadTaskDelegate> delegate;
@property(retain, nonatomic) UILocalNotification* scheduledLocalNotification;
@property(retain, nonatomic) NSFileHandle* fileHandle;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* readingQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* executionQueue;
@property(retain, nonatomic) NSMutableDictionary* activeTasks;
@property(retain, nonatomic) NSArray* uploadingTasksInfo;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* tasksQueue;
@property(retain, nonatomic) NSString* sessionID;
@property(assign, nonatomic) unsigned bgTaskIdentifier;
@property(assign, nonatomic) BOOL suspended;
@property(assign, nonatomic) long long bytesSend;
@property(assign, nonatomic) long long contentLength;
@property(readonly, assign, nonatomic) NSURL* uploadURL;
@property(readonly, assign, nonatomic) NSURL* fileURL;
@property(readonly, assign, nonatomic) NSURLSession* urlSession;
+(id)restoredTaskWithData:(id)data;
+(id)taskWithFileURL:(id)fileURL uploadURL:(id)url;
-(void).cxx_destruct;
-(void)finishWithResponse:(id)response;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(BOOL)isEqualFileURL:(id)url uploadURL:(id)url2;
-(void)validateRanges:(id)ranges;
-(void)fillTasks;
-(void)stop;
-(void)suspend;
-(void)resume;
-(void)cancel;
-(void)runAsync;
-(void)cancelLocalNotification;
-(void)appWillTerminate:(id)app;
-(void)appWillEnterForeground:(id)app;
-(void)appDidEnterBackground:(id)app;
-(id)cancelProducingResumeData;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithVideoURL:(id)videoURL uploadURL:(id)url;
-(void)commonInit;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface UploadTaskInfo : XXUnknownSuperclass <NSCoding> {
	NSString* _responseString;
	int _state;
	int _errorsCount;
	NSError* _lastError;
	NSMutableData* _responseData;
	NSData* _requestData;
	NSRange _bytesRange;
	long long _bytesSend;
}
@property(readonly, copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) NSData* requestData;
@property(retain, nonatomic) NSMutableData* responseData;
@property(retain, nonatomic) NSError* lastError;
@property(readonly, copy, nonatomic) NSString* bytesRangeString;
@property(assign, nonatomic) int errorsCount;
@property(assign, nonatomic) long long bytesSend;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) NSRange bytesRange;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface VKMarketCollection : VKDomain <VKAttachment> {
	NSString* _title;
	VKPhoto* _photo;
	unsigned _count;
	unsigned _updatedAt;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned updatedAt;
@property(assign, nonatomic) unsigned count;
@property(retain, nonatomic) VKPhoto* photo;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
-(id)attachmentButtonTitle;
-(id)attachmentIco;
-(id)attachmentImage;
-(id)attachmentStatus:(BOOL)status;
-(id)attachmentTitle;
-(id)attachmentPlaceholder;
@end

__attribute__((visibility("hidden")))
@interface VKMarketCollectionWithGroup : VKDomainWithCustomCellClass {
	VKGroup* _group;
}
@property(readonly, retain, nonatomic) VKGroup* group;
@property(readonly, retain, nonatomic) VKMarketCollection* domain;
+(id)from:(id)from group:(id)group;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VideoAlbumContext : XXUnknownSuperclass {
	BOOL _showAlbumsInfo;
	BOOL _canUploadVideo;
	BOOL _disableVideoUpload;
	VKVideoAlbum* _album;
	VideoAlbumsInfo* _albumsInfo;
}
@property(assign, nonatomic) BOOL disableVideoUpload;
@property(assign, nonatomic) BOOL canUploadVideo;
@property(assign, nonatomic) BOOL showAlbumsInfo;
@property(retain, nonatomic) VideoAlbumsInfo* albumsInfo;
@property(retain, nonatomic) VKVideoAlbum* album;
+(id)contextWithAlbum:(id)album showAlbumsInfo:(BOOL)info loadedInfo:(id)info3;
+(id)contextWithAlbum:(id)album showAlbumsInfo:(BOOL)info;
+(id)contextWithAlbum:(id)album;
-(void).cxx_destruct;
-(id)setupPrimaryIfOwner:(id)owner;
-(id)contextWithAlbum:(id)album;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadObject : VKRenderable {
	VideoUploadEditAttachment* _uploadAttachment;
	VKVideo* _resultVideo;
}
@property(retain, nonatomic) VKVideo* resultVideo;
@property(retain, nonatomic) VideoUploadEditAttachment* uploadAttachment;
+(id)withAttach:(id)attach;
-(void).cxx_destruct;
-(BOOL)isUploadForOwner:(id)owner;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadManager : XXUnknownSuperclass {
	VKSession* _weakSession;
	NSMutableArray* _activeUploadAttachments;
	NSObject<OS_dispatch_queue>* _attachQueue;
	NSOperationQueue* _uploadOperationQueue;
}
@property(retain, nonatomic) NSOperationQueue* uploadOperationQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* attachQueue;
@property(retain, nonatomic) NSMutableArray* activeUploadAttachments;
@property(assign, nonatomic) __weak VKSession* weakSession;
-(void).cxx_destruct;
-(id)actionContext;
-(void)finishUpload:(id)upload;
-(void)loadResultVideoFor:(id)aFor;
-(id)activeUploadsFor:(id)aFor;
-(id)activeUploads;
-(void)unsubscribeFromUpload:(id)upload;
-(void)subscribeForUpload:(id)upload;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)addNewVideoUploadWithContext:(id)context;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadManagerNewUploadEvent : ModelAction {
}
+(int)domainType;
@end

__attribute__((visibility("hidden")))
@interface VideoUploadManagerFinishedEvent : ModelAction {
}
+(int)domainType;
@end

__attribute__((visibility("hidden")))
@interface AudioListModel : ListModel {
	VKAudioPlaylist* _playlist;
}
@property(retain, nonatomic) VKAudioPlaylist* playlist;
-(void).cxx_destruct;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)request:(int)request count:(int)count;
-(id)process:(id)process;
-(int)defaultPage;
-(id)countKey;
-(id)setupSearch;
-(id)setupPlaylist:(id)playlist;
@end

__attribute__((visibility("hidden")))
@interface CollectionMarketCell : BaseMarketGalleryCell {
}
+(CGSize)collectionMarketBaseSize;
+(CGSize)imageSize;
+(CGSize)cellSizeWithDomain:(id)domain widthConstraint:(float)constraint;
-(void)layoutSubviews;
-(void)attachEntity:(id)entity expectedReuse:(double)reuse;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface HighlightButtonComponentSettings : XXUnknownSuperclass {
	NSAttributedString* _titleString;
	UIImage* _decorationImage;
	UIEdgeInsets _insets;
}
@property(retain, nonatomic) UIImage* decorationImage;
@property(assign, nonatomic) UIEdgeInsets insets;
@property(retain, nonatomic) NSAttributedString* titleString;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ButtonComponent : Component5 {
}
+(id)cellButtonWithText:(id)text tapHandler:(id)handler;
+(id)secondaryButtonWithText:(id)text tapHandler:(id)handler;
+(id)primaryButtonWithText:(id)text tapHandler:(id)handler;
+(id)buttonTitleComponentWithSettings:(id)settings;
@end

__attribute__((visibility("hidden")))
@interface VKAudioQueuePlayerItem : VKDomainDerived {
	AVPlayerItem* _avPlayerItem;
	NSNumber* _lastTimeBeforeFail;
	VKIdentity* _playlistIden;
	int _context;
}
@property(assign, nonatomic) int context;
@property(retain, nonatomic) VKIdentity* playlistIden;
@property(retain, nonatomic) NSNumber* lastTimeBeforeFail;
@property(retain, nonatomic) AVPlayerItem* avPlayerItem;
@property(readonly, assign, nonatomic) VKAudio* domain;
-(void).cxx_destruct;
-(id)description;
-(void)loadAssetSync;
@end

__attribute__((visibility("hidden")))
@interface MarketGallerySectionHeader : XXUnknownSuperclass {
	NSString* _title;
	unsigned _numberOfItems;
	UILabel* _titleLabel;
	UIView* _separator;
}
@property(assign, nonatomic) unsigned numberOfItems;
@property(copy, nonatomic) NSString* title;
@property(readonly, retain, nonatomic) UIView* separator;
@property(readonly, retain, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(id)labelAttributedTextWithTitle:(id)title numberOfItems:(unsigned)items;
-(void)layoutSubviews;
-(void)bindTitleLabelText;
-(void)setOpaque:(BOOL)opaque;
-(void)setBackgroundColor:(id)color;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MarketGallerySectionFooter : XXUnknownSuperclass {
	id _actionBlock;
	UIView* _separator;
	UIView* _bottomSeparator;
	UIButton* _button;
}
@property(copy, nonatomic) id actionBlock;
@property(copy, nonatomic) NSString* title;
@property(readonly, retain, nonatomic) UIButton* button;
@property(readonly, retain, nonatomic) UIView* bottomSeparator;
@property(readonly, retain, nonatomic) UIView* separator;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setOpaque:(BOOL)opaque;
-(void)setBackgroundColor:(id)color;
-(void)buttonTapped;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKMReadUpdate : XXUnknownSuperclass {
	BOOL _incoming;
	NSNumber* _peer_id;
	NSNumber* _mid;
	NSArray* _messages;
}
@property(assign, nonatomic) BOOL incoming;
@property(retain, nonatomic) NSArray* messages;
@property(retain, nonatomic) NSNumber* mid;
@property(retain, nonatomic) NSNumber* peer_id;
+(id)update:(id)update;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface GroupedCollectionViewLayout : XXUnknownSuperclass {
	BOOL _shouldExtendContentSizeBySpacing;
	float _verticalOffset;
	float _intersectionSpacing;
	NSString* _decorationViewClassName;
	id<GroupedCollectionViewLayoutDelegate> _delegate;
}
@property(assign, nonatomic) BOOL shouldExtendContentSizeBySpacing;
@property(assign, nonatomic) float intersectionSpacing;
@property(assign, nonatomic) float verticalOffset;
@property(readonly, assign, nonatomic) __weak id<GroupedCollectionViewLayoutDelegate> delegate;
@property(readonly, copy, nonatomic) NSString* decorationViewClassName;
-(void).cxx_destruct;
-(float)evaluateIntersectionSpacing;
-(BOOL)evaluateShouldExtendContentSizeBySpacing;
-(BOOL)shouldApplyDecoration;
-(id)adjustLayoutAttributes:(id)attributes;
-(id)sectionInsetsProvider;
-(id)decorationAttributesFromSection:(unsigned)section toSection:(unsigned)section2;
-(id)alignedByTopAttributes:(id)attributes;
-(id)layoutAttributesForElementsInRect:(CGRect)rect;
-(id)layoutAttributesForDecorationViewOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)layoutAttributesForSupplementaryViewOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)unadjustedLayoutAttributesForItemAtIndexPath:(id)indexPath;
-(id)layoutAttributesForItemAtIndexPath:(id)indexPath;
-(CGSize)collectionViewContentSize;
-(id)initWithDecorationViewClass:(Class)decorationViewClass delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface VKAPTabsContentViewController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	CGPoint startPos;
	CGPoint minPos;
	CGPoint maxPos;
	BOOL opened;
	BOOL animate;
	float animationDuration;
	BOOL _saveOffset;
	VKAPModel* _model;
	id<VKAPContentViewControllerSizeDelegate> _sizeDelegate;
	UIPanGestureRecognizer* _panGesture;
	unsigned _state;
	CGPoint _closedCenter;
	CGPoint _openedCenter;
	CGPoint _lastScrollPosition;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) CGPoint openedCenter;
@property(assign, nonatomic) CGPoint closedCenter;
@property(assign, nonatomic) BOOL saveOffset;
@property(assign, nonatomic) __weak id<VKAPContentViewControllerSizeDelegate> sizeDelegate;
@property(retain, nonatomic) VKAPModel* model;
@property(assign, nonatomic) CGPoint lastScrollPosition;
@property(retain, nonatomic) UIPanGestureRecognizer* panGesture;
-(void).cxx_destruct;
-(void)hide:(id)hide show:(id)show;
-(void)showVKAPTab:(int)tab;
-(id)currentViewController;
-(void)setupTabsViewControllers;
-(void)viewDidLoad;
-(id)initWithModel:(id)model;
-(float)offsetDelta:(CGPoint)delta;
-(id)currentScrollView;
-(CGPoint)currentContentOffset;
-(float)trueContentOffset;
-(void)saveContentOffset:(float)offset;
-(void)shouldChangeCenter:(CGPoint)center;
-(void)setOpened:(BOOL)opened animated:(BOOL)animated;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)panGestureExecute:(id)execute;
@end

__attribute__((visibility("hidden")))
@interface MarketGalleryDecoration : XXUnknownSuperclass {
}
-(void)didMoveToSuperview;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ButtonWithImage : TouchHighlightButton {
	UIFont* _titleFont;
	float _titleImageSpace;
}
@property(assign, nonatomic) float titleImageSpace;
@property(retain, nonatomic) UIFont* titleFont;
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)didMoveToSuperview;
-(CGSize)intrinsicContentSize;
-(CGRect)imageRectForContentRect:(CGRect)contentRect;
-(CGRect)titleRectForContentRect:(CGRect)contentRect;
-(id)initWithFrame:(CGRect)frame titleImageSpace:(float)space titleFont:(id)font;
@end

__attribute__((visibility("hidden")))
@interface VKGroupMarketInfo : XXUnknownSuperclass {
	BOOL _enabled;
	NSNumber* _contactID;
	VKCurrency* _currency;
	NSNumber* _mainAlbumID;
	PriceRange* _priceRange;
	VKWikiPage* _wiki;
}
@property(readonly, retain, nonatomic) VKWikiPage* wiki;
@property(readonly, retain, nonatomic) PriceRange* priceRange;
@property(readonly, retain, nonatomic) NSNumber* mainAlbumID;
@property(readonly, assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, retain, nonatomic) VKCurrency* currency;
@property(readonly, retain, nonatomic) NSNumber* contactID;
+(id)parse:(id)parse;
-(void).cxx_destruct;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface VKMarketRequest : VKRequest {
}
+(id)sortingParametersFromSorting:(MarketSorting_t)sorting;
+(id)filterParametersFromFilter:(id)filter;
+(id)requestWithOffset:(unsigned)offset count:(unsigned)count albumID:(id)anId owner:(id)owner sorting:(MarketSorting_t)sorting search:(BOOL)search;
+(id)requestWithOffset:(unsigned)offset count:(unsigned)count albumID:(id)anId owner:(id)owner sorting:(MarketSorting_t)sorting;
+(id)buildParametersWithOffset:(unsigned)offset count:(unsigned)count albumID:(id)anId owner:(id)owner sorting:(MarketSorting_t)sorting;
-(id)liftToFilteredRequestWithFilter:(id)filter sort:(MarketSorting_t)sort;
-(id)liftToSearchRequestWithQuery:(id)query;
@end

__attribute__((visibility("hidden")))
@interface EventThrottler : XXUnknownSuperclass {
	NSObject* _currentMarker;
	id<NSObject, NSCopying> _currentKey;
	id<NSObject, NSCopying> _initialKey;
	double _timeout;
}
@property(readonly, copy, nonatomic) id<NSObject, NSCopying> initialKey;
@property(copy, nonatomic) id<NSObject, NSCopying> currentKey;
@property(retain, nonatomic) NSObject* currentMarker;
@property(readonly, assign, nonatomic) double timeout;
-(void).cxx_destruct;
-(id)nextMarker;
-(void)reset;
-(void)throttleForKey:(id)key block:(id)block;
-(id)initWithTimeout:(double)timeout initialKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface AppListController : VKMLiveController {
	BOOL tracked;
}
@property(retain, nonatomic) AppsListModel* model;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface VMRecordingSession : XXUnknownSuperclass <VMSession> {
	BOOL _active;
	id<VMRecordingSessionDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<VMRecordingSessionDelegate> delegate;
@property(assign, nonatomic) BOOL active;
-(void).cxx_destruct;
-(void)deactivate;
-(void)activateProximityAndIdle;
-(void)activateAudioSession;
-(void)activate;
-(void)activateInBackgroundOnCompletion:(id)backgroundOnCompletion;
-(void)notificationUIDeviceProximityStateDidChange:(id)notificationUIDeviceProximityState;
-(void)notificationAVAudioSessionRouteChange:(id)change;
-(void)notificationAVAudioSessionInterruption:(id)interruption;
-(void)notificationUIApplicationWillResignActive:(id)notificationUIApplication;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AppFriendsInviter : XXUnknownSuperclass <PrivacyUsersSelectionControllerDelegate> {
	BOOL _multiselect;
	NSNumber* _appID;
	ActionContext* _actionContext;
	VKMController* _shownController;
	AppFriendsModel* _model;
}
@property(retain, nonatomic) AppFriendsModel* model;
@property(retain, nonatomic) VKMController* shownController;
@property(retain, nonatomic) ActionContext* actionContext;
@property(readonly, assign, nonatomic, getter=isMultiselect) BOOL multiselect;
@property(readonly, retain, nonatomic) NSNumber* appID;
-(void).cxx_destruct;
-(void)usersSelectionController:(id)controller didSelectObjects:(id)objects;
-(void)usersSelectionControllerDidCancel:(id)usersSelectionController;
-(id)selectionControllerWithMainModel:(id)mainModel;
-(void)hideInvitingControllerAnimated:(BOOL)animated;
-(void)pushInController:(id)controller;
-(void)dealloc;
-(id)initWithAppID:(id)appID multiselect:(BOOL)multiselect;
@end

__attribute__((visibility("hidden")))
@interface NewsfeedSettingsModelContext : ModelContext {
	NSNumber* _count_banned;
	NSNumber* _count_lists;
	NSNumber* _count_subscriptions;
	int _feedType;
	NSNumber* _count_stories_banned;
}
@property(retain, nonatomic) NSNumber* count_stories_banned;
@property(assign, nonatomic) int feedType;
@property(retain, nonatomic) NSNumber* count_subscriptions;
@property(retain, nonatomic) NSNumber* count_lists;
@property(retain, nonatomic) NSNumber* count_banned;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface NewsfeedSettingsModel : LoadingModel {
}
@property(retain, nonatomic) NewsfeedSettingsModelContext* lastContext;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
-(void)handleActionReset:(id)reset :(id)arg2;
-(void)registerForEvents:(id)events;
-(id)spawnContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NewsfeedSettingsController : BaseSectionedSettingsController {
	SettingsSection* _feedModeSection;
	UITableViewCell* _recentModeCell;
	UITableViewCell* _topModeCell;
	UITableViewCell* _subscriptionsCell;
	UITableViewCell* _hiddenSourcesCell;
	UITableViewCell* _hiddenStoriesSourcesCell;
	UIActivityIndicatorView* _activityIndicator;
}
@property(retain, nonatomic) NewsfeedSettingsModel* model;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UITableViewCell* hiddenStoriesSourcesCell;
@property(retain, nonatomic) UITableViewCell* hiddenSourcesCell;
@property(retain, nonatomic) UITableViewCell* subscriptionsCell;
@property(retain, nonatomic) UITableViewCell* topModeCell;
@property(retain, nonatomic) UITableViewCell* recentModeCell;
@property(retain, nonatomic) SettingsSection* feedModeSection;
-(void).cxx_destruct;
-(void)model:(id)model updated:(id)updated;
-(void)modelLoadingChanged:(id)changed;
-(void)updateMode:(int)mode;
-(void)configureMode:(int)mode;
-(BOOL)customizeFooterForSection:(unsigned)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)resetSections;
-(void)setCurrentMode:(int)mode;
-(int)currentMode;
-(id)lastContext;
-(BOOL)VKMScrollViewDisablePTR;
-(id)initWithMain:(id)main andModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface MarketSortingOption : XXUnknownSuperclass {
	NSString* _title;
	MarketSorting_t _sorting;
}
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) MarketSorting_t sorting;
+(id)sortingOptionWithKind:(MarketSorting_t)kind title:(id)title;
-(void).cxx_destruct;
-(id)initWithKind:(MarketSorting_t)kind title:(id)title;
@end

__attribute__((visibility("hidden")))
@interface PriceRange : XXUnknownSuperclass {
	unsigned _min;
	unsigned _max;
}
@property(readonly, assign, nonatomic) unsigned max;
@property(readonly, assign, nonatomic) unsigned min;
+(id)priceRangeWithMin:(unsigned)min max:(unsigned)max;
-(id)boundedRangeByStepSize:(unsigned)size allowedRange:(id)range;
-(BOOL)isGreaterOrEqualThan:(id)than;
-(id)constrainedRangeWithRange:(id)range;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)initWithMin:(unsigned)min max:(unsigned)max;
@end

__attribute__((visibility("hidden")))
@interface BaseMarketCollectionsAdapter : XXUnknownSuperclass <MarketCollectionsAdapter> {
	VKMCollectionController<MarketCollectionsControllerDefaults>* _controller;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) GroupedCollectionViewLayout* layout;
@property(readonly, retain, nonatomic) UICollectionView* collectionView;
@property(readonly, retain, nonatomic) MarketModel* model;
@property(readonly, assign, nonatomic) VKMCollectionController<MarketCollectionsControllerDefaults>* controller;
-(CGSize)sizeForItemAtIndexPath:(id)indexPath;
-(id)viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)referenceSizeForHeaderInSection:(int)section;
-(CGSize)referenceSizeForFooterInSection:(int)section;
-(id)itemAtIndexPath:(id)indexPath;
-(BOOL)shouldApplyDecoration;
-(void)configureCell:(id)cell withDomainItem:(id)domainItem;
-(id)cellForItemAtIndexPath:(id)indexPath;
-(id)initWithController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface DefaultModeMarketCollectionsAdapter : BaseMarketCollectionsAdapter {
}
-(void)configureCell:(id)cell withDomainItem:(id)domainItem;
-(id)itemAtIndexPath:(id)indexPath;
-(id)collectionsSectionFooterForSection:(unsigned)section;
-(id)collectionsSectionHeaderForSection:(unsigned)section;
-(CGSize)sizeForItemAtIndexPath:(id)indexPath;
-(id)viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)referenceSizeForFooterInSection:(int)section;
-(CGSize)referenceSizeForHeaderInSection:(int)section;
@end

__attribute__((visibility("hidden")))
@interface MarketModelFilter : XXUnknownSuperclass <NSCopying> {
	PriceRange* _priceRange;
}
@property(readonly, retain, nonatomic) PriceRange* priceRange;
+(id)filterWithPriceRange:(id)priceRange;
-(void).cxx_destruct;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithPriceRange:(id)priceRange;
@end

__attribute__((visibility("hidden")))
@interface MarketModel : ListModel {
	unsigned _numberOfItemsInSections[2];
	BOOL _serverNumberOfCollectionsExceedsNumberInModel;
	BOOL _favorites;
	VKGroup* _group;
	MarketModelFilterOptions* _filterOptions;
	unsigned _currentMode;
	MarketModelState* _savedState;
}
@property(readonly, assign, nonatomic, getter=isInCollection) BOOL inCollection;
@property(readonly, assign, nonatomic, getter=isInFilterMode) BOOL inFilterMode;
@property(readonly, assign, nonatomic, getter=isInSearchMode) BOOL inSearchMode;
@property(readonly, assign, nonatomic, getter=isInDefaultMode) BOOL inDefaultMode;
@property(readonly, assign, nonatomic, getter=isFavorites) BOOL favorites;
@property(retain, nonatomic) MarketModelFilterOptions* filterOptions;
@property(assign, nonatomic) unsigned currentMode;
@property(retain, nonatomic) MarketModelState* savedState;
@property(assign, nonatomic) BOOL serverNumberOfCollectionsExceedsNumberInModel;
@property(readonly, copy, nonatomic) NSArray* collections;
@property(readonly, copy, nonatomic) NSArray* goods;
@property(retain, nonatomic) VKGroup* group;
+(id)with:(id)with filterOptions:(id)options inMode:(unsigned)mode;
-(void).cxx_destruct;
-(BOOL)shouldLoad:(id)load;
-(void)restoreState;
-(void)saveState;
-(void)resetForNewSearchQuery:(id)newSearchQuery filtering:(id)filtering sorting:(MarketSorting_t)sorting;
-(BOOL)switchToMode:(unsigned)mode;
-(unsigned)numberOfItemsInSection:(unsigned)section;
-(id)processCollections:(id)collections;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)process:(id)process;
-(id)listFromData:(id)data;
-(id)collectionsRequest;
-(BOOL)isFilteringContext;
-(BOOL)isSearchingContext;
-(id)requestForCurrentCollection;
-(id)favoritesRequestWithContext:(id)context;
-(id)marketRequestWithContext:(id)context;
-(id)requestForContext:(id)context;
-(id)request:(int)request count:(int)count;
-(id)asFavorites;
@end

__attribute__((visibility("hidden")))
@interface MarketModelState : XXUnknownSuperclass {
	BOOL _showMoreCollectionsVisible;
	Index* _index;
	ListModelContext* _lastContext;
	MarketModelFilterOptions* _filterOptions;
	NSArray* _numberOfItemsInSections;
}
@property(readonly, assign, nonatomic) BOOL showMoreCollectionsVisible;
@property(readonly, copy, nonatomic) NSArray* numberOfItemsInSections;
@property(readonly, copy, nonatomic) MarketModelFilterOptions* filterOptions;
@property(readonly, retain, nonatomic) ListModelContext* lastContext;
@property(readonly, retain, nonatomic) Index* index;
+(id)stateWithIndex:(id)index context:(id)context filterOptions:(id)options numberOfItemsInSections:(id)sections showMoreCollectionsVisible:(BOOL)visible;
-(void).cxx_destruct;
-(id)initWithIndex:(id)index context:(id)context filterOptions:(id)options numberOfItemsInSections:(id)sections showMoreCollectionsVisible:(BOOL)visible;
@end

__attribute__((visibility("hidden")))
@interface MarketSectionItemsGroup : XXUnknownSuperclass {
	NSString* _title;
	unsigned _numberOfItems;
	NSArray* _items;
}
@property(readonly, copy, nonatomic) NSArray* items;
@property(readonly, assign, nonatomic) unsigned numberOfItems;
@property(readonly, copy, nonatomic) NSString* title;
+(id)groupWithTitle:(id)title numberOfItems:(unsigned)items items:(id)items3;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title numberOfItems:(unsigned)items items:(id)items3;
@end

__attribute__((visibility("hidden")))
@interface VKAppInternalNotificationButton : VKRenderable {
	NSString* _title;
	int _type;
	id<VKRemoteAction> _action;
}
@property(retain, nonatomic) id<VKRemoteAction> action;
@property(assign, nonatomic) int type;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAppInternalNotification : VKDomain {
	int _type;
}
@property(assign, nonatomic) int type;
+(id)parse:(id)parse context:(id)context;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface VKAppInternalNotificationNewsfeed : VKAppInternalNotification {
	int _subtype;
	NSString* _title;
	NSString* _message;
	NSString* _users_description;
	NSArray* _sources;
	VKAppInternalNotificationButton* _button;
	VKRemoteImageAssetGroup* _photo;
}
@property(retain, nonatomic) VKRemoteImageAssetGroup* photo;
@property(retain, nonatomic) VKAppInternalNotificationButton* button;
@property(copy, nonatomic) NSArray* sources;
@property(copy, nonatomic) NSString* users_description;
@property(copy, nonatomic) NSString* message;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) int subtype;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface VKAppInternalNotificationBubble : VKAppInternalNotification {
	NSString* _title;
	NSString* _message;
}
@property(copy, nonatomic) NSString* message;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface VKAppInternalNotificationAlert : VKAppInternalNotification {
}
@end

__attribute__((visibility("hidden")))
@interface GraffifiHideAction : ModelActionDelete {
}
+(int)domainType;
-(BOOL)actionResultForData:(id)data context:(id)context;
-(id)actionRequestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface GraffifiRecentModel : LoadingModel {
}
-(id)countString;
-(void)handleHideAction:(id)action :(id)arg2;
-(void)registerForEvents:(id)events;
-(BOOL)isForegroundModelForEventContext:(id)eventContext;
-(id)updatedIndex:(id)index data:(id)data context:(id)context;
-(id)requestForContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ShopProductGalleryCollectionViewComponentState : UICollectionViewComponentState {
	NSArray* _photos;
	MOScrollPagingMediator* _mediator;
}
@property(copy, nonatomic) NSArray* photos;
@property(retain, nonatomic) MOScrollPagingMediator* mediator;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ShopProductGalleryCollectionViewComponent : UICollectionViewComponent {
}
@property(retain, nonatomic) ShopProductGalleryCollectionViewComponentState* state;
+(id)componentWithPhotos:(id)photos mediator:(id)mediator;
+(id)imageComponentWithPhoto:(id)photo size:(CGSize)size tapCallback:(id)callback;
@end

__attribute__((visibility("hidden")))
@interface ShopProductGalleryCollectionViewComponentController : UICollectionViewComponentController {
}
@property(retain, nonatomic) ShopProductGalleryCollectionViewComponent* component;
+(id)createLayout;
@end

__attribute__((visibility("hidden")))
@interface InstantGestureRecognizer : XXUnknownSuperclass {
}
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorDropdownPresentation : XXUnknownSuperclass {
	VKSelector* _selector;
	id<VKSelectorDropdownPresentationDelegate> _delegate;
	UIView* _dimView;
}
@property(assign, nonatomic) __weak id<VKSelectorDropdownPresentationDelegate> delegate;
@property(readonly, assign, nonatomic) VKSelector* selector;
@property(retain, nonatomic) UIView* dimView;
+(id)presentationWithSelector:(id)selector;
-(void).cxx_destruct;
-(void)update;
-(CGRect)preferredFrameForBounds:(CGRect)bounds;
-(float)preferredHeight;
-(void)gestureDimViewTap:(id)tap;
-(void)didDismissAnimated:(BOOL)animated;
-(void)willDismissAnimated:(BOOL)animated;
-(void)didPresentAnimated:(BOOL)animated;
-(void)willPresentAnimated:(BOOL)animated;
-(void)dismissAnimated:(BOOL)animated completion:(id)completion;
-(void)presentFromViewController:(id)viewController animated:(BOOL)animated;
-(id)initWithSelector:(id)selector;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorContainerControllerDropdown : VKSelectorContainerController <VKSelectorDropdownPresentationDelegate> {
	UIViewController* _selectorViewController;
	NavigationButtonView* _navigationButtonView;
	UIView* _dimView;
	VKSelectorDropdownPresentation* _vkSelectorPresentation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKSelectorDropdownPresentation* vkSelectorPresentation;
@property(retain, nonatomic) UIView* dimView;
@property(retain, nonatomic) NavigationButtonView* navigationButtonView;
@property(retain, nonatomic) UIViewController* selectorViewController;
-(void).cxx_destruct;
-(void)selectorDropdownPresentationDidDismiss:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationWillDismiss:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationDidPresent:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationWillPresent:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDidChangeOptions:(id)selector;
-(void)selector:(id)selector didSelectOption:(id)option;
-(void)actionTitleButton:(id)button;
-(void)selectorToggle;
-(void)selectorDismissAnimated:(BOOL)animated;
-(void)setTitleArrowFlipped:(BOOL)flipped;
-(void)setTitle:(id)title;
-(void)viewWillAppear:(BOOL)view;
-(id)initWithMain:(id)main selector:(id)selector;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VKSelectorContainerControllerDropdownWithSettings : VKSelectorContainerControllerDropdown {
}
-(void)actionSettings:(id)settings;
-(void)selectorDropdownPresentationWillDismiss:(id)selectorDropdownPresentation animated:(BOOL)animated;
-(void)selectorDropdownPresentationWillPresent:(id)selectorDropdownPresentation animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface PageControlComponentState : XXUnknownSuperclass {
	MOScrollPagingMediator* _mediator;
	unsigned _numberOfPages;
	UIColor* _pageColor;
	UIColor* _currentPageColor;
}
@property(readonly, assign, nonatomic) UIColor* currentPageColor;
@property(readonly, assign, nonatomic) UIColor* pageColor;
@property(readonly, assign, nonatomic) unsigned numberOfPages;
@property(readonly, assign, nonatomic) MOScrollPagingMediator* mediator;
-(void).cxx_destruct;
-(id)initWithNumberOfPages:(unsigned)pages pageColor:(id)color currentPageColor:(id)color3 mediator:(id)mediator;
@end

__attribute__((visibility("hidden")))
@interface PageControlComponent : Component5 {
}
@property(retain, nonatomic) PageControlComponentState* state;
+(id)componentWithNumberOfPages:(unsigned)pages pageColor:(id)color currentPageColor:(id)color3 mediator:(id)mediator;
-(id)nodeForState:(id)state context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PageControlComponentController : Component5Controller {
}
@property(assign, nonatomic) __weak UIPageControl* view;
@property(retain, nonatomic) PageControlComponent* component;
+(id)createView;
@end

__attribute__((visibility("hidden")))
@interface PriorityButtonComponentState : XXUnknownSuperclass {
	unsigned _priority;
	NSString* _title;
	id<TapableComponentHandler> _handler;
	ActionButtonProperties* _properties;
}
@property(readonly, assign, nonatomic) ActionButtonProperties* properties;
@property(readonly, assign, nonatomic) __weak id<TapableComponentHandler> handler;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) unsigned priority;
+(id)stateWithPriority:(unsigned)priority title:(id)title handler:(id)handler;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface PriorityButtonComponent : Component5 {
}
@property(retain, nonatomic) PriorityButtonComponentState* state;
+(id)buttonWithPriority:(unsigned)priority title:(id)title handler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface PriorityButtonComponentController : Component5Controller {
}
@property(readonly, assign, nonatomic) __weak UIButton* view;
@property(retain, nonatomic) PriorityButtonComponent* component;
+(id)createView;
-(void)buttonTapped;
@end

__attribute__((visibility("hidden")))
@interface PriorityButtonTapContext : XXUnknownSuperclass <TapContext> {
	PriorityButtonComponent* _sender;
	id<VKMNavDelegate> _navDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) __weak id<VKMNavDelegate> navDelegate;
@property(readonly, assign, nonatomic) PriorityButtonComponent* sender;
+(id)contextWithSender:(id)sender navDelegate:(id)delegate;
-(void).cxx_destruct;
-(id)renderContext;
@end

__attribute__((visibility("hidden")))
@interface ShopProductEditAttachment : DomainEditAttachment {
	BOOL _enableDeletion;
}
@property(retain, nonatomic) VKShopProduct* domain;
+(id)attachmentForDomain:(id)domain enableDeletion:(BOOL)deletion;
-(float)domainAttachmentImageRatio;
-(void)renderView:(id)view;
-(id)createViewForStyle:(id)style;
@end

__attribute__((visibility("hidden")))
@interface LabeledThumbnailEditAttachmentView : ThumbnailEditAttachmentView {
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
}
@property(readonly, retain, nonatomic) UILabel* subtitleLabel;
@property(readonly, retain, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(void)renderTitle:(id)title subtitle:(id)subtitle;
-(id)initWithAttachment:(id)attachment style:(id)style enableDeletion:(BOOL)deletion;
@end

__attribute__((visibility("hidden")))
@interface MarketCollectionsModel : ListModel {
	VKGroup* _group;
}
@property(retain, nonatomic) VKGroup* group;
-(void).cxx_destruct;
-(id)process:(id)process;
-(id)request:(int)request count:(int)count;
@end

__attribute__((visibility("hidden")))
@interface MarketSearchingStatusCell : VKMCollectionCell <MarketSizedCell> {
	UILabel* _label;
	UIActivityIndicatorView* _activityIndicator;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKShopProductSearchingDomain* domain;
@property(readonly, retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(readonly, retain, nonatomic) UILabel* label;
+(CGSize)cellSizeWithDomain:(id)domain widthConstraint:(float)constraint;
+(void)prerender:(id)prerender;
-(void).cxx_destruct;
-(void)setOpaque:(BOOL)opaque;
-(void)setBackgroundColor:(id)color;
-(void)switchToSearchingStatus;
-(void)switchToEmptySetWithTitle:(id)title;
-(void)switchToNoProductsStatus;
-(void)switchToNothingFoundStatus;
-(void)setStatus:(unsigned)status;
-(void)attach:(id)attach expectedReuse:(double)reuse;
-(void)prepareForReuse;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ShopProductDetailModel : DetailModel <TapableComponentHandler> {
	ShopProductStatsContext* _statsContext;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned productAvailability;
@property(retain, nonatomic) ShopProductDetailContext* lastContext;
@property(retain, nonatomic, setter=attachStatsContext:) ShopProductStatsContext* statsContext;
+(id)sourceForIdentity:(id)identity;
+(id)shopProductWithIdentity:(id)identity;
+(void)buildItemAndSource:(id)source detail:(id)detail;
-(void).cxx_destruct;
-(id)buildTargetForDialog;
-(void)handleToggleExpand:(id)expand builder:(id)builder;
-(void)registerForEvents:(id)events;
-(void)handleTapWithContext:(id)context;
-(id)tappableWithComponent:(id)component object:(id)object;
-(id)componentForWikiLinkInGroup:(id)group styleSheet:(id)sheet;
-(id)componentForSource:(id)source product:(id)product styleSheet:(id)sheet;
-(id)selectedCellColor;
-(id)descriptionPanelComponentForProduct:(id)product expanded:(BOOL)expanded styleSheet:(id)sheet maxSize:(CGSize)size;
-(id)titleFont;
-(id)priceFont;
-(id)titlePanelComponentForProduct:(id)product;
-(id)textSettingsWithAlignment:(int)alignment multiline:(BOOL)multiline;
-(id)photoPreviewComponentForProduct:(id)product width:(float)width;
-(id)componentForObject:(id)object withContext:(id)context;
-(void)fillActions:(id)actions refill:(id)refill;
-(BOOL)canComment;
-(id)sourceFor:(id)aFor data:(id)data;
-(id)parseItem:(id)item detail:(id)detail;
-(void)activate;
-(id)spawnContext:(id)context;
-(id)shopProduct;
@end

__attribute__((visibility("hidden")))
@interface ShopProductDetailContext : DetailContext {
	BOOL _descriptionExpanded;
}
@property(assign, nonatomic, getter=isDescriptionExpanded) BOOL descriptionExpanded;
-(void)spawnCopy:(id)copy;
@end

__attribute__((visibility("hidden")))
@interface ShopProductDetailContactVendorFooter : XXUnknownSuperclass {
	id<ShopProductDetailContactVendorFooterDelegate> _delegate;
	UIColor* _floatingColor;
	UIColor* _stickingColor;
	UIButton* _contactVendorButton;
	int _headerState;
}
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) UIColor* stickingColor;
@property(retain, nonatomic) UIColor* floatingColor;
@property(assign, nonatomic) __weak id<ShopProductDetailContactVendorFooterDelegate> delegate;
@property(assign, nonatomic) int headerState;
@property(readonly, retain, nonatomic) UIButton* contactVendorButton;
-(void).cxx_destruct;
-(void)setFloating:(BOOL)floating animated:(BOOL)animated;
-(void)applyBackgroundColorForState;
-(void)layoutSubviews;
-(void)contactVendorButtonTapped;
-(id)createSubviews;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface ShopProductDetailViewController : DetailController <ShopProductDetailContactVendorFooterDelegate> {
	float _navigationBarToScrollViewOffset;
	BOOL _initialized;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ShopProductDetailModel* model;
@property(assign, nonatomic, getter=isInitialized) BOOL initialized;
@property(readonly, retain, nonatomic) ShopProductDetailContactVendorFooter* floatingFooter;
-(void)VKMScrollViewRefreshLoading;
-(void)model:(id)model updated:(id)updated;
-(void)VKMControllerPrePhotoFeed;
-(void)notificationKeyboard:(id)keyboard;
-(void)updateInputPanelVisibilityAnimated:(BOOL)animated;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)shopProductDetailContactVendorFooterDidTapContactVendor:(id)shopProductDetailContactVendorFooter;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MarketModelFilterOptions : XXUnknownSuperclass <NSCopying> {
	PriceRange* _allowedPriceRange;
	NSNumber* _albumID;
	VKMarketCollection* _collection;
	NSString* _query;
	VKCurrency* _filterCurrency;
	MarketModelFilter* _filter;
	MarketSorting_t _sort;
}
@property(assign, nonatomic) MarketSorting_t sort;
@property(retain, nonatomic) MarketModelFilter* filter;
@property(copy, nonatomic) NSString* query;
@property(retain, nonatomic) VKMarketCollection* collection;
@property(retain, nonatomic) NSNumber* albumID;
@property(retain, nonatomic) VKCurrency* filterCurrency;
@property(retain, nonatomic) PriceRange* allowedPriceRange;
-(void).cxx_destruct;
-(id)copyWithNewAllowedPriceRange:(id)newAllowedPriceRange currency:(id)currency;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithAllowedPriceRange:(id)allowedPriceRange currency:(id)currency;
@end

__attribute__((visibility("hidden")))
@interface ProfileContentBlockPlaylistCell : XXUnknownSuperclass {
	VKMImageView* _imageView;
	UILabel* _titleLabel;
	UILabel* _artistLabel;
}
@property(retain, nonatomic) UILabel* artistLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) VKMImageView* imageView;
-(void).cxx_destruct;
-(void)attach:(id)attach;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKProfileContentBlockView : XXUnknownSuperclass <UICollectionViewDataSource, UICollectionViewDelegate> {
	id<VKProfileContentBlockViewDelegate> _delegate;
	ProfileContentBlock* _contentBlock;
	UICollectionView* _collectionView;
	UICollectionViewFlowLayout* _layout;
	UILabel* _titleLabel;
	HighlightableButtonWithDisclosureImage* _showAllButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ProfileContentBlock* contentBlock;
@property(assign, nonatomic) __weak id<VKProfileContentBlockViewDelegate> delegate;
@property(retain, nonatomic) HighlightableButtonWithDisclosureImage* showAllButton;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UICollectionViewFlowLayout* layout;
@property(retain, nonatomic) UICollectionView* collectionView;
-(void).cxx_destruct;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view audioCellAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view marketCellAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(id)itemAtIndexPath:(id)indexPath;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)actionShowAll:(id)all;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ProfileContentBlock : XXUnknownSuperclass {
	int _type;
	NSString* _title;
	NSArray* _items;
	unsigned _total;
}
@property(assign, nonatomic) unsigned total;
@property(retain, nonatomic) NSArray* items;
@property(retain, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) int type;
+(id)audio;
+(id)market;
+(id)type:(int)type;
-(void).cxx_destruct;
-(id)initWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface SeparatorWithBorders : XXUnknownSuperclass {
	unsigned _borders;
	UIColor* _borderColor;
}
@property(retain, nonatomic) UIColor* borderColor;
@property(assign, nonatomic) unsigned borders;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ShopProductStatsContext : StatContext {
	unsigned _origin;
}
@property(readonly, assign, nonatomic) unsigned origin;
+(id)contextWithOrigin:(unsigned)origin;
-(id)statsEventForProductID:(id)productID;
-(id)stringifyOrigin;
@end

__attribute__((visibility("hidden")))
@interface VKAPPhotoAlbumsViewController : PhotoAlbumsListController <VKAPTabViewControllerProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)scrollView;
-(BOOL)VKMScrollViewDisablePTR;
-(void)VKMNavigationBarUpdate;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface MarketCollectionsController : VKMCollectionController <GroupedCollectionViewLayoutDelegate, MarketCollectionsControllerDefaults> {
	MarketSorting_t _marketSortingOptions[3];
	BOOL _mustScrollToTopAfterUpdate;
	id<MarketCollectionsAdapter> _modeAdapter;
	unsigned _selectedSortingIndex;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MarketModel* model;
@property(assign, nonatomic) BOOL mustScrollToTopAfterUpdate;
@property(assign, nonatomic) unsigned selectedSortingIndex;
@property(retain, nonatomic) id<MarketCollectionsAdapter> modeAdapter;
-(void).cxx_destruct;
-(void)VKMCollectionUpdatedIndex;
-(void)VKMScrollViewReset;
-(void)VKMScrollViewReloadData;
-(BOOL)openCollectionProductsScreenForCollection:(id)collection;
-(BOOL)openProductDetailScreenForProduct:(id)product;
-(void)showAllButtonTappedForSection:(int)section;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(void)updateModelSort:(MarketSorting_t)sort;
-(void)sortingChanged:(id)changed;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(BOOL)shouldApplyDecorationForLayout:(id)layout;
-(BOOL)shouldExtendContentSizeBySpacingForGroupedCollectionViewLayout:(id)groupedCollectionViewLayout;
-(BOOL)isLandingPage;
-(id)VKMCollectionCreateLayout;
-(float)basePadding;
-(float)defaultHeaderFooterHeight;
-(id)defaultViewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)defaultReferenceSizeForFooterInSection:(int)section;
-(id)defaultCellForItemAtIndexPath:(id)indexPath;
-(void)registerClass:(Class)aClass forViewOfKind:(id)kind;
-(void)searchButtonTapped;
-(int)VKMControllerStatusBarStyle;
-(void)toggleSortingDirectionAtIndex:(unsigned)index;
-(id)titleForSortingOption:(MarketSorting_t)sortingOption;
-(id)segments;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface PreviewPlayerView : XXUnknownSuperclass <VKOpusPlayerDelegate, VMSeekingViewDelegate, VMPlayingSessionDelegate> {
	UIButton* _playButton;
	UIButton* _pauseButton;
	UILabel* _timeLabel;
	VMPreviewSamplesView* _samplesView;
	VMSeekingView* _seekingView;
	VKOpusPlayer* _opusPlayer;
	VMSessionManager* _VMSessionManager;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VMSessionManager* VMSessionManager;
@property(retain, nonatomic) VKOpusPlayer* opusPlayer;
@property(retain, nonatomic) VMSeekingView* seekingView;
@property(retain, nonatomic) VMPreviewSamplesView* samplesView;
@property(retain, nonatomic) UILabel* timeLabel;
@property(retain, nonatomic) UIButton* pauseButton;
@property(retain, nonatomic) UIButton* playButton;
-(void).cxx_destruct;
-(void)seekingView:(id)view endSeekingWithProgress:(float)progress;
-(void)seekingView:(id)view seekingToProgress:(float)progress;
-(float)seekingViewBeganSeekingAndAskingForCurrentProgress:(id)currentProgress;
-(void)playGUI;
-(void)pauseGUI;
-(void)updateTimeLabelWithTime:(double)time;
-(void)playingSessionDidChangeSpeakerToDefault:(id)playingSession;
-(void)playingSessionWillChangeSpeakerToDefault:(id)playingSession;
-(void)playingSessionDidChangeSpeakerToEar:(id)playingSession;
-(void)playingSessionWillChangeSpeakerToEar:(id)playingSession;
-(void)playingSessionExternalAudioDeviceDisconnected:(id)disconnected;
-(void)playingSessionApplicationResignActiveOrInterrupted:(id)interrupted;
-(void)stopIfNeeded;
-(void)opusPlayerChangingCurrentTime:(id)time;
-(void)opusPlayerDidFinishPlaying:(id)opusPlayer;
-(void)stop;
-(void)pause;
-(void)resume;
-(void)play;
-(void)switchPlayPauseState;
-(void)actionTapGesture:(id)gesture;
-(void)actionPauseButton:(id)button;
-(void)actionPlayButton:(id)button;
-(void)notificationVMSessionManagerWillChangeSessionNotification:(id)notificationVMSessionManager;
-(id)initWithFrame:(CGRect)frame opusRecord:(id)record;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface VMPushToTalkPreviewView : XXUnknownSuperclass {
	UIButton* _sendButton;
	UIButton* _cancelButton;
	VKOpusRecord* _opusRecord;
	PreviewPlayerView* _previewPlayerView;
}
@property(retain, nonatomic) VKOpusRecord* opusRecord;
@property(retain, nonatomic) VMSessionManager* VMSessionManager;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) PreviewPlayerView* previewPlayerView;
-(void).cxx_destruct;
-(void)stopIfNeeded;
-(id)initWithFrame:(CGRect)frame opusRecord:(id)record;
@end

__attribute__((visibility("hidden")))
@interface SearchMarketCollectionsController : VKMController <UISearchBarDelegate, MarketSearchBarPanelDelegate> {
	MarketSorting_t _marketSortingOptions[3];
	MarketSearchBarPanelView* _searchBarPanel;
	EventThrottler* _eventThrottler;
	int _trackSearchTextChanges;
	MarketCollectionsController* _collectionsController;
	id<MarketCollectionsAdapter> _modeAdapter;
	MainModel* _mainModel;
	MarketModel* _marketModel;
	id _completionBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) id completionBlock;
@property(readonly, retain, nonatomic) MarketModel* marketModel;
@property(readonly, retain, nonatomic) MainModel* mainModel;
@property(retain, nonatomic) id<MarketCollectionsAdapter> modeAdapter;
@property(readonly, retain, nonatomic) MarketCollectionsController* collectionsController;
@property(assign, nonatomic) int trackSearchTextChanges;
@property(retain, nonatomic) EventThrottler* eventThrottler;
@property(retain, nonatomic) MarketSearchBarPanelView* searchBarPanel;
-(void).cxx_destruct;
-(void)stopSearchingThrottler;
-(void)searchWithQuery:(id)query filter:(id)filter sort:(MarketSorting_t)sort;
-(unsigned)indexOfSort:(unsigned)sort;
-(void)toggleSortingDirectionAtIndex:(unsigned)index;
-(void)scrollToTop;
-(void)marketSearchBarPanel:(id)panel searchingOptionSelected:(id)selected previousSelectedOption:(id)option;
-(void)marketSearchBarPanelCancelButtonClicked:(id)clicked;
-(void)marketSearchBarPanel:(id)panel textDidChange:(id)text;
-(void)installSearchBar;
-(id)titleForSortingOption:(MarketSorting_t)sortingOption;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)installCollectionsController;
-(void)keyboardFrameChanged:(id)changed;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
-(void)attachMainModel:(id)model marketModel:(id)model2 completionBlock:(id)block;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MarketSearchBarPanelView : XXUnknownSuperclass <UISearchBarDelegate> {
	UISearchBar* _searchBar;
	MultitappedSegmentedControl* _searchOptionsSelector;
	UIView* _separator;
	id<MarketSearchBarPanelDelegate> _delegate;
	NSMutableArray* _options;
	unsigned _currentSelectedIndex;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned currentSelectedIndex;
@property(readonly, copy, nonatomic) NSMutableArray* options;
@property(readonly, retain, nonatomic) UIButton* searchBarCancelButton;
@property(readonly, retain, nonatomic) UITextField* searchBarTextField;
@property(readonly, assign, nonatomic) __weak id<MarketSearchBarPanelDelegate> delegate;
@property(readonly, retain, nonatomic) UIView* separator;
@property(readonly, retain, nonatomic) MultitappedSegmentedControl* searchOptionsSelector;
@property(readonly, retain, nonatomic) UISearchBar* searchBar;
-(void).cxx_destruct;
-(BOOL)canResignFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)isFirstResponder;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)endEditing:(BOOL)editing;
-(void)layoutSubviews;
-(float)separatorHeight;
-(void)searchingOptionChanged;
-(id)findSubviewOfView:(id)view byPredicate:(id)predicate;
-(id)createSearchBar;
-(id)createSubviews;
-(id)segmentForOption:(id)option;
-(id)baseBackgroundColor;
-(void)setSearchOption:(id)option atIndex:(unsigned)index;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate searchOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface MarketSearchBarPanelOption : XXUnknownSuperclass {
	BOOL _showImage;
	NSString* _title;
	MarketSorting_t _option;
}
@property(readonly, assign, nonatomic, getter=shouldShowImage) BOOL showImage;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) MarketSorting_t option;
+(id)optionWithValue:(MarketSorting_t)value title:(id)title showImage:(BOOL)image;
-(void).cxx_destruct;
-(id)initWithOption:(MarketSorting_t)option title:(id)title showImage:(BOOL)image;
@end

__attribute__((visibility("hidden")))
@interface AppWidgetTableCell : VKRenderable {
	NSString* _text;
	VKRemoteImageAssetGroup* _icon;
	id<VKRemoteAction> _action;
}
@property(retain, nonatomic) id<VKRemoteAction> action;
@property(retain, nonatomic) VKRemoteImageAssetGroup* icon;
@property(retain, nonatomic) NSString* text;
-(void).cxx_destruct;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AppWidgetTableHeadCell : AppWidgetTableCell {
	float _weight;
	int _alignment;
}
@property(assign, nonatomic) int alignment;
@property(assign, nonatomic) float weight;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface AppWidgetTable : VKRenderable {
	BOOL _hasColumnWeights;
	NSArray* _body;
	NSArray* _head;
}
@property(readonly, assign, nonatomic) BOOL hasColumnWeights;
@property(readonly, assign, nonatomic) unsigned numberOfRows;
@property(readonly, assign, nonatomic) unsigned numberOfColumns;
@property(retain, nonatomic) NSArray* head;
@property(retain, nonatomic) NSArray* body;
-(void).cxx_destruct;
-(float)weightForColumn:(unsigned)column;
-(id)titleForColumn:(unsigned)column;
-(int)textAlignmentForColumn:(unsigned)column;
-(int)textAlignmentForCellAtIndexPath:(id)indexPath;
-(id)textForCellAtIndexPath:(id)indexPath;
-(id)iconForCellAtIndexPath:(id)indexPath;
-(id)actionForCellAtIndexPath:(id)indexPath;
-(id)headCellForColumn:(unsigned)column;
-(id)bodyCellAtIndexPath:(id)indexPath;
-(BOOL)process:(id)process context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface FilteredModeMarketCollectionsAdapter : BaseMarketCollectionsAdapter {
}
-(void)configureCell:(id)cell withDomainItem:(id)domainItem;
-(id)itemAtIndexPath:(id)indexPath;
-(CGSize)sizeForItemAtIndexPath:(id)indexPath;
-(id)viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)referenceSizeForFooterInSection:(int)section;
-(CGSize)referenceSizeForHeaderInSection:(int)section;
@end

__attribute__((visibility("hidden")))
@interface MultitappedSegmentedControl : XXUnknownSuperclass {
	unsigned _selectedIndex;
	UIColor* _normalTitleColor;
	UIColor* _selectedTitleColor;
	NSMutableArray* _controlSegments;
	NSArray* _buttons;
}
@property(retain, nonatomic) UIColor* selectedTitleColor;
@property(retain, nonatomic) UIColor* normalTitleColor;
@property(assign, nonatomic) unsigned selectedIndex;
@property(copy, nonatomic) NSArray* buttons;
@property(readonly, retain, nonatomic) NSMutableArray* controlSegments;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)setSegment:(id)segment atIndex:(unsigned)index;
-(void)layoutSubviews;
-(void)buttonTouchCancelled:(id)cancelled;
-(void)buttonHighlighted:(id)highlighted;
-(void)buttonTapped:(id)tapped;
-(void)setBackgroundColor:(id)color;
-(void)updatePresentation;
-(void)tintColorDidChange;
-(void)customizeView;
-(id)buttonBackgroundColorForSelected:(BOOL)selected;
-(id)createSubviews;
-(void)setSegments:(id)segments;
-(id)initWithFrame:(CGRect)frame segments:(id)segments;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MultitappedSegmentedControlSegment : XXUnknownSuperclass {
	BOOL _multitapped;
	NSString* _title;
	UIImage* _image;
}
@property(readonly, assign, nonatomic, getter=isMultitapped) BOOL multitapped;
@property(readonly, retain, nonatomic) UIImage* image;
@property(readonly, copy, nonatomic) NSString* title;
+(id)segmentWithTitle:(id)title image:(id)image multitapped:(BOOL)multitapped;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title image:(id)image multitapped:(BOOL)multitapped;
@end

__attribute__((visibility("hidden")))
@interface AudioShuffleButton : VKRenderable {
	float _imageInset;
}
@property(assign, nonatomic) float imageInset;
+(id)clear;
-(Class)cellClass;
@end

__attribute__((visibility("hidden")))
@interface CollectionsModeMarketCollectionsAdapter : BaseMarketCollectionsAdapter {
	NSArray* _segments;
}
@property(readonly, copy, nonatomic) NSArray* segments;
-(void).cxx_destruct;
-(void)configureCell:(id)cell withDomainItem:(id)domainItem;
-(id)itemAtIndexPath:(id)indexPath;
-(id)collectionsSectionHeaderForSection:(unsigned)section;
-(CGSize)sizeForItemAtIndexPath:(id)indexPath;
-(id)viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)referenceSizeForFooterInSection:(int)section;
-(CGSize)referenceSizeForHeaderInSection:(int)section;
-(id)initWithController:(id)controller segments:(id)segments;
@end

__attribute__((visibility("hidden")))
@interface MarketGallerySorterSectionHeader : XXUnknownSuperclass {
	MultitappedSegmentedControl* _segmentedControl;
	UIView* _separator;
}
@property(readonly, retain, nonatomic) MultitappedSegmentedControl* segmentedControl;
@property(readonly, retain, nonatomic) UIView* separator;
-(void).cxx_destruct;
-(id)createSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface EmptyStateView : XXUnknownSuperclass {
	BOOL _initializeButtonAsCustom;
	UIImage* _image;
	NSString* _title;
	NSString* _bodyText;
	NSString* _buttonTitle;
	UIColor* _titleColor;
	UIColor* _bodyTextColor;
	UIColor* _buttonTintColor;
	UIFont* _titleFont;
	UIFont* _bodyTextFont;
	UIFont* _buttonTitleFont;
	float _imageMarginBottom;
	float _titleMarginBottom;
	float _bodyTextMarginBottom;
	float _contentPaddingLeftRight;
	float _buttonHeight;
	float _buttonExtraPaddingLeftRight;
	TouchHighlightButton* _button;
	UIImageView* _imageView;
	UILabel* _titleLabel;
	UILabel* _bodyTextLabel;
}
@property(retain, nonatomic) TouchHighlightButton* button;
@property(assign, nonatomic) BOOL initializeButtonAsCustom;
@property(assign, nonatomic) float buttonExtraPaddingLeftRight;
@property(assign, nonatomic) float buttonHeight;
@property(assign, nonatomic) float contentPaddingLeftRight;
@property(assign, nonatomic) float bodyTextMarginBottom;
@property(assign, nonatomic) float titleMarginBottom;
@property(assign, nonatomic) float imageMarginBottom;
@property(retain, nonatomic) UIFont* buttonTitleFont;
@property(retain, nonatomic) UIFont* bodyTextFont;
@property(retain, nonatomic) UIFont* titleFont;
@property(assign, nonatomic) BOOL buttonHidden;
@property(retain, nonatomic) UIColor* buttonTintColor;
@property(retain, nonatomic) UIColor* bodyTextColor;
@property(retain, nonatomic) UIColor* titleColor;
@property(copy, nonatomic) NSString* buttonTitle;
@property(copy, nonatomic) NSString* bodyText;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) UILabel* bodyTextLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIImageView* imageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)setupDefaults;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithImage:(id)image title:(id)title bodyText:(id)text buttonTitle:(id)title4;
@end

__attribute__((visibility("hidden")))
@interface VKAPP2PViewController : VKP2PViewController <VKAPTabViewControllerProtocol> {
	id _success;
	UIButton* _sendButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id success;
@property(retain, nonatomic) UIButton* sendButton;
-(void).cxx_destruct;
-(void)actionTeaserButton:(id)button;
-(BOOL)VKMScrollViewDisablePTR;
-(void)VKMNavigationBarUpdate;
-(UIEdgeInsets)VKMControllerChromeInsetsAdjust:(UIEdgeInsets)adjust;
-(void)VKMScrollViewUpdateTeaserView;
-(BOOL)VKMScrollViewShouldShowTeaser;
-(id)scrollView;
-(void)actionNewP2P:(id)p;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface InternalAppNotificationComponent : Component5 {
}
+(id)componentByAddingCloseButtonComponent:(id)component toComponent:(id)component2;
+(id)closeButtonComponentWithBackground:(BOOL)background styleSheet:(id)sheet handler:(id)handler;
+(id)usersComponentDetailedWithSources:(id)sources message:(id)message;
+(id)usersComponentCompactWithSources:(id)sources message:(id)message;
+(id)avatarsComponentForSources:(id)sources;
+(id)notificationNewsfeedBannerTextComponent:(id)component;
+(id)notificationNewsfeedApplicationTextComponent:(id)component;
+(id)notificationNewsfeedInfoTextComponent:(id)component;
+(id)messageStyle:(id)style;
+(id)notificationNewsfeedBannerTextTitleStyle:(id)style;
+(id)notificationNewsfeedApplicationTextTitleStyle:(id)style;
+(id)notificationNewsfeedInfoTextTitleStyle:(id)style;
+(id)cellButton:(id)button withHandler:(id)handler;
+(id)secondaryButton:(id)button withHandler:(id)handler;
+(id)primaryButton:(id)button withHandler:(id)handler;
+(id)buttonComponent:(id)component withHandler:(id)handler;
+(id)notificationNewsfeedBanner:(id)banner;
+(id)notificationNewsfeedApplication:(id)application;
+(id)notificationNewsfeedInfo:(id)info;
+(id)notificationNewsfeed:(id)newsfeed;
+(id)notification:(id)notification;
@end

__attribute__((visibility("hidden")))
@interface PlaceholderImagesGeneratingCache : XXUnknownSuperclass {
	BOOL _opaque;
	NSCache* _cache;
	UIColor* _color;
}
@property(readonly, assign, nonatomic, getter=isOpaque) BOOL opaque;
@property(readonly, retain, nonatomic) UIColor* color;
@property(readonly, retain, nonatomic) NSCache* cache;
-(void).cxx_destruct;
-(id)storeCachedPlaceholderImage:(id)image forSize:(CGSize)size;
-(id)createPlaceholderImageOfSize:(CGSize)size;
-(id)cachedPlaceholderImageOfSize:(CGSize)size;
-(id)obtainOrCreatePlaceholderImageOfSize:(CGSize)size;
-(BOOL)hasAlphaInColor:(id)color;
-(id)initWithColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface MarketCollectionComponent : Component5 {
}
+(id)marketCollection:(id)collection;
@end

__attribute__((visibility("hidden")))
@interface VKMViewControllerContainer : VKMController {
	UIViewController* _currentViewController;
}
@property(retain, nonatomic) UIViewController* currentViewController;
-(void).cxx_destruct;
-(id)childViewControllerForStatusBarHidden;
-(id)childViewControllerForStatusBarStyle;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)unsubscribeViewController:(id)controller;
-(void)subscribeViewController:(id)controller;
-(void)updateWithViewController:(id)viewController;
-(void)viewDidLoad;
-(void)unsetCurrentViewController:(id)controller;
-(void)setupCurrentViewController:(id)controller;
-(void)removeViewControllerFromHierarchy:(id)hierarchy;
-(void)addCurrentViewControllerToHierarchy:(id)hierarchy;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AboutViewController : BaseSectionedSettingsController {
}
-(void)openVKPage:(id)page;
-(void)openLicenses;
-(void)openUsage;
-(void)openPrivacyPolicy;
-(void)openRateApp;
-(void)openFeedback;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)resetSections;
-(void)viewDidLoad;
-(id)cellTitleForCell:(unsigned)cell;
@end

__attribute__((visibility("hidden")))
@interface LicensesViewController : VKMController {
	NSURL* _licenseFileURL;
	UITextView* _licenseTextView;
}
@property(readonly, retain, nonatomic) UITextView* licenseTextView;
@property(readonly, retain, nonatomic) NSURL* licenseFileURL;
+(id)controllerWithMain:(id)main licenseFileURL:(id)url;
-(void).cxx_destruct;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
@end

@interface VKOpusRecord : XXUnknownSuperclass {
	NSData* _encodedData;
	NSArray* _samplesInt16AbsMaxOfEveryFrame;
	double _duration;
}
@property(readonly, assign, nonatomic) NSArray* samplesInt16AbsMaxOfEveryFrame;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) NSData* encodedData;
-(void).cxx_destruct;
-(id)initWithEncodedData:(id)encodedData duration:(double)duration samplesInt16AbsMaxOfEveryFrame:(id)everyFrame;
@end

@interface VKOpusRecorder : XXUnknownSuperclass {
	char* _feedBuffer;
	unsigned long _feedBufferLen;
	OpaqueAudioQueue* _queue;
	AudioQueueBuffer* _queueBuffers[3];
	VKOpusEncRef _encoder;
	int _state;
	NSMutableData* _encodedData;
	NSMutableArray* _samples;
}
@property(retain, nonatomic) NSMutableArray* samples;
@property(retain, nonatomic) NSMutableData* encodedData;
@property(assign, nonatomic) int state;
-(void).cxx_destruct;
-(float)powerInDB:(BOOL)db peak:(BOOL)peak;
-(BOOL)enableMetering;
-(double)currentTime;
-(id)stop;
-(BOOL)record;
-(BOOL)prepareToRecord;
-(void)cleanup;
-(void)dealloc;
-(id)init;
-(void)writeBuffer:(AudioQueueBuffer*)buffer;
-(void)writeEncodedBufferToData:(const char*)data ofSize:(unsigned long)size;
@end

@interface VKOpusPlayer : XXUnknownSuperclass {
	OpaqueAudioQueue* _queue;
	AudioQueueBuffer* _queueBuffers[3];
	VKOpusDecRef _decoder;
	id<VKOpusPlayerDelegate> _delegate;
	int _state;
	NSString* _path;
	NSData* _data;
}
@property(assign, nonatomic) __weak id<VKOpusPlayerDelegate> delegate;
@property(retain, nonatomic) NSData* data;
@property(copy, nonatomic) NSString* path;
@property(assign, nonatomic) int state;
-(void).cxx_destruct;
-(double)duration;
-(double)currentTime;
-(BOOL)isPaused;
-(BOOL)isPlaying;
-(void)seekToTime:(double)time;
-(BOOL)stopImmediate:(BOOL)immediate;
-(BOOL)stop;
-(BOOL)pause;
-(BOOL)play;
-(void)cleanup;
-(void)dealloc;
-(id)initWithPath:(id)path;
-(id)initWithData:(id)data;
-(id)init;
-(void)notifyDelegateOpusPlayerDidFinishPlaying;
-(void)isRunningChanged;
-(void)notifyDelegateOpusPlayerChangingCurrentTime;
-(void)readBuffer:(AudioQueueBuffer*)buffer;
@end

__attribute__((visibility("hidden")))
@interface DummyThreadObject : XXUnknownSuperclass {
}
+(void)dummyFunc:(id)func;
@end

@interface VKPPAssetData : XXUnknownSuperclass <NSCopying> {
	BOOL _cropForced;
	BOOL _enhance;
	NSString* _filter;
	NSString* _text;
	UIImage* _thumbnail;
	id _enhanceFilters;
	VKPPService* _service;
	NSString* _assetId;
	NSURL* _assetURL;
	NSString* _assetFilename;
	long long _assetFilesize;
	CGAffineTransform _crop;
}
@property(assign, nonatomic) long long assetFilesize;
@property(retain, nonatomic) NSString* assetFilename;
@property(retain, nonatomic) NSURL* assetURL;
@property(retain, nonatomic) NSString* assetId;
@property(retain, nonatomic) VKPPService* service;
@property(retain, nonatomic) id enhanceFilters;
@property(retain, nonatomic) UIImage* thumbnail;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* filter;
@property(assign, nonatomic) BOOL enhance;
@property(assign, nonatomic) BOOL cropForced;
@property(assign, nonatomic) CGAffineTransform crop;
+(BOOL)isEqualFilter:(id)filter toFilter:(id)filter2;
+(id)textShadowImage;
+(id)fontForBounds:(CGSize)bounds;
-(id)copyWithZone:(NSZone*)zone;
-(void)readPHAssetData:(id)data completition:(id)completition;
-(id)requestAssetObject;
-(int)assetEdits;
-(BOOL)isVisualEqualToData:(id)data;
-(id)duplicateEditsOnly;
-(void)dealloc;
-(id)init;
@end

@interface VKPPGroupController : XXUnknownSuperclass <UIImagePickerControllerDelegate, UINavigationControllerDelegate, VKPPAlbumsListDelegate> {
	BOOL _fullScreen;
	VKPPModel* _model;
	VKPPSinglePhotoViewController* _singlePhotoVC;
	VKPPThumbsCollectionView* _thumbnailsTable;
	VKPPNoAccessView* _noAccessView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL fullScreen;
@property(retain, nonatomic) VKPPThumbsCollectionView* thumbnailsTable;
@property(retain, nonatomic) VKPPSinglePhotoViewController* singlePhotoVC;
@property(readonly, retain, nonatomic) VKPPModel* model;
@property(retain, nonatomic) VKPPNoAccessView* noAccessView;
-(id)titleView;
-(void)updateTitleView;
-(void)VKAPAlbumsListDidSelectAlbumWithAssetCollection:(id)vkapalbumsList;
-(void)openAlbumsPicker;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(BOOL)prefersStatusBarHidden;
-(void)requestAssetsLibraryAccess;
-(void)actionSettingsButton:(id)button;
-(void)updateNoAccessView;
-(void)switchToMode:(int)mode animated:(BOOL)animated;
-(void)notificationChangeMode:(id)mode;
-(void)notificationGroup:(id)group;
-(id)titleString;
-(void)actionCamera;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)handleComplete:(BOOL)complete;
-(void)handleComplete;
-(void)toolbarPressedButton:(int)button;
-(void)toolbarPressedButtonNotification:(id)notification;
-(void)dealloc;
-(id)initWithModel:(id)model;
@end

@interface VKPPLayout : XXUnknownSuperclass {
	int _photosInRow;
	float _thumbPadding;
	float _thumbSpacing;
	float _thumbSize;
	float _thumbSizePixels;
	float _rowHeight;
	float _toolbarHeight;
	int _preloadCount;
}
@property(readonly, assign, nonatomic) int preloadCount;
@property(readonly, assign, nonatomic) float toolbarHeight;
@property(readonly, assign, nonatomic) float rowHeight;
@property(readonly, assign, nonatomic) float thumbSizePixels;
@property(readonly, assign, nonatomic) float thumbSize;
@property(readonly, assign, nonatomic) float thumbSpacing;
@property(readonly, assign, nonatomic) float thumbPadding;
@property(readonly, assign, nonatomic) int photosInRow;
-(id)init;
@end

@interface VKPPModel : XXUnknownSuperclass <PHPhotoLibraryChangeObserver> {
	BOOL touched;
	BOOL subscribed;
	NSObject<OS_dispatch_queue>* queue;
	BOOL skipUpdates;
	BOOL _assetsPreloaded;
	BOOL _filtersVisible;
	VKPPService* _service;
	VKPPSelector* _selector;
	NSOperationQueue* _loadingQueue;
	PHAssetCollection* _assetCollection;
	PHFetchResult* _fetchResult;
	NSArray* _assets;
	int _supportedMediaType;
	int _mode;
	unsigned _targetAsset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL filtersVisible;
@property(assign, nonatomic) unsigned targetAsset;
@property(assign, nonatomic) int mode;
@property(assign, nonatomic) int supportedMediaType;
@property(assign, nonatomic) BOOL assetsPreloaded;
@property(retain, nonatomic) NSArray* assets;
@property(retain, nonatomic) PHFetchResult* fetchResult;
@property(retain, nonatomic) PHAssetCollection* assetCollection;
@property(readonly, retain, nonatomic) NSOperationQueue* loadingQueue;
@property(readonly, retain, nonatomic) VKPPSelector* selector;
@property(readonly, retain, nonatomic) VKPPService* service;
-(void)handleCaptureInfo:(id)info completion:(id)completion;
-(void)editTargetAssetSync:(BOOL)sync block:(id)block operation:(id)operation complete:(id)complete;
-(void)toggleFilters;
-(void)switchToMode:(int)mode;
-(void)changeTargetAsset:(unsigned)asset;
-(void)toggleSelectedAssetIndex:(unsigned)index;
-(BOOL)canSelectAsset;
-(BOOL)changeSelected:(BOOL)selected assetIndex:(unsigned)index;
-(id)targetAssetData;
-(id)targetAssetObject;
-(id)assetAtIndex:(unsigned)index;
-(void)touchAssetsForced:(BOOL)forced;
-(void)touchAssets;
-(void)notificationDebug:(id)debug;
-(void)notificationMemoryWarning:(id)warning;
-(void)reloadAssets:(BOOL)assets;
-(void)loadAssetsGroup:(id)group preload:(BOOL)preload;
-(id)baseFetchOptions;
-(void)photoLibraryDidChange:(id)photoLibrary;
-(void)dealloc;
-(id)initWithService:(id)service selector:(id)selector assetGroup:(id)group;
@end

@interface VKPPListView : XXUnknownSuperclass <UIScrollViewDelegate, VKPPAssetPresenter> {
	float bottomInset;
	BOOL changingTarget;
	BOOL forcedScroll;
	double lastPageChange;
	id<VKPPAssetPresenter> _weakPresenter;
	VKPPModel* _model;
	UIView* _fadeView;
	UIScrollView* _scroll;
	NSArray* _pages;
	VKPPSelectButton* _buttonSelect;
	VKPPToolbar* _pickerToolbar;
	UIEdgeInsets _viewportInsets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) UIEdgeInsets viewportInsets;
@property(assign, nonatomic) id<VKPPAssetPresenter> weakPresenter;
@property(retain, nonatomic) VKPPToolbar* pickerToolbar;
@property(readonly, retain, nonatomic) VKPPSelectButton* buttonSelect;
@property(readonly, retain, nonatomic) NSArray* pages;
@property(readonly, retain, nonatomic) UIScrollView* scroll;
@property(readonly, retain, nonatomic) UIView* fadeView;
@property(readonly, retain, nonatomic) VKPPModel* model;
-(void)gesturePan:(id)pan;
-(void)handlePresented:(BOOL)presented animated:(BOOL)animated animation:(id)animation completion:(id)completion;
-(void)insetCropView:(id)view;
-(void)animateWithThumb:(id)thumb block:(id)block;
-(void)animateWithScrollBlock:(id)scrollBlock;
-(void)animateCommonBlock:(id)block;
-(void)tintBackground:(float)background;
-(void)showChrome:(BOOL)chrome;
-(CGAffineTransform)assetTransform;
-(void)handleAssetPresented:(BOOL)presented;
-(id)viewForPresentedAsset;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)gestureTap:(id)tap;
-(void)gestureDoubleTap:(id)tap;
-(void)actionToggleSelected:(id)selected;
-(void)notificationAssetSelected:(id)selected;
-(void)notificationToggleFilters:(id)filters;
-(void)notificationChangeTarget:(id)target;
-(void)notificationResetAssets:(id)assets;
-(void)updateInsets:(BOOL)insets;
-(void)activateText;
-(void)updateSelectButton;
-(void)layoutAll:(BOOL)all loadDelayed:(BOOL)delayed;
-(void)enumerateAll:(BOOL)all block:(id)block;
-(id)currentPage;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame model:(id)model bottomInset:(float)inset;
@end

@interface VKPPThumbnailView : VKPPAssetImageView {
	VKPPSelectButton* _buttonSelect;
	unsigned _assetIndex;
	UIImageView* _bottomGradient;
	UILabel* _durationLabel;
	UIView* _selectionOverlay;
	UIImage* _typeBadge;
	UIImageView* _badgeImageView;
	NSDateFormatter* _dateFormatter;
	double _duration;
}
@property(retain, nonatomic) UIImageView* badgeImageView;
@property(retain, nonatomic) UIImage* typeBadge;
@property(retain, nonatomic) UIView* selectionOverlay;
@property(assign, nonatomic) double duration;
@property(retain, nonatomic) UILabel* durationLabel;
@property(retain, nonatomic) UIImageView* bottomGradient;
@property(assign, nonatomic) unsigned assetIndex;
@property(retain, nonatomic) VKPPSelectButton* buttonSelect;
@property(retain, nonatomic) NSDateFormatter* dateFormatter;
+(id)badgeImageForAsset:(id)asset;
-(void).cxx_destruct;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)updateSelection;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKPPCollectionViewCell : XXUnknownSuperclass {
	BOOL _highlightable;
	VKPPThumbnailView* _thubmnailView;
}
@property(retain, nonatomic) VKPPThumbnailView* thubmnailView;
@property(assign, nonatomic) BOOL highlightable;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKPPTextView : XXUnknownSuperclass {
}
-(UIEdgeInsets)contentInset;
@end

@interface VKPPPageView : XXUnknownSuperclass <UITextViewDelegate, UIScrollViewDelegate> {
	BOOL skipScroll;
	float keyboardInset;
	BOOL _started;
	BOOL _seekToZeroBeforePlay;
	VKPPModel* _model;
	VKPPAssetImageView* _assetView;
	float _bottomInset;
	UITextView* _textView;
	UIImageView* _textShadow;
	VKPPProcessingOperation* _operation;
	AVPlayerLayer* _playerLayer;
	UIImageView* _playIcon;
	int _currentRequest;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float bottomInset;
@property(readonly, retain, nonatomic) VKPPAssetImageView* assetView;
@property(readonly, retain, nonatomic) VKPPModel* model;
@property(assign, nonatomic) int currentRequest;
@property(retain, nonatomic) UIImageView* playIcon;
@property(retain, nonatomic) AVPlayerLayer* playerLayer;
@property(assign, nonatomic) BOOL seekToZeroBeforePlay;
@property(assign, nonatomic) BOOL started;
@property(retain, nonatomic) VKPPProcessingOperation* operation;
@property(retain, nonatomic) UIImageView* textShadow;
@property(retain, nonatomic) UITextView* textView;
-(void)notificationTargetEdit:(id)edit;
-(void)playerItemDidReachEnd:(id)playerItem;
-(void)actionTap:(id)tap;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)handleScroll:(BOOL)scroll;
-(void)updateScrollInset:(BOOL)inset;
-(void)scrollRectToVisible:(CGRect)visible animated:(BOOL)animated;
-(void)activateText;
-(void)alignText;
-(void)updateTextForBounds;
-(void)updateText:(id)text force:(BOOL)force;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)preservingMinZoom:(id)zoom;
-(void)alignScrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)alignImage;
-(void)renderImage:(id)image animated:(BOOL)animated;
-(void)resetZoom;
-(void)loadFullWithPriority:(int)priority;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)handlePlay;
-(void)hidePlayIcon;
-(void)showPlayIcon;
-(void)attachAsset:(id)asset;
-(void)attachAsset:(id)asset forced:(BOOL)forced;
-(void)cleanVideoLayer;
-(void)appear;
-(void)dissappear;
-(void)cancel;
-(void)dealloc;
-(id)initWithModel:(id)model;
@end

@interface VKPPGLImageProcessor : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* queue;
	NSArray* _filters;
	VKPPGLFilter* _filterNormal;
	EAGLContext* _context;
	NSMutableDictionary* _filtersMap;
	NSMutableDictionary* _filtersPositions;
	NSMutableDictionary* _filtersContexts;
	NSMutableDictionary* _sourceTextures;
}
@property(readonly, retain, nonatomic) VKPPGLFilter* filterNormal;
@property(readonly, retain, nonatomic) NSArray* filters;
@property(readonly, retain, nonatomic) NSMutableDictionary* sourceTextures;
@property(readonly, retain, nonatomic) NSMutableDictionary* filtersContexts;
@property(readonly, retain, nonatomic) NSMutableDictionary* filtersPositions;
@property(readonly, retain, nonatomic) NSMutableDictionary* filtersMap;
@property(retain, nonatomic) EAGLContext* context;
-(id)processImageForKey:(id)key outputSize:(CGSize)size filterName:(id)name block:(id)block;
-(void)invalidateAllTextures;
-(void)invalidateTexture:(id)texture;
-(int)indexOfFilter:(id)filter;
-(id)filterWithName:(id)name;
-(int)maxImageSize;
-(void)notificationMemoryWarning:(id)warning;
-(void)unload;
-(void)async:(id)async;
-(void)sync:(id)sync;
-(void)perform:(/*function-pointer*/ void*)perform block:(id)block;
-(void)inContext:(id)context;
-(void)dealloc;
-(id)initWithFiltersBundle:(id)filtersBundle;
@end

@interface VKPPAlbumListController : XXUnknownSuperclass <PHPhotoLibraryChangeObserver> {
	id<VKPPAlbumsListDelegate> _delegate;
	NSString* _selectedCollectionId;
	int _supportedMediaTypes;
	NSArray* _collectionsFetchResults;
	NSArray* _collections;
	NSDictionary* _sortSubtypes;
	NSIndexPath* _selectedRow;
	PHCollectionList* _collectionList;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int supportedMediaTypes;
@property(copy, nonatomic) NSString* selectedCollectionId;
@property(assign, nonatomic) __weak id<VKPPAlbumsListDelegate> delegate;
@property(assign, nonatomic) PHCollectionList* collectionList;
@property(retain, nonatomic) NSIndexPath* selectedRow;
@property(retain, nonatomic) NSDictionary* sortSubtypes;
@property(retain, nonatomic) NSArray* collections;
@property(retain, nonatomic) NSArray* collectionsFetchResults;
-(void).cxx_destruct;
-(void)photoLibraryDidChange:(id)photoLibrary;
-(void)dismissModal;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)localizedTitleSortOptions;
-(id)userAlbumsFetchResult;
-(id)smartAlbumsFetchResult;
-(id)itunesSyncedAlbumsFetchResult;
-(id)sharedAlbumsFetchResult;
-(void)reloadAlbumsDataAndTableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithCollectionList:(id)collectionList;
-(int)preferredInterfaceOrientationForPresentation;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
@end

@interface VKPPThumbsCollectionView : XXUnknownSuperclass <UIGestureRecognizerDelegate, UICollectionViewDelegate, UICollectionViewDataSource, VKPPAssetPresenter> {
	CGSize assetGridThumbnailSize;
	int photosInRow;
	BOOL viewDidScroll;
	BOOL _fullScreenPicker;
	BOOL _showCamera;
	VKPPModel* _model;
	NSMutableSet* _pannedURLs;
	CGRect _previousPreheatRect;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL fullScreenPicker;
@property(retain, nonatomic) VKPPModel* model;
@property(assign, nonatomic) CGRect previousPreheatRect;
@property(assign, nonatomic) BOOL showCamera;
@property(retain, nonatomic) NSMutableSet* pannedURLs;
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)extraIndex;
-(CGAffineTransform)assetTransform;
-(void)handleAssetPresented:(BOOL)presented;
-(id)viewForPresentedAsset;
-(void)notificationTargetEdit:(id)edit;
-(void)notificationSelectedAsset:(id)asset;
-(void)notificationResetAssets:(id)assets;
-(void)handlePanGesture:(id)gesture;
-(id)thumbForAssetIndex:(unsigned)assetIndex;
-(void)actionThumbnailSelected:(id)selected;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame model:(id)model;
@end

@interface VKPPGLFilter : XXUnknownSuperclass {
	NSBundle* _bundle;
	NSString* _name;
	NSString* _displayName;
	NSArray* _textures;
	UIImage* _cachedPreviewImage;
}
@property(retain, nonatomic) NSArray* textures;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSBundle* bundle;
@property(retain, nonatomic) UIImage* cachedPreviewImage;
-(void)unload;
-(id)previewImage;
-(id)initWithConfig:(id)config bundle:(id)bundle;
-(void)dealloc;
@end

@interface IGLProgram : IGLResource {
	unsigned gl_program;
}
-(int)uniformLocation:(id)location;
-(void)use;
-(void)unload;
-(void)loadVertexShader:(id)shader fragmentShader:(id)shader2 attributes:(id)attributes;
-(void)dealloc;
@end

@interface VKPPAlbumsListTableViewCell : XXUnknownSuperclass {
	BOOL _select;
	VKPPAlbumListControllerItem* _item;
	UIImageView* _albumPreviewImageView;
	UILabel* _albumNameLabel;
	UILabel* _assetsCountLabel;
	UIImageView* _check;
	NSNumberFormatter* _numberFormatter;
	CGSize _assetPreviewSize;
}
@property(assign, nonatomic) BOOL select;
@property(retain, nonatomic) VKPPAlbumListControllerItem* item;
@property(assign, nonatomic) CGSize assetPreviewSize;
@property(retain, nonatomic) NSNumberFormatter* numberFormatter;
@property(retain, nonatomic) UIImageView* check;
@property(retain, nonatomic) UILabel* assetsCountLabel;
@property(retain, nonatomic) UILabel* albumNameLabel;
@property(retain, nonatomic) UIImageView* albumPreviewImageView;
-(void).cxx_destruct;
-(void)getCollectionPreviewWithResultHandler:(id)resultHandler;
-(void)applyItem:(id)item;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface VKPPAlbumListControllerItem : XXUnknownSuperclass {
	unsigned _countNumber;
	PHCollection* _collection;
	NSString* _keyAssetLocalId;
	int _supportedMediaType;
}
@property(retain, nonatomic) PHCollection* collection;
@property(assign, nonatomic) int supportedMediaType;
@property(assign, nonatomic) unsigned countNumber;
@property(copy, nonatomic) NSString* keyAssetLocalId;
-(void).cxx_destruct;
-(void)fetchCollection:(id)collection preview:(BOOL)preview withOptions:(id)options;
-(id)fetchOptions;
-(void)fetchCollectionsList:(id)list;
-(id)initWithCollection:(id)collection withSupportedMediaType:(int)supportedMediaType;
@end

@interface VKPPFilterTableCell : XXUnknownSuperclass {
	UIImageView* _preview;
	UIImageView* _border;
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIImageView* border;
@property(retain, nonatomic) UIImageView* preview;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface VKPPFiltersTableView : XXUnknownSuperclass <UITableViewDataSource, UITableViewDelegate> {
	VKPPService* _service;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKPPService* service;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)selectFilter:(id)filter animated:(BOOL)animated scroll:(BOOL)scroll;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame style:(int)style;
@end

@interface VKPPToolbar : XXUnknownSuperclass <UITableViewDelegate> {
	VKPPService* _service;
	VKPPSelector* _selector;
	VKPPModel* _model;
	NSMutableArray* _buttons;
	UILabel* _label;
	VKPPBadge* _badge;
	UIView* _hostView;
	UIToolbar* _bg;
	VKPPFiltersTableView* _filters;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, retain, nonatomic) VKPPSelector* selector;
@property(readonly, retain, nonatomic) VKPPService* service;
@property(retain, nonatomic) VKPPFiltersTableView* filters;
@property(readonly, retain, nonatomic) UIToolbar* bg;
@property(readonly, retain, nonatomic) UIView* hostView;
@property(retain, nonatomic) VKPPBadge* badge;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) NSMutableArray* buttons;
@property(retain, nonatomic) VKPPModel* model;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)layoutIfNeededAnimated:(BOOL)animated;
-(void)layoutToolbarInSuperView;
-(BOOL)showFilters;
-(void)actionButton:(id)button;
-(void)notificationToggleFilters:(id)filters;
-(void)notificationSelectLimit:(id)limit;
-(void)notificationAssetSelected:(id)selected;
-(void)notificationTarget:(id)target;
-(void)notificationEdit:(id)edit;
-(void)notificationMode:(id)mode;
-(void)notificationGroup:(id)group;
-(void)updateButtonsVisibilityForMode:(int)mode isVideo:(BOOL)video;
-(void)updateSelection:(BOOL)selection;
-(void)updateDoneButton;
-(void)updateForTarget:(BOOL)target;
-(void)updateForMode;
-(id)button:(int)button;
-(void)attachModel:(id)model;
-(void)dealloc;
-(id)initWithService:(id)service selector:(id)selector barStyle:(int)style;
@end

@interface VKPPProcessingOperation : XXUnknownSuperclass {
	BOOL _tryTextureCache;
	BOOL _sync;
	VKPPGLImageProcessor* _imageProcessor;
	UIImage* _knownSourceImage;
	PHAsset* _asset;
	VKPPAssetData* _data;
	int _targetLimit;
	int _targetThumbSize;
	int _currentRequest;
	UIImage* _resultImage;
}
@property(retain, nonatomic) UIImage* resultImage;
@property(assign, nonatomic) int currentRequest;
@property(assign, nonatomic) BOOL sync;
@property(assign, nonatomic) BOOL tryTextureCache;
@property(assign, nonatomic) int targetThumbSize;
@property(assign, nonatomic) int targetLimit;
@property(retain, nonatomic) VKPPAssetData* data;
@property(retain, nonatomic) PHAsset* asset;
@property(retain, nonatomic) UIImage* knownSourceImage;
@property(retain, nonatomic) VKPPGLImageProcessor* imageProcessor;
+(id)operationForAsset:(id)asset data:(id)data processor:(id)processor;
+(int)fullScreenLimit;
-(void)loadImageThumb:(BOOL)thumb hasCrop:(BOOL)crop targetFinal:(BOOL)final targetLimit:(int)limit WithCompletion:(id)completion;
-(void)cancel;
-(void)main;
-(void)dealloc;
@end

@interface VKPPGLFilterContext : IGLResource {
	unsigned gl_texture[5];
	int gl_sl_u_input_texture;
	int gl_sl_u_texture[5];
	VKPPGLFilter* _filter;
	IGLProgram* _program;
}
@property(readonly, retain, nonatomic) VKPPGLFilter* filter;
@property(retain, nonatomic) IGLProgram* program;
-(void)renderForTexture:(unsigned)texture;
-(void)load;
-(void)unload;
-(void)dealloc;
-(id)initWithFilter:(id)filter;
@end

@interface VKPPStickyNavigationModalTransitioning : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate> {
	BOOL _reverse;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL reverse;
+(id)sharedTransitioning;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(void)presentController:(id)controller fromController:(id)controller2 animated:(BOOL)animated;
@end

@interface IGLResource : XXUnknownSuperclass <IGLResource> {
	BOOL _loaded;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL loaded;
-(void)unload;
-(void)resourceUnloaded;
-(void)resourceLoaded;
-(void)dealloc;
@end

@interface VKPPSelector : XXUnknownSuperclass {
	float thumbScale;
	BOOL _selectSingle;
	BOOL _disableEdits;
	BOOL _forceCrop;
	NSMutableDictionary* _selectedAssets;
	NSMutableDictionary* _assetsEditData;
	VKPPLayout* _layout;
	unsigned _selectLimit;
}
@property(assign, nonatomic) BOOL forceCrop;
@property(assign, nonatomic) BOOL disableEdits;
@property(assign, nonatomic) BOOL selectSingle;
@property(assign, nonatomic) unsigned selectLimit;
@property(readonly, retain, nonatomic) VKPPLayout* layout;
@property(readonly, retain, nonatomic) NSMutableDictionary* assetsEditData;
@property(readonly, retain, nonatomic) NSMutableDictionary* selectedAssets;
-(id)collectSelectedAssetsWithTargetAsset:(id)targetAsset service:(id)service;
-(void)thumbnailForAsset:(id)asset synchronous:(BOOL)synchronous resultHandler:(id)handler;
-(void)dealloc;
-(id)init;
@end

@interface OrderedDictionary : XXUnknownSuperclass {
	NSMutableDictionary* _dictionary;
	NSMutableArray* _array;
}
@property(retain, nonatomic) NSMutableArray* array;
@property(retain, nonatomic) NSMutableDictionary* dictionary;
-(id)descriptionWithLocale:(id)locale indent:(unsigned)indent;
-(id)keyAtIndex:(unsigned)index;
-(void)insertObject:(id)object forKey:(id)key atIndex:(unsigned)index;
-(id)reverseKeyEnumerator;
-(id)keyEnumerator;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(void)setObject:(id)object forKey:(id)key;
-(id)mutableCopy;
-(id)copy;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)initWithCapacity:(unsigned)capacity;
-(id)init;
@end

@interface VKPPBadge : XXUnknownSuperclass {
	UILabel* _label;
	NSFormatter* _formatter;
	int _value;
	UIEdgeInsets _inset;
}
@property(assign, nonatomic) int value;
@property(retain, nonatomic) NSFormatter* formatter;
@property(readonly, retain, nonatomic) UILabel* label;
@property(assign, nonatomic) UIEdgeInsets inset;
+(void)initialize;
-(void)setValue:(int)value animated:(BOOL)animated;
-(void)setValue:(int)value animated:(BOOL)animated completion:(id)completion;
-(void)actionTest:(id)test;
-(void)dealloc;
-(id)initWithImage:(id)image;
@end

@interface IGLRenderTarget : IGLResource {
	CGSize size;
	unsigned gl_framebuffer;
	id<IGLTexture> _targetTexture;
}
@property(retain, nonatomic) id<IGLTexture> targetTexture;
-(void)activate;
-(void)loadWithSize:(CGSize)size;
-(void)unload;
-(void)dealloc;
@end

@interface IGLTexture : IGLResource <IGLTexture> {
	unsigned gl_texture;
	CGSize size;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)loadWithCGImage:(CGImageRef)cgimage;
-(void)readImage:(id)image;
-(void)loadWithSize:(CGSize)size;
-(CGSize)size;
-(unsigned)texture;
-(void)loadWithSize:(CGSize)size data:(void*)data;
-(void)unload;
@end

@interface VKPPNoAccessView : XXUnknownSuperclass {
	UIButton* _openSettingsButton;
	UILabel* _title;
	UILabel* _subtitle;
}
@property(retain, nonatomic) UILabel* subtitle;
@property(retain, nonatomic) UILabel* title;
@property(retain, nonatomic) UIButton* openSettingsButton;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)updateWithTitle:(id)title subtitle:(id)subtitle buttonTitle:(id)title3;
-(id)initWithFrame:(CGRect)frame;
@end

@interface IGLTextureFast : IGLResource <IGLTexture> {
	CGSize size;
	CVOpenGLESTextureCacheRef cache;
	CVBufferRef pixelBuffer;
	CVBufferRef texture;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(BOOL)supported;
-(void)unload;
-(void)readImage:(id)image;
-(void)loadWithSize:(CGSize)size;
-(CGSize)size;
-(unsigned)texture;
@end

@interface VKPPSelectButton : XXUnknownSuperclass {
}
+(id)selectButton;
+(void)initialize;
-(void)animateSelected:(BOOL)selected;
-(void)selectButtonToggle:(id)toggle;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted;
@end

@interface VKPhotoPicker : XXUnknownSuperclass <UINavigationControllerDelegate> {
	VKPPService* _service;
	VKPPSelector* _selector;
	id _handler;
	VKPPToolbar* _pickerToolbar;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) VKPPSelector* selector;
@property(retain, nonatomic) VKPPService* service;
@property(retain, nonatomic) VKPPToolbar* pickerToolbar;
+(void)showCameraAccessDeniedAlertFromViewController:(id)viewController;
+(void)showPhotosAccessDeniedAlertFromViewController:(id)viewController;
+(void)showAccessDeniedAlertWithTitle:(id)title shortMessage:(id)message fromViewController:(id)viewController;
+(BOOL)assetsLibraryAccessDisabled;
+(BOOL)cameraAccessDisabled;
+(id)photoPickerWithService:(id)service mediaTypes:(int)types;
+(id)photoPickerWithService:(id)service;
-(int)preferredStatusBarStyle;
-(void)handleCompleteNotification:(id)notification;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(id)currentGroupController;
-(void)viewDidLoad;
-(unsigned)supportedInterfaceOrientations;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(float)_statusBarHeightAdjustmentForCurrentOrientation;
@end

@interface VKPPCropBorderView : XXUnknownSuperclass {
	CGRect _cropFrame;
}
@property(assign, nonatomic) CGRect cropFrame;
-(void)drawRect:(CGRect)rect;
@end

@interface VKPPCropView : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	PHAsset* _asset;
	id<VKPPAssetPresenter> _weakPresenter;
	int _requestID;
	UIImageView* _frameView;
	UIImageView* _imageView;
	VKPPCropBorderView* _borderView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int requestID;
@property(assign, nonatomic) id<VKPPAssetPresenter> weakPresenter;
@property(retain, nonatomic) PHAsset* asset;
@property(readonly, retain, nonatomic) VKPPCropBorderView* borderView;
@property(readonly, retain, nonatomic) UIImageView* imageView;
@property(readonly, retain, nonatomic) UIImageView* frameView;
-(void)animateWithImage:(id)image show:(BOOL)show block:(id)block;
-(void)animateCommonBlock:(id)block;
-(void)handlePresented:(BOOL)presented animated:(BOOL)animated completion:(id)completion;
-(void)loadImage:(id)image;
-(id)loadedFullImage;
-(CGAffineTransform)currentCrop;
-(void)gestureTap:(id)tap;
-(void)gesturePan:(id)pan;
-(void)gestureRotate:(id)rotate;
-(void)gestureScale:(id)scale;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)alignAngle:(BOOL)angle;
-(void)validateBounds;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKPPAssetImageView : XXUnknownSuperclass {
	PHAsset* _asset;
}
@property(retain, nonatomic) PHAsset* asset;
-(void)dealloc;
@end

@interface VKPPService : XXUnknownSuperclass {
	VKPPGLImageProcessor* _imageProcessor;
}
@property(readonly, retain, nonatomic) VKPPGLImageProcessor* imageProcessor;
+(id)standartService;
-(id)compressedImage:(id)image meta:(id)meta quality:(float)quality saveToAlbum:(id)album;
-(void)renderAsset:(id)asset sizeLimit:(int)limit block:(id)block;
-(void)dealloc;
-(id)initWithImageProcessor:(id)imageProcessor;
@end

@interface VKPPAlbumsSwitchButton : XXUnknownSuperclass {
}
+(id)buttonWithTitle:(id)title;
-(CGRect)titleRectForContentRect:(CGRect)contentRect;
-(CGRect)imageRectForContentRect:(CGRect)contentRect;
@end

@interface VKAPPortraitNavigationController : XXUnknownSuperclass {
}
-(id)childForStatusBar;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarStyle;
-(id)childViewControllerForStatusBarStyle;
-(id)childViewControllerForStatusBarHidden;
-(int)preferredInterfaceOrientationForPresentation;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
@end

@interface VKAPCameraCollectionViewCell : XXUnknownSuperclass {
	AVCaptureSession* _session;
	UIImageView* _cameraIcon;
}
@property(retain, nonatomic) AVCaptureSession* session;
@property(retain, nonatomic) UIImageView* cameraIcon;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PGEnhance : XXUnknownSuperclass {
}
+(unsigned)CGImagePropertyOrientation:(id)orientation;
+(id)enhancedImageFromImage:(id)image;
@end

@interface VKPPSinglePhotoViewController : XXUnknownSuperclass {
	BOOL _hiddenStatusBar;
	VKPPModel* _model;
	VKPPListView* _listView;
	VKPPCropView* _cropView;
	int _statusBarStyle;
}
@property(assign, nonatomic) int statusBarStyle;
@property(assign, nonatomic) BOOL hiddenStatusBar;
@property(retain, nonatomic) VKPPCropView* cropView;
@property(retain, nonatomic) VKPPListView* listView;
@property(readonly, retain, nonatomic) VKPPModel* model;
-(void)dealloc;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarStyle;
-(id)initWithModel:(id)model;
@end

@interface MRGCNetworkReachability : XXUnknownSuperclass {
	SCNetworkReachabilityRef _networkReachability;
	id _handler_blk;
}
+(id)reachabilityForInternetConnection;
-(void).cxx_destruct;
-(void)stopMonitoringNetworkReachability;
-(void)startMonitoringNetworkReachabilityWithNotification;
-(void)startMonitoringNetworkReachabilityWithHandler:(id)handler;
-(unsigned)reachabilityFlags;
-(BOOL)isReachableViaWWAN;
-(BOOL)isReachableViaWiFi;
-(BOOL)isReachable;
-(unsigned char)currentReachabilityStatus;
-(void)dealloc;
-(void)releaseReachabilityQueue;
-(void)createReachabilityQueue;
-(id)initWithReachability:(SCNetworkReachabilityRef)reachability;
@end

@interface MRTrackerExecutor : XXUnknownSuperclass {
	NSMutableArray* _commandsQueue;
	NSOperationQueue* _operationQueue;
}
+(id)instance;
-(void).cxx_destruct;
-(void)runOnQueue:(id)queue;
-(void)removeFromQueue:(id)queue;
-(void)addToQueue:(id)queue;
-(id)init;
@end

@interface MRAsyncCommand : XXUnknownSuperclass {
	id _completionBlock;
	id _result;
	NSString* _error;
}
@property(readonly, copy, nonatomic) NSString* error;
@property(readonly, assign, nonatomic) id result;
-(void).cxx_destruct;
-(void)setError:(id)error;
-(void)setResult:(id)result;
-(void)executeWithCompletionBlock:(id)completionBlock;
-(void)execute;
-(void)finish;
-(void)run;
@end

@interface MREventsActionCommand : MRAsyncCommand {
	MRTrackerDBHelper* _dbHelper;
	NSString* _url;
	MRTrackerParams* _trackerParams;
}
@property(readonly, assign, nonatomic) MRTrackerParams* trackerParams;
-(void).cxx_destruct;
-(void)sendPostRequestWithData:(id)data completionBlock:(id)block;
-(id)getCriterionName:(int)name;
-(BOOL)hasCriterion:(int)criterion;
-(void)sendEvents:(int)events;
-(void)insertEvent:(id)event appStopTimestamp:(id)timestamp;
-(void)insertEvent:(id)event;
-(id)initWithDBHelper:(id)dbhelper url:(id)url trackerParams:(id)params;
@end

@interface MRSendEventsCommand : MREventsActionCommand {
	int _criterion;
}
-(void)run;
-(id)initWithDBHelper:(id)dbhelper url:(id)url trackerParams:(id)params criterion:(int)criterion;
@end

@interface MRTrackAppStopCommand : MRAsyncCommand {
	double _appStopTimestamp;
}
-(void)run;
-(id)initWithAppStopTimestamp:(double)appStopTimestamp;
@end

@interface MRTrackEventCommand : MREventsActionCommand {
	MREvent* _event;
}
-(void).cxx_destruct;
-(void)run;
-(id)initWithEvent:(id)event dbHelper:(id)helper url:(id)url trackerParams:(id)params;
@end

@interface MRTrackLaunchSessionCommand : MREventsActionCommand {
	double _appStopTimestamp;
	MREvent* _launchEvent;
	MREvent* _sessionEvent;
}
-(void).cxx_destruct;
-(void)run;
-(id)initWithDBHelper:(id)dbhelper url:(id)url trackerParams:(id)params appStopTimestamp:(double)timestamp;
@end

@interface MRTrackMajorEventsCommand : MREventsActionCommand {
	double _timestamp;
	NSString* _currentVersion;
	NSString* _currentBuild;
}
-(void).cxx_destruct;
-(double)getAppInstallTime;
-(void)trackUpdate;
-(void)trackInstall;
-(void)run;
-(id)initWithDBHelper:(id)dbhelper url:(id)url trackerParams:(id)params;
@end

@interface MRTrackerOperationQueue : XXUnknownSuperclass {
}
+(id)instance;
@end

@interface MRJSONBuilder : XXUnknownSuperclass {
	NSString* _userId;
	NSMutableDictionary* _locationDict;
	NSMutableDictionary* _networkDict;
	NSMutableDictionary* _deviceDict;
	NSMutableDictionary* _userDict;
	NSMutableDictionary* _appDict;
	NSMutableDictionary* _appsDict;
	NSMutableDictionary* _dict;
	NSMutableDictionary* _settingsDict;
	NSMutableDictionary* _environmentDict;
	NSMutableDictionary* _environmentWifiDict;
	NSMutableArray* _eventItems;
	NSMutableArray* _customEventItems;
}
@property(copy, nonatomic) NSString* connectionType;
@property(copy, nonatomic) NSString* networkConnection;
@property(retain, nonatomic) NSNumber* simOperatorId;
@property(copy, nonatomic) NSString* operatorName;
@property(copy, nonatomic) NSString* operatorId;
@property(copy, nonatomic) NSString* simloc;
@property(retain, nonatomic) NSNumber* dpi;
@property(retain, nonatomic) NSNumber* density;
@property(retain, nonatomic) NSNumber* height;
@property(retain, nonatomic) NSNumber* width;
@property(copy, nonatomic) NSString* timezone;
@property(copy, nonatomic) NSString* euname;
@property(copy, nonatomic) NSString* lang;
@property(copy, nonatomic) NSString* osVer;
@property(copy, nonatomic) NSString* manufacture;
@property(copy, nonatomic) NSString* os;
@property(copy, nonatomic) NSString* device;
@property(retain, nonatomic) NSNumber* advertisingEnabled;
@property(copy, nonatomic) NSString* userId;
@property(retain, nonatomic) NSNumber* age;
@property(retain, nonatomic) NSNumber* gender;
@property(retain, nonatomic) NSArray* customUserIds;
@property(retain, nonatomic) NSArray* icqIds;
@property(retain, nonatomic) NSArray* emails;
@property(retain, nonatomic) NSArray* vkIds;
@property(retain, nonatomic) NSArray* okIds;
@property(copy, nonatomic) NSString* mrgsUserId;
@property(copy, nonatomic) NSString* mrgsAppId;
@property(copy, nonatomic) NSString* appName;
@property(copy, nonatomic) NSString* appLanguage;
@property(copy, nonatomic) NSString* appBuild;
@property(copy, nonatomic) NSString* appVersion;
@property(copy, nonatomic) NSString* MRGSDeviceId;
@property(copy, nonatomic) NSString* idfa;
@property(copy, nonatomic) NSString* mytrackerVersion;
@property(copy, nonatomic) NSString* vendorId;
@property(copy, nonatomic) NSString* trackerId;
@property(retain, nonatomic) NSNumber* customEventsSkipped;
@property(retain, nonatomic) NSNumber* timestampSend;
@property(retain, nonatomic) NSNumber* timestampBase;
-(void).cxx_destruct;
-(id)jsonString;
-(void)addEvent:(id)event;
-(void)setBssid:(id)bssid ssid:(id)ssid;
-(void)setLocationWithLatitude:(id)latitude longitude:(id)longitude accuracy:(id)accuracy speed:(id)speed timestamp:(id)timestamp;
-(void)setSettingsLaunchTimeout:(id)timeout;
-(void)setSettingsEnvironmentDisabled;
-(void)setSettingsLocationDisabled;
-(void)setSettingsLaunchDisabled;
-(id)init;
@end

@interface MRTrackerDBContract : XXUnknownSuperclass {
}
+(id)createManagedObjectModel;
@end

@interface MRTrackerDBHelper : XXUnknownSuperclass {
	NSString* _trackerId;
	NSString* _databasePath;
	NSManagedObjectModel* _managedObjectModel;
	NSManagedObjectContext* _managedObjectContext;
}
-(void).cxx_destruct;
-(void)save;
-(void)aggregateSession:(id)session withManagedObject:(id)managedObject timestampBase:(id)base timestampEnd:(id)end;
-(void)aggregateEvent:(id)event withManagedObject:(id)managedObject timestampBase:(id)base;
-(id)getSessionsForEventObject:(id)eventObject withLimit:(unsigned)limit;
-(unsigned)getSessionsCountForEventObject:(id)eventObject;
-(id)getTimestampsForEventObject:(id)eventObject withLimit:(unsigned)limit;
-(unsigned)getTimestampsCountForEventObject:(id)eventObject;
-(void)deleteAllSessions;
-(void)deleteAllTimestamps;
-(id)deleteAllExceptActiveSession;
-(unsigned)getEventsCountWithType:(id)type;
-(unsigned)getEventsCount;
-(unsigned)getMajorEventsCount;
-(id)getAllEvents;
-(BOOL)updateEvent:(id)event timestampBase:(id)base appStopTimestamp:(id)timestamp;
-(BOOL)insertEvent:(id)event timestampBase:(id)base;
-(BOOL)cleanupPath;
-(BOOL)createStorageDir:(id)dir;
-(id)getDatabasePath;
-(id)storeUrl;
-(void)updateDB;
-(BOOL)initDB;
-(id)initWithTrackerId:(id)trackerId;
@end

@interface MRDefaultTracker : XXUnknownSuperclass <MRTracker> {
	MRTrackerDBHelper* _dbHelper;
	BOOL _isAppActive;
	double _appStopTimestamp;
	NSTimer* _timer;
	double _timerFinishTimestamp;
	BOOL _isEnabled;
	BOOL _isInitialized;
	MRTrackerParams* _params;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) MRTrackerParams* params;
@property(readonly, assign, nonatomic) BOOL isInitialized;
@property(assign, nonatomic) BOOL isEnabled;
-(void).cxx_destruct;
-(void)dealloc;
-(void)subscribeSystemEvents;
-(void)sendEventsByTimer;
-(void)stopTimer;
-(void)startTimer:(double)timer;
-(void)trackLaunch;
-(void)onApplicationStop:(id)stop;
-(void)onApplicationStart:(id)start;
-(void)trackLevelAchievedWithLevel:(id)level eventParams:(id)params;
-(void)trackLevelAchievedWithLevel:(id)level;
-(void)trackLevelAchieved;
-(void)trackPurchaseWithProduct:(id)product transaction:(id)transaction eventParams:(id)params;
-(void)trackPurchaseWithProduct:(id)product transaction:(id)transaction;
-(void)trackRegistrationEventWithParams:(id)params;
-(void)trackRegistrationEvent;
-(void)trackInviteEventWithParams:(id)params;
-(void)trackInviteEvent;
-(void)trackLoginEventWithParams:(id)params;
-(void)trackLoginEvent;
-(void)trackEventWithName:(id)name eventParams:(id)params;
-(void)trackEventWithName:(id)name;
-(void)setup;
-(id)initWithId:(id)anId;
@end

@interface MRMyTracker : XXUnknownSuperclass {
}
+(void)removeTracker;
+(BOOL)checkTracker;
+(void)trackLevelAchievedWithLevel:(id)level eventParams:(id)params;
+(void)trackLevelAchievedWithLevel:(id)level;
+(void)trackLevelAchieved;
+(void)trackPurchaseWithProduct:(id)product transaction:(id)transaction eventParams:(id)params;
+(void)trackPurchaseWithProduct:(id)product transaction:(id)transaction;
+(void)trackRegistrationEventWithParams:(id)params;
+(void)trackRegistrationEvent;
+(void)trackInviteEventWithParams:(id)params;
+(void)trackInviteEvent;
+(void)trackLoginEventWithParams:(id)params;
+(void)trackLoginEvent;
+(void)trackEventWithName:(id)name eventParams:(id)params;
+(void)trackEventWithName:(id)name;
+(void)setupTracker;
+(void)createTracker:(id)tracker;
+(id)trackerParams;
+(id)trackerVersion;
+(BOOL)isEnabled;
+(void)setEnabled:(BOOL)enabled;
+(BOOL)isDebugMode;
+(void)setDebugMode:(BOOL)mode;
@end

@interface MRMyTrackerParams : XXUnknownSuperclass {
	MRTrackerParams* _trackerParams;
}
@property(retain, nonatomic) NSArray* customUserIds;
@property(retain, nonatomic) NSArray* emails;
@property(retain, nonatomic) NSArray* vkIds;
@property(retain, nonatomic) NSArray* okIds;
@property(retain, nonatomic) NSArray* icqIds;
@property(copy, nonatomic) NSString* mrgsDeviceId;
@property(copy, nonatomic) NSString* mrgsUserId;
@property(copy, nonatomic) NSString* mrgsAppId;
@property(copy, nonatomic) NSString* language;
@property(retain, nonatomic) NSNumber* age;
@property(assign, nonatomic) int gender;
@property(assign, nonatomic) BOOL trackEnvironment;
@property(assign, nonatomic) int locationTrackingMode;
@property(assign, nonatomic) double launchTimeout;
@property(assign, nonatomic) BOOL trackLaunch;
@property(readonly, copy, nonatomic) NSString* trackerId;
-(void).cxx_destruct;
-(id)initWithParams:(id)params;
@end

@interface MRTrackerParams : XXUnknownSuperclass {
	BOOL _trackLaunch;
	BOOL _trackEnvironment;
	NSString* _trackerId;
	int _locationTrackingMode;
	int _gender;
	NSNumber* _age;
	NSString* _language;
	NSString* _mrgsAppId;
	NSString* _mrgsUserId;
	NSString* _mrgsDeviceId;
	NSArray* _icqIds;
	NSArray* _okIds;
	NSArray* _vkIds;
	NSArray* _emails;
	NSArray* _customUserIds;
	double _launchTimeout;
}
@property(retain) NSArray* customUserIds;
@property(retain) NSArray* emails;
@property(retain) NSArray* vkIds;
@property(retain) NSArray* okIds;
@property(retain) NSArray* icqIds;
@property(copy) NSString* mrgsDeviceId;
@property(copy) NSString* mrgsUserId;
@property(copy) NSString* mrgsAppId;
@property(copy) NSString* language;
@property(retain) NSNumber* age;
@property(assign, nonatomic) int gender;
@property(assign, nonatomic) BOOL trackEnvironment;
@property(assign, nonatomic) int locationTrackingMode;
@property(assign, nonatomic) double launchTimeout;
@property(assign, nonatomic) BOOL trackLaunch;
@property(readonly, copy, nonatomic) NSString* trackerId;
-(void).cxx_destruct;
-(void)putDataToBuilder:(id)builder;
-(void)putSettingsToBuilder:(id)builder;
-(void)putCustomParamsToBuilder:(id)builder;
-(id)initWithTrackerId:(id)trackerId;
@end

@interface MRCommandsFactory : XXUnknownSuperclass {
}
+(id)commandForTrackAppStopWithTimestamp:(double)timestamp;
+(id)commandForTrackEventWithEvent:(id)event dbHelper:(id)helper trackerParams:(id)params;
+(id)commandForSendEventsWithDBHelper:(id)dbhelper trackerParams:(id)params criterion:(int)criterion;
+(id)commandForTrackLaunchWithDBHelper:(id)dbhelper trackerParams:(id)params appStopTimestamp:(double)timestamp;
+(id)commandForTrackMajorEventsWithDBHelper:(id)dbhelper trackerParams:(id)params;
@end

@interface MREventsFactory : XXUnknownSuperclass {
}
+(BOOL)isEventParamsCorrect:(id)correct;
+(BOOL)isEventNameCorrect:(id)correct;
+(id)eventWithType:(id)type name:(id)name value:(id)value params:(id)params timestamps:(id)timestamps timestampStart:(id)start timestampsSkipped:(id)skipped;
+(id)sessionEvent;
+(id)levelEventWithLevel:(id)level params:(id)params;
+(id)purchaseEventWithProduct:(id)product transaction:(id)transaction params:(id)params;
+(id)customEventWithName:(id)name params:(id)params;
+(id)standardEventWithType:(id)type params:(id)params;
+(id)standardEventWithType:(id)type;
+(id)updateEventWithAppVersion:(id)appVersion appBuild:(id)build timestamp:(double)timestamp;
+(id)installEventWithAppInstallTime:(double)appInstallTime timestamp:(double)timestamp;
@end

@interface MRCustomEvent : MREvent {
}
-(id)asJsonDictionary;
-(id)initWithName:(id)name;
@end

@interface MREvent : XXUnknownSuperclass {
	NSString* _type;
	NSString* _name;
	NSString* _value;
	NSDictionary* _params;
	NSArray* _timestamps;
	NSNumber* _timestampStart;
	NSNumber* _timestampsSkipped;
}
@property(retain, nonatomic) NSNumber* timestampsSkipped;
@property(retain, nonatomic) NSNumber* timestampStart;
@property(readonly, assign, nonatomic) NSNumber* timestamp;
@property(readonly, assign, nonatomic) NSArray* timestamps;
@property(retain, nonatomic) NSDictionary* params;
@property(copy, nonatomic) NSString* value;
@property(copy, nonatomic) NSString* name;
@property(readonly, copy, nonatomic) NSString* type;
-(void).cxx_destruct;
-(id)asJsonDictionary;
-(id)paramsAsJSONString;
-(void)setParamsFromJSONString:(id)jsonstring;
-(id)initWithType:(id)type timestamps:(id)timestamps;
-(id)initWithType:(id)type;
@end

@interface MRInstallEvent : MREvent {
}
-(id)asJsonDictionary;
-(id)initWithAppInstallTime:(double)appInstallTime timestamp:(double)timestamp;
@end

@interface MRLevelEvent : MREvent {
}
-(id)asJsonDictionary;
-(id)initWithLevel:(id)level params:(id)params;
@end

@interface MRPurchaseEvent : MREvent {
}
+(BOOL)fillDictionaryWithProduct:(id)product transaction:(id)transaction dictionary:(id)dictionary;
+(BOOL)isCorrectProduct:(id)product transaction:(id)transaction;
+(id)purchaseEventWithProduct:(id)product transaction:(id)transaction params:(id)params;
-(id)asJsonDictionary;
-(id)initWithWithProduct:(id)product transaction:(id)transaction params:(id)params;
@end

@interface MRSessionEvent : MREvent {
	NSMutableArray* _sessions;
}
@property(readonly, assign, nonatomic) NSArray* sessions;
-(void).cxx_destruct;
-(id)asJsonDictionary;
-(void)addSessionWithTimestampStart:(id)timestampStart timestampEnd:(id)end;
-(id)init;
@end

@interface MRStandardEvent : MREvent {
}
-(id)asJsonDictionary;
@end

@interface MRUpdateEvent : MREvent {
}
-(id)asJsonDictionary;
-(id)initWithAppVersion:(id)appVersion appBuild:(id)build timestamp:(double)timestamp;
@end

@interface MRTracer : XXUnknownSuperclass {
}
+(void)setEnabled:(BOOL)enabled;
+(BOOL)enabled;
@end

@interface MRUserDefaultsStorage : XXUnknownSuperclass {
}
+(id)instance;
-(id)getNumberValueForKey:(id)key;
-(id)getValueForKey:(id)key;
-(void)setValue:(id)value forKey:(id)key;
-(id)getAppStopTimestampAndClear;
-(void)setAppStopTimestamp:(id)timestamp;
-(id)getDBVersion;
-(void)setDBVersion:(id)version;
-(id)getCustomEventsSkipped;
-(void)setCustomEventsSkipped:(id)skipped;
-(id)getTimestampBase;
-(void)setTimestampBase:(id)base;
-(id)getAppBuild;
-(id)getAppVersion;
-(void)setAppBuild:(id)build;
-(void)setAppVersion:(id)version;
-(id)getAppId;
-(void)setAppId:(id)anId;
-(void)setFirstStartComplete;
-(BOOL)isFirstStart:(id)start;
@end

@interface MRGZIPUtils : XXUnknownSuperclass {
}
+(id)gunzippedDataWithData_Private:(id)data_Private;
+(id)gzippedDataWithData_Private:(id)data_Private withCompressionLevel:(float)compressionLevel;
+(id)gunzippedDataWithData:(id)data;
+(id)gzippedDataWithData:(id)data;
+(id)gzippedDataWithData:(id)data withCompressionLevel:(float)compressionLevel;
@end

@interface MRAbstractDataProvider : XXUnknownSuperclass {
}
-(void)putDataToBuilder:(id)builder;
-(void)collectData;
@end

@interface MRDeviceDataProvider : MRAbstractDataProvider {
	NSString* _euname;
	NSString* _systemName;
	NSString* _systemVersion;
	NSString* _vendorId;
	NSString* _deviceModel;
	NSString* _deviceTimezone;
	NSString* _deviceManufacture;
	NSString* _idfaValue;
	NSNumber* _trackingEnabled;
	NSString* _appIdentifier;
	NSString* _appVersion;
	NSString* _appBuild;
	NSString* _language;
	NSString* _appLanguage;
	NSNumber* _screenWidth;
	NSNumber* _screenHeight;
	NSNumber* _screenDensity;
	NSNumber* _screenDpi;
	NSString* _mrgsIdDefaultValue;
	NSString* _simLoc;
	NSString* _operatorId;
	NSString* _operatorName;
	BOOL _isCollectedData;
}
+(id)generateMRGSUDID;
-(void).cxx_destruct;
-(void)putDataToBuilder:(id)builder;
-(id)appBuild;
-(id)appVersion;
-(id)appIdentifier;
-(id)deviceLocale;
-(id)deviceLanguage;
-(id)deviceTimeZone;
-(id)screenDensity;
-(id)screenHeight;
-(id)screenWidth;
-(id)model;
-(id)deviceIdentifierForVendor;
-(void)collectData;
-(id)init;
@end

@interface MREnvironmentDataProvider : MRAbstractDataProvider {
	NSString* _bssid;
	NSString* _ssid;
}
-(void).cxx_destruct;
-(void)putDataToBuilder:(id)builder;
-(void)collectWifiInfo;
-(void)collectData;
@end

@interface MRFingerprintDataProvider : MRAbstractDataProvider {
	MRDeviceDataProvider* _deviceDataProvider;
	MRNetworkDataProvider* _networkDataProvider;
	MRLocationDataProvider* _locationDataProvider;
	MREnvironmentDataProvider* _environmentDataProvider;
	BOOL _trackEnvironmentEnabled;
	int _locationTrackingMode;
}
@property(assign, nonatomic) BOOL trackEnvironmentEnabled;
@property(assign, nonatomic) int locationTrackingMode;
+(id)instance;
-(void).cxx_destruct;
-(void)putDataToBuilder:(id)builder;
-(void)collectData;
-(id)init;
@end

@interface MRLocationDataProvider : MRAbstractDataProvider <CLLocationManagerDelegate> {
	CLLocationManager* _locationManager;
	NSNumber* _latitude;
	NSNumber* _longitude;
	NSNumber* _accuracy;
	NSNumber* _speed;
	NSNumber* _timestamp;
	BOOL _isUpdatingLocation;
	int _locationTrackingMode;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int locationTrackingMode;
@property(assign) BOOL isUpdatingLocation;
-(void).cxx_destruct;
-(void)putDataToBuilder:(id)builder;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)handleLocation:(id)location;
-(void)startUpdate;
-(void)createLocationManager;
-(void)collectData;
-(id)init;
@end

@interface MRNetworkDataProvider : MRAbstractDataProvider {
	MRGCNetworkReachability* _reachabilityManager;
	NSString* _connectionValue;
	NSString* _connectionType;
}
+(id)connectionTypeWithRadioAccessTechnology:(id)radioAccessTechnology;
-(void).cxx_destruct;
-(void)putDataToBuilder:(id)builder;
-(void)updateReachabilityValue:(unsigned char)value;
-(void)dealloc;
-(void)startMonitoring;
-(void)collectData;
-(id)init;
@end

@interface MRBase64Utils : XXUnknownSuperclass {
}
+(id)mr_base64EncodedStringWithData:(id)data;
+(id)mr_dataFromBase64String:(id)base64String;
@end

@interface MTRGNativePromoBanner : XXUnknownSuperclass {
	NSString* _advertisingLabel;
	NSString* _ageRestrictions;
	NSString* _title;
	NSString* _descriptionText;
	NSString* _disclaimer;
	NSString* _category;
	NSString* _subcategory;
	NSString* _domain;
	NSString* _ctaText;
	NSNumber* _rating;
	unsigned _votes;
	int _navigationType;
	MTRGImageData* _icon;
	MTRGImageData* _image;
	NSArray* _cards;
}
@property(retain, nonatomic) NSArray* cards;
@property(retain, nonatomic) MTRGImageData* image;
@property(retain, nonatomic) MTRGImageData* icon;
@property(assign, nonatomic) int navigationType;
@property(assign, nonatomic) unsigned votes;
@property(retain, nonatomic) NSNumber* rating;
@property(copy, nonatomic) NSString* ctaText;
@property(copy, nonatomic) NSString* domain;
@property(copy, nonatomic) NSString* subcategory;
@property(copy, nonatomic) NSString* category;
@property(copy, nonatomic) NSString* disclaimer;
@property(copy, nonatomic) NSString* descriptionText;
@property(copy, nonatomic) NSString* title;
@property(copy, nonatomic) NSString* ageRestrictions;
@property(copy, nonatomic) NSString* advertisingLabel;
-(void).cxx_destruct;
@end

@interface MTRGSendLogMessageCommand : MTRGAsyncCommand {
	NSString* _url;
	MTRGLogMessage* _message;
}
-(void).cxx_destruct;
-(void)sendRequestWithData:(id)data;
-(void)run;
-(id)initWithUrl:(id)url logMessage:(id)message;
@end

@interface MTRGStatisticsVideoBanner : MTRGVideoBanner {
}
@end

@interface MTRGAppwallBanner : MTRGBanner {
	BOOL _hasNotification;
	BOOL _itemHighlight;
	BOOL _subitem;
	BOOL _main;
	BOOL _requireCategoryHighlight;
	BOOL _banner;
	BOOL _requireWifi;
	NSString* _status;
	NSString* _mrgsId;
	NSString* _title;
	NSString* _descriptionText;
	NSString* _paidType;
	NSNumber* _rating;
	UIColor* _coinsBgColor;
	UIColor* _coinsTextColor;
	MTRGImageData* _icon;
	MTRGImageData* _statusImage;
	MTRGImageData* _bubbleIcon;
	MTRGImageData* _gotoAppIcon;
	MTRGImageData* _coinsIcon;
	MTRGImageData* _crossNotifIcon;
	MTRGImageData* _itemHighlightIcon;
	unsigned _votes;
	unsigned _coins;
}
@property(assign, nonatomic) unsigned coins;
@property(assign, nonatomic) unsigned votes;
@property(assign, nonatomic) BOOL requireWifi;
@property(assign, nonatomic) BOOL banner;
@property(assign, nonatomic) BOOL requireCategoryHighlight;
@property(assign, nonatomic) BOOL main;
@property(assign, nonatomic) BOOL subitem;
@property(assign, nonatomic) BOOL itemHighlight;
@property(assign, nonatomic) BOOL hasNotification;
@property(retain, nonatomic) MTRGImageData* itemHighlightIcon;
@property(retain, nonatomic) MTRGImageData* crossNotifIcon;
@property(retain, nonatomic) MTRGImageData* coinsIcon;
@property(retain, nonatomic) MTRGImageData* gotoAppIcon;
@property(retain, nonatomic) MTRGImageData* bubbleIcon;
@property(retain, nonatomic) MTRGImageData* statusImage;
@property(retain, nonatomic) MTRGImageData* icon;
@property(retain, nonatomic) UIColor* coinsTextColor;
@property(retain, nonatomic) UIColor* coinsBgColor;
@property(retain, nonatomic) NSNumber* rating;
@property(copy, nonatomic) NSString* paidType;
@property(copy, nonatomic) NSString* descriptionText;
@property(copy, nonatomic) NSString* title;
@property(copy, nonatomic) NSString* mrgsId;
@property(copy, nonatomic) NSString* status;
-(void).cxx_destruct;
@end

@interface MTRGURLRequest : XXUnknownSuperclass {
}
+(id)request;
+(void)redirectRequestWithUrl:(id)url completionBlock:(id)block;
+(void)downloadRequestWithRequest:(id)request toFilePath:(id)filePath completionBlock:(id)block;
+(void)uploadRequestWithRequest:(id)request fromData:(id)data completionBlock:(id)block;
+(void)dataRequestWithRequest:(id)request completionBlock:(id)block;
@end

@interface MTRGFSImageBanner : MTRGBanner {
	BOOL _allowClose;
	NSArray* _landscapeImages;
	NSArray* _portraitImages;
	MTRGImageData* _closeIcon;
}
@property(retain, nonatomic) MTRGImageData* closeIcon;
@property(assign, nonatomic) BOOL allowClose;
@property(retain, nonatomic) NSArray* portraitImages;
@property(retain, nonatomic) NSArray* landscapeImages;
-(void).cxx_destruct;
-(id)initWithType:(id)type bannerID:(id)anId;
@end

@interface MTRGInstreamAdCompanionBanner : XXUnknownSuperclass {
	unsigned _width;
	unsigned _height;
	unsigned _assetWidth;
	unsigned _assetHeight;
	unsigned _expandedWidth;
	unsigned _expandedHeight;
	NSString* _staticResource;
	NSString* _iframeResource;
	NSString* _htmlResource;
	NSString* _apiFramework;
	NSString* _adSlotID;
	NSString* _required;
}
@property(copy, nonatomic) NSString* required;
@property(copy, nonatomic) NSString* adSlotID;
@property(copy, nonatomic) NSString* apiFramework;
@property(copy, nonatomic) NSString* htmlResource;
@property(copy, nonatomic) NSString* iframeResource;
@property(copy, nonatomic) NSString* staticResource;
@property(assign, nonatomic) unsigned expandedHeight;
@property(assign, nonatomic) unsigned expandedWidth;
@property(assign, nonatomic) unsigned assetHeight;
@property(assign, nonatomic) unsigned assetWidth;
@property(assign, nonatomic) unsigned height;
@property(assign, nonatomic) unsigned width;
-(void).cxx_destruct;
@end

@interface MTRGStatisticsAudioBanner : MTRGAudioBanner {
}
@end

@interface MTRGLoadAdCommand : MTRGAsyncCommand {
	unsigned _attempts;
	NSString* _finalUrl;
	MTRGAdService* _adService;
	MTRGAdParams* _adParams;
}
@property(readonly, assign, nonatomic) MTRGAdParams* adParams;
@property(readonly, assign, nonatomic) MTRGAdService* adService;
-(void).cxx_destruct;
-(void)onFinishAdRequest;
-(void)onCompleteRequest:(BOOL)request data:(id)data error:(id)error;
-(void)makeAdRequest;
-(void)run;
-(id)initWithAdService:(id)adService adParams:(id)params;
@end

@interface MTRGVastUtils : XXUnknownSuperclass {
}
+(id)statFromTrackingEvent:(id)trackingEvent;
+(id)calcAllowCloseDelayWithOffset:(id)offset duration:(double)duration;
+(id)createVideoDataWithVastMediafile:(id)vastMediafile;
+(id)createAudioDataWithVastMediafile:(id)vastMediafile;
+(id)statFromLinearVideoClick:(id)linearVideoClick;
+(id)normalizeStatItem:(id)item forVideoBanner:(id)videoBanner;
+(id)normalizeStatItem:(id)item forAudioBanner:(id)audioBanner;
+(id)statFromVastImpression:(id)vastImpression;
@end

@interface MTRGVideoUtils : XXUnknownSuperclass {
}
+(double)normalizeMidrollPoint:(double)point pointP:(float)p videoDuration:(double)duration;
+(id)calcMidpointsForSection:(id)section userMidpoints:(id)midpoints videoDuration:(double)duration;
+(id)urlForVideoData:(id)videoData;
+(id)findReachedValueStatisticsWithBanner:(id)banner;
+(double)durationWithRealDuration:(double)realDuration jsonDuration:(double)duration;
+(id)findBestVideoWithBanner:(id)banner videoQuality:(unsigned)quality;
@end

@interface MTRGInstreamAudioAdSection : MTRGSection {
	NSMutableArray* _audioSections;
}
@property(readonly, assign, nonatomic) NSArray* audioSections;
-(void).cxx_destruct;
-(unsigned)bannersCount;
-(id)audioSectionByName:(id)name;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGVideoData : MTRGMediaData {
}
@property(readonly, copy, nonatomic) NSString* path;
@end

@interface MTRGStat : XXUnknownSuperclass {
	NSString* _type;
	NSString* _url;
}
@property(readonly, copy, nonatomic) NSString* url;
@property(readonly, copy, nonatomic) NSString* type;
-(void).cxx_destruct;
-(id)initWithType:(id)type url:(id)url;
@end

@interface MTRGProgressStat : MTRGStat {
	NSNumber* _value;
	NSNumber* _pValue;
}
@property(retain, nonatomic) NSNumber* pValue;
@property(retain, nonatomic) NSNumber* value;
-(void).cxx_destruct;
-(id)initWithPValue:(id)pvalue url:(id)url;
-(id)initWithValue:(id)value url:(id)url;
@end

@interface MTRGFullscreenSliderSection : MTRGSection {
	MTRGImageData* _closeIconHd;
	NSString* _markerColor;
	NSString* _activeMarkerColor;
	NSString* _backgroundColor;
}
@property(copy, nonatomic) NSString* backgroundColor;
@property(copy, nonatomic) NSString* activeMarkerColor;
@property(copy, nonatomic) NSString* markerColor;
@property(retain, nonatomic) MTRGImageData* closeIconHd;
-(void).cxx_destruct;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGNavigationHelper : XXUnknownSuperclass <SFSafariViewControllerDelegate> {
	UIViewController* _appController;
	UIViewController* _fullscreenController;
	MTRGStoreProductViewControllerHelper* _productHelper;
	BOOL _closeOnClick;
	BOOL _isSafariViewControllerPresented;
	id _onCloseFullscreenControllerBlock;
	id _onNeedCloseFullscreenViewBlock;
	id _onInAppStartedBlock;
	id _onInAppFinishedBlock;
	MTRGBanner* _activeBanner;
	id<MTRGNavigationHelperDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<MTRGNavigationHelperDelegate> delegate;
-(void).cxx_destruct;
-(void)safariViewController:(id)controller didCompleteInitialLoad:(BOOL)load;
-(void)safariViewControllerDidFinish:(id)safariViewController;
-(void)openStoreKitWithProductId:(id)productId forBanner:(id)banner withController:(id)controller onOpenProductComplete:(id)complete onClose:(id)close onError:(id)error;
-(void)clearActiveBanner;
-(void)getOwnerControllerWithBlock:(id)block;
-(void)closeFullscreenViewIfNeedWithAnimation:(BOOL)animation;
-(BOOL)isAppInstalledBeforeIOS9WithUrl:(id)url;
-(BOOL)isUniversalLinkWithUrl:(id)url;
-(void)openStoreKitControllerWithProductId:(id)productId forBanner:(id)banner onOpenProductComplete:(id)complete onClose:(id)close onError:(id)error;
-(void)gotoExternIdOrWebLogicWithBanner:(id)banner;
-(void)handleAppClickBeforeIOS9WithBanner:(id)banner;
-(void)handleAppClickIOS9AndAfterWithBanner:(id)banner;
-(void)handleAppClickWithBanner:(id)banner;
-(void)openUrlInExternalApp:(id)externalApp forBanner:(id)banner;
-(void)closeFullscreenIfNeed;
-(void)openWebUrl:(id)url forBanner:(id)banner;
-(void)handleWebClickWithBanner:(id)banner;
-(void)doHandleTrackingLinkWithBanner:(id)banner;
-(void)sendAllClickStatForBanner:(id)banner;
-(void)delegateOnInAppFinished;
-(void)delegateOnInAppStarted;
-(void)delegateOnNeedCloseFullscreenViewWithAnimation:(BOOL)animation;
-(void)delegateOnCloseFullscreenController;
-(void)handleClickWithBanner:(id)banner appController:(id)controller fullscreenController:(id)controller3 closeOnClick:(BOOL)click;
-(void)applicationWillResignActive:(id)application;
-(void)dealloc;
-(id)init;
@end

@interface MTRGAdData : XXUnknownSuperclass {
	MTRGNavigationHelper* _navigationHelper;
	NSMutableArray* _sections;
	BOOL _isFromCache;
	NSString* _url;
	NSString* _rawData;
	NSString* _htmlWrapper;
	NSDictionary* _jsonDict;
}
@property(readonly, assign, nonatomic) MTRGNavigationHelper* navigationHelper;
@property(assign, nonatomic) BOOL isFromCache;
@property(retain, nonatomic) NSDictionary* jsonDict;
@property(copy, nonatomic) NSString* htmlWrapper;
@property(copy, nonatomic) NSString* rawData;
@property(copy, nonatomic) NSString* url;
+(id)excludedBanners;
+(id)excludedBannersArray;
-(void).cxx_destruct;
-(void)checkExclude;
-(void)handleClickWithBanner:(id)banner appController:(id)controller fullscreenController:(id)controller3 closeOnClick:(BOOL)click;
-(void)handleClickWithBanner:(id)banner appController:(id)controller;
-(id)sectionByType:(id)type;
-(id)sectionByName:(id)name;
-(void)addSection:(id)section;
-(id)init;
@end

@interface MTRGLoadAppwallAdCommand : MTRGLoadAdCommand {
}
-(void)run;
@end

@interface MTRGStandardBanner : MTRGBanner {
	NSString* _title;
	NSString* _descriptionText;
	NSString* _disclaimer;
	NSString* _category;
	NSString* _domain;
	NSNumber* _rating;
	MTRGImageData* _image;
	MTRGImageData* _mainImage;
	unsigned _votes;
}
@property(assign, nonatomic) unsigned votes;
@property(retain, nonatomic) MTRGImageData* mainImage;
@property(retain, nonatomic) MTRGImageData* image;
@property(retain, nonatomic) NSNumber* rating;
@property(copy, nonatomic) NSString* domain;
@property(copy, nonatomic) NSString* category;
@property(copy, nonatomic) NSString* disclaimer;
@property(copy, nonatomic) NSString* descriptionText;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

@interface MTRGMediaData : XXUnknownSuperclass {
	NSString* _url;
	id _data;
	CGSize _size;
}
@property(assign, nonatomic) CGSize size;
@property(retain, nonatomic) id data;
@property(readonly, copy, nonatomic) NSString* url;
-(void).cxx_destruct;
-(id)initWithUrl:(id)url;
-(id)init;
@end

@interface MTRGUrlUtils : XXUnknownSuperclass {
}
+(id)adUrlWithAdParams:(id)adParams baseUrl:(id)url params:(id)params;
+(BOOL)isAppInstalled:(id)installed;
+(id)urlencode:(id)urlencode;
+(BOOL)isSecureURL:(id)url;
+(BOOL)isAppstoreLinkWithURL:(id)url;
@end

@interface MTRGAdParserUtils : XXUnknownSuperclass {
}
+(int)parseFullscreenPromoStyleFromNumber:(id)number defaultStyle:(int)style;
+(id)jsonFragmentForParseError:(id)parseError jsonString:(id)string;
+(int)errorPositionForJson:(id)json parseError:(id)error;
+(id)jsonParserErrorForString:(id)string jsonError:(id)error;
+(id)imageDataWithDataDict:(id)dataDict urlKey:(id)key widthKey:(id)key3 heightKey:(id)key4;
+(id)imageDataWithDataDict:(id)dataDict urlKey:(id)key;
+(id)normalizeProgressValue:(id)value pValue:(id)value2 duration:(double)duration;
@end

@interface MTRGVideoBanner : MTRGBanner {
	NSMutableArray* _videoDatas;
	BOOL _allowClose;
	BOOL _autoplay;
	BOOL _hasCtaButton;
	BOOL _showPlayerControls;
	BOOL _automute;
	BOOL _allowReplay;
	NSString* _closeActionText;
	NSString* _replayActionText;
	MTRGImageData* _preview;
	float _pointP;
	double _duration;
	double _allowCloseDelay;
	double _point;
}
@property(assign, nonatomic) float pointP;
@property(assign, nonatomic) double point;
@property(assign, nonatomic) BOOL allowReplay;
@property(assign, nonatomic) BOOL automute;
@property(assign, nonatomic) BOOL showPlayerControls;
@property(assign, nonatomic) BOOL hasCtaButton;
@property(assign, nonatomic) BOOL autoplay;
@property(assign, nonatomic) BOOL allowClose;
@property(assign, nonatomic) double allowCloseDelay;
@property(assign, nonatomic) double duration;
@property(retain, nonatomic) MTRGImageData* preview;
@property(readonly, assign, nonatomic) NSArray* videoDatas;
@property(copy, nonatomic) NSString* replayActionText;
@property(copy, nonatomic) NSString* closeActionText;
-(void).cxx_destruct;
-(void)addVideoData:(id)data;
-(id)initWithType:(id)type bannerID:(id)anId;
@end

@interface MTRGUserDefaultsStorage : XXUnknownSuperclass {
}
+(id)instance;
-(id)getValueForKey:(id)key;
-(void)setValue:(id)value forKey:(id)key;
-(id)getDictionaryForKey:(id)key;
-(void)setDictionary:(id)dictionary forKey:(id)key;
-(id)getVendorIdCached;
-(void)setVendorIdCached:(id)cached;
-(id)getDataForSlotId:(unsigned)slotId;
-(void)updateDataForSlotId:(unsigned)slotId data:(id)data;
-(void)putDataForSlotId:(unsigned)slotId data:(id)data cachePeriod:(double)period;
@end

@interface MTRGCompanionBanner : MTRGBanner {
	unsigned _assetWidth;
	unsigned _assetHeight;
	unsigned _expandedWidth;
	unsigned _expandedHeight;
	NSString* _staticResource;
	NSString* _iframeResource;
	NSString* _htmlResource;
	NSString* _apiFramework;
	NSString* _adSlotID;
	NSString* _required;
}
@property(copy, nonatomic) NSString* required;
@property(copy, nonatomic) NSString* adSlotID;
@property(copy, nonatomic) NSString* apiFramework;
@property(copy, nonatomic) NSString* htmlResource;
@property(copy, nonatomic) NSString* iframeResource;
@property(copy, nonatomic) NSString* staticResource;
@property(assign, nonatomic) unsigned expandedHeight;
@property(assign, nonatomic) unsigned expandedWidth;
@property(assign, nonatomic) unsigned assetHeight;
@property(assign, nonatomic) unsigned assetWidth;
-(void).cxx_destruct;
@end

@interface MTRGExecutor : XXUnknownSuperclass {
	NSMutableArray* _mainCommandsQueue;
	NSMutableArray* _secondCommandsQueue;
	NSOperationQueue* _operationQueue;
}
+(id)instance;
-(void).cxx_destruct;
-(id)queueForCommand:(id)command;
-(void)runOnQueue:(id)queue;
-(void)removeFromQueue:(id)queue;
-(void)addToQueue:(id)queue;
-(id)init;
@end

@interface MTRGAsyncCommand : XXUnknownSuperclass {
	id _completionBlock;
	BOOL _isLowPriority;
	id _result;
	NSString* _error;
}
@property(readonly, assign, nonatomic) BOOL isLowPriority;
@property(readonly, copy, nonatomic) NSString* error;
@property(readonly, assign, nonatomic) id result;
-(void).cxx_destruct;
-(void)setError:(id)error;
-(void)setResult:(id)result;
-(void)executeWithCompletionBlock:(id)completionBlock;
-(void)execute;
-(void)finish;
-(void)run;
-(id)initWithLowPriority;
@end

@interface MTRGSection : XXUnknownSuperclass {
	NSMutableArray* _banners;
	NSString* _advertisingLabel;
	NSString* _type;
	NSString* _name;
}
@property(readonly, assign, nonatomic) unsigned bannersCount;
@property(readonly, assign, nonatomic) NSArray* banners;
@property(readonly, copy, nonatomic) NSString* name;
@property(readonly, copy, nonatomic) NSString* type;
@property(copy, nonatomic) NSString* advertisingLabel;
-(void).cxx_destruct;
-(id)firstBanner;
-(void)addBanner:(id)banner forIndex:(unsigned)index;
-(void)removeBanners:(id)banners;
-(void)addBanner:(id)banner;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGFingerprintDataProvider : MTRGAbstractDataProvider {
	MTRGDeviceDataProvider* _deviceDataProvider;
	MTRGNetworkDataProvider* _networkDataProvider;
	MTRGLocationDataProvider* _locationDataProvider;
	MTRGEnvironmentDataProvider* _environmentDataProvider;
	BOOL _trackEnvironmentEnabled;
}
+(id)instance;
-(void).cxx_destruct;
-(void)setTrackEnvironmentEnabled:(BOOL)enabled;
-(id)deviceData;
-(void)collectData;
-(id)data;
-(id)init;
@end

@interface MTRGHosts : XXUnknownSuperclass {
}
+(id)logHost;
+(id)adHostForAdFormat:(id)adFormat;
@end

@interface MTRGVideoVastConverter : XXUnknownSuperclass {
}
+(void)convertVastInline:(id)anInline toVideoSection:(id)videoSection toAdData:(id)adData adService:(id)service;
+(id)videoBannerFromVastInLineLinear:(id)lineLinear withBannerID:(id)bannerID;
+(void)convertVastWrapper:(id)wrapper forAdService:(id)adService;
+(void)convertVast:(id)vast videoSection:(id)section toAdData:(id)adData adService:(id)service;
@end

@interface MTRGSectionViewSettings : XXUnknownSuperclass {
	BOOL _titleBold;
	BOOL _descriptionBold;
	BOOL _domainBold;
	BOOL _votesBold;
	BOOL _disclaimerBold;
	BOOL _ctaButtonTextBold;
	int _type;
	UIColor* _backgroundColor;
	UIColor* _backgroundTouchColor;
	UIColor* _titleColor;
	UIColor* _ageRestrictionsBackgroundColor;
	UIColor* _ageRestrictionsTextColor;
	UIColor* _ageRestrictionsBorderColor;
	UIColor* _descriptionColor;
	UIColor* _domainColor;
	UIColor* _votesColor;
	UIColor* _disclaimerColor;
	UIColor* _ctaButtonColor;
	UIColor* _ctaButtonTouchColor;
	UIColor* _ctaButtonTextColor;
}
@property(assign, nonatomic) BOOL ctaButtonTextBold;
@property(retain, nonatomic) UIColor* ctaButtonTextColor;
@property(retain, nonatomic) UIColor* ctaButtonTouchColor;
@property(retain, nonatomic) UIColor* ctaButtonColor;
@property(assign, nonatomic) BOOL disclaimerBold;
@property(retain, nonatomic) UIColor* disclaimerColor;
@property(assign, nonatomic) BOOL votesBold;
@property(retain, nonatomic) UIColor* votesColor;
@property(assign, nonatomic) BOOL domainBold;
@property(retain, nonatomic) UIColor* domainColor;
@property(assign, nonatomic) BOOL descriptionBold;
@property(retain, nonatomic) UIColor* descriptionColor;
@property(retain, nonatomic) UIColor* ageRestrictionsBorderColor;
@property(retain, nonatomic) UIColor* ageRestrictionsTextColor;
@property(retain, nonatomic) UIColor* ageRestrictionsBackgroundColor;
@property(assign, nonatomic) BOOL titleBold;
@property(retain, nonatomic) UIColor* titleColor;
@property(retain, nonatomic) UIColor* backgroundTouchColor;
@property(retain, nonatomic) UIColor* backgroundColor;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(id)initWithSectionType:(id)sectionType;
@end

@interface MTRGURLSessionRedirectRequestHolder : XXUnknownSuperclass {
	BOOL _success;
	NSString* _url;
	id _completionBlock;
	unsigned _redirectsCount;
}
@property(assign, nonatomic) unsigned redirectsCount;
@property(assign, nonatomic) BOOL success;
@property(copy, nonatomic) id completionBlock;
@property(copy, nonatomic) NSString* url;
-(void).cxx_destruct;
@end

@interface MTRGURLSessionRequest : XXUnknownSuperclass <NSURLSessionTaskDelegate, NSURLSessionDataDelegate, MTRGURLRequestProtocol> {
	NSURLSession* _session;
	NSMutableDictionary* _redirectTasks;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
-(void)redirectRequestWithUrl:(id)url completionBlock:(id)block;
-(void)downloadRequestWithRequest:(id)request toFilePath:(id)filePath completionBlock:(id)block;
-(void)uploadRequestWithRequest:(id)request fromData:(id)data completionBlock:(id)block;
-(void)dataRequestWithRequest:(id)request completionBlock:(id)block;
-(id)init;
@end

@interface MTRGRBParser : XXUnknownSuperclass {
}
+(id)fixHtmlFormat:(id)format error:(id*)error;
+(id)dictionaryFromString:(id)string error:(id*)error;
+(BOOL)isRBJson:(id)json;
+(BOOL)isRBHtmlJson:(id)json;
+(BOOL)parseHTMLData:(id)data toJson:(id*)json andHtmlWrapper:(id*)wrapper;
+(BOOL)parseAdData:(id)data fromDict:(id)dict adService:(id)service adFormat:(id)format onSentry:(id)sentry error:(id*)error;
+(BOOL)parseAdData:(id)data fromJsonString:(id)jsonString adService:(id)service error:(id*)error onSentry:(id)sentry adFormat:(id)format;
+(void)setJsonDictionaryToAdData:(id)adData jsonDictionary:(id)dictionary;
+(BOOL)isValidVersion:(id)version;
@end

@interface MTRGCommandsFactory : XXUnknownSuperclass {
}
+(id)commandForLoadVideoAdWithAdServices:(id)adServices adParams:(id)params adData:(id)data;
+(id)commandForUpdateNotificationWithData:(id)data slotId:(unsigned)anId bannerId:(id)anId3;
+(id)commandForLoadMediaWithMediaData:(id)mediaData;
+(id)commandForSendLogWithMessage:(id)message;
+(id)commandForStoreAdDataWithData:(id)data params:(id)params;
+(id)commandForSendStatWithUrl:(id)url;
+(id)commandForLoadAdWithAdParams:(id)adParams;
@end

@interface MTRGAppwallSection : MTRGSection {
	BOOL _hasNotification;
	NSString* _title;
	MTRGImageData* _icon;
	MTRGImageData* _bubbleIcon;
	MTRGImageData* _gotoAppIcon;
	MTRGImageData* _itemHighlightIcon;
	NSMutableDictionary* _statusIcons;
}
@property(assign, nonatomic) BOOL hasNotification;
@property(retain, nonatomic) NSMutableDictionary* statusIcons;
@property(retain, nonatomic) MTRGImageData* itemHighlightIcon;
@property(retain, nonatomic) MTRGImageData* gotoAppIcon;
@property(retain, nonatomic) MTRGImageData* bubbleIcon;
@property(retain, nonatomic) MTRGImageData* icon;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)findStatusIconImageData:(id)data;
@end

@interface MTRGManager : XXUnknownSuperclass {
}
+(unsigned)maxConnectionsPerHost;
+(void)setMaxConnectionsPerHost:(unsigned)host;
+(void)trackUrl:(id)url;
+(id)getFingerprintParams;
@end

@interface MTRGDeviceDataProvider : MTRGAbstractDataProvider {
}
+(id)generateMRGSUDID;
-(id)appBuild;
-(id)appVersion;
-(id)appIdentifier;
-(id)deviceLocale;
-(id)deviceLanguage;
-(id)deviceTimeZone;
-(id)screenDpi;
-(id)screenDensity;
-(id)screenHeight;
-(id)screenWidth;
-(id)model;
-(id)deviceIdentifierForVendor;
-(id)cacheVendorIdIfNeeded:(id)needed;
-(void)collectData;
@end

@interface MTRGStoreProcuctLoadingControllerContentView : XXUnknownSuperclass {
	UIActivityIndicatorView* _progress;
	id _cancelBlock;
	BOOL _cancelButtonIsActive;
}
-(void).cxx_destruct;
-(void)onButtonTouchLeave;
-(void)onButtonStateChanged:(BOOL)changed;
-(void)layoutSubviews;
-(void)closeTapped:(id)tapped;
-(id)initWithCancelBlock:(id)cancelBlock;
@end

@interface MTRGStoreProcuctLoadingViewController : XXUnknownSuperclass {
	MTRGStoreProcuctLoadingControllerContentView* _contentView;
	UINavigationBar* _navigationBar;
	id _cancelBlock;
}
-(void).cxx_destruct;
-(void)viewDidLayoutSubviews;
-(void)updateViewLayouts;
-(CGRect)calcViewFrameRectWithNewStatusBarHeight:(float)newStatusBarHeight;
-(void)viewDidLoad;
-(void)cancelTapped:(id)tapped;
-(id)initWithCancelBlock:(id)cancelBlock;
-(BOOL)isRussianStore;
@end

@interface MTRGLogMessage : XXUnknownSuperclass {
	NSString* _title;
	NSString* _desc;
	NSString* _reason;
	NSString* _url;
	NSDictionary* _data;
	int _level;
}
@property(assign, nonatomic) int level;
@property(readonly, assign, nonatomic) NSDictionary* data;
@property(copy, nonatomic) NSString* url;
@property(copy, nonatomic) NSString* reason;
@property(copy, nonatomic) NSString* desc;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)asDictionary;
-(void)send;
-(void)addValue:(id)value forKey:(id)key;
-(id)initWithTitle:(id)title;
-(id)init;
@end

@interface MTRGLogger : XXUnknownSuperclass {
}
+(id)dateFormatter;
+(id)generateUUID;
+(id)base64forData:(id)data;
+(id)extraDataWithLogMessage:(id)logMessage;
+(id)getDataForMessage:(id)message;
+(id)errorMessageWithError:(id)error;
+(id)warnMessageWithTitle:(id)title;
+(id)errorMessageWithTitle:(id)title;
@end

@interface MTRGNativeAppwallBanner : XXUnknownSuperclass {
	BOOL _hasNotification;
	BOOL _subitem;
	BOOL _isAppInstalled;
	BOOL _main;
	BOOL _requireCategoryHighlight;
	BOOL _banner;
	BOOL _requireWifi;
	NSString* _status;
	NSString* _title;
	NSString* _descriptionText;
	NSString* _paidType;
	NSString* _mrgsId;
	NSNumber* _rating;
	unsigned _votes;
	unsigned _coins;
	UIColor* _coinsBgColor;
	UIColor* _coinsTextColor;
	MTRGImageData* _icon;
	MTRGImageData* _statusImage;
	MTRGImageData* _coinsIcon;
	MTRGImageData* _crossNotifIcon;
	MTRGImageData* _bubbleIcon;
	MTRGImageData* _gotoAppIcon;
	MTRGImageData* _itemHighlightIcon;
}
@property(retain, nonatomic) MTRGImageData* itemHighlightIcon;
@property(retain, nonatomic) MTRGImageData* gotoAppIcon;
@property(retain, nonatomic) MTRGImageData* bubbleIcon;
@property(retain, nonatomic) MTRGImageData* crossNotifIcon;
@property(retain, nonatomic) MTRGImageData* coinsIcon;
@property(retain, nonatomic) MTRGImageData* statusImage;
@property(retain, nonatomic) MTRGImageData* icon;
@property(retain, nonatomic) UIColor* coinsTextColor;
@property(retain, nonatomic) UIColor* coinsBgColor;
@property(assign, nonatomic) unsigned coins;
@property(assign, nonatomic) unsigned votes;
@property(retain, nonatomic) NSNumber* rating;
@property(assign, nonatomic) BOOL requireWifi;
@property(assign, nonatomic) BOOL banner;
@property(assign, nonatomic) BOOL requireCategoryHighlight;
@property(assign, nonatomic) BOOL main;
@property(assign, nonatomic) BOOL isAppInstalled;
@property(assign, nonatomic) BOOL subitem;
@property(assign, nonatomic) BOOL hasNotification;
@property(copy, nonatomic) NSString* mrgsId;
@property(copy, nonatomic) NSString* paidType;
@property(copy, nonatomic) NSString* descriptionText;
@property(copy, nonatomic) NSString* title;
@property(copy, nonatomic) NSString* status;
-(void).cxx_destruct;
@end

@interface MTRGFSPromoBanner : MTRGNativeBanner {
	BOOL _extendedClickArea;
	BOOL _closeOnClick;
	BOOL _allowClose;
	MTRGImageData* _closeIconHd;
	MTRGImageData* _playIconHd;
	MTRGImageData* _storeIconHd;
	UIColor* _footerColor;
	UIColor* _ctaButtonColor;
	UIColor* _ctaButtonTouchColor;
	UIColor* _ctaButtonTextColor;
	int _style;
	double _allowCloseDelay;
}
@property(assign, nonatomic) int style;
@property(assign, nonatomic) BOOL allowClose;
@property(assign, nonatomic) BOOL closeOnClick;
@property(assign, nonatomic) BOOL extendedClickArea;
@property(assign, nonatomic) double allowCloseDelay;
@property(retain, nonatomic) UIColor* ctaButtonTextColor;
@property(retain, nonatomic) UIColor* ctaButtonTouchColor;
@property(retain, nonatomic) UIColor* ctaButtonColor;
@property(retain, nonatomic) UIColor* footerColor;
@property(retain, nonatomic) MTRGImageData* storeIconHd;
@property(retain, nonatomic) MTRGImageData* playIconHd;
@property(retain, nonatomic) MTRGImageData* closeIconHd;
-(void).cxx_destruct;
-(id)initWithType:(id)type bannerID:(id)anId;
@end

@interface MTRGCustomParams : XXUnknownSuperclass {
	NSMutableDictionary* _customParams;
	NSNumber* _age;
	int _gender;
	NSString* _language;
	NSString* _email;
	NSString* _phone;
	NSString* _icqId;
	NSString* _okId;
	NSString* _vkId;
	NSString* _mrgsAppId;
	NSString* _mrgsUserId;
	NSString* _mrgsDeviceId;
}
@property(copy) NSString* mrgsDeviceId;
@property(copy) NSString* mrgsUserId;
@property(copy) NSString* mrgsAppId;
@property(copy) NSString* vkId;
@property(copy) NSString* okId;
@property(copy) NSString* icqId;
@property(copy) NSString* phone;
@property(copy) NSString* email;
@property(copy) NSString* language;
@property(assign, nonatomic) int gender;
@property(retain) NSNumber* age;
-(void).cxx_destruct;
-(id)customParamForKey:(id)key;
-(void)setCustomParam:(id)param forKey:(id)key;
-(id)asDictionary;
-(id)genderToRequestString:(int)requestString;
-(id)init;
@end

@interface MTRGRBSectionParser : XXUnknownSuperclass {
}
+(id)parseStatFromDataDict:(id)dataDict;
+(id)parseStats:(id)stats error:(id*)error;
+(void)parseAdditionalDataFromDataDict:(id)dataDict index:(unsigned)index adData:(id)data toAdService:(id)adService audioSection:(id)section;
+(void)parseAdditionalDataFromDataDict:(id)dataDict index:(unsigned)index adData:(id)data toAdService:(id)adService videoSection:(id)section;
+(void)addStatsToBanner:(id)banner fromAdService:(id)adService duration:(double)duration;
+(void)parseAudioSection:(id)section bannersArray:(id)array settingsDataDict:(id)dict adData:(id)data adService:(id)service;
+(void)parseVideoSection:(id)section bannersArray:(id)array settingsDataDict:(id)dict adData:(id)data adService:(id)service;
+(void)parseSection:(id)section fromDataDict:(id)dataDict adData:(id)data adService:(id)service onLog:(id)log;
+(void)parseFullscreenSliderSection:(id)section fromDataDict:(id)dataDict settingsDataDict:(id)dict adData:(id)data adService:(id)service;
+(int)parseAdViewAnimationTypeFromNumber:(id)number;
+(BOOL)parseStandardAdSection:(id)section dataDict:(id)dict settingsDataDict:(id)dict3 adData:(id)data adService:(id)service;
+(void)parseViewSettings:(id)settings withDataDict:(id)dataDict;
+(void)parseNativeAdSection:(id)section fromDataDict:(id)dataDict settingsDataDict:(id)dict adData:(id)data adService:(id)service;
+(void)parseFullscreenSection:(id)section fromDataDict:(id)dataDict settingsDataDict:(id)dict adData:(id)data adService:(id)service;
+(BOOL)parseInstreamAudioAdSection:(id)section fromDataDict:(id)dataDict settingsDataDict:(id)dict onLogEvent:(id)event adData:(id)data adService:(id)service;
+(BOOL)parseInstreamAdSection:(id)section fromDataDict:(id)dataDict settingsDataDict:(id)dict onLogEvent:(id)event adData:(id)data adService:(id)service;
+(BOOL)parseAppWallSection:(id)section fromDataDict:(id)dataDict settingsDataDict:(id)dict adData:(id)data adService:(id)service;
+(id)errorMsgForAdData:(id)adData adService:(id)service error:(id)error;
@end

@interface MTRGResponseParser : XXUnknownSuperclass {
}
+(void)parseVast:(id)vast adData:(id)data adParams:(id)params adService:(id)service onSentry:(id)sentry;
+(void)parseRBData:(id)data adData:(id)data2 adParams:(id)params adService:(id)service onSentry:(id)sentry;
+(void)parseResponseWithString:(id)string adData:(id)data adParams:(id)params adService:(id)service;
+(void)parseResponseWithData:(id)data adData:(id)data2 adParams:(id)params adService:(id)service;
@end

@interface MTRGAudioBanner : MTRGBanner {
	NSMutableArray* _companionBanners;
	NSMutableArray* _shareButtonDatas;
	BOOL _allowSeek;
	BOOL _allowSkip;
	BOOL _allowTrackChange;
	float _pointP;
	NSString* _adText;
	MTRGAudioData* _audioData;
	double _duration;
	double _point;
}
@property(readonly, assign, nonatomic) NSArray* shareButtonDatas;
@property(readonly, assign, nonatomic) NSArray* companionBanners;
@property(readonly, assign, nonatomic) MTRGAudioData* audioData;
@property(copy, nonatomic) NSString* adText;
@property(assign, nonatomic) BOOL allowTrackChange;
@property(assign, nonatomic) BOOL allowSkip;
@property(assign, nonatomic) BOOL allowSeek;
@property(assign, nonatomic) float pointP;
@property(assign, nonatomic) double point;
@property(assign, nonatomic) double duration;
-(void).cxx_destruct;
-(void)addCompanionBanners:(id)banners;
-(void)addCompanionBanner:(id)banner;
-(void)setCompanionBanners:(id)banners;
-(void)addShareButtonDatas:(id)datas;
-(void)addShareButtonData:(id)data;
-(void)setShareButtonDatas:(id)datas;
-(void)setAudioData:(id)data;
-(id)initWithType:(id)type bannerID:(id)anId;
@end

@interface MTRGAbstractDataProvider : XXUnknownSuperclass {
	NSMutableDictionary* _data;
}
-(void).cxx_destruct;
-(unsigned)dataCount;
-(BOOL)hasData;
-(void)removeParamForKey:(id)key;
-(void)addParam:(id)param forKey:(id)key;
-(id)data;
-(void)collectData;
-(id)init;
@end

@interface MTRGSectionsFactory : XXUnknownSuperclass {
}
+(id)audioSectionWithName:(id)name;
+(id)videoSectionWithName:(id)name;
+(id)sectionWithName:(id)name;
@end

@interface MTRGAudioVastConverter : XXUnknownSuperclass {
}
+(id)companionBannerWithVastCompanionAd:(id)vastCompanionAd;
+(id)audioBannerFromVastInLineLinear:(id)lineLinear withBannerID:(id)bannerID;
+(void)convertVastInline:(id)anInline toAudioSection:(id)audioSection toAdData:(id)adData adService:(id)service;
+(void)convertVastWrapper:(id)wrapper forAdService:(id)adService;
+(void)convertVast:(id)vast audioSection:(id)section toAdData:(id)adData adService:(id)service;
@end

@interface MTRGStandardSection : MTRGSection {
	BOOL _hasAdditionalAds;
	BOOL _loopRotation;
	BOOL _extendedClickArea;
	MTRGSectionViewSettings* _viewSettings;
	int _animationType;
	double _refreshTime;
}
@property(assign, nonatomic) int animationType;
@property(assign, nonatomic) BOOL extendedClickArea;
@property(assign, nonatomic) BOOL loopRotation;
@property(assign, nonatomic) BOOL hasAdditionalAds;
@property(assign, nonatomic) double refreshTime;
@property(readonly, assign, nonatomic) MTRGSectionViewSettings* viewSettings;
-(void).cxx_destruct;
-(id)findBannerById:(id)anId;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGAudioSection : MTRGSection {
	NSMutableArray* _stats;
	NSMutableArray* _doAfterServices;
	NSMutableArray* _midpointServices;
	BOOL _allowClose;
	unsigned _maxBannersShow;
	double _allowCloseDelay;
	double _connectionTimeout;
}
@property(readonly, assign, nonatomic) NSArray* stats;
@property(readonly, assign, nonatomic) NSArray* midpointServices;
@property(readonly, assign, nonatomic) NSArray* doAdfterServices;
@property(assign, nonatomic) unsigned maxBannersShow;
@property(assign, nonatomic) double connectionTimeout;
@property(assign, nonatomic) double allowCloseDelay;
@property(assign, nonatomic) BOOL allowClose;
-(void).cxx_destruct;
-(void)removeMidpointServices:(id)services;
-(id)popDoAfterService;
-(id)popMidpointServicesWithPoint:(double)point;
-(void)addAdService:(id)service;
-(void)addStat:(id)stat;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGUpdateNotificationCommand : MTRGAsyncCommand {
	NSString* _data;
	unsigned _slotId;
	NSString* _bannerId;
}
-(void).cxx_destruct;
-(id)setBannerNoNotificationToJsonDict:(id)jsonDict bannerId:(id)anId;
-(void)run;
-(id)initWithData:(id)data slotId:(unsigned)anId bannerId:(id)anId3;
@end

@interface MTRGTracer : XXUnknownSuperclass {
}
+(void)setEnabled:(BOOL)enabled;
+(BOOL)enabled;
@end

@interface MTRGError : XXUnknownSuperclass {
	NSMutableDictionary* _dict;
	unsigned _code;
	NSString* _title;
	NSString* _desc;
}
@property(copy, nonatomic) NSString* desc;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) unsigned code;
+(id)errorWithTitle:(id)title desc:(id)desc;
+(id)errorWithTitle:(id)title code:(unsigned)code;
+(id)errorWithTitle:(id)title;
-(void).cxx_destruct;
-(id)description;
-(id)asString;
-(id)asError;
-(void)addValue:(id)value forKey:(id)key;
-(void)addInfoFromException:(id)exception;
-(void)addInfoFromError:(id)error;
-(id)params;
@end

@interface MTRGImageData : MTRGMediaData {
}
@property(readonly, assign, nonatomic) UIImage* image;
-(id)initWithImage:(id)image;
@end

@interface MTRGNetworkDataProvider : MTRGAbstractDataProvider {
	NSString* _connectionValue;
	NSString* _connectionType;
	CTTelephonyNetworkInfo* _coreTelephonyNetworkInfo;
	MTRGGCNetworkReachability* _reachabilityManager;
}
-(void).cxx_destruct;
-(void)dealloc;
-(id)connectionTypeWithConnectionValue:(id)connectionValue;
-(id)statusStringWithNetworkReachabilityStatus:(unsigned char)networkReachabilityStatus;
-(id)connectionTypeWithRadioAccessTechnology:(id)radioAccessTechnology;
-(void)updateConnection:(unsigned char)connection;
-(void)startMonitoring;
-(void)collectData;
-(id)init;
@end

@interface MTRGVastObject : XXUnknownSuperclass {
	NSMutableArray* _impressions;
	NSMutableArray* _creatives;
	NSMutableArray* _extensions;
	NSMutableArray* _errorUrls;
	int _type;
	NSString* _adSystem;
}
@property(readonly, assign, nonatomic) NSArray* errorUrls;
@property(readonly, assign, nonatomic) NSArray* extensions;
@property(readonly, assign, nonatomic) NSArray* creatives;
@property(readonly, assign, nonatomic) NSArray* impressions;
@property(retain, nonatomic) NSString* adSystem;
@property(assign) int type;
-(void).cxx_destruct;
-(id)findExtensionWithType:(id)type;
-(void)addErrorUrl:(id)url;
-(void)addExtension:(id)extension;
-(void)addCreative:(id)creative;
-(void)addImpression:(id)impression;
-(id)init;
@end

@interface MTRGAudioUtils : XXUnknownSuperclass {
}
+(id)calcMidpointsForSection:(id)section userMidpoints:(id)midpoints audioDuration:(double)duration;
+(id)findReachedValueStatisticsWithBanner:(id)banner;
+(double)normalizeMidrollPoint:(double)point pointP:(float)p audioDuration:(double)duration;
@end

@interface MTRGVideoSection : MTRGSection {
	NSMutableArray* _stats;
	NSMutableArray* _doAfterServices;
	NSMutableArray* _midpointServices;
	BOOL _allowClose;
	unsigned _maxBannersShow;
	double _allowCloseDelay;
	double _connectionTimeout;
}
@property(readonly, assign, nonatomic) NSArray* stats;
@property(readonly, assign, nonatomic) NSArray* midpointServices;
@property(readonly, assign, nonatomic) NSArray* doAdfterServices;
@property(assign, nonatomic) unsigned maxBannersShow;
@property(assign, nonatomic) double connectionTimeout;
@property(assign, nonatomic) double allowCloseDelay;
@property(assign, nonatomic) BOOL allowClose;
-(void).cxx_destruct;
-(void)removeMidpointServices:(id)services;
-(id)popDoAfterService;
-(id)popMidpointServicesWithPoint:(double)point;
-(void)addAdService:(id)service;
-(void)addStat:(id)stat;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGHttpRequestUtils : XXUnknownSuperclass {
}
+(id)userAgent;
+(id)requestWithUrl:(id)url timeout:(double)timeout;
@end

@interface MTRGVastParser : XXUnknownSuperclass <NSXMLParserDelegate> {
	id _logWarningBlock;
	NSXMLParser* _xmlParser;
	NSMutableArray* _currentTagPath;
	NSString* _lastTag;
	MTRGVastObject* _vastObject;
	MTRGVastAdWrapper* _vastWrapper;
	MTRGVastAdInLine* _vastInLine;
	MTRGVastImpression* _impression;
	MTRGVastCreative* _creative;
	MTRGVastCreativeLinear* _creativeLinear;
	BOOL _waitCreatives;
	BOOL _waitTrackingEvents;
	MTRGVastTrackingEvent* _trackingEvent;
	BOOL _waitVideoClicks;
	MTRGVastVideoClick* _videoClick;
	MTRGVastExtension* _extension;
	MTRGVastMediafile* _mediafile;
	MTRGVastCompanion* _companion;
	NSString* _companionRequired;
	BOOL _isAborting;
	MTRGError* _error;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(BOOL)isVastXmlString:(id)string;
+(id)parseVastData:(id)data parseError:(id*)error onLog:(id)log;
-(void).cxx_destruct;
-(BOOL)checkCompanion:(id)companion;
-(BOOL)checkMediafile:(id)mediafile;
-(BOOL)checkCreativeLinear:(id)linear;
-(id)createTrackingEventWithDict:(id)dict;
-(id)vastTimeIntervalFromString:(id)string;
-(double)vastDurationFromString:(id)string;
-(id)percentCountFromString:(id)string;
-(id)timeNumberFromStringHHMMSSmmm:(id)stringHHMMSSmmm;
-(id)timeNumberFromStringHHMMSS:(id)stringHHMMSS;
-(id)numberFromString:(id)string;
-(id)numberValueForKey:(id)key dict:(id)dict;
-(id)stringValueForKey:(id)key dict:(id)dict;
-(void)foundCharacters:(id)characters;
-(id)extenstionValueWithSrcString:(id)srcString;
-(void)foundCDATA:(id)cdata;
-(void)finishParseWithTag:(id)tag;
-(void)startParseWithTag:(id)tag attributes:(id)attributes;
-(void)parser:(id)parser foundCDATA:(id)cdata;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parser:(id)parser validationErrorOccurred:(id)occurred;
-(void)parser:(id)parser parseErrorOccurred:(id)occurred;
-(void)parserDidEndDocument:(id)parser;
-(void)parserDidStartDocument:(id)parser;
-(BOOL)checkResult;
-(void)doLogEventWithError:(id)error;
-(void)finishWithError:(id)error;
-(void)finishWithComplete;
-(id)vastObject;
-(id)parseVastDataPrivate:(id)aPrivate parseError:(id*)error onLog:(id)log;
-(id)init;
@end

@interface MTRGShareButtonData : XXUnknownSuperclass {
	NSString* _name;
	NSString* _imageUrl;
	NSString* _targetUrl;
}
@property(readonly, copy, nonatomic) NSString* targetUrl;
@property(readonly, copy, nonatomic) NSString* imageUrl;
@property(readonly, copy, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)initWithName:(id)name imageUrl:(id)url targetUrl:(id)url3;
@end

@interface MTRGLocationDataProvider : MTRGAbstractDataProvider <CLLocationManagerDelegate> {
	CLLocationManager* _locationManager;
	NSString* _locationString;
	BOOL _isUpdatingLocation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)handleLocation:(id)location;
-(void)collectData;
@end

@interface MTRGNativeBanner : MTRGBanner {
	NSString* _title;
	NSString* _descriptionText;
	NSString* _disclaimer;
	NSString* _domain;
	NSString* _category;
	NSString* _subcategory;
	NSNumber* _rating;
	MTRGImageData* _icon;
	MTRGImageData* _image;
	unsigned _votes;
	MTRGVideoBanner* _videoBanner;
	NSArray* _cards;
}
@property(retain, nonatomic) NSArray* cards;
@property(retain, nonatomic) MTRGVideoBanner* videoBanner;
@property(assign, nonatomic) unsigned votes;
@property(retain, nonatomic) MTRGImageData* image;
@property(retain, nonatomic) MTRGImageData* icon;
@property(retain, nonatomic) NSNumber* rating;
@property(copy, nonatomic) NSString* subcategory;
@property(copy, nonatomic) NSString* category;
@property(copy, nonatomic) NSString* domain;
@property(copy, nonatomic) NSString* disclaimer;
@property(copy, nonatomic) NSString* descriptionText;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

@interface MTRGMediaStorage : XXUnknownSuperclass {
	NSString* _storagePath;
	NSDate* _lastSyncDate;
}
+(id)md5HexDigest:(id)digest;
+(id)instance;
-(void).cxx_destruct;
-(void)removeExpiredFiles;
-(id)getFilePathForKey:(id)key extension:(id)extension;
-(id)getVideoPath:(id)path;
-(id)getImage:(id)image;
-(BOOL)putImage:(id)image forUrl:(id)url;
-(void)sync;
-(id)init;
@end

@interface MTRGVideoViewOptions : XXUnknownSuperclass {
	double _connectionTimeout;
	double _offsetFromStart;
}
@property(assign, nonatomic) double offsetFromStart;
@property(assign, nonatomic) double connectionTimeout;
-(id)init;
@end

@interface MTRGVideoView : XXUnknownSuperclass {
	AVURLAsset* _asset;
	BOOL _isFinishAssetLoading;
	MTRGVideoData* _videoData;
	NSURL* _videoUrl;
	double _duration;
	BOOL _playerItemDidReachEnd;
	AVPlayer* _player;
	AVPlayerItem* _playerItem;
	BOOL _isStarted;
	BOOL _isPaused;
	BOOL _isMetaInfoReceived;
	BOOL _isWaitingTimerCallBack;
	double _lastActivityTime;
	double _currentPlaybackTime;
	double _maxLagTime;
	double _offsetFromStart;
	BOOL _isSuspense;
	BOOL _isTouchDown;
	BOOL _disableTimers;
	id<MTRGVideoViewDelegate> _delegate;
	float _volume;
}
@property(assign, nonatomic) float volume;
@property(readonly, assign, nonatomic) double currentPlaybackTime;
@property(assign, nonatomic) BOOL disableTimers;
@property(assign, nonatomic) __weak id<MTRGVideoViewDelegate> delegate;
+(Class)layerClass;
-(void).cxx_destruct;
-(void)dealloc;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)delegateOnAirPlayActiveChanged:(BOOL)changed;
-(void)delegateOnResumption;
-(void)delegateOnSuspense;
-(void)delegateOnStart;
-(void)delegateOnError:(id)error;
-(void)delegateOnClick;
-(void)delegateOnProgressWithTime:(double)time;
-(void)delegateOnComplete;
-(void)updateLagState:(BOOL)state;
-(void)checkVideoTimeLeftChanged;
-(void)startTimer;
-(void)timerIterationExecute;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)externalPlaybackActiveChanged:(BOOL)changed;
-(void)playerItemStatusChanged:(int)changed;
-(double)durationForPlayerItem:(id)playerItem;
-(void)playerItemDidReachEnd:(id)playerItem;
-(void)playerStart;
-(void)prepareToPlayAsset:(id)playAsset withKeys:(id)keys;
-(void)deletePlayer;
-(void)createPlayer;
-(void)deletePlayerItem;
-(void)createPlayerItemForAsset:(id)asset;
-(void)loadAssetWithUrl:(id)url;
-(void)finishedWithError:(id)error;
-(void)finishedSuccess;
-(void)resume;
-(void)pause;
-(void)stop;
-(void)updatePlayerSound;
-(void)startWithUrl:(id)url options:(id)options;
-(void)clearValues;
-(void)baseInit;
-(id)init;
-(void)setVideoFillMode:(id)mode;
-(void)setPlayer:(id)player;
-(id)player;
@end

@interface MTRGVastTimeInterval : XXUnknownSuperclass {
	NSNumber* _valueSec;
	NSNumber* _valuePercent;
}
@property(retain) NSNumber* valuePercent;
@property(retain) NSNumber* valueSec;
-(void).cxx_destruct;
@end

@interface MTRGVastImpression : XXUnknownSuperclass {
	NSString* _ID;
	NSString* _url;
}
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
@end

@interface MTRGVastCreative : XXUnknownSuperclass {
	NSMutableArray* _companionAds;
	NSString* _ID;
	NSString* _adID;
	NSString* _sequence;
	MTRGVastCreativeLinear* _linear;
}
@property(readonly, assign, nonatomic) NSArray* companionAds;
@property(retain, nonatomic) MTRGVastCreativeLinear* linear;
@property(retain, nonatomic) NSString* sequence;
@property(retain, nonatomic) NSString* adID;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)addCompanion:(id)companion;
-(id)init;
@end

@interface MTRGVastCreativeLinear : XXUnknownSuperclass {
	NSMutableArray* _mediafiles;
	NSMutableArray* _trackingEvents;
	NSMutableArray* _videoClicks;
	MTRGVastTimeInterval* _skipoffset;
	double _duration;
}
@property(retain, nonatomic) MTRGVastTimeInterval* skipoffset;
@property(readonly, assign, nonatomic) NSArray* videoClicks;
@property(readonly, assign, nonatomic) NSArray* trackingEvents;
@property(readonly, assign, nonatomic) NSArray* mediafiles;
@property(assign, nonatomic) double duration;
-(void).cxx_destruct;
-(void)addVideoClick:(id)click;
-(void)addTrackingEvent:(id)event;
-(void)addMediafile:(id)mediafile;
-(id)init;
@end

@interface MTRGVastMediafile : XXUnknownSuperclass {
	NSString* _ID;
	NSString* _delivery;
	NSString* _type;
	NSNumber* _bitrate;
	NSNumber* _width;
	NSNumber* _height;
	NSString* _codec;
	NSString* _url;
}
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* codec;
@property(retain, nonatomic) NSNumber* height;
@property(retain, nonatomic) NSNumber* width;
@property(retain, nonatomic) NSNumber* bitrate;
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSString* delivery;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
@end

@interface MTRGVastCompanion : XXUnknownSuperclass {
	NSNumber* _width;
	NSNumber* _height;
	NSNumber* _assetWidth;
	NSNumber* _assetHeight;
	NSNumber* _expandedWidth;
	NSNumber* _expandedHeight;
	NSString* _ID;
	NSString* _staticResource;
	NSString* _iframeResource;
	NSString* _htmlResource;
	NSString* _apiFramework;
	NSString* _adSlotID;
	NSString* _required;
}
@property(retain, nonatomic) NSString* required;
@property(retain, nonatomic) NSString* adSlotID;
@property(retain, nonatomic) NSString* apiFramework;
@property(retain, nonatomic) NSString* htmlResource;
@property(retain, nonatomic) NSString* iframeResource;
@property(retain, nonatomic) NSString* staticResource;
@property(retain, nonatomic) NSString* ID;
@property(retain, nonatomic) NSNumber* expandedHeight;
@property(retain, nonatomic) NSNumber* expandedWidth;
@property(retain, nonatomic) NSNumber* assetHeight;
@property(retain, nonatomic) NSNumber* assetWidth;
@property(retain, nonatomic) NSNumber* height;
@property(retain, nonatomic) NSNumber* width;
-(void).cxx_destruct;
@end

@interface MTRGVastTrackingEvent : XXUnknownSuperclass {
	NSString* _event;
	NSString* _url;
}
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* event;
-(void).cxx_destruct;
-(id)description;
@end

@interface MTRGVastTrackingEventProgress : MTRGVastTrackingEvent {
	MTRGVastTimeInterval* _offset;
}
@property(retain, nonatomic) MTRGVastTimeInterval* offset;
-(void).cxx_destruct;
-(id)description;
@end

@interface MTRGVastVideoClick : XXUnknownSuperclass {
	int _type;
	NSString* _url;
	NSString* _ID;
}
@property(retain, nonatomic) NSString* ID;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
@end

@interface MTRGVastExtension : XXUnknownSuperclass {
	NSString* _type;
	NSString* _value;
}
@property(retain, nonatomic) NSString* value;
@property(retain, nonatomic) NSString* type;
-(void).cxx_destruct;
@end

@interface MTRGInstreamAdVideoEngine : XXUnknownSuperclass <MTRGNavigationHelperDelegate, MTRGInstreamAdPlayerDelegate> {
	BOOL _isInAppStarted;
	BOOL _isAppPaused;
	MTRGVideoBanner* _activeBanner;
	float _activeBannerVolume;
	float _volume;
	MTRGInstreamAdBanner* _activeInstreamAdBanner;
	MTRGVideoData* _activeVideoData;
	NSMutableArray* _activeBannerReachedValueStatArray;
	MTRGVideoSection* _activeVideoSection;
	NSArray* _activeBanners;
	unsigned _nextBannerIndex;
	BOOL _isStartedBanner;
	BOOL _isStartedPlayer;
	BOOL _isSkipActiveBanner;
	double _currentTime;
	double _activeBannerDuration;
	double _lastActivityTime;
	int _state;
	unsigned _countCompletedBanners;
	NSTimer* _timer;
	double _maxLagTime;
	double _realDuration;
	BOOL _isActiveBannerError;
	NSString* _activeBannerError;
	BOOL _fullscreen;
	id<MTRGInstreamAdVideoEngineDelegate> _delegate;
	unsigned _videoQuality;
	MTRGAdData* _adData;
	id<MTRGInstreamAdPlayer> _player;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float volume;
@property(assign, nonatomic) BOOL fullscreen;
@property(retain, nonatomic) id<MTRGInstreamAdPlayer> player;
@property(retain, nonatomic) MTRGAdData* adData;
@property(assign, nonatomic) unsigned videoQuality;
@property(assign, nonatomic) __weak id<MTRGInstreamAdVideoEngineDelegate> delegate;
-(void).cxx_destruct;
-(void)dealloc;
-(void)timerTick;
-(void)stopTimer;
-(void)startTimer;
-(void)progressChangedWithNewTimeElapsed:(double)newTimeElapsed;
-(void)updateProgressByTimer;
-(void)updateLagIfWaitPlayerOnStarted;
-(void)updateStateByTimer;
-(void)refreshLastActivityTime;
-(void)finishActiveBanner;
-(void)playNextBannerOrCompleteSection;
-(void)clearActiveBanner;
-(void)finishActiveSection;
-(void)checkResume;
-(void)applicationOnPause;
-(void)applicationOnResume;
-(void)onInAppFinished;
-(void)onInAppStarted;
-(void)willLeaveApplicationWithHelper:(id)helper;
-(void)didInAppFinishedWithHelper:(id)helper;
-(void)didInAppStartedWithHelper:(id)helper;
-(void)onAdVideoComplete;
-(void)onAdVideoErrorWithReason:(id)reason;
-(void)onAdVideoStop;
-(void)onAdVideoResume;
-(void)onAdVideoPause;
-(void)onAdVideoStart;
-(void)skipBanner;
-(void)skip;
-(void)stop;
-(void)handleClickWithController:(id)controller;
-(void)resume;
-(void)pause;
-(void)startWithVideoSection:(id)videoSection banners:(id)banners showedBannersCount:(unsigned)count;
-(void)updateVolumeAndSendStat;
-(id)init;
@end

@interface MTRGInstreamAdAudioEngine : XXUnknownSuperclass <MTRGNavigationHelperDelegate, MTRGInstreamAudioAdPlayerDelegate> {
	MTRGAudioBanner* _activeBanner;
	MTRGInstreamAudioAdBanner* _activeInstreamAudioAdBanner;
	MTRGAudioData* _activeAudioData;
	int _state;
	MTRGAudioSection* _activeAudioSection;
	NSMutableArray* _activeBannerReachedValueStatArray;
	NSArray* _activeBanners;
	float _activeBannerVolume;
	float _volume;
	unsigned _nextBannerIndex;
	unsigned _countCompletedBanners;
	BOOL _isInAppStarted;
	BOOL _isStartedBanner;
	BOOL _isStartedPlayer;
	BOOL _isSkipActiveBanner;
	BOOL _isActiveBannerError;
	NSString* _activeBannerError;
	NSTimer* _timer;
	double _maxLagTime;
	double _realDuration;
	double _currentTime;
	double _activeBannerDuration;
	double _lastActivityTime;
	id<MTRGInstreamAdAudioEngineDelegate> _delegate;
	MTRGAdData* _adData;
	id<MTRGInstreamAudioAdPlayer> _player;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float volume;
@property(retain, nonatomic) id<MTRGInstreamAudioAdPlayer> player;
@property(retain, nonatomic) MTRGAdData* adData;
@property(assign, nonatomic) __weak id<MTRGInstreamAdAudioEngineDelegate> delegate;
-(void).cxx_destruct;
-(void)dealloc;
-(void)timerTick;
-(void)stopTimer;
-(void)startTimer;
-(void)progressChangedWithNewTimeElapsed:(double)newTimeElapsed;
-(void)updateProgressByTimer;
-(void)updateLagIfWaitPlayerOnStarted;
-(void)updateStateByTimer;
-(void)refreshLastActivityTime;
-(void)finishActiveBanner;
-(void)playNextBannerOrCompleteSection;
-(void)clearActiveBanner;
-(void)finishActiveSection;
-(void)checkResume;
-(void)onInAppFinished;
-(void)onInAppStarted;
-(void)willLeaveApplicationWithHelper:(id)helper;
-(void)didInAppFinishedWithHelper:(id)helper;
-(void)didInAppStartedWithHelper:(id)helper;
-(void)onAdAudioComplete;
-(void)onAdAudioErrorWithReason:(id)reason;
-(void)onAdAudioStop;
-(void)onAdAudioResume;
-(void)onAdAudioPause;
-(void)onAdAudioStart;
-(void)skipBanner;
-(void)skip;
-(void)stop;
-(void)handleCompanionShow:(id)show;
-(void)handleCompanionClick:(id)click withController:(id)controller;
-(void)resume;
-(void)pause;
-(void)startWithAudioSection:(id)audioSection banners:(id)banners shownBannersCount:(unsigned)count;
-(void)updateVolumeAndSendStat;
-(id)init;
@end

@interface MTRGSendStatCommand : MTRGAsyncCommand {
	NSString* _url;
	unsigned _bgTask;
}
-(void).cxx_destruct;
-(void)send;
-(void)finish;
-(void)run;
-(id)initWithUrl:(id)url;
@end

@interface MTRGBannersFactory : XXUnknownSuperclass {
}
+(id)companionBannerWithBannerID:(id)bannerID;
+(id)instreamAdCompanionBannerWithCompanionBanner:(id)companionBanner;
+(id)instreamAudioAdBannerWithAudioBanner:(id)audioBanner;
+(id)instreamAdBannerWithVideoBanner:(id)videoBanner;
+(id)nativePromoCardWithCard:(id)card;
+(id)nativeAdCardWithType:(id)type bannerID:(id)anId;
+(id)nativeAppWallBannerWithBanner:(id)banner;
+(id)nativePromoBannerWithBanner:(id)banner;
+(id)bannerWithType:(id)type bannerID:(id)anId sectionType:(id)type3;
@end

@interface MTRGRBBannerParser : XXUnknownSuperclass {
}
+(id)ratingNormalize:(id)normalize error:(id*)error;
+(BOOL)parseFullscreenImageBanner:(id)banner fromDataDict:(id)dataDict;
+(BOOL)parseAppwallBanner:(id)banner fromDataDict:(id)dataDict appwallSection:(id)section;
+(BOOL)parseStandardBanner:(id)banner fromDataDict:(id)dataDict;
+(id)parseFullscreenImagesFromDataArray:(id)dataArray;
+(BOOL)parseFullescreenPromoBanner:(id)banner fromDataDict:(id)dataDict fullscreenSection:(id)section;
+(void)parsePoinAndPointPToAudioBanner:(id)audioBanner fromDataDict:(id)dataDict adService:(id)service;
+(BOOL)parseCompanionBanner:(id)banner fromDataDict:(id)dataDict;
+(BOOL)parseAudioBanner:(id)banner fromBannerDataDict:(id)bannerDataDict section:(id)section adService:(id)service;
+(BOOL)parseStatAudioBanner:(id)banner fromBannerDataDict:(id)bannerDataDict section:(id)section adService:(id)service;
+(void)parsePoinAndPointPToVideoBanner:(id)videoBanner fromDataDict:(id)dataDict adService:(id)service;
+(BOOL)parseVideoBanner:(id)banner fromBannerDataDict:(id)bannerDataDict section:(id)section adService:(id)service;
+(BOOL)parseStatVideoBanner:(id)banner fromBannerDataDict:(id)bannerDataDict section:(id)section adService:(id)service;
+(BOOL)parseCard:(id)card fromCardDataDict:(id)cardDataDict forSection:(id)section;
+(BOOL)parseNativeBanner:(id)banner fromBannerDataDict:(id)bannerDataDict section:(id)section;
+(BOOL)parseNativeBanner:(id)banner fromBannerDataDict:(id)bannerDataDict;
+(id)createBannerWithDataDictionary:(id)dataDictionary section:(id)section adService:(id)service;
+(BOOL)parseBanner:(id)banner fromBannerDataDict:(id)bannerDataDict forSection:(id)section adService:(id)service;
+(void)setCtaTextToBanner:(id)banner fromDataDict:(id)dataDict defAppCta:(id)cta defWebCta:(id)cta4;
+(int)parseNavigationType:(id)type;
+(id)createBannerFromDataDict:(id)dataDict forSection:(id)section;
+(void)parseStatsToBanner:(id)banner bannerDataDict:(id)dict;
+(id)errorMsgForBanner:(id)banner error:(id)error;
@end

@interface MTRGNativePromoCard : XXUnknownSuperclass {
	NSString* _title;
	NSString* _descriptionText;
	NSString* _ctaText;
	MTRGImageData* _image;
}
@property(retain, nonatomic) MTRGImageData* image;
@property(copy, nonatomic) NSString* ctaText;
@property(copy, nonatomic) NSString* descriptionText;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

@interface MTRGSKStoreProductViewController : XXUnknownSuperclass {
	MTRGStoreProductViewControllerHelper* _helper;
}
@property(retain, nonatomic) MTRGStoreProductViewControllerHelper* helper;
-(void).cxx_destruct;
@end

@interface MTRGStoreProductViewControllerHelper : XXUnknownSuperclass <SKStoreProductViewControllerDelegate> {
	id _closeBlock;
	id _errorBlock;
	MTRGSKStoreProductViewController* _storeProductController;
	UIViewController* _parentController;
	UIViewController* _loadingController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)openProductWithExternId:(id)externId withParentController:(id)parentController onOpenLoadingController:(id)controller onOpenProductComplete:(id)complete onClose:(id)close onError:(id)error;
-(void).cxx_destruct;
-(void)closeWithComplete:(id)complete;
-(void)openProductViewControllerWithExternId:(id)externId withParentController:(id)parentController onOpenLoadingController:(id)controller onOpenProductComplete:(id)complete onClose:(id)close onError:(id)error;
-(void)delegateOnError:(id)error;
-(void)productViewControllerDidFinish:(id)productViewController;
-(void)complete;
@end

@interface MTRGFullscreenSection : MTRGSection {
	BOOL _extendedClickArea;
	BOOL _closeOnClick;
	BOOL _showPlayerControls;
	BOOL _videoAllowClose;
	BOOL _videoAutomute;
	BOOL _videoAllowReplay;
	NSString* _closeActionText;
	NSString* _replayActionText;
	MTRGImageData* _closeIconHd;
	MTRGImageData* _playIconHd;
	MTRGImageData* _storeIconHd;
	int _style;
	double _allowCloseDelay;
	double _videoAllowCloseDelay;
}
@property(assign, nonatomic) int style;
@property(assign, nonatomic) BOOL videoAllowReplay;
@property(assign, nonatomic) BOOL videoAutomute;
@property(assign, nonatomic) double videoAllowCloseDelay;
@property(assign, nonatomic) BOOL videoAllowClose;
@property(assign, nonatomic) double allowCloseDelay;
@property(assign, nonatomic) BOOL showPlayerControls;
@property(assign, nonatomic) BOOL closeOnClick;
@property(assign, nonatomic) BOOL extendedClickArea;
@property(retain, nonatomic) MTRGImageData* storeIconHd;
@property(retain, nonatomic) MTRGImageData* playIconHd;
@property(retain, nonatomic) MTRGImageData* closeIconHd;
@property(copy, nonatomic) NSString* replayActionText;
@property(copy, nonatomic) NSString* closeActionText;
-(void).cxx_destruct;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGStoreAdDataCommand : MTRGAsyncCommand {
	NSString* _data;
	unsigned _slotId;
	double _cachePeriod;
}
-(void).cxx_destruct;
-(void)run;
-(id)initWithData:(id)data slotId:(unsigned)anId cachePeriod:(double)period;
@end

@interface MTRGBanner : XXUnknownSuperclass {
	NSMutableArray* _stats;
	BOOL _openInBrowser;
	BOOL _isAppInstalled;
	BOOL _isAppInWhitelist;
	NSString* _type;
	NSString* _bannerID;
	NSString* _urlscheme;
	NSString* _deeplink;
	NSString* _trackingLink;
	NSString* _finalLink;
	NSString* _ageRestrictions;
	NSString* _ctaText;
	NSString* _advertisingLabel;
	NSNumber* _externId;
	unsigned _width;
	unsigned _height;
	unsigned _timeout;
	int _navigationType;
}
@property(readonly, assign, nonatomic) NSArray* stats;
@property(assign, nonatomic) int navigationType;
@property(assign, nonatomic) BOOL isAppInWhitelist;
@property(assign, nonatomic) BOOL isAppInstalled;
@property(assign, nonatomic) BOOL openInBrowser;
@property(assign, nonatomic) unsigned timeout;
@property(assign, nonatomic) unsigned height;
@property(assign, nonatomic) unsigned width;
@property(retain, nonatomic) NSNumber* externId;
@property(copy, nonatomic) NSString* advertisingLabel;
@property(copy, nonatomic) NSString* ctaText;
@property(copy, nonatomic) NSString* ageRestrictions;
@property(copy, nonatomic) NSString* finalLink;
@property(copy, nonatomic) NSString* trackingLink;
@property(copy, nonatomic) NSString* deeplink;
@property(copy, nonatomic) NSString* urlscheme;
@property(readonly, copy, nonatomic) NSString* bannerID;
@property(readonly, copy, nonatomic) NSString* type;
-(void).cxx_destruct;
-(void)addStat:(id)stat;
-(id)initWithType:(id)type bannerID:(id)anId;
@end

@interface MTRGVastAdWrapper : MTRGVastObject {
	NSString* _VASTAdTagURI;
}
@property(retain, nonatomic) NSString* VASTAdTagURI;
-(void).cxx_destruct;
-(id)init;
@end

@interface MTRGColorUtils : XXUnknownSuperclass {
}
+(id)colorWithIntARGBValue:(int)intARGBValue;
+(id)colorWithHexString:(id)hexString;
+(BOOL)isColorValidWithHexString:(id)hexString colorFormat:(int)format;
@end

@interface MTRGOperationQueue : XXUnknownSuperclass {
}
+(id)instance;
@end

@interface MTRGGCNetworkReachability : XXUnknownSuperclass {
	SCNetworkReachabilityRef _networkReachability;
	id _handler_blk;
}
+(id)reachabilityForInternetConnection;
-(void).cxx_destruct;
-(void)stopMonitoringNetworkReachability;
-(void)startMonitoringNetworkReachabilityWithNotification;
-(void)startMonitoringNetworkReachabilityWithHandler:(id)handler;
-(unsigned)reachabilityFlags;
-(BOOL)isReachableViaWWAN;
-(BOOL)isReachableViaWiFi;
-(BOOL)isReachable;
-(unsigned char)currentReachabilityStatus;
-(void)dealloc;
-(void)releaseReachabilityQueue;
-(void)createReachabilityQueue;
-(id)initWithReachability:(SCNetworkReachabilityRef)reachability;
@end

@interface MTRGVastAdInLine : MTRGVastObject {
	NSString* _adTitle;
	NSString* _descriptionText;
	NSString* _advertizer;
	NSString* _pricing;
	NSString* _survey;
}
@property(retain, nonatomic) NSString* survey;
@property(retain, nonatomic) NSString* pricing;
@property(retain, nonatomic) NSString* advertizer;
@property(retain, nonatomic) NSString* descriptionText;
@property(retain, nonatomic) NSString* adTitle;
-(void).cxx_destruct;
-(id)init;
@end

@interface MTRGInstreamAudioAdBanner : XXUnknownSuperclass {
	BOOL _allowSeek;
	BOOL _allowSkip;
	BOOL _allowTrackChange;
	NSString* _adText;
	NSArray* _companionBanners;
	double _duration;
}
@property(retain, nonatomic) NSArray* companionBanners;
@property(copy, nonatomic) NSString* adText;
@property(assign, nonatomic) BOOL allowTrackChange;
@property(assign, nonatomic) BOOL allowSkip;
@property(assign, nonatomic) BOOL allowSeek;
@property(assign, nonatomic) double duration;
-(void).cxx_destruct;
@end

@interface MTRGInstreamAudioAd : XXUnknownSuperclass <MTRGInstreamAdAudioEngineDelegate> {
	MTRGAdParams* _adParams;
	MTRGInstreamAdAudioEngine* _engine;
	NSString* _audioSectionName;
	MTRGInstreamAudioAdSection* _instreamSection;
	NSArray* _midpoints;
	NSArray* _userMidpoints;
	double _audioDuration;
	NSNumber* _activeMidPoint;
	unsigned _activeMidPointBannersSize;
	NSMutableDictionary* _shownBannersCount;
	id<MTRGInstreamAudioAdDelegate> _delegate;
	MTRGCustomParams* _customParams;
	id<MTRGInstreamAudioAdPlayer> _player;
	float _volume;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float volume;
@property(assign, nonatomic) BOOL trackEnvironmentEnabled;
@property(retain, nonatomic) id<MTRGInstreamAudioAdPlayer> player;
@property(readonly, assign, nonatomic) MTRGCustomParams* customParams;
@property(assign, nonatomic) __weak id<MTRGInstreamAudioAdDelegate> delegate;
+(BOOL)isDebugMode;
+(void)setDebugMode:(BOOL)mode;
-(void).cxx_destruct;
-(void)audioAdEngineOnLeaveApplication;
-(void)audioAdEngineOnDismissModal;
-(void)audioAdEngineOnShowModal;
-(void)audioAdEngineOnBannerTimeLeftChange:(double)change duration:(double)duration;
-(void)audioAdEngineOnErrorWithReason:(id)reason;
-(void)audioAdEngineOnSectionComplete;
-(void)audioAdEngineOnBannerComplete:(id)complete;
-(void)audioAdEngineOnStartWithBanner:(id)banner;
-(void)delegateSectionComplete;
-(id)popDoAfterServiceForSection:(id)section;
-(id)popMidpointServicesWithPoint:(double)point forSection:(id)section;
-(void)startWithSection:(id)section point:(double)point;
-(void)startWithSection:(id)section;
-(BOOL)configureWithAdData:(id)adData;
-(void)incrementShownBannersCountForSection:(id)section;
-(unsigned)shownBannersCountForSection:(id)section;
-(id)midpoints;
-(void)configureMidpointsForAudioDuration:(double)audioDuration;
-(void)configureMidpoints:(id)midpoints forAudioDuration:(double)audioDuration;
-(void)configureMidpointsP:(id)p forAudioDuration:(double)audioDuration;
-(void)startMidrollWithPoint:(id)point;
-(void)startPauseroll;
-(void)startPostroll;
-(void)startPreroll;
-(void)handleCompanionShow:(id)show;
-(void)handleCompanionClick:(id)click withController:(id)controller;
-(void)skipBanner;
-(void)skip;
-(void)stop;
-(void)resume;
-(void)pause;
-(void)load;
-(id)initWithSlotId:(unsigned)slotId;
@end

@interface MTRGNativeAdCard : MTRGBanner {
	NSString* _title;
	NSString* _descriptionText;
	MTRGImageData* _image;
}
@property(retain, nonatomic) MTRGImageData* image;
@property(copy, nonatomic) NSString* descriptionText;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

@interface MTRGAdServicesChain : XXUnknownSuperclass {
	NSArray* _services;
	MTRGAdData* _adData;
	MTRGAdParams* _adParams;
	unsigned count;
	BOOL _isProccessing;
	id _completionBlock;
}
-(void).cxx_destruct;
-(void)finishProcessForService:(id)service totalBanner:(unsigned)banner;
-(void)next;
-(void)runChain;
-(id)initWithServices:(id)services adData:(id)data adParams:(id)params completionBlock:(id)block;
@end

@interface MTRGLoadInstreamAdCommand : MTRGLoadAdCommand {
}
-(void)proccessSubservices:(id)subservices;
-(void)onFinishAdRequest;
-(void)run;
@end

@interface MTRGNativeAdSection : MTRGSection {
	BOOL _showPlayerControls;
	BOOL _videoAutomute;
	NSString* _closeActionText;
	NSString* _replayActionText;
}
@property(assign, nonatomic) BOOL videoAutomute;
@property(assign, nonatomic) BOOL showPlayerControls;
@property(copy, nonatomic) NSString* replayActionText;
@property(copy, nonatomic) NSString* closeActionText;
-(void).cxx_destruct;
-(id)nativeBanner;
-(id)initWithType:(id)type name:(id)name;
@end

@interface MTRGAdParams : XXUnknownSuperclass {
	BOOL _checkExcludeBanners;
	BOOL _trackEnvironmentEnabled;
	unsigned _slotId;
	NSString* _format;
	MTRGCustomParams* _customParams;
	double _cachePeriodInSec;
}
@property(assign, nonatomic) BOOL trackEnvironmentEnabled;
@property(assign, nonatomic) BOOL checkExcludeBanners;
@property(assign, nonatomic) double cachePeriodInSec;
@property(readonly, assign, nonatomic) MTRGCustomParams* customParams;
@property(readonly, copy, nonatomic) NSString* format;
@property(readonly, assign, nonatomic) unsigned slotId;
-(void).cxx_destruct;
-(id)initWithSlotId:(unsigned)slotId format:(id)format customParams:(id)params;
@end

@interface MTRGAdService : XXUnknownSuperclass {
	NSMutableArray* _subServices;
	NSMutableArray* _bannerStats;
	NSMutableArray* _sectionStats;
	NSMutableArray* _serviceStats;
	NSMutableArray* _companionBanners;
	BOOL _firstPlaceInSection;
	BOOL _isDoAfterSection;
	BOOL _isMidrollPoint;
	int _serviceID;
	NSString* _url;
	MTRGAdService* _onEmptyResponseService;
	unsigned _redirectsCount;
	int _doOnEmptyResponseFromId;
	NSString* _sectionName;
	float _pointP;
	double _point;
}
@property(readonly, assign, nonatomic) NSArray* companionBanners;
@property(readonly, assign, nonatomic) NSArray* serviceStats;
@property(readonly, assign, nonatomic) NSArray* sectionStats;
@property(readonly, assign, nonatomic) NSArray* bannerStats;
@property(readonly, assign, nonatomic) NSArray* subServices;
@property(assign, nonatomic) float pointP;
@property(assign, nonatomic) double point;
@property(copy, nonatomic) NSString* sectionName;
@property(assign, nonatomic) int doOnEmptyResponseFromId;
@property(assign, nonatomic) unsigned redirectsCount;
@property(assign, nonatomic) BOOL isMidrollPoint;
@property(assign, nonatomic) BOOL isDoAfterSection;
@property(assign, nonatomic) BOOL firstPlaceInSection;
@property(retain, nonatomic) MTRGAdService* onEmptyResponseService;
@property(readonly, copy, nonatomic) NSString* url;
@property(assign, nonatomic) int serviceID;
-(void).cxx_destruct;
-(void)addCompanionBanner:(id)banner;
-(void)addServiceStat:(id)stat;
-(void)addSectionStat:(id)stat;
-(void)addBannerStat:(id)stat;
-(void)addSubService:(id)service;
-(id)initWithUrl:(id)url;
@end

@interface MTRGInstreamAdVideoPlayer : XXUnknownSuperclass <MTRGVideoViewDelegate, MTRGInstreamAdPlayer> {
	MTRGVideoView* _videoView;
	id<MTRGInstreamAdPlayerDelegate> _delegate;
	MTRGVideoData* _activeVideoData;
	NSURL* _activeVideoUrl;
	double _activeVideoDuration;
	UIActivityIndicatorView* _indicatorView;
	float _volume;
}
@property(assign, nonatomic) float volume;
@property(readonly, assign, nonatomic) UIView* adPlayerView;
@property(assign, nonatomic) __weak id<MTRGInstreamAdPlayerDelegate> adPlayerDelegate;
@property(readonly, assign, nonatomic) double adVideoTimeElapsed;
@property(readonly, assign, nonatomic) double adVideoDuration;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)onAirPlayActiveChangedWithUrl:(id)url airPlayVideoActive:(BOOL)active videoView:(id)view;
-(void)onResumptionWithUrl:(id)url videoView:(id)view;
-(void)onSuspenseWithUrl:(id)url videoView:(id)view;
-(void)onClickWithUrl:(id)url videoView:(id)view;
-(void)onProgressWithUrl:(id)url time:(double)time duration:(double)duration videoView:(id)view;
-(void)onErrorWithUrl:(id)url error:(id)error videoView:(id)view;
-(void)onCompleteWithUrl:(id)url videoView:(id)view;
-(void)onStartWithUrl:(id)url duration:(double)duration videoView:(id)view;
-(void)stopAdVideo;
-(void)resumeAdVideo;
-(void)pauseAdVideo;
-(void)playAdVideoWithUrl:(id)url;
-(void)hideIndicator;
-(void)showIndicator;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MTRGInstreamAdBanner : XXUnknownSuperclass {
	BOOL _allowClose;
	NSString* _ctaText;
	double _duration;
	double _allowCloseDelay;
	CGSize _size;
}
@property(copy, nonatomic) NSString* ctaText;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) double allowCloseDelay;
@property(assign, nonatomic) BOOL allowClose;
@property(assign, nonatomic) double duration;
-(void).cxx_destruct;
-(id)init;
@end

@interface MTRGInstreamAd : XXUnknownSuperclass <MTRGInstreamAdVideoEngineDelegate> {
	MTRGAdParams* _adParams;
	MTRGInstreamAdVideoEngine* _engine;
	NSString* _videoSectionName;
	MTRGInstreamAdSection* _instreamSection;
	NSArray* _midpoints;
	NSArray* _userMidpoints;
	double _videoDuration;
	NSNumber* _activeMidPoint;
	unsigned _activeMidPointBannersSize;
	NSMutableDictionary* _showedBannersCount;
	id<MTRGInstreamAdDelegate> _delegate;
	MTRGCustomParams* _customParams;
	unsigned _videoQuality;
	id<MTRGInstreamAdPlayer> _player;
	float _volume;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float volume;
@property(assign, nonatomic) BOOL trackEnvironmentEnabled;
@property(assign, nonatomic) BOOL fullscreen;
@property(retain, nonatomic) id<MTRGInstreamAdPlayer> player;
@property(assign, nonatomic) unsigned videoQuality;
@property(readonly, assign, nonatomic) MTRGCustomParams* customParams;
@property(assign, nonatomic) __weak id<MTRGInstreamAdDelegate> delegate;
+(BOOL)isDebugMode;
+(void)setDebugMode:(BOOL)mode;
-(void).cxx_destruct;
-(void)videoAdEngineOnLeaveApplication;
-(void)videoAdEngineOnDismissModal;
-(void)videoAdEngineOnShowModal;
-(void)videoAdEngineOnBannerTimeLeftChange:(double)change duration:(double)duration;
-(void)videoAdEngineOnErrorWithReason:(id)reason;
-(void)videoAdEngineOnSectionComplete;
-(void)videoAdEngineOnBannerComplete:(id)complete;
-(void)videoAdEngineOnStartWithBanner:(id)banner;
-(void)delegateSectionComplete;
-(id)popDoAfterServiceForSection:(id)section;
-(id)popMidpointServicesWithPoint:(double)point forSection:(id)section;
-(void)startWithSection:(id)section point:(double)point;
-(void)startWithSection:(id)section;
-(BOOL)configureWithAdData:(id)adData;
-(void)incShowedBannersCountForSection:(id)section;
-(unsigned)showedBannersCountForSection:(id)section;
-(id)midpoints;
-(void)configureMidpointsForVideoDuration:(double)videoDuration;
-(void)configureMidpoints:(id)midpoints forVideoDuration:(double)videoDuration;
-(void)configureMidpointsP:(id)p forVideoDuration:(double)videoDuration;
-(void)useDefaultPlayer;
-(void)startMidrollWithPoint:(id)point;
-(void)startPauseroll;
-(void)startPostroll;
-(void)startPreroll;
-(void)handleClickWithController:(id)controller;
-(void)skipBanner;
-(void)skip;
-(void)stop;
-(void)resume;
-(void)pause;
-(void)load;
-(id)initWithSlotId:(unsigned)slotId;
@end

@interface MTRGDataParserValue : XXUnknownSuperclass <IMTRGDataValue> {
	NSObject* _object;
}
-(void).cxx_destruct;
-(id)asDataDictionaryWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asDataDictionary;
-(id)asDataArrayWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asDataArray;
-(id)asDictionaryWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asDictionary;
-(id)asArrayWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asArray;
-(BOOL)asBoolWithDefValue:(BOOL)defValue;
-(id)asBoolean;
-(id)asNumber;
-(id)asStringWithErrorFormatBlock:(id)errorFormatBlock;
-(id)asString;
-(BOOL)isDictionary;
-(BOOL)isNumber;
-(BOOL)isArray;
-(BOOL)isString;
-(id)initWithString:(id)string;
-(id)initWithObject:(id)object;
@end

@interface MTRGDataParserArray : XXUnknownSuperclass <IMTRGDataArray> {
	NSArray* _array;
}
-(void).cxx_destruct;
-(id)description;
-(id)items;
-(void)enumerateWithBlock:(id)block;
-(unsigned)count;
-(id)initWithArray:(id)array;
@end

@interface MTRGDataParserDictionary : XXUnknownSuperclass <IMTRGDataDictionary> {
	NSDictionary* _dictionary;
}
-(void).cxx_destruct;
-(void)enumerateWithBlock:(id)block;
-(BOOL)checkDataDictionaryValueForKey:(id)key dataDictValue:(id*)value;
-(BOOL)checkDataArrayValueForKey:(id)key dataArrayValue:(id*)value;
-(BOOL)checkArrayValueForKey:(id)key arrayValue:(id*)value;
-(BOOL)checkDictionaryValueForKey:(id)key dictValue:(id*)value;
-(BOOL)checkNumberValueForKey:(id)key numberValue:(id*)value;
-(BOOL)checkStringValueForKey:(id)key strValue:(id*)value;
-(id)dataDictionaryValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)dataArrayValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)arrayValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)dictionaryValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)numberValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)stringValueForKey:(id)key errorBlock:(id)block nilBlock:(id)block3;
-(id)dataDictArrayForKey:(id)key;
-(id)dataDictionaryValueForKey:(id)key;
-(id)dataArrayValueForKey:(id)key;
-(id)arrayValueForKey:(id)key;
-(id)dictionaryValueForKey:(id)key;
-(double)doubleValueForKey:(id)key defValue:(double)value;
-(BOOL)boolValueForKey:(id)key defValue:(BOOL)value;
-(id)booleanValueForKey:(id)key;
-(id)numberValueForKey:(id)key;
-(id)stringValueForKey:(id)key;
-(id)parserValueForKey:(id)key;
-(id)description;
-(id)asDictionary;
-(id)initWithDictionary:(id)dictionary;
@end

@interface MTRGDataParser : XXUnknownSuperclass {
}
+(id)createDataDictionaryWithDictionary:(id)dictionary;
@end

@interface MTRGLoadMediaCommand : MTRGAsyncCommand {
}
-(void)loadVideo:(id)video;
-(void)loadImage:(id)image;
-(void)run;
-(id)initWithMediaData:(id)mediaData;
@end

@interface MTRGStatUtils : XXUnknownSuperclass {
}
+(void)sendProgressStatWithTime:(double)time statsArray:(id)array;
+(void)sendStatWithUrl:(id)url;
+(void)sendStatWithUrl:(id)url type:(id)type value:(id)value;
+(void)sendStats:(id)stats forType:(id)type;
@end

@interface MTRGLoadVideoServiceCommand : MTRGLoadInstreamAdCommand {
	NSArray* _adServices;
}
-(void).cxx_destruct;
-(void)run;
-(id)initWithAdServices:(id)adServices adParams:(id)params adData:(id)data;
@end

@interface MTRGEnvironmentDataProvider : MTRGAbstractDataProvider {
	NSString* _bssid;
	NSString* _ssid;
}
-(void).cxx_destruct;
-(void)collectWifiInfo;
-(void)collectData;
@end

@interface MTRGAudioData : XXUnknownSuperclass {
	unsigned _bitrate;
	NSString* _url;
}
@property(readonly, copy, nonatomic) NSString* url;
@property(readonly, assign, nonatomic) unsigned bitrate;
-(void).cxx_destruct;
-(id)initWithUrl:(id)url bitrate:(unsigned)bitrate;
@end

@interface MTRGInstreamAdSection : MTRGSection {
	NSMutableArray* _videoSections;
}
@property(readonly, assign, nonatomic) NSArray* videoSections;
-(void).cxx_destruct;
-(unsigned)bannersCount;
-(id)videoSectionByName:(id)name;
-(id)initWithType:(id)type name:(id)name;
@end

@interface XXUnknownSuperclass (StringUtil)
+(id)URLWithPotentiallyUnescapedString:(id)potentiallyUnescapedString;
@end

@interface XXUnknownSuperclass (StringUtil)
-(id)stringWithUppercasedFirstLetter;
-(id)stringByReplacingSpacesWithNonBreakingSpaces;
@end

@interface XXUnknownSuperclass (VKMController)
-(BOOL)VKMControllerIsEditingReordering;
-(id)VKMBackNavigationItem;
@end

@interface XXUnknownSuperclass (VKSize)
+(id)vkm_semiboldFontWithSize:(float)size;
+(id)vkm_mediumFontWithSize:(float)size;
+(id)vkm_fontWithSize:(float)size;
-(id)vkm_fontWithSize:(float)size;
@end

@interface XXUnknownSuperclass (VKThreadSafe)
+(id)vkm_threadSafeImagesNamed:(id)named;
+(id)vkm_threadSafeImageNamed:(id)named;
@end

@interface XXUnknownSuperclass (Random)
+(id)randomColor;
@end

@interface XXUnknownSuperclass (AudioPlaylistPlaceholder)
+(id)audioPlaylistPlaceholderColor:(id)color;
@end

@interface XXUnknownSuperclass (VKConvenience)
-(id)initWithAutofillingFrame_vkm:(CGRect)autofillingFrame_vkm;
@end

@interface XXUnknownSuperclass (MID)
-(id)key;
-(id)mid;
@end

@interface XXUnknownSuperclass (PunycodeAdditions)
-(id)URLParts;
-(id)IDNADecodedString;
-(id)IDNAEncodedString;
-(id)punycodeDecodedString;
-(id)punycodeEncodedString;
-(const unsigned*)longCharactersWithCount:(unsigned*)count;
@end

@interface XXUnknownSuperclass (VKMSize)
-(int)vkm_imageBytesSize;
@end

@interface XXUnknownSuperclass (MarkerBrush)
-(CGRect)boundsWithLineWidth;
@end

@interface XXUnknownSuperclass (VKM)
+(id)VKMLink;
+(void)VKMButtonCustomizeHighlighted:(id)highlighted;
+(void)VKMButtonCustomizeNormal:(id)normal;
+(id)VKMButton;
+(id)VKMButtonWithType:(int)type;
+(void)VKMLink_apply:(id)apply;
+(void)VKMLink_clear:(id)clear;
+(void)VKMLink_clearSlow:(id)slow;
+(void)VKMLink_cancelHL:(id)hl;
-(void)text:(id)text;
-(void)text:(id)text constrained:(float)constrained;
@end

@interface XXUnknownSuperclass (Additions)
-(id)mapRanges:(id)ranges;
-(NSRange)lastRange;
-(NSRange)firstRange;
@end

@interface XXUnknownSuperclass (LoadingModel)
-(id)setupOwner:(id)owner;
@end

@interface XXUnknownSuperclass (VMEmptyHolder)
-(BOOL)isEmpty;
@end

@interface XXUnknownSuperclass (Addition)
-(CGSize)vkm_sizeThatFitsWidth:(float)width;
@end

@interface XXUnknownSuperclass (MCSMNSThreadCategory)
+(void)MCSM_runBlock:(id)block;
+(void)MCSM_performBlockInBackground:(id)background;
+(void)MCSM_performBlockOnMainThread:(id)thread;
-(void)MCSM_performBlock:(id)block afterDelay:(double)delay;
-(void)MCSM_performBlock:(id)block waitUntilDone:(BOOL)done;
-(void)MCSM_performBlock:(id)block;
@end

@interface XXUnknownSuperclass (Sugar)
-(id)componentsJoinedByAttributedString:(id)string;
@end

@interface XXUnknownSuperclass (Merge)
+(id)emptyImageWithSize:(CGSize)size scale:(float)scale color:(id)color;
-(id)addImage:(id)image atPoint:(CGPoint)point alpha:(float)alpha;
@end

@interface XXUnknownSuperclass (VKConvenience)
+(id)vk_flexibleSpaceItem;
+(id)vk_fixedSpaceItemWithWidth:(float)width;
+(id)vk_itemWithImageNamed:(id)imageNamed target:(id)target action:(SEL)action;
@end

@interface XXUnknownSuperclass (VMSession)
-(BOOL)vm_isCurrentInputBuiltInMic;
-(id)vm_currentInputPortType;
-(BOOL)vm_isCurrentOutputEarOrMainSpeaker;
-(BOOL)vm_isCurrentOutputMainSpeaker;
-(BOOL)vm_isCurrentOutputEarSpeaker;
-(id)vm_currentOutputPortType;
@end

@interface XXUnknownSuperclass (VKNavigationBarAnimation)
-(void)vk_setNavigationBarHiddenWithFadeAnimation:(BOOL)fadeAnimation;
@end

@interface XXUnknownSuperclass (VKMNavContext)
@property(retain, nonatomic) UIViewController* navPendingModalController;
@end

@interface XXUnknownSuperclass (Video)
-(void)vkm_PauseVideo;
-(void)vkm_exitFullScreenVideo;
-(BOOL)vkm_hasPlayingInlineVideo;
-(BOOL)vkm_hasFullScreenVideo;
@end

@interface XXUnknownSuperclass (DrawView)
-(void)drawAtCenterPoint:(CGPoint)centerPoint blendMode:(int)mode alpha:(float)alpha scale:(float)scale;
-(void)drawAtCenterPoint:(CGPoint)centerPoint blendMode:(int)mode alpha:(float)alpha;
@end

@interface XXUnknownSuperclass (VKBlocks)
+(id)every:(double)every handler:(id)handler;
+(id)after:(double)after handler:(id)handler;
+(id)timerWithTimeInterval:(double)timeInterval repeats:(BOOL)repeats handler:(id)handler;
-(void)start;
-(void)startInRunLoop:(id)runLoop mode:(id)mode;
@end

@interface VKImageFilter (Factory)
+(id)snippetFullLightGrayBackroundImage;
+(id)defaultMessageImageFilterForSize:(CGSize)size isFirst:(BOOL)first isLast:(BOOL)last;
+(id)snippetFullBorderImage;
+(id)snippetBottomBorderImage;
+(id)snippetTopBorderImage;
+(id)snippetLeftBorderImage;
+(id)snippetRightBorderImage;
+(id)profileCounterVideoFilter;
+(id)profileCounterPlaceholderWithColor:(id)color;
+(id)profileCounterVideoPlaceholder;
+(id)profileCounterPlaceholder;
+(id)snippetLeftImagePlaceholder;
+(id)snippetLeftImageFilter;
+(id)snippetTopImagePlaceholder;
+(id)snippetTopImageFilter;
+(id)snippetFilterWithCorners:(int)corners;
+(id)snippetFilterWithCorners:(int)corners background:(BOOL)background overlay:(BOOL)overlay;
+(id)adsAvatarWithSize:(float)size;
+(id)borderedProfileAvatarWithSize:(float)size borderWidth:(float)width borderColor:(id)color;
+(id)profileAvatarWithSize:(float)size;
+(void)load;
@end

@interface XXUnknownSuperclass (VK)
-(id)JSONString;
@end

@interface XXUnknownSuperclass (VK)
-(id)JSONString;
@end

@interface XXUnknownSuperclass (TimeAgo)
+(id)timeAgoDateTimeAgoBundle;
-(id)timeAgoGetLocaleFormatUnderscoresWithValue:(double)value;
-(id)timeAgoWithLimit:(double)limit dateFormatter:(id)formatter;
-(id)timeAgoWithLimit:(double)limit dateFormat:(unsigned)format andTimeFormat:(unsigned)format3;
-(id)timeAgoWithLimit:(double)limit;
-(id)stringFromFormat:(id)format withValue:(int)value;
-(id)spelledTimeFormat:(id)format withValue:(int)value type:(int)type;
-(id)dateTimeUntilNow;
-(id)dateTimeAgo;
-(id)timeAgo;
-(id)timeAgoWithDeltaSeconds:(double)deltaSeconds;
-(id)timeAgoSimple;
@end

@interface XXUnknownSuperclass (MOTextView)
-(void)withMOTextView:(id)motextView;
-(id)MOTextView;
@end

@interface XXUnknownSuperclass (_AFNetworking)
@property(retain, nonatomic, setter=af_setImageRequestOperation:) AFImageRequestOperation* af_imageRequestOperation;
@end

@interface XXUnknownSuperclass (AFNetworking)
+(id)af_sharedImageCache;
+(id)af_sharedImageRequestOperationQueue;
-(void)cancelImageRequestOperation;
-(void)setImageWithURLRequest:(id)urlrequest placeholderImage:(id)image success:(id)success failure:(id)failure;
-(void)setImageWithURL:(id)url placeholderImage:(id)image;
-(void)setImageWithURL:(id)url;
-(void)af_setImageRequestOperation:(id)operation;
-(id)af_imageRequestOperation;
@end

@interface XXUnknownSuperclass (GTMNSStringHTMLAdditions)
-(id)gtm_stringByUnescapingFromHTML;
-(id)gtm_stringByEscapingForAsciiHTML;
-(id)gtm_stringByEscapingForHTML;
-(id)gtm_stringByEscapingHTMLUsingTable:(XXStruct_c19r_A*)table ofSize:(unsigned)size escapingUnicode:(BOOL)unicode;
@end

@interface XXUnknownSuperclass (UIViewDeckController_ViewContainmentEmulation_Fakes)
-(void)vdc_viewDidDisappear:(bool)vdc_view;
-(void)vdc_viewWillDisappear:(bool)vdc_view;
-(void)vdc_viewDidAppear:(bool)vdc_view;
-(void)vdc_viewWillAppear:(bool)vdc_view;
-(void)vdc_didMoveToParentViewController:(id)parentViewController;
-(void)vdc_willMoveToParentViewController:(id)parentViewController;
-(void)vdc_removeFromParentViewController;
-(void)vdc_addChildViewController:(id)controller;
-(BOOL)vdc_shouldRelay;
@end

@interface XXUnknownSuperclass (UIViewDeckItem)
@property(readonly, retain, nonatomic) IIViewDeckController* viewDeckController;
-(void)setViewDeckController:(id)controller;
-(id)viewDeckController_core;
@end

@interface XXUnknownSuperclass (WrapControllerItem)
@property(readonly, assign, nonatomic) WrapController* wrapController;
+(void)load;
+(void)wc_swizzle;
-(id)wc_navigationItem;
-(id)wc_navigationController;
-(void)setWrapController:(id)controller;
-(id)wrapController_core;
@end

@interface XXUnknownSuperclass (VKFillColor)
-(id)vk_imageWithColor:(id)color;
@end

@interface XXUnknownSuperclass (ObjectBuilder)
+(id)OBBuild:(id)build;
-(id)OBSetup:(id)setup;
@end

@interface XXUnknownSuperclass (ObjectiveSugar)
@property(readonly, assign) id last;
@property(readonly, assign) id first;
+(id)concat:(id)concat :(id)arg2;
+(id)concatReverse:(BOOL)reverse a1:(id)a1 a2:(id)a2;
-(id)createLookup:(id)lookup;
-(id)safeObjectAtIndex:(unsigned)index;
-(id)singleObject;
-(id)last2Object;
-(id)limit:(unsigned)limit;
-(id)symmetricDifference:(id)difference;
-(id)relativeComplement:(id)complement;
-(id)unionWithArray:(id)array;
-(id)intersectionWithArray:(id)array;
-(id)reversed;
-(id)zip:(id)zip;
-(BOOL)any:(id)any;
-(BOOL)all:(id)all;
-(id)split:(id)split;
-(id)join:(id)join;
-(id)join;
-(id)splitAt:(unsigned)at;
-(unsigned)countWithFilter:(id)filter;
-(id)findFirst:(id)first;
-(id)flatMap:(id)map;
-(id)flatten;
-(id)reject:(id)reject;
-(id)filter:(id)filter;
-(id)foldLeftWithSeed:(id)seed block:(id)block;
-(id)reduce:(id)reduce;
-(id)mapSafeAssert:(id)anAssert;
-(id)mapSafeIndexed:(id)indexed;
-(id)mapSafe:(id)safe;
-(id)map:(id)map;
-(id)takeWhile:(id)aWhile;
-(id)dictionaryByGroupingItemsWithKeyTransform:(id)keyTransform valueTransform:(id)transform;
-(id)dictionaryByApplyingKeyTransform:(id)transform valueTransform:(id)transform2;
-(id)safeSubarrayWithRange:(NSRange)range;
-(id)skip:(unsigned)skip;
-(id)take:(unsigned)take;
-(BOOL)includes:(id)includes;
-(id)eachWithIndex:(id)index;
-(id)each:(id)each;
@end

@interface XXUnknownSuperclass (Rubyfy)
-(id)dictionaryByMergingDictionary:(id)dictionary;
-(id)dictionaryByPreservingKeysFromArray:(id)array;
-(id)mapDictSafe:(id)safe;
-(id)invertedDictionary;
-(id)mapSafe:(id)safe;
-(id)map:(id)map;
-(void)eachValue:(id)value;
-(void)eachKey:(id)key;
-(void)each:(id)each;
@end

@interface XXUnknownSuperclass (ObjectiveSugar)
-(void)moveObjectAtIndex:(unsigned)index toIndex:(unsigned)index2;
-(void)concat:(id)concat;
-(id)pop:(unsigned)pop;
-(id)pop;
-(void)push:(id)push;
@end

@interface XXUnknownSuperclass (ObjectiveSugar)
-(id)fromNow;
-(id)until:(id)until;
-(id)since:(id)since;
-(id)ago:(id)ago;
-(id)ago;
-(id)years;
-(id)year;
-(id)months;
-(id)month;
-(id)fortnights;
-(id)fortnight;
-(id)weeks;
-(id)week;
-(id)days;
-(id)day;
-(id)hours;
-(id)hour;
-(id)minutes;
-(id)minute;
-(id)seconds;
-(id)second;
-(void)downto:(int)downto do:(id)aDo;
-(void)upto:(int)upto do:(id)aDo;
-(void)timesWithIndex:(id)index;
-(void)times:(id)times;
@end

@interface XXUnknownSuperclass (ObjectiveSugar)
@property(readonly, assign) id last;
@property(readonly, assign) id first;
-(id)setWithExcludedObject:(id)excludedObject;
-(id)filter:(id)filter;
-(id)map:(id)map;
-(void)eachWithIndex:(id)index;
-(void)each:(id)each;
@end

@interface XXUnknownSuperclass (Additions)
-(id)split:(id)split;
-(id)split;
@end

@interface XXUnknownSuperclass (VKOpusRecordServerSamples)
-(id)serverSamples;
-(id)normalizeToServerFrom0To31IntFormat;
-(id)shrinkUpToServerLimitIfNeeded;
-(id)samplesWithSilenceThreshold;
-(id)floatizedSamples;
@end

@interface XXUnknownSuperclass (GoogleOAuthClient)
+(id)GoogleOAuthErrorWithCode:(int)code userInfo:(id)info;
+(id)GoogleOAuthErrorWithCode:(int)code;
+(id)GoogleOAuthClientErrorWithErrorDescription:(id)errorDescription;
-(BOOL)isGoogleOAuthClientError;
@end

@interface XXUnknownSuperclass (Additions)
@end

@interface XXUnknownSuperclass (Wizard)
-(id)vkm_wizard;
@end

@interface XXUnknownSuperclass (ComponentController)
@property(retain, nonatomic) Component5Controller* component5_Controller;
@end

@interface XXUnknownSuperclass (CGRectBuilder)
-(id)vk_frameBuilder;
@end

@interface XXUnknownSuperclass (VKTextStyle)
+(id)string:(id)string withVKStyle:(id)vkstyle;
-(id)initWithString:(id)string vkTextStyle:(id)style;
@end

@interface XXUnknownSuperclass (VKTextStyle)
-(void)setVKStyle:(id)style range:(NSRange)range;
-(void)addVKStyle:(id)style range:(NSRange)range;
-(void)addVKStyle:(id)style;
@end

@interface XXUnknownSuperclass (VMSamples)
-(id)normalize;
-(id)shrinkOrExpandToCount:(unsigned)count;
@end

@interface XXUnknownSuperclass (Addition)
-(CGSize)vkm_sizeWithFont:(id)font constrainedToSize:(CGSize)size lineBreakMode:(int)mode;
-(CGSize)vkm_sizeWithFont:(id)font constrainedToSize:(CGSize)size;
-(CGSize)vkm_sizeWithFont:(id)font forWidth:(float)width lineBreakMode:(int)mode;
-(CGSize)vkm_sizeWithFont:(id)font;
@end

@interface XXUnknownSuperclass (Container)
-(id)vkm_containerController;
@end

