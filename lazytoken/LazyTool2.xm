/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct _NSRange {
	unsigned _field1;
	unsigned _field2;
} NSRange;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct unz_global_info_s {
	unsigned _field1;
	unsigned _field2;
} unz_global_info_s;

typedef struct tm_unz_s {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} tm_unz_s;

typedef struct unz_file_info_s {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
	unsigned _field10;
	unsigned _field11;
	unsigned _field12;
	unsigned _field13;
	unsigned _field14;
	tm_unz_s _field15;
} unz_file_info_s;

typedef struct GADAdSize {
	CGSize size;
	unsigned flags;
} GADAdSize;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct tm_zip_s {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} tm_zip_s;

typedef struct {
	tm_zip_s _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} XXStruct_z_NMMB;

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct __SecTrust SecTrust;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct {
	int watchdogPeriodSeconds;
	int inactivePeriodBeforeReconnectSeconds;
} XXStruct_Bz0WjC;

typedef struct __CFSocket* CFSocketRef;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct {
	int version;
	void* info;
	/*function-pointer*/ void* retain;
	/*function-pointer*/ void* release;
	/*function-pointer*/ void* copyDescription;
} XXStruct_4pnlqD;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct in6_addr {
	union {
		unsigned char _field1[16];
		unsigned short _field2[8];
		unsigned _field3[4];
	} _field1;
} in6_addr;

typedef struct sockaddr_in6 {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	unsigned _field4;
	in6_addr _field5;
	unsigned _field6;
} sockaddr_in6;

typedef struct __CFString* CFStringRef;

typedef struct {
	BOOL flushQueueOnSeek;
	BOOL enableVolumeMixer;
	float equalizerBandFrequencies[24];
	unsigned readBufferSize;
	float bufferSizeInSeconds;
	float secondsRequiredToStartPlaying;
	float gracePeriodAfterSeekInSeconds;
	float secondsRequiredToStartPlayingAfterBufferUnderun;
} XXStruct_AY4tKB;

typedef struct OpaqueAUGraph OpaqueAUGraph;

typedef struct OpaqueAudioComponentInstance OpaqueAudioComponentInstance;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void* mData;
} AudioBuffer;

typedef struct AudioBufferList {
	unsigned mNumberBuffers;
	AudioBuffer mBuffers[1];
} AudioBufferList;

typedef struct OpaqueAudioConverter OpaqueAudioConverter;

typedef struct OpaqueAudioFileStreamID OpaqueAudioFileStreamID;

typedef struct OpaqueAudioFileID OpaqueAudioFileID;

typedef struct AudioStreamPacketDescription {
	long long _field1;
	unsigned _field2;
	unsigned _field3;
} AudioStreamPacketDescription;

typedef struct _opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct _opaque_pthread_cond_t {
	long __sig;
	BOOL __opaque[24];
} opaque_pthread_cond_t;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct CGAffineTransform {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
	float _field5;
	float _field6;
} CGAffineTransform;

typedef struct {
	long long _field1;
	int _field2;
	unsigned _field3;
	long long _field4;
} XXStruct_oHBkXC;

typedef struct CGVector {
	float dx;
	float dy;
} CGVector;

typedef struct {
	int majorVersion;
	int minorVersion;
	int patchVersion;
} XXStruct_Paw9VA;

typedef struct objc_property objc_property;

typedef struct {
	SEL _field1;
	SEL _field2;
	SEL _field3;
} XXStruct_bmT6iB;

typedef struct CGContext* CGContextRef;

@protocol NSObject
@optional
@property(readonly, copy) NSString* debugDescription;
@required
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(NSZone*)zone;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(id)self;
-(Class)class;
-(BOOL)isEqual:(id)equal;
@end

@protocol BKURLConnectionInformalDelegate <NSObject>
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)kconnection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
@end

@protocol NSURLConnectionDelegate <NSObject>
@optional
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
@end

@protocol DGActivityIndicatorAnimationProtocol <NSObject>
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

@protocol NSCacheDelegate <NSObject>
@optional
-(void)cache:(id)cache willEvictObject:(id)object;
@end

@protocol AFImageCache <NSObject>
-(void)cacheImage:(id)image forRequest:(id)request;
-(id)cachedImageForRequest:(id)request;
@end

@protocol GADNativeExpressAdViewDelegate <NSObject>
@optional
-(void)nativeExpressAdViewWillLeaveApplication:(id)nativeExpressAdView;
-(void)nativeExpressAdViewDidDismissScreen:(id)nativeExpressAdView;
-(void)nativeExpressAdViewWillDismissScreen:(id)nativeExpressAdView;
-(void)nativeExpressAdViewWillPresentScreen:(id)nativeExpressAdView;
-(void)nativeExpressAdView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)nativeExpressAdViewDidReceiveAd:(id)nativeExpressAdView;
@end

@protocol NSURLSessionDelegate <NSObject>
@optional
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>
@optional
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)URLSession:(id)session task:(id)task needNewBodyStream:(id)stream;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
@end

@protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>
@optional
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didBecomeStreamTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didBecomeDownloadTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
@end

@protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
@optional
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol NSCoding
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@protocol NSSecureCoding <NSCoding>
+(BOOL)supportsSecureCoding;
@end

@protocol UIGestureRecognizerDelegate <NSObject>
@optional
-(BOOL)gestureRecognizer:(id)recognizer shouldReceivePress:(id)press;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
@end

@protocol GADAdDelegate <NSObject>
@optional
-(BOOL)ad:(id)ad shouldChangeAudioSessionToCategory:(id)category;
@end

@protocol GADBannerViewDelegate <GADAdDelegate>
@optional
-(void)adViewWillLeaveApplication:(id)adView;
-(void)adViewDidDismissScreen:(id)adView;
-(void)adViewWillDismissScreen:(id)adView;
-(void)adViewWillPresentScreen:(id)adView;
-(void)adView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)adViewDidReceiveAd:(id)adView;
@end

@protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
@optional
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
@end

@protocol UITableViewDataSource <NSObject>
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
@optional
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@protocol FMMoveTableViewDataSource <NSObject, UITableViewDataSource>
-(void)moveTableView:(id)view moveRowFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
@optional
-(BOOL)moveTableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(id)indexPathForPreferredFocusedViewInTableView:(id)tableView;
-(void)tableView:(id)view didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)animationCoordinator;
-(BOOL)tableView:(id)view shouldUpdateFocusInContext:(id)context;
-(BOOL)tableView:(id)view canFocusRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didUnhighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didHighlightRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForFooterInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
@end

@protocol FMMoveTableViewDelegate <NSObject, UITableViewDelegate>
@optional
-(void)moveTableView:(id)view willMoveRowAtIndexPath:(id)indexPath;
-(id)moveTableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
@end

@protocol VKSdkDelegate <NSObject>
-(void)vkSdkReceivedNewToken:(id)token;
-(void)vkSdkShouldPresentViewController:(id)vkSdk;
-(void)vkSdkUserDeniedAccess:(id)access;
-(void)vkSdkTokenHasExpired:(id)expired;
-(void)vkSdkNeedCaptchaEnter:(id)enter;
@optional
-(void)vkSdkDidDismissViewController:(id)vkSdk;
-(void)vkSdkWillDismissViewController:(id)vkSdk;
-(BOOL)vkSdkIsBasicAuthorization;
-(BOOL)vkSdkAuthorizationAllowFallbackToSafari;
-(void)vkSdkRenewedToken:(id)token;
-(void)vkSdkAcceptedUserToken:(id)token;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol UITabBarDelegate <NSObject>
@optional
-(void)tabBar:(id)bar didEndCustomizingItems:(id)items changed:(BOOL)changed;
-(void)tabBar:(id)bar willEndCustomizingItems:(id)items changed:(BOOL)changed;
-(void)tabBar:(id)bar didBeginCustomizingItems:(id)items;
-(void)tabBar:(id)bar willBeginCustomizingItems:(id)items;
-(void)tabBar:(id)bar didSelectItem:(id)item;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol UIImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)navigationControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)navigationControllerSupportedInterfaceOrientations:(id)orientations;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol STKDataSourceDelegate <NSObject>
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
@end

@protocol STKAudioPlayerDelegate <NSObject>
-(void)audioPlayer:(id)player unexpectedError:(int)error;
-(void)audioPlayer:(id)player didFinishPlayingQueueItemId:(id)anId withReason:(int)reason andProgress:(double)progress andDuration:(double)duration;
-(void)audioPlayer:(id)player stateChanged:(int)changed previousState:(int)state;
-(void)audioPlayer:(id)player didFinishBufferingSourceWithQueueItemId:(id)queueItemId;
-(void)audioPlayer:(id)player didStartPlayingQueueItemId:(id)anId;
@optional
-(void)audioPlayer:(id)player didCancelQueuedItems:(id)items;
-(void)audioPlayer:(id)player logInfo:(id)info;
@end

@protocol AFURLResponseSerialization <NSObject, NSSecureCoding, NSCopying>
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)application:(id)application didUpdateUserActivity:(id)activity;
-(void)application:(id)application didFailToContinueUserActivityWithType:(id)type error:(id)error;
-(BOOL)application:(id)application continueUserActivity:(id)activity restorationHandler:(id)handler;
-(BOOL)application:(id)application willContinueUserActivityWithType:(id)type;
-(void)application:(id)application didDecodeRestorableStateWithCoder:(id)coder;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(id)application:(id)application viewControllerWithRestorationIdentifierPath:(id)restorationIdentifierPath coder:(id)coder;
-(BOOL)application:(id)application shouldAllowExtensionPointIdentifier:(id)identifier;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationShouldRequestHealthAuthorization:(id)application;
-(void)application:(id)application handleWatchKitExtensionRequest:(id)request reply:(id)reply;
-(void)application:(id)application handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(void)application:(id)application performActionForShortcutItem:(id)shortcutItem completionHandler:(id)handler;
-(void)application:(id)application performFetchWithCompletionHandler:(id)completionHandler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification completionHandler:(id)handler;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didRegisterUserNotificationSettings:(id)settings;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url options:(id)options;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)applicationDidFinishLaunching:(id)application;
@end

@protocol SSZipArchiveDelegate <NSObject>
@optional
-(void)zipArchiveProgressEvent:(int)event total:(int)total;
-(void)zipArchiveDidUnzipFileAtIndex:(int)zipArchive totalFiles:(int)files archivePath:(id)path fileInfo:(unz_file_info_s)info;
-(void)zipArchiveWillUnzipFileAtIndex:(int)zipArchive totalFiles:(int)files archivePath:(id)path fileInfo:(unz_file_info_s)info;
-(void)zipArchiveDidUnzipArchiveAtPath:(id)zipArchive zipInfo:(unz_global_info_s)info unzippedPath:(id)path;
-(void)zipArchiveWillUnzipArchiveAtPath:(id)zipArchive zipInfo:(unz_global_info_s)info;
@end

@protocol MFMessageComposeViewControllerDelegate <NSObject>
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@protocol UIPopoverControllerDelegate <NSObject>
@optional
-(void)popoverController:(id)controller willRepositionPopoverToRect:(inout CGRect*)rect inView:(inout id*)view;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
@end

@protocol QLPreviewControllerDelegate <NSObject>
@optional
-(id)previewController:(id)controller transitionImageForPreviewItem:(id)previewItem contentRect:(CGRect*)rect;
-(CGRect)previewController:(id)controller frameForPreviewItem:(id)previewItem inSourceView:(id*)sourceView;
-(BOOL)previewController:(id)controller shouldOpenURL:(id)url forPreviewItem:(id)previewItem;
-(void)previewControllerDidDismiss:(id)previewController;
-(void)previewControllerWillDismiss:(id)previewController;
@end

@protocol UIActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol AFURLRequestSerialization <NSObject, NSSecureCoding, NSCopying>
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
@end

@protocol AFMultipartFormData
-(void)throttleBandwidthWithPacketSize:(unsigned)packetSize delay:(double)delay;
-(void)appendPartWithHeaders:(id)headers body:(id)body;
-(void)appendPartWithFormData:(id)formData name:(id)name;
-(void)appendPartWithFileData:(id)fileData name:(id)name fileName:(id)name3 mimeType:(id)type;
-(void)appendPartWithInputStream:(id)inputStream name:(id)name fileName:(id)name3 length:(long long)length mimeType:(id)type;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name fileName:(id)name3 mimeType:(id)type error:(id*)error;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name error:(id*)error;
@end

@protocol NSStreamDelegate <NSObject>
@optional
-(void)stream:(id)stream handleEvent:(unsigned)event;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol GADMRewardBasedVideoAdNetworkAdapter <NSObject>
+(Class)networkExtrasClass;
+(id)adapterVersion;
-(void)stopBeingDelegate;
-(void)presentRewardBasedVideoAdWithRootViewController:(id)rootViewController;
-(void)requestRewardBasedVideoAd;
-(void)setUp;
-(id)initWithRewardBasedVideoAdNetworkConnector:(id)rewardBasedVideoAdNetworkConnector;
@optional
-(void)setUpWithUserID:(id)userID;
-(id)initWithGADMAdNetworkConnector:(id)gadmadNetworkConnector;
@end

@protocol GADMediationAdRequest <NSObject>
-(id)userKeywords;
-(id)userLocationDescription;
-(float)userLocationAccuracyInMeters;
-(float)userLongitude;
-(float)userLatitude;
-(BOOL)userHasLocation;
-(id)userBirthday;
-(int)userGender;
-(id)childDirectedTreatment;
-(id)networkExtras;
-(BOOL)testMode;
-(id)credentials;
-(id)publisherId;
@end

@protocol GADMRewardBasedVideoAdNetworkConnector <GADMediationAdRequest>
-(void)adapter:(id)adapter didFailToLoadRewardBasedVideoAdwithError:(id)loadRewardBasedVideoAdwithError;
-(void)adapterWillLeaveApplication:(id)adapter;
-(void)adapter:(id)adapter didRewardUserWithReward:(id)reward;
-(void)adapterDidCloseRewardBasedVideoAd:(id)adapter;
-(void)adapterDidStartPlayingRewardBasedVideoAd:(id)adapter;
-(void)adapterDidOpenRewardBasedVideoAd:(id)adapter;
-(void)adapterDidReceiveRewardBasedVideoAd:(id)adapter;
-(void)adapterDidGetAdClick:(id)adapter;
-(void)adapter:(id)adapter didFailToSetUpRewardBasedVideoAdWithError:(id)error;
-(void)adapterDidSetUpRewardBasedVideoAd:(id)adapter;
@end

@protocol GADMediationAdRequestInternal <GADMediationAdRequest>
-(id)userRequestAgent;
-(id)currentAdapterName;
-(id)adapterNames;
-(id)extras;
-(id)inlineAd;
@end

@protocol SKPaymentTransactionObserver <NSObject>
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
@optional
-(void)paymentQueue:(id)queue updatedDownloads:(id)downloads;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueue:(id)queue removedTransactions:(id)transactions;
@end

@protocol GADInAppPurchaseDelegate <NSObject>
-(void)didReceiveInAppPurchase:(id)appPurchase;
@end

@protocol SKStoreProductViewControllerDelegate <NSObject>
@optional
-(void)productViewControllerDidFinish:(id)productViewController;
@end

@protocol GADMRewardBasedVideoAdConnectorDelegate
-(void)connectorWillLeaveApplication:(id)connector;
-(void)connectorDidCloseRewardBasedVideoAd:(id)connector;
-(void)connectorDidStartPlayingRewardBasedVideoAd:(id)connector;
-(void)connectorDidOpenRewardBasedVideoAd:(id)connector;
-(void)connector:(id)connector didRewardUserWithReward:(id)reward;
-(void)connectorDidReceiveClick:(id)connector;
-(void)connector:(id)connector didFailToReceiveRewardBasedVideoAdWithError:(id)error;
-(void)connectorDidReceiveRewardBasedVideoAd:(id)connector;
-(void)connector:(id)connector didFailToSetUpRewardBasedVideoAdWithError:(id)error;
-(void)connectorDidSetUpRewardBasedVideoAd:(id)connector;
@end

@protocol GADAdViewActiveViewMonitoring <NSObject>
-(void)activeViewMonitoringDidStop;
-(BOOL)activeViewMonitoringStarted;
-(void)activeViewVisibilityChanged:(BOOL)changed;
@end

@protocol SKRequestDelegate <NSObject>
@optional
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
@end

@protocol SKProductsRequestDelegate <SKRequestDelegate>
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

@protocol GADActiveViewMonitorDelegate <NSObject>
-(void)activeViewMonitorDidRefresh:(id)activeViewMonitor;
@optional
-(unsigned)identifierForActiveViewMonitor:(id)activeViewMonitor;
-(BOOL)isMRAIDEnabledForActiveViewMonitor:(id)activeViewMonitor;
@end

@protocol GADSDKCoreWebViewNotification
-(void)didFinishLoadingSDKCoreInSDKCoreWebView:(id)sdkcoreWebView;
@end

@protocol GADSDKCoreGMSGHandlerDelegate
-(void)SDKCoreGMSGHandlerDidReceiveSDKCoreUpdateNotification:(id)sdkcoreGMSGHandler;
-(void)SDKCoreGMSGHandler:(id)handler didLoadSDKConstants:(id)constants;
-(void)SDKCoreGMSGHandler:(id)handler didReceiveInvalidAdWithRequestID:(id)requestID parameters:(id)parameters;
-(void)SDKCoreGMSGHandler:(id)handler loadAdWithRequestID:(id)requestID parameters:(id)parameters;
-(void)SDKCoreGMSGHandler:(id)handler loadAdURLWithRequestID:(id)requestID parameters:(id)parameters;
@end

@protocol GADCachedFileDelegate
-(void)cachedFile:(id)file downloadDidFail:(id)download;
-(void)cachedFileDownloadDidEnd:(id)cachedFileDownload;
-(id)cachedFile:(id)file shouldRedirectToURL:(id)url;
@end

@protocol GADIntermitting <NSObject>
@property(readonly, assign, nonatomic) GADIntermission* intermission;
-(void)relinquishScreenWithCompletion:(id)completion;
-(BOOL)shouldDismissOnApplicationEnteringForeground;
-(void)presentFromViewController:(id)viewController completion:(id)completion;
@end

@protocol GADNativeAppInstallAdLoaderDelegate <GADAdLoaderDelegate>
-(void)adLoader:(id)loader didReceiveNativeAppInstallAd:(id)ad;
@end

@protocol GADNativeAdSourceAttributing <NSObject>
-(id)attribution;
@end

@protocol GADOverlayViewSource <NSObject>
-(id)overlayView;
@end

@protocol CBCentralManagerDelegate <NSObject>
-(void)centralManagerDidUpdateState:(id)centralManager;
@optional
-(void)centralManager:(id)manager didDisconnectPeripheral:(id)peripheral error:(id)error;
-(void)centralManager:(id)manager didFailToConnectPeripheral:(id)connectPeripheral error:(id)error;
-(void)centralManager:(id)manager didConnectPeripheral:(id)peripheral;
-(void)centralManager:(id)manager didDiscoverPeripheral:(id)peripheral advertisementData:(id)data RSSI:(id)rssi;
-(void)centralManager:(id)manager willRestoreState:(id)state;
@end

@protocol EKEventEditViewDelegate <NSObject>
-(void)eventEditViewController:(id)controller didCompleteWithAction:(int)action;
@optional
-(id)eventEditViewControllerDefaultCalendarForNewEvents:(id)newEvents;
@end

@protocol GADMRAIDPictureDelegate <NSObject>
@optional
-(void)MRAIDPicture:(id)picture failedToStorePictureWithURL:(id)url message:(id)message;
-(void)MRAIDPicture:(id)picture didStorePictureWithURL:(id)url;
@end

@protocol GADAdLoaderDelegate <NSObject>
-(void)adLoader:(id)loader didFailToReceiveAdWithError:(id)error;
@end

@protocol GADNativeCustomTemplateAdLoaderDelegate <GADAdLoaderDelegate>
-(void)adLoader:(id)loader didReceiveNativeCustomTemplateAd:(id)ad;
-(id)nativeCustomTemplateIDsForAdLoader:(id)adLoader;
@end

@protocol GADAdLoading <NSObject>
+(id)requestParametersForAdLoader:(id)adLoader;
+(id)requiredDelegateProtocol;
-(void)adLoaderDidReceiveAd:(id)adLoader;
@end

@protocol GADDelayLoadDelegate <NSObject>
-(void)loadHandlerDidChangeDelay:(id)loadHandler from:(int)from to:(int)to;
-(void)loadHandlerDidCancel:(id)loadHandler;
@end

@protocol CLLocationManagerDelegate <NSObject>
@optional
-(void)locationManager:(id)manager didVisit:(id)visit;
-(void)locationManager:(id)manager didFinishDeferredUpdatesWithError:(id)error;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(void)locationManager:(id)manager didStartMonitoringForRegion:(id)region;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)locationManager:(id)manager monitoringDidFailForRegion:(id)monitoring withError:(id)error;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didExitRegion:(id)region;
-(void)locationManager:(id)manager didEnterRegion:(id)region;
-(void)locationManager:(id)manager rangingBeaconsDidFailForRegion:(id)rangingBeacons withError:(id)error;
-(void)locationManager:(id)manager didRangeBeacons:(id)beacons inRegion:(id)region;
-(void)locationManager:(id)manager didDetermineState:(int)state forRegion:(id)region;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
@end

@protocol DFPCustomRenderedAdEventHandler <NSObject>
-(void)finishedRenderingAdView:(id)view;
-(void)recordCustomAdImpression;
-(void)recordClick;
@end

@protocol GADMAdNetworkAdapter <NSObject>
+(Class)networkExtrasClass;
+(id)adapterVersion;
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)isBannerAnimationOK:(int)ok;
-(void)stopBeingDelegate;
-(void)getInterstitial;
-(void)getBannerWithSize:(GADAdSize)size;
-(id)initWithGADMAdNetworkConnector:(id)gadmadNetworkConnector;
@optional
-(void)changeAdSizeTo:(GADAdSize)to;
-(BOOL)handlesUserImpressions;
-(BOOL)handlesUserClicks;
-(void)getNativeAdWithAdTypes:(id)adTypes options:(id)options;
@end

@protocol SFSafariViewControllerDelegate <NSObject>
@optional
-(void)safariViewController:(id)controller didCompleteInitialLoad:(BOOL)load;
-(void)safariViewControllerDidFinish:(id)safariViewController;
-(id)safariViewController:(id)controller activityItemsForURL:(id)url title:(id)title;
@end

@protocol GADAdMediationDelegate <NSObject>
-(Class)connectorClassForAd:(id)ad;
@optional
-(void)ad:(id)ad processMediatedAd:(id)ad2 withCompletionHandler:(id)completionHandler;
-(id)adLoaderConfigurationForAd:(id)ad networkConfiguration:(id)configuration;
-(id)adLoaderConfigurationForAd:(id)ad;
@end

@protocol GADSlotAdEventDelegate <NSObject>
-(void)slotWillLeaveApplication:(id)slot;
-(void)slotDidDismissScreen:(id)slot;
-(void)slotWillDismissScreen:(id)slot;
-(void)slotWillPresentScreen:(id)slot;
@end

@protocol GADSlotAdLoadDelegate <NSObject>
-(void)slot:(id)slot didFailToLoadAdContentWithError:(id)error;
-(void)slotFinishedLoadingAdContent:(id)content;
@end

@protocol GADSlotDelegate <NSObject>
@optional
-(BOOL)slot:(id)slot shouldChangeAudioSessionCategoryTo:(id)to;
-(void)slotDidReceiveAdClick:(id)slot;
-(void)slot:(id)slot willLoadAdWithRequest:(id)request;
-(BOOL)slot:(id)slot notifyPublisherToRenderCustomRenderingAd:(id)renderCustomRenderingAd error:(id*)error;
-(void)slot:(id)slot didReceiveAppEvent:(id)event withInfo:(id)info;
-(void)slot:(id)slot willResizeToAdSize:(GADAdSize)adSize;
-(id)validAdSizes;
-(void)setAdSize:(GADAdSize)size andReload:(BOOL)reload;
-(void)slot:(id)slot contentSizeDidChange:(CGSize)contentSize;
-(void)slot:(id)slot didReceiveAdView:(id)view;
-(id)rootViewController;
-(id)swipeToViewControllerView;
-(id)inAppPurchaseDelegate;
-(id)coordinatesOfContentInScreen:(id)screen;
-(CGRect)bounds;
-(CGRect)frameInInterface;
-(CGRect)frame;
-(BOOL)slotShouldPreemptInProgressRequest:(id)slot;
-(BOOL)slotShouldReloadCurrentRequest:(id)slot;
-(BOOL)slot:(id)slot shouldLoadRequest:(id)request error:(id*)error;
@end

@protocol GADSlotAdResponseDelegate <NSObject>
-(BOOL)slot:(id)slot shouldProcessMediatedAdResponse:(id)response error:(id*)error;
-(BOOL)slot:(id)slot shouldProcessAdResponse:(id)response error:(id*)error;
@end

@protocol GADSlotAdKeyDelegate <NSObject>
-(id)viewHierarchyInformationForSlot:(id)slot;
-(void)cacheViewHierarchyInformationForSlot:(id)slot;
@end

@protocol GADAdFetcherDelegate <NSObject>
-(void)adFetcher:(id)fetcher didFailToFetchAd:(id)fetchAd withError:(id)error responseCode:(unsigned)code;
-(void)adFetcher:(id)fetcher didFetchAd:(id)ad;
@end

@protocol GADInterstitialRewardBasedVideoAdDelegate <NSObject>
-(void)interstitial:(id)interstitial didRewardUserWithReward:(id)reward;
-(void)interstitialDidStartPlayingRewardBasedVideoAd:(id)interstitial;
@end

@protocol GADRewardBasedVideoAdGMSGHandlerDelegate <NSObject>
@optional
-(void)rewardBasedVideoAdGMSGHandler:(id)handler didReceiveRewardNotificationWithRewardItem:(id)rewardItem;
-(void)rewardBasedVideoAdGMSGHandlerDidReceiveStartVideoNotification:(id)rewardBasedVideoAdGMSGHandler;
@end

@protocol GADStatisticDictionaryDelegate <NSObject>
-(void)didUpdateStatisticDictionary:(id)dictionary;
-(id)notificationQueue;
@end

@protocol UIViewControllerTransitioningDelegate <NSObject>
@optional
-(id)presentationControllerForPresentedViewController:(id)presentedViewController presentingViewController:(id)controller sourceViewController:(id)controller3;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
@end

@protocol GADPercentDrivenUserInteractionAnimationControllerDelegate <NSObject>
-(void)animationControllerDidCancelAnimationTransition:(id)animationController;
-(void)animationControllerDidFinishAnimationTransition:(id)animationController;
@end

@protocol GADMSlotDelegate <NSObject>
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)changeAdTypeTo:(id)to;
-(void)mediateForAdType:(id)adType config:(id)config;
@end

@protocol GADMConnectorDelegate <NSObject>
-(void)adRequestFailedFromConnector:(id)connector withError:(id)error;
-(void)adRequestReturnsFromConnector:(id)connector withMediatedAd:(id)mediatedAd;
-(void)adRequestReturnsFromConnector:(id)connector withInterstitial:(id)interstitial;
-(void)adRequestReturnsFromConnector:(id)connector withView:(id)view;
@end

@protocol GADOverlayPresenting <NSObject>
@property(readonly, assign, nonatomic, getter=isReadyToPresent) BOOL readyToPresent;
@property(assign, nonatomic) __weak GADViewController* presentedViewController;
-(void)setNeedsUpdateOrientation;
-(void)dismissWithCompletionHandler:(id)completionHandler;
-(id)presentationViewController;
-(void)presentFromViewController:(id)viewController completion:(id)completion;
@end

@protocol GADActiveViewGMSGHandlerDelegate
-(void)activeViewGMSGHandler:(id)handler didReceiveUntrackNotificationForActiveViewID:(unsigned)activeViewID;
-(void)activeViewGMSGHandler:(id)handler didReceiveVisibilityNotification:(BOOL)notification forActiveViewID:(unsigned)activeViewID;
@end

@protocol GADMAdNetworkConnector <GADMediationAdRequest>
-(void)adapter:(id)adapter didFailInterstitial:(id)interstitial;
-(void)adapter:(id)adapter clickDidOccurInBanner:(id)click;
-(void)adapter:(id)adapter didReceiveInterstitial:(id)interstitial;
-(void)adapterDidDismissInterstitial:(id)adapter;
-(void)adapterWillDismissInterstitial:(id)adapter;
-(void)adapterWillPresentInterstitial:(id)adapter;
-(void)adapterDidDismissFullScreenModal:(id)adapter;
-(void)adapterWillDismissFullScreenModal:(id)adapter;
-(void)adapterWillPresentFullScreenModal:(id)adapter;
-(void)adapterWillLeaveApplication:(id)adapter;
-(void)adapterDidGetAdClick:(id)adapter;
-(void)adapter:(id)adapter didReceiveMediatedNativeAd:(id)ad;
-(void)adapterDidReceiveInterstitial:(id)adapter;
-(void)adapter:(id)adapter didReceiveAdView:(id)view;
-(void)adapter:(id)adapter didFailAd:(id)ad;
-(id)viewControllerForPresentingModalView;
@end

@protocol GADMInternalAdNetworkConnector <GADMAdNetworkConnector>
@property(retain, nonatomic) GADMAdNetworkConfig* networkConfig;
-(BOOL)autoClickProtectionEnabled;
@end

@protocol GADInterstitialDelegate <GADAdDelegate>
@optional
-(void)interstitialWillLeaveApplication:(id)interstitial;
-(void)interstitialDidDismissScreen:(id)interstitial;
-(void)interstitialWillDismissScreen:(id)interstitial;
-(void)interstitialDidFailToPresentScreen:(id)interstitial;
-(void)interstitialWillPresentScreen:(id)interstitial;
-(void)interstitial:(id)interstitial didFailToReceiveAdWithError:(id)error;
-(void)interstitialDidReceiveAd:(id)interstitial;
@end

@protocol GADInterstitialAdClickDelegate <NSObject>
@optional
-(void)interstitialDidReceiveAdClick:(id)interstitial;
@end

@protocol GADDynamicHeightSearchBannerViewDelegate <NSObject>
-(void)bannerView:(id)view didReceiveLandingPageURL:(id)url;
-(void)bannerView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)bannerView:(id)view didUpdateDesiredContentSize:(CGSize)size;
-(void)bannerViewDidReceiveAd:(id)bannerView;
@end

@protocol GADClickTrackerDelegate <NSObject>
@optional
-(void)tracker:(id)tracker didFailWithError:(id)error;
-(void)tracker:(id)tracker didRedirect:(id)redirect;
@end

@protocol GADURLConnectionDelegate
-(void)connection:(id)connection loadDidFail:(id)load httpStatusCode:(int)code;
-(void)connection:(id)connection loadDidFinish:(id)load baseURL:(id)url;
-(void)connection:(id)connection loadDidReceiveCachedResponse:(id)load;
-(BOOL)connection:(id)connection loadShouldUseCachedResponse:(id)load;
-(void)connection:(id)connection loadDidReceiveRedirectResponse:(id)load;
-(id)connection:(id)connection shouldRedirectToURL:(id)url;
@end

@protocol GADMediatedNativeAd <NSObject>
-(id)extraAssets;
-(id)mediatedNativeAdDelegate;
@end

@protocol GADMediatedNativeAppInstallAd <GADMediatedNativeAd>
-(id)price;
-(id)store;
-(id)starRating;
-(id)callToAction;
-(id)icon;
-(id)body;
-(id)images;
-(id)headline;
@end

@protocol GADMediatedNativeContentAd <GADMediatedNativeAd>
-(id)advertiser;
-(id)callToAction;
-(id)logo;
-(id)images;
-(id)body;
-(id)headline;
@end

@protocol GADNativeAdViewPolicyDelegate <NSObject>
-(void)nativeAdViewPolicy:(id)policy didUnloadNativeAd:(id)ad fromView:(id)view;
-(void)nativeAdViewPolicy:(id)policy didBeginTrackingView:(id)view;
@end

@protocol GADVideoPlayerDelegate <NSObject>
-(void)player:(id)player didCreateAVPlayer:(id)player2;
-(void)player:(id)player didCacheFileAtURL:(id)url;
@end

@protocol GADRewardBasedVideoAdClickDelegate <NSObject>
@optional
-(void)rewardBasedVideoAdDidReceiveAdClick:(id)rewardBasedVideoAd;
@end

@protocol GADRewardBasedVideoAdDelegate <NSObject>
@optional
-(void)rewardBasedVideoAd:(id)ad didFailToLoadWithError:(id)error;
-(void)rewardBasedVideoAd:(id)ad didRewardUserWithReward:(id)reward;
-(void)rewardBasedVideoAdWillLeaveApplication:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidClose:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidStartPlaying:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidOpen:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidReceiveAd:(id)rewardBasedVideoAd;
@end

@protocol GADCustomEventBanner <NSObject>
@property(assign, nonatomic) __weak id<GADCustomEventBannerDelegate> delegate;
-(void)requestBannerAd:(GADAdSize)ad parameter:(id)parameter label:(id)label request:(id)request;
@end

@protocol GADCustomEventInterstitial <NSObject>
@property(assign, nonatomic) __weak id<GADCustomEventInterstitialDelegate> delegate;
-(void)presentFromRootViewController:(id)rootViewController;
-(void)requestInterstitialAdWithParameter:(id)parameter label:(id)label request:(id)request;
@end

@protocol GADCustomEventBannerDelegate <NSObject>
@property(readonly, assign, nonatomic) UIViewController* viewControllerForPresentingModalView;
-(void)customEventBanner:(id)banner clickDidOccurInAd:(id)click;
-(void)customEventBannerWillLeaveApplication:(id)customEventBanner;
-(void)customEventBannerDidDismissModal:(id)customEventBanner;
-(void)customEventBannerWillDismissModal:(id)customEventBanner;
-(void)customEventBannerWillPresentModal:(id)customEventBanner;
-(void)customEventBannerWasClicked:(id)clicked;
-(void)customEventBanner:(id)banner didFailAd:(id)ad;
-(void)customEventBanner:(id)banner didReceiveAd:(id)ad;
@end

@protocol GADCustomEventInterstitialDelegate <NSObject>
-(void)customEventInterstitial:(id)interstitial didReceiveAd:(id)ad;
-(void)customEventInterstitialWillLeaveApplication:(id)customEventInterstitial;
-(void)customEventInterstitialDidDismiss:(id)customEventInterstitial;
-(void)customEventInterstitialWillDismiss:(id)customEventInterstitial;
-(void)customEventInterstitialWillPresent:(id)customEventInterstitial;
-(void)customEventInterstitialWasClicked:(id)clicked;
-(void)customEventInterstitial:(id)interstitial didFailAd:(id)ad;
-(void)customEventInterstitialDidReceiveAd:(id)customEventInterstitial;
@end

@protocol GADCustomEventNativeAdDelegate <NSObject>
-(void)customEventNativeAd:(id)ad didFailToLoadWithError:(id)error;
-(void)customEventNativeAd:(id)ad didReceiveMediatedNativeAd:(id)ad2;
@end

@protocol GADAdNetworkExtras <NSObject>
@end

@protocol GADMWebViewRenderedCheckerDelegate <NSObject>
-(void)webView:(id)view isRendered:(BOOL)rendered;
@end

@protocol GADImpressionMonitorDelegate <NSObject>
-(void)impressionMonitorDidMonitorImpression:(id)impressionMonitor;
@end

@protocol DFPCustomRenderedInterstitialDelegate <NSObject>
-(void)interstitial:(id)interstitial didReceiveCustomRenderedAd:(id)ad;
@end

@protocol DFPCustomRenderedBannerViewDelegate <NSObject>
-(void)bannerView:(id)view didReceiveCustomRenderedAd:(id)ad;
@end

@protocol GADSDKCoreControllerDelegate <NSObject>
-(void)failedJavaScriptFile;
-(void)invalidJavaScriptRequest;
-(void)loadAd:(id)ad headers:(id)headers;
-(void)loadAdURLWithParameters:(id)parameters;
-(void)setRequestID:(id)anId;
-(int)requestedAdType;
-(id)requestParameters;
-(id)adLoadActionTimeRecorder;
@end

@protocol GADAdViewRenderedCheckerDelegate <NSObject>
-(void)adViewDidFailToRenderContent:(id)adView;
-(void)adViewDidRenderContent:(id)adView;
@end

@protocol UIViewControllerAnimatedTransitioning <NSObject>
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@optional
-(void)animationEnded:(BOOL)ended;
@end

@protocol GADNativeContentAdLoaderDelegate <GADAdLoaderDelegate>
-(void)adLoader:(id)loader didReceiveNativeContentAd:(id)ad;
@end

@protocol GADMRAIDEventHandling <NSObject>
-(void)handleError:(id)error action:(id)action;
-(void)notifyOrientationToMRAIDCreative;
-(void)updatePositionFromView:(id)view;
-(void)updateVisibility:(BOOL)visibility;
-(void)MRAIDAdDidUnload;
-(void)MRAIDAdDidLoad;
@end

@protocol GADAdViewDelegate <NSObject>
@optional
-(void)adView:(id)view contentSizeDidChange:(CGSize)contentSize;
-(void)adView:(id)view didMoveToPlacement:(id)placement;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(void)adViewDidFinishLoad:(id)adView;
-(void)adViewDidStartLoad:(id)adView;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)textAttachment inRange:(NSRange)range;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
@end

@protocol UICollectionViewDataSource <NSObject>
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
@optional
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
@end

@protocol UICollectionViewDelegate <UIScrollViewDelegate>
@optional
-(id)collectionView:(id)view transitionLayoutForOldLayout:(id)oldLayout newLayout:(id)layout;
-(void)collectionView:(id)view performAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view canPerformAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view shouldShowMenuForItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingSupplementaryView:(id)view2 forElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplaySupplementaryView:(id)view2 forElementKind:(id)elementKind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldDeselectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didUnhighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didHighlightItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldHighlightItemAtIndexPath:(id)indexPath;
@end

@protocol VKApiObject <NSObject>
+(id)createWithArray:(id)array;
+(id)createWithDictionary:(id)dictionary;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol __ARCLiteIndexedSubscripting__
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

@protocol __ARCLiteKeyedSubscripting__
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicBKURLConnectionInformalDelegate : A2DynamicDelegate <BKURLConnectionInformalDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicNSURLConnectionDelegate : A2DynamicDelegate <NSURLConnectionDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(BOOL)conformsToProtocol:(id)protocol;
@end

__attribute__((visibility("hidden")))
@interface MarqueeLabel : XXUnknownSuperclass {
	BOOL _labelize;
	BOOL _holdScrolling;
	BOOL _tapToScroll;
	BOOL _isPaused;
	unsigned _animationCurve;
	unsigned _marqueeType;
	float _scrollDuration;
	float _rate;
	float _leadingBuffer;
	float _trailingBuffer;
	float _fadeLength;
	float _animationDelay;
	UILabel* _subLabel;
	UITapGestureRecognizer* _tapRecognizer;
	NSArray* _gradientColors;
	double _animationDuration;
	CGRect _homeLabelFrame;
	CGRect _awayLabelFrame;
}
@property(readonly, assign, nonatomic) BOOL awayFromHome;
@property(assign, nonatomic) float animationDelay;
@property(assign, nonatomic) float fadeLength;
@property(assign, nonatomic) float continuousMarqueeExtraBuffer;
@property(assign, nonatomic) float trailingBuffer;
@property(assign, nonatomic) float leadingBuffer;
@property(assign, nonatomic) float rate;
@property(assign, nonatomic) float scrollDuration;
@property(assign, nonatomic) unsigned marqueeType;
@property(assign, nonatomic) BOOL tapToScroll;
@property(assign, nonatomic) BOOL holdScrolling;
@property(assign, nonatomic) BOOL labelize;
@property(assign, nonatomic) unsigned animationCurve;
@property(retain, nonatomic) NSArray* gradientColors;
@property(assign, nonatomic) BOOL isPaused;
@property(assign, nonatomic) CGRect awayLabelFrame;
@property(assign, nonatomic) CGRect homeLabelFrame;
@property(assign, nonatomic) __weak UITapGestureRecognizer* tapRecognizer;
@property(readonly, assign, nonatomic) BOOL labelShouldScroll;
@property(assign, nonatomic) double animationDuration;
@property(retain, nonatomic) UILabel* subLabel;
+(void)notifyController:(id)controller withMessage:(id)message;
+(void)controllerLabelsShouldAnimate:(id)controllerLabels;
+(void)controllerLabelsShouldLabelize:(id)controllerLabels;
+(void)controllerViewAppearing:(id)appearing;
+(void)controllerViewDidAppear:(id)controllerView;
+(void)controllerViewWillAppear:(id)controllerView;
+(void)restartLabelsOfController:(id)controller;
-(void).cxx_destruct;
-(void)dealloc;
-(id)allSubLabels:(BOOL)labels;
-(id)secondarySubLabels;
-(id)allSubLabels;
-(void)updateSubLabelsForKeysWithValues:(id)values;
-(void)updateSubLabelsForKey:(id)key withValue:(id)value;
-(void)refreshSubLabels:(id)labels;
-(void)setMinimumScaleFactor:(float)factor;
-(void)setAdjustsLetterSpacingToFitWidth:(BOOL)fitWidth;
-(CGSize)intrinsicContentSize;
-(void)setBaselineAdjustment:(int)adjustment;
-(int)baselineAdjustment;
-(void)setMinimumFontSize:(float)size;
-(void)setAdjustsFontSizeToFitWidth:(BOOL)fitWidth;
-(void)setNumberOfLines:(int)lines;
-(void)setEnabled:(BOOL)enabled;
-(BOOL)isEnabled;
-(void)setHighlighted:(BOOL)highlighted;
-(BOOL)isHighlighted;
-(void)setHighlightedTextColor:(id)color;
-(id)highlightedTextColor;
-(void)setShadowOffset:(CGSize)offset;
-(CGSize)shadowOffset;
-(void)setShadowColor:(id)color;
-(id)shadowColor;
-(void)setBackgroundColor:(id)color;
-(id)backgroundColor;
-(void)setTextColor:(id)color;
-(id)textColor;
-(void)setFont:(id)font;
-(id)font;
-(void)setAttributedText:(id)text;
-(id)attributedText;
-(void)setText:(id)text;
-(id)text;
-(id)viewForBaselineLayout;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(void)labelReturnedToHome:(BOOL)home;
-(void)labelWillBeginScroll;
-(void)triggerScrollStart;
-(void)labelWasTapped:(id)tapped;
-(void)unpauseLabel;
-(void)pauseLabel;
-(void)shutdownLabel;
-(void)resetLabel;
-(void)restartLabel;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(id)timingFunctionForAnimationOptions:(unsigned)animationOptions;
-(id)keyFrameAnimationForProperty:(id)property values:(id)values interval:(double)interval delay:(double)delay;
-(id)keyFrameAnimationForGradientFadeLength:(float)gradientFadeLength interval:(double)interval delay:(double)delay;
-(void)removeGradientMask;
-(void)applyGradientMaskForFadeLength:(float)fadeLength animated:(BOOL)animated;
-(void)scrollContinuousWithInterval:(double)interval after:(double)after;
-(void)scrollAwayWithInterval:(double)interval delayAmount:(double)amount;
-(void)scrollAwayWithInterval:(double)interval delay:(BOOL)delay;
-(void)scrollAwayWithInterval:(double)interval;
-(void)returnLabelToOriginImmediately;
-(void)beginScrollWithDelay:(BOOL)delay;
-(void)beginScroll;
-(BOOL)labelReadyForScroll;
-(CGSize)sizeThatFits:(CGSize)fits;
-(CGSize)subLabelSize;
-(void)updateSublabelAndLocationsAndBeginScroll:(BOOL)scroll;
-(void)updateSublabelAndLocations;
-(void)didMoveToWindow;
-(void)willMoveToWindow:(id)window;
-(void)layoutSubviews;
-(void)didMoveToSuperview;
-(void)minimizeLabelFrameWithMaximumSize:(CGSize)maximumSize adjustHeight:(BOOL)height;
-(void)observedViewControllerChange:(id)change;
-(void)setupLabel;
-(void)forwardPropertiesToSubLabel;
-(void)awakeFromNib;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame rate:(float)rate andFadeLength:(float)length;
-(id)initWithFrame:(CGRect)frame duration:(double)duration andFadeLength:(float)length;
-(id)initWithFrame:(CGRect)frame;
-(void)labelsShouldAnimate:(id)labels;
-(void)labelsShouldLabelize:(id)labels;
-(void)viewControllerShouldRestart:(id)viewController;
@end

__attribute__((visibility("hidden")))
@interface VKMyGroupsSettings : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL changed;
}
-(void).cxx_destruct;
-(void)simpleUpdateScreen;
-(id)generateGroupsSortingSettingView;
-(void)somethingChanged;
-(void)cancelSelecting;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorDoubleBounceAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKAlbums : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	int offset;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	int selfId;
	NSString* _owner_id;
}
@property(retain, nonatomic) NSString* owner_id;
-(void).cxx_destruct;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)deleteFolderWithDict:(id)dict;
-(void)createFolderWithName:(id)name;
-(void)createFolderAlert;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)simpleUpdateList;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicNSCacheDelegate : A2DynamicDelegate <NSCacheDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)cache:(id)cache willEvictObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface ActivationPayAuto : XXUnknownSuperclass {
	UIWebView* webView;
	NSString* _paymentURL;
}
@property(retain, nonatomic) NSString* paymentURL;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)successPurchase;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AFImageCache : XXUnknownSuperclass <AFImageCache> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)cacheImage:(id)image forRequest:(id)request;
-(id)cachedImageForRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorLineScalePulseOutAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface AppodealLazyScreen : XXUnknownSuperclass <GADNativeExpressAdViewDelegate> {
	GADNativeExpressAdView* _nativeBannerView;
	UILabel* _adsLabel;
	UIView* _bannerContainer;
	UIButton* _whyDoIseeBannersButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIButton* whyDoIseeBannersButton;
@property(retain, nonatomic) UIView* bannerContainer;
@property(retain, nonatomic) UILabel* adsLabel;
@property(retain, nonatomic) GADNativeExpressAdView* nativeBannerView;
-(void).cxx_destruct;
-(void)nativeExpressAdViewWillLeaveApplication:(id)nativeExpressAdView;
-(void)nativeExpressAdViewDidDismissScreen:(id)nativeExpressAdView;
-(void)nativeExpressAdViewWillDismissScreen:(id)nativeExpressAdView;
-(void)nativeExpressAdViewWillPresentScreen:(id)nativeExpressAdView;
-(void)nativeExpressAdView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)nativeExpressAdViewDidReceiveAd:(id)nativeExpressAdView;
-(void)whyButtonPressed:(id)pressed;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SettingsArtworks : XXUnknownSuperclass {
	UITableView* contentTable;
	int artwork_loading_type;
}
-(void).cxx_destruct;
-(void)simpleUpdateList;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface LazyVolumeView : XXUnknownSuperclass {
}
-(CGRect)volumeSliderRectForBounds:(CGRect)bounds;
@end

__attribute__((visibility("hidden")))
@interface MediaController : XXUnknownSuperclass {
	LazyNavigationController* navController;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)backMediaControllerToBase;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface GlobalData : XXUnknownSuperclass {
	BOOL _sleepTimerWorking;
	BOOL _darkModeIsOn;
	BOOL _activationIsOk;
	BOOL _needToHideAds;
	BOOL _isCheckingActivation;
	BOOL _canShowExtendButton;
	BOOL _dateIsValid;
	UITabBar* _mainTabBar;
	UIColor* _currentSystemTint;
	NSOperationQueue* _downloadOperationQueue;
	UIImage* _downloadImageNormal;
	UIImage* _downloadImageHighlited;
	UIImage* _downloadImageCanceled;
	UIImage* _reorderImage;
	UIImage* _folderImage;
	UIImage* _folderImage_light;
	UIImage* _bitrateMaskLight;
	UIImage* _bitrateMaskDark;
	UIImage* _postPhotoMaskLight;
	UIImage* _postPhotoMaskDark;
	UIImage* _bookmarkImageHighlited;
	UIImage* _checkImage;
	UIImage* _uncheckImage;
	UIImage* _renameImage;
	UIImage* _bigButtonsBackground;
	UIImage* _multichatImage_dark;
	UIImage* _multichatImage_light;
	UIImage* _shadowImage;
	UIImage* _arrowRightImage;
	FMDatabaseQueue* _downloadsDatabase;
	FMDatabaseQueue* _bitratesDatabase;
	int _sleepTimerSecondsCountDown;
	NSString* _rootPath;
	NSString* _lazyID;
	NSString* _activationResult;
	NSBundle* _languageBundle;
}
@property(retain, nonatomic) NSBundle* languageBundle;
@property(assign, nonatomic) BOOL dateIsValid;
@property(assign, nonatomic) BOOL canShowExtendButton;
@property(assign, nonatomic) BOOL isCheckingActivation;
@property(assign, nonatomic) BOOL needToHideAds;
@property(assign, nonatomic) BOOL activationIsOk;
@property(retain, nonatomic) NSString* activationResult;
@property(retain, nonatomic) NSString* lazyID;
@property(assign, nonatomic) BOOL darkModeIsOn;
@property(retain, nonatomic) NSString* rootPath;
@property(assign, nonatomic) int sleepTimerSecondsCountDown;
@property(assign, nonatomic) BOOL sleepTimerWorking;
@property(retain, nonatomic) FMDatabaseQueue* bitratesDatabase;
@property(retain, nonatomic) FMDatabaseQueue* downloadsDatabase;
@property(retain, nonatomic) UIImage* arrowRightImage;
@property(retain, nonatomic) UIImage* shadowImage;
@property(retain, nonatomic) UIImage* multichatImage_light;
@property(retain, nonatomic) UIImage* multichatImage_dark;
@property(retain, nonatomic) UIImage* bigButtonsBackground;
@property(retain, nonatomic) UIImage* renameImage;
@property(retain, nonatomic) UIImage* uncheckImage;
@property(retain, nonatomic) UIImage* checkImage;
@property(retain, nonatomic) UIImage* bookmarkImageHighlited;
@property(retain, nonatomic) UIImage* postPhotoMaskDark;
@property(retain, nonatomic) UIImage* postPhotoMaskLight;
@property(retain, nonatomic) UIImage* bitrateMaskDark;
@property(retain, nonatomic) UIImage* bitrateMaskLight;
@property(retain, nonatomic) UIImage* folderImage_light;
@property(retain, nonatomic) UIImage* folderImage;
@property(retain, nonatomic) UIImage* reorderImage;
@property(retain, nonatomic) UIImage* downloadImageCanceled;
@property(retain, nonatomic) UIImage* downloadImageHighlited;
@property(retain, nonatomic) UIImage* downloadImageNormal;
@property(retain, nonatomic) NSOperationQueue* downloadOperationQueue;
@property(retain, nonatomic) UIColor* currentSystemTint;
@property(retain, nonatomic) UITabBar* mainTabBar;
+(id)allocWithZone:(NSZone*)zone;
+(id)shared;
-(void).cxx_destruct;
-(id)generateShadowImage;
-(float)getYbyX:(float)x;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface AFURLSessionManagerTaskDelegate : XXUnknownSuperclass <NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate> {
	AFURLSessionManager* _manager;
	NSMutableData* _mutableData;
	NSProgress* _progress;
	NSURL* _downloadFileURL;
	id _downloadTaskDidFinishDownloading;
	id _completionHandler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id completionHandler;
@property(copy, nonatomic) id downloadTaskDidFinishDownloading;
@property(copy, nonatomic) NSURL* downloadFileURL;
@property(retain, nonatomic) NSProgress* progress;
@property(retain, nonatomic) NSMutableData* mutableData;
@property(assign, nonatomic) __weak AFURLSessionManager* manager;
-(void).cxx_destruct;
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _AFURLSessionTaskSwizzling : XXUnknownSuperclass {
}
+(void)swizzleResumeAndSuspendMethodForClass:(Class)aClass;
+(void)load;
-(void)af_suspend;
-(void)af_resume;
-(int)state;
@end

__attribute__((visibility("hidden")))
@interface AFURLSessionManager : XXUnknownSuperclass <NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate, NSSecureCoding, NSCopying> {
	BOOL _attemptsToRecreateUploadTasksForBackgroundSessions;
	NSURLSession* _session;
	NSOperationQueue* _operationQueue;
	id<AFURLResponseSerialization> _responseSerializer;
	AFSecurityPolicy* _securityPolicy;
	AFNetworkReachabilityManager* _reachabilityManager;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
	NSURLSessionConfiguration* _sessionConfiguration;
	NSMutableDictionary* _mutableTaskDelegatesKeyedByTaskIdentifier;
	NSLock* _lock;
	id _sessionDidBecomeInvalid;
	id _sessionDidReceiveAuthenticationChallenge;
	id _didFinishEventsForBackgroundURLSession;
	id _taskWillPerformHTTPRedirection;
	id _taskDidReceiveAuthenticationChallenge;
	id _taskNeedNewBodyStream;
	id _taskDidSendBodyData;
	id _taskDidComplete;
	id _dataTaskDidReceiveResponse;
	id _dataTaskDidBecomeDownloadTask;
	id _dataTaskDidReceiveData;
	id _dataTaskWillCacheResponse;
	id _downloadTaskDidFinishDownloading;
	id _downloadTaskDidWriteData;
	id _downloadTaskDidResume;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL attemptsToRecreateUploadTasksForBackgroundSessions;
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(readonly, assign, nonatomic) NSArray* downloadTasks;
@property(readonly, assign, nonatomic) NSArray* uploadTasks;
@property(readonly, assign, nonatomic) NSArray* dataTasks;
@property(readonly, assign, nonatomic) NSArray* tasks;
@property(retain, nonatomic) AFNetworkReachabilityManager* reachabilityManager;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) id<AFURLResponseSerialization> responseSerializer;
@property(copy, nonatomic) id downloadTaskDidResume;
@property(copy, nonatomic) id downloadTaskDidWriteData;
@property(copy, nonatomic) id downloadTaskDidFinishDownloading;
@property(copy, nonatomic) id dataTaskWillCacheResponse;
@property(copy, nonatomic) id dataTaskDidReceiveData;
@property(copy, nonatomic) id dataTaskDidBecomeDownloadTask;
@property(copy, nonatomic) id dataTaskDidReceiveResponse;
@property(copy, nonatomic) id taskDidComplete;
@property(copy, nonatomic) id taskDidSendBodyData;
@property(copy, nonatomic) id taskNeedNewBodyStream;
@property(copy, nonatomic) id taskDidReceiveAuthenticationChallenge;
@property(copy, nonatomic) id taskWillPerformHTTPRedirection;
@property(copy, nonatomic) id didFinishEventsForBackgroundURLSession;
@property(copy, nonatomic) id sessionDidReceiveAuthenticationChallenge;
@property(copy, nonatomic) id sessionDidBecomeInvalid;
@property(retain, nonatomic) NSLock* lock;
@property(readonly, copy, nonatomic) NSString* taskDescriptionForSessionTasks;
@property(retain, nonatomic) NSMutableDictionary* mutableTaskDelegatesKeyedByTaskIdentifier;
@property(retain, nonatomic) NSURLSession* session;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) NSURLSessionConfiguration* sessionConfiguration;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didBecomeDownloadTask:(id)task3;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)URLSession:(id)session task:(id)task needNewBodyStream:(id)stream;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)setDownloadTaskDidResumeBlock:(id)resumeBlock;
-(void)setDownloadTaskDidWriteDataBlock:(id)writeDataBlock;
-(void)setDownloadTaskDidFinishDownloadingBlock:(id)finishDownloadingBlock;
-(void)setDataTaskWillCacheResponseBlock:(id)cacheResponseBlock;
-(void)setDataTaskDidReceiveDataBlock:(id)receiveDataBlock;
-(void)setDataTaskDidBecomeDownloadTaskBlock:(id)becomeDownloadTaskBlock;
-(void)setDataTaskDidReceiveResponseBlock:(id)receiveResponseBlock;
-(void)setTaskDidCompleteBlock:(id)completeBlock;
-(void)setTaskDidSendBodyDataBlock:(id)sendBodyDataBlock;
-(void)setTaskDidReceiveAuthenticationChallengeBlock:(id)receiveAuthenticationChallengeBlock;
-(void)setTaskWillPerformHTTPRedirectionBlock:(id)performHTTPRedirectionBlock;
-(void)setTaskNeedNewBodyStreamBlock:(id)block;
-(void)setDidFinishEventsForBackgroundURLSessionBlock:(id)finishEventsForBackgroundURLSessionBlock;
-(void)setSessionDidReceiveAuthenticationChallengeBlock:(id)receiveAuthenticationChallengeBlock;
-(void)setSessionDidBecomeInvalidBlock:(id)becomeInvalidBlock;
-(id)downloadProgressForTask:(id)task;
-(id)uploadProgressForTask:(id)task;
-(id)downloadTaskWithResumeData:(id)resumeData progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
-(id)downloadTaskWithRequest:(id)request progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
-(id)uploadTaskWithStreamedRequest:(id)streamedRequest progress:(id*)progress completionHandler:(id)handler;
-(id)uploadTaskWithRequest:(id)request fromData:(id)data progress:(id*)progress completionHandler:(id)handler;
-(id)uploadTaskWithRequest:(id)request fromFile:(id)file progress:(id*)progress completionHandler:(id)handler;
-(id)dataTaskWithRequest:(id)request completionHandler:(id)handler;
-(void)invalidateSessionCancelingTasks:(BOOL)tasks;
-(id)tasksForKeyPath:(id)keyPath;
-(void)removeAllDelegates;
-(void)removeDelegateForTask:(id)task;
-(void)addDelegateForDownloadTask:(id)downloadTask progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
-(void)addDelegateForUploadTask:(id)uploadTask progress:(id*)progress completionHandler:(id)handler;
-(void)addDelegateForDataTask:(id)dataTask completionHandler:(id)handler;
-(void)setDelegate:(id)delegate forTask:(id)task;
-(id)delegateForTask:(id)task;
-(void)taskDidSuspend:(id)task;
-(void)taskDidResume:(id)task;
-(void)dealloc;
-(id)initWithSessionConfiguration:(id)sessionConfiguration;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKMyGroupsGlobalSettings : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL changed;
}
-(void).cxx_destruct;
-(id)generateSortingSettingView;
-(void)simpleUpdateScreen;
-(void)somethingChanged;
-(void)cancelSelecting;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface STKHTTPDataSource : STKCoreFoundationDataSource {
	BOOL supportsSeek;
	unsigned long httpStatusCode;
	long long seekStart;
	long long relativePosition;
	long long fileLength;
	int discontinuous;
	int requestSerialNumber;
	int prefixBytesRead;
	NSData* prefixBytes;
	NSMutableData* iceHeaderData;
	BOOL iceHeaderSearchComplete;
	BOOL iceHeaderAvailable;
	BOOL httpHeaderNotAvailable;
	NSURL* currentUrl;
	id asyncUrlProvider;
	NSDictionary* httpHeaders;
	unsigned long audioFileTypeHint;
	NSDictionary* requestHeaders;
}
@property(readonly, assign) unsigned long httpStatusCode;
@property(readonly, retain) NSURL* url;
+(unsigned long)audioFileTypeHintFromMimeType:(id)mimeType;
-(void).cxx_destruct;
-(BOOL)supportsSeek;
-(id)description;
-(id)eventsRunLoop;
-(void)openForSeek:(BOOL)seek;
-(void)open;
-(int)privateReadIntoBuffer:(char*)buffer withSize:(int)size;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
-(void)reconnect;
-(long long)length;
-(long long)position;
-(void)dataAvailable;
-(BOOL)parseHttpHeader;
-(id)parseIceHeader:(id)header;
-(unsigned long)audioFileTypeHint;
-(void)dealloc;
-(id)initWithAsyncURLProvider:(id)asyncURLProvider;
-(id)initWithURLProvider:(id)urlprovider;
-(id)initWithURL:(id)url httpRequestHeaders:(id)headers;
-(id)initWithURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface LLACircularProgressView : XXUnknownSuperclass {
	CAShapeLayer* _progressLayer;
}
@property(retain, nonatomic) CAShapeLayer* progressLayer;
-(void).cxx_destruct;
-(void)updatePath;
-(void)dealloc;
-(void)setProgress:(float)progress;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)initialize;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallBeatAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface FMMoveTableViewCell : XXUnknownSuperclass {
}
-(void)prepareForMove;
-(void)prepareForMoveSnapshot;
@end

__attribute__((visibility("hidden")))
@interface SettingsSorting : XXUnknownSuperclass {
	UITableView* contentTable;
	int selectedSorting;
}
-(void).cxx_destruct;
-(void)simpleUpdateList;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallScaleMultipleAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface SongSlider : XXUnknownSuperclass {
	CGPoint beganTrackingLocation;
	float realPositionValue;
	float scrubbingSpeed;
	NSArray* scrubbingSpeeds;
	NSArray* scrubbingSpeedChangePositions;
}
@property(retain) NSArray* scrubbingSpeedChangePositions;
@property(retain) NSArray* scrubbingSpeeds;
@property(assign) CGPoint beganTrackingLocation;
@property(assign) float scrubbingSpeed;
-(void).cxx_destruct;
-(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
-(CGRect)trackRectForBounds:(CGRect)bounds;
-(id)defaultScrubbingSpeedChangePositions;
-(id)defaultScrubbingSpeeds;
-(unsigned)indexOfLowerScrubbingSpeed:(id)lowerScrubbingSpeed forOffset:(float)offset;
-(void)endTrackingWithTouch:(id)touch withEvent:(id)event;
-(BOOL)continueTrackingWithTouch:(id)touch withEvent:(id)event;
-(BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface DSTTableIndicator : XXUnknownSuperclass {
	UILabel* textLabel;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)simpleUpdateScreen;
-(void)setTextValue:(id)value;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKMyAudioPicker : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	NSMutableArray* foundArray;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIBarButtonItem* counterTracksItem;
	NSMutableArray* checkedIDs;
	id _tracksSelectedBlock;
	NSArray* _alreadyInAlbum;
	NSString* _albumName;
	NSString* _albumID;
}
@property(retain, nonatomic) NSString* albumID;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSArray* alreadyInAlbum;
@property(copy, nonatomic) id tracksSelectedBlock;
-(void).cxx_destruct;
-(void)renameFolderWithNewName:(id)newName;
-(void)renameFolderAlert;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)updateEditPanel;
-(void)confirmSelecting;
-(void)cancelSelecting;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKNewsSettings : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL changed;
}
-(void).cxx_destruct;
-(id)generateNewsFilterSettingView;
-(void)simpleUpdateScreen;
-(void)somethingChanged;
-(void)cancelSelecting;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallTrianglePathAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)translate:(id)translate withDeltaX:(float)deltaX deltaY:(float)y;
-(id)changeAnimation:(id)animation values:(id)values deltaX:(float)x deltaY:(float)y;
-(id)createCircleWithSize:(float)size color:(id)color;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface SingleTrackController : XXUnknownSuperclass <UIGestureRecognizerDelegate, GADBannerViewDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
	BOOL canTapBehind;
	UIView* mainView;
	BOOL canSnapshot;
	GADBannerView* bannerView;
	NSLayoutConstraint* bannerHeightConstraint;
	UIButton* whyDoIseeBannersButton;
	BOOL _needManualPlayerUpdate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL needManualPlayerUpdate;
-(void).cxx_destruct;
-(void)whyButtonPressed:(id)pressed;
-(void)adViewWillLeaveApplication:(id)adView;
-(void)adViewDidDismissScreen:(id)adView;
-(void)adViewWillDismissScreen:(id)adView;
-(void)adViewWillPresentScreen:(id)adView;
-(void)adView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)adViewDidReceiveAd:(id)adView;
-(void)snapshotPlayerScreen;
-(void)simpleUpdateScreen;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)canNotTapBehindPlayeriPad;
-(void)canTapBehindPlayeriPad;
-(void)dealloc;
-(BOOL)disablesAutomaticKeyboardDismissal;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKLiked : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	int offset;
	int tracksIndex;
	NSMutableArray* foundPosts;
	NSMutableArray* allFoundTracks;
	UIAlertView* pleaseWaitAlert;
	NSDateFormatter* postDateFormatter;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
}
-(void).cxx_destruct;
-(void)downloadSome:(id)some toFolder:(id)folder;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)simpleUpdateScreen;
-(void)downloadPost:(id)post;
-(void)openPostExternal:(id)external;
-(void)savePostPhotoToRoll:(id)roll;
-(void)showActionsMenuForPost:(id)post;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorTriangleSkewSpinAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface TracksPicker : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
	BOOL _isVkPicker;
	id _tracksSelectedBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL isVkPicker;
@property(copy, nonatomic) id tracksSelectedBlock;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorRotatingSquaresAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallGridPulseAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)createCirleWith:(float)with color:(id)color;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface AFURLConnectionOperation : XXUnknownSuperclass <NSURLConnectionDelegate, NSURLConnectionDataDelegate, NSSecureCoding, NSCopying> {
	BOOL _shouldUseCredentialStorage;
	NSOutputStream* _outputStream;
	NSSet* _runLoopModes;
	NSURLRequest* _request;
	NSURLResponse* _response;
	NSError* _error;
	NSData* _responseData;
	NSURLCredential* _credential;
	AFSecurityPolicy* _securityPolicy;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
	NSDictionary* _userInfo;
	int _state;
	NSRecursiveLock* _lock;
	NSURLConnection* _connection;
	NSString* _responseString;
	unsigned _responseStringEncoding;
	id _backgroundTaskCleanup;
	id _uploadProgress;
	id _downloadProgress;
	id _authenticationChallenge;
	id _cacheResponse;
	id _redirectResponse;
	NSMutableArray* _usedDownloadStates;
	long long _totalBytesRead;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) NSURLCredential* credential;
@property(assign, nonatomic) BOOL shouldUseCredentialStorage;
@property(retain, nonatomic) NSSet* runLoopModes;
@property(retain, nonatomic) NSMutableArray* usedDownloadStates;
@property(copy, nonatomic) id redirectResponse;
@property(copy, nonatomic) id cacheResponse;
@property(copy, nonatomic) id authenticationChallenge;
@property(copy, nonatomic) id downloadProgress;
@property(copy, nonatomic) id uploadProgress;
@property(copy, nonatomic) id backgroundTaskCleanup;
@property(assign, nonatomic) long long totalBytesRead;
@property(assign, nonatomic) unsigned responseStringEncoding;
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) NSData* responseData;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic) int state;
@property(assign, nonatomic, setter=af_setDownloadProgressAnimated:) BOOL af_downloadProgressAnimated;
@property(copy, nonatomic) id downloadProgress;
@property(assign, nonatomic, setter=af_setUploadProgressAnimated:) BOOL af_uploadProgressAnimated;
@property(copy, nonatomic) id uploadProgress;
+(BOOL)supportsSecureCoding;
+(id)batchOfRequestOperations:(id)requestOperations progressBlock:(id)block completionBlock:(id)block3;
+(id)networkRequestThread;
+(void)networkRequestThreadEntryPoint:(id)point;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)cancelConnection;
-(void)cancel;
-(void)finish;
-(void)operationDidStart;
-(void)start;
-(BOOL)isConcurrent;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isReady;
-(void)setCompletionBlock:(id)block;
-(void)setRedirectResponseBlock:(id)block;
-(void)setCacheResponseBlock:(id)block;
-(void)setWillSendRequestForAuthenticationChallengeBlock:(id)sendRequestForAuthenticationChallengeBlock;
-(void)setDownloadProgressBlock:(id)block;
-(void)setUploadProgressBlock:(id)block;
-(void)resume;
-(BOOL)isPaused;
-(void)operationDidPause;
-(void)pause;
-(void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)executeAsBackgroundTaskWithExpirationHandler;
-(void)dealloc;
-(id)init;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface SettingsTheme : XXUnknownSuperclass {
	NSLayoutConstraint* topGuideConstraint;
	NSLayoutConstraint* bottomGuideConstraint;
	UIView* currentColorView;
	UIImageView* colorPicker;
	UIImageView* colorPickerBg;
}
-(void).cxx_destruct;
-(id)generatePaletteImage;
-(void)applyColor;
-(id)colorOfPoint:(CGPoint)point;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)simpleUpdateScreen;
-(id)hexStringFromColor:(id)color;
-(void)themeChanged;
-(void)viewWillLayoutSubviews;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface BKInvocationGrabber : XXUnknownSuperclass {
	id _target;
	NSInvocation* _invocation;
}
@property(retain, nonatomic) NSInvocation* invocation;
@property(retain, nonatomic) id target;
+(id)grabberWithTarget:(id)target;
-(void).cxx_destruct;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
@end

__attribute__((visibility("hidden")))
@interface SettingsList : XXUnknownSuperclass {
	UITableView* contentTable;
	NSString* serverAddress;
	NSString* serverPort;
	NSString* spaceUsed;
	NSString* spaceFree;
	float spaceProgress;
	FtpServer* server;
	UIAlertView* pleaseWaitAlert;
	UIImage* infoImage;
	UIImage* updateImage;
	UIImage* hintImage;
}
-(void).cxx_destruct;
-(void)unlockVkAndActivation;
-(void)openActivationScreen;
-(void)unsupportedActivation:(id)activation;
-(void)activationStatusOk:(id)ok;
-(void)activationStatusLimited;
-(void)activationStatusExpired;
-(void)activationStatusInvalid;
-(void)checkActivation;
-(void)updateActivationDaysAfterPurchase;
-(void)startCheckActivationTimer;
-(void)checkRestoreAds;
-(void)startRestoreAdsTimer;
-(void)tryAuthWithLastFmAccount;
-(id)generateDidYouKnowSettingView;
-(id)generatePlayerGesturesSettingView;
-(id)generateOpenPlayerSettingView;
-(id)generateOfferRestorePlaylistSettingView;
-(id)generateClearSettingView;
-(id)generatePlayerSleepSettingView;
-(id)generateVisualizerSettingView;
-(id)generateSoundFadeInSettingView;
-(id)generateArtworkSettingView;
-(id)generateLastfmSettingView;
-(id)generateDefaultSortingSettingView;
-(id)generateThemeSettingView;
-(id)generateVersionSettingView;
-(id)generateSpaceSettingView;
-(id)generateServerSettingView;
-(id)getRandomHint;
-(void)updateSettingsLastFmSection;
-(void)simpleUpdateScreen;
-(void)gesturesListAlert;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)getIP;
-(void)getFreeSpace;
-(void)changePort;
-(void)changePortAlert;
-(void)coolTableUpdate;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)didEnterForegroundState;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SSZipArchive : XXUnknownSuperclass {
	NSString* _path;
	NSString* _filename;
	void* _zip;
}
+(id)_dateWithMSDOSFormat:(unsigned long)msdosformat;
+(BOOL)createZipFileAtPath:(id)path withContentsOfDirectory:(id)directory;
+(BOOL)createZipFileAtPath:(id)path withFilesAtPaths:(id)paths;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination overwrite:(BOOL)overwrite password:(id)password error:(id*)error delegate:(id)delegate;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination delegate:(id)delegate;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination overwrite:(BOOL)overwrite password:(id)password error:(id*)error;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination;
-(void).cxx_destruct;
-(BOOL)close;
-(BOOL)writeData:(id)data filename:(id)filename;
-(BOOL)writeFileAtPath:(id)path withFileName:(id)fileName;
-(BOOL)writeFile:(id)file;
-(void)zipInfo:(XXStruct_z_NMMB*)info setDate:(id)date;
-(BOOL)open;
-(id)initWithPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallScaleRippleAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKSettingsScreenController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WelcomeScreenController : XXUnknownSuperclass {
	NSLayoutConstraint* topGuideConstraint1;
	NSLayoutConstraint* topGuideConstraint2;
	NSLayoutConstraint* topGuideConstraint3;
	NSLayoutConstraint* topGuideConstraint4;
	NSLayoutConstraint* topGuideConstraint5;
	UIScrollView* scroller;
	UIPageControl* pager;
	UIImageView* bgImage;
	UILabel* view1_label1;
	UILabel* view1_label2;
	UILabel* view2_label1;
	UILabel* view2_label2;
	UIView* theme_view1;
	UIView* theme_view2;
	UIImageView* theme_image1;
	UIImageView* theme_image2;
	UILabel* view2_label3;
	UILabel* view2_label4;
	UILabel* view2_label5;
	UILabel* view2_label6;
	UILabel* view3_label1;
	UILabel* view3_label2;
	UILabel* view4_label1;
	UILabel* view4_label2;
	UILabel* view5_label1;
	UILabel* view5_label2;
	UIView* view1;
	UIView* view2;
	UIView* view3;
	UIView* view4;
	UIView* view5;
	UIButton* button1;
	UIButton* button2;
	UIButton* button3;
	UIButton* button4;
	UIButton* button5;
	BOOL darkModeSelected;
}
-(void).cxx_destruct;
-(void)setMaskTo:(id)to byRoundingCorners:(unsigned)corners withCornerRadii:(CGSize)cornerRadii;
-(void)themeChanged;
-(void)nextButton5:(id)a5;
-(void)nextButton4:(id)a4;
-(void)nextButton3:(id)a3;
-(void)nextButton2:(id)a2;
-(void)nextButton1:(id)a1;
-(void)setAnchorPoint:(CGPoint)point forView:(id)view;
-(void)theme_2_tap_handler:(id)handler;
-(void)theme_1_tap_handler:(id)handler;
-(void)makeDefaultThemeSelected;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)makeScrollerVisible;
-(void)statusBarFrameDidChange:(id)statusBarFrame;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillLayoutSubviews;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyAudioEditor : XXUnknownSuperclass <FMMoveTableViewDataSource, FMMoveTableViewDelegate> {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	NSMutableArray* foundArray;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	BOOL isUploading;
	UIAlertView* uploadingAlert;
	int successfulyUploadedTracks;
	int failedUploadedTracks;
	int copyrightFailedUploadedTracks;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)renameTrack:(id)track withNewArtist:(id)newArtist andNewTitle:(id)title;
-(void)renameTrack:(id)track;
-(void)reorderTracksWithOwner:(id)owner andAudioID:(id)anId before:(id)before after:(id)after;
-(void)deleteTrackWithDict:(id)dict;
-(void)moveTableView:(id)view moveRowFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)moveTableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(id)moveTableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)updateAlertWithMessage:(id)message;
-(void)uploadingSuccessful;
-(void)saveUploadedTrackWithAudio:(id)audio andHash:(id)hash andServer:(id)server andTracks:(id)tracks andIndex:(int)index;
-(void)uploadTrackToUrl:(id)url andFileUrl:(id)url2 andTracks:(id)tracks andIndex:(int)index;
-(void)cancelUploading;
-(void)uploadingInterrupted:(int)interrupted;
-(void)getUploadServerForFileURL:(id)fileURL andTracks:(id)tracks andIndex:(int)index;
-(void)updloadTracks:(id)tracks index:(int)index;
-(void)prepareUploadTracks:(id)tracks;
-(void)selectFilesToUpload;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)close;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface PlaylistsList : XXUnknownSuperclass <FMMoveTableViewDataSource, FMMoveTableViewDelegate> {
	UITableView* contentTable;
	NSMutableArray* playlists;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIAlertView* pleaseWaitAlert;
	UIRefreshControl* refreshControl;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)moveTableView:(id)view moveRowFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)moveTableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(id)moveTableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)createPlaylistWithName:(id)name;
-(void)createPlaylistAlert;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)simpleUpdateScreen;
-(void)shuffleAndStart:(id)start;
-(void)silentCoolTableUpdate;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)reloadPlaylistsList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ID3TagChanger : XXUnknownSuperclass {
}
+(void)rewriteTagsOfFile:(id)file withTitle:(id)title withAtrist:(id)atrist withAlbum:(id)album withLyrics:(id)lyrics needUpdateUI:(BOOL)ui;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorTriplePulseAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface PlaylistsController : XXUnknownSuperclass {
	LazyNavigationController* navController;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)backPlaylistsControllerToBase;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorCookieTerminatorAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorThreeDotsAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface SettingsThemeOptions : XXUnknownSuperclass {
	UITableView* contentTable;
}
-(void).cxx_destruct;
-(id)generateNightModeSettingView;
-(id)generateArtworkToThemeSettingView;
-(id)generateThemeSettingView;
-(void)simpleUpdateList;
-(void)themeChanged;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorLineScalePartyAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface ActivationGetPrices : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	NSMutableArray* foundArray;
	UIRefreshControl* refreshControl;
}
-(void).cxx_destruct;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)openActivationPayMethodScreenWithSum:(int)sum andDays:(id)days;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SettingsSleepTimer : XXUnknownSuperclass {
	UITableView* contentTable;
	UILabel* timeLabel;
	NSTimer* updateTimer;
}
-(void).cxx_destruct;
-(id)generateTimeView;
-(id)generateEnableView;
-(void)simpleUpdateList;
-(void)updateSleepTimerScreen;
-(void)updateTimerLabel;
-(void)enableDisableTimer:(BOOL)timer;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallPulseSyncAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorRotatingTrigonAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorView : XXUnknownSuperclass {
	BOOL _animating;
	unsigned _type;
	UIColor* _tintColor;
	float _size;
}
@property(readonly, assign, nonatomic) BOOL animating;
@property(assign, nonatomic) float size;
@property(retain, nonatomic) UIColor* tintColor;
@property(assign, nonatomic) unsigned type;
+(id)activityIndicatorAnimationForAnimationType:(unsigned)animationType;
-(void).cxx_destruct;
-(void)stopAnimating;
-(void)startAnimating;
-(void)setupAnimation;
-(id)initWithType:(unsigned)type tintColor:(id)color size:(float)size;
-(id)initWithType:(unsigned)type tintColor:(id)color;
-(id)initWithType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface FMDatabase : XXUnknownSuperclass {
	void* _db;
	NSString* _databasePath;
	BOOL _logsErrors;
	BOOL _crashOnErrors;
	BOOL _traceExecution;
	BOOL _checkedOut;
	BOOL _shouldCacheStatements;
	BOOL _isExecutingStatement;
	BOOL _inTransaction;
	double _maxBusyRetryTimeInterval;
	double _startBusyRetryTime;
	NSMutableDictionary* _cachedStatements;
	NSMutableSet* _openResultSets;
	NSMutableSet* _openFunctions;
	NSDateFormatter* _dateFormat;
}
@property(retain) NSMutableDictionary* cachedStatements;
@property(assign) BOOL logsErrors;
@property(assign) BOOL crashOnErrors;
@property(assign) BOOL checkedOut;
@property(assign) BOOL traceExecution;
+(id)storeableDateFormat:(id)format;
+(BOOL)isSQLiteThreadSafe;
+(id)sqliteLibVersion;
+(long)FMDBVersion;
+(id)FMDBUserVersion;
+(id)databaseWithPath:(id)path;
-(void).cxx_destruct;
-(void)makeFunctionNamed:(id)named maximumArguments:(int)arguments withBlock:(id)block;
-(void)setShouldCacheStatements:(BOOL)cacheStatements;
-(BOOL)shouldCacheStatements;
-(id)inSavePoint:(id)savePoint;
-(BOOL)rollbackToSavePointWithName:(id)name error:(id*)error;
-(BOOL)releaseSavePointWithName:(id)name error:(id*)error;
-(BOOL)startSavePointWithName:(id)name error:(id*)error;
-(BOOL)inTransaction;
-(BOOL)beginTransaction;
-(BOOL)beginDeferredTransaction;
-(BOOL)commit;
-(BOOL)rollback;
-(BOOL)update:(id)update withErrorAndBindings:(id*)errorAndBindings;
-(BOOL)executeUpdate:(id)update withErrorAndBindings:(id*)errorAndBindings;
-(BOOL)executeStatements:(id)statements withResultBlock:(id)resultBlock;
-(BOOL)executeStatements:(id)statements;
-(BOOL)executeUpdateWithFormat:(id)format;
-(BOOL)executeUpdate:(id)update withVAList:(void*)valist;
-(BOOL)executeUpdate:(id)update withParameterDictionary:(id)parameterDictionary;
-(BOOL)executeUpdate:(id)update values:(id)values error:(id*)error;
-(BOOL)executeUpdate:(id)update withArgumentsInArray:(id)array;
-(BOOL)executeUpdate:(id)update;
-(BOOL)executeUpdate:(id)update error:(id*)error withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withVAList:(void*)valist;
-(id)executeQuery:(id)query values:(id)values error:(id*)error;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array;
-(id)executeQueryWithFormat:(id)format;
-(id)executeQuery:(id)query;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withParameterDictionary:(id)parameterDictionary;
-(void)extractSQL:(id)sql argumentsList:(void*)list intoString:(id)string arguments:(id)arguments;
-(void)bindObject:(id)object toColumn:(int)column inStatement:(sqlite3_stmt*)statement;
-(int)changes;
-(long long)lastInsertRowId;
-(id)lastError;
-(id)errorWithMessage:(id)message;
-(int)lastErrorCode;
-(BOOL)hadError;
-(id)lastErrorMessage;
-(BOOL)databaseExists;
-(void)warnInUse;
-(BOOL)goodConnection;
-(id)stringFromDate:(id)date;
-(id)dateFromString:(id)string;
-(void)setDateFormat:(id)format;
-(BOOL)hasDateFormatter;
-(BOOL)setKeyWithData:(id)data;
-(BOOL)setKey:(id)key;
-(BOOL)rekeyWithData:(id)data;
-(BOOL)rekey:(id)rekey;
-(void)setCachedStatement:(id)statement forQuery:(id)query;
-(id)cachedStatementForQuery:(id)query;
-(void)clearCachedStatements;
-(void)resultSetDidClose:(id)resultSet;
-(void)closeOpenResultSets;
-(BOOL)hasOpenResultSets;
-(void)setBusyRetryTimeout:(int)timeout;
-(int)busyRetryTimeout;
-(double)maxBusyRetryTimeInterval;
-(void)setMaxBusyRetryTimeInterval:(double)interval;
-(BOOL)close;
-(BOOL)openWithFlags:(int)flags vfs:(id)vfs;
-(BOOL)openWithFlags:(int)flags;
-(BOOL)open;
-(const char*)sqlitePath;
-(void*)sqliteHandle;
-(id)databasePath;
-(void)dealloc;
-(void)finalize;
-(id)initWithPath:(id)path;
-(id)init;
-(BOOL)validateSQL:(id)sql error:(id*)error;
-(BOOL)columnExists:(id)exists columnName:(id)name;
-(void)setUserVersion:(unsigned)version;
-(unsigned)userVersion;
-(void)setApplicationID:(unsigned)anId;
-(unsigned)applicationID;
-(BOOL)columnExists:(id)exists inTableWithName:(id)name;
-(id)getTableSchema:(id)schema;
-(id)getSchema;
-(BOOL)tableExists:(id)exists;
-(id)dateForQuery:(id)query;
-(id)dataForQuery:(id)query;
-(double)doubleForQuery:(id)query;
-(BOOL)boolForQuery:(id)query;
-(long)longForQuery:(id)query;
-(int)intForQuery:(id)query;
-(id)stringForQuery:(id)query;
@end

__attribute__((visibility("hidden")))
@interface FMStatement : XXUnknownSuperclass {
	void* _statement;
	NSString* _query;
	long _useCount;
	BOOL _inUse;
}
@property(assign) BOOL inUse;
@property(assign) void* statement;
@property(retain) NSString* query;
@property(assign) long useCount;
-(void).cxx_destruct;
-(id)description;
-(void)reset;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

__attribute__((visibility("hidden")))
@interface FtpServer : XXUnknownSuperclass {
	AsyncSocket* listenSocket;
	NSMutableArray* connectedSockets;
	id server;
	id notificationObject;
	int portNumber;
	id delegate;
	NSMutableArray* connections;
	NSDictionary* commands;
	NSString* baseDir;
	unsigned char changeRoot;
	int clientEncoding;
}
@property(assign) int clientEncoding;
@property(assign) unsigned char changeRoot;
@property(retain) NSString* baseDir;
@property(retain) NSDictionary* commands;
@property(retain) NSMutableArray* connections;
@property(retain) id delegate;
@property(assign) int portNumber;
@property(retain) id notificationObject;
@property(retain) id server;
@property(retain) NSMutableArray* connectedSockets;
@property(retain) AsyncSocket* listenSocket;
-(void)dealloc;
-(id)createList:(id)list;
-(void)closeConnection:(id)connection;
-(void)didReceiveFileListChanged;
-(void)onSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)onSocket:(id)socket didAcceptNewSocket:(id)socket2;
-(void)stopFtpServer;
-(id)initWithPort:(unsigned)port withDir:(id)dir notifyObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorLineScalePulseOutRapidAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface FMMoveTableView : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	NSIndexPath* _movingIndexPath;
	NSIndexPath* _initialIndexPathForMovingRow;
	UIView* _snapshotOfMovingCell;
	UILongPressGestureRecognizer* _movingGestureRecognizer;
	NSTimer* _autoscrollTimer;
	int _autoscrollDistance;
	int _autoscrollThreshold;
	CGPoint _touchOffset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSIndexPath* initialIndexPathForMovingRow;
@property(retain, nonatomic) NSIndexPath* movingIndexPath;
@property(assign, nonatomic) __weak id<FMMoveTableViewDelegate> delegate;
@property(assign, nonatomic) __weak id<FMMoveTableViewDataSource> dataSource;
@property(assign, nonatomic) int autoscrollThreshold;
@property(assign, nonatomic) int autoscrollDistance;
@property(retain, nonatomic) NSTimer* autoscrollTimer;
@property(retain, nonatomic) UILongPressGestureRecognizer* movingGestureRecognizer;
@property(retain, nonatomic) UIView* snapshotOfMovingCell;
@property(assign, nonatomic) CGPoint touchOffset;
-(void).cxx_destruct;
-(BOOL)canScroll;
-(BOOL)isAutoscrolling;
-(void)stopAutoscrolling;
-(void)legalizeAutoscrollDistance;
-(void)autoscrollTimerFired:(id)fired;
-(float)autoscrollDistanceForProximityToEdge:(float)edge;
-(void)determineAutoscrollDistanceForSnapShot;
-(void)maybeAutoscroll;
-(void)prepareAutoscrollForSnapshot;
-(void)resetSnapshot;
-(void)moveSnapshotToLocation:(CGPoint)location;
-(id)snapShotFromRowAtMovingIndexPath;
-(id)adaptedIndexPathForRowAtIndexPath:(id)indexPath;
-(BOOL)isValidIndexPath:(id)path;
-(BOOL)indexPathIsMovingIndexPath:(id)path;
-(BOOL)canMoveToIndexPath:(id)indexPath;
-(void)moveRowToLocation:(CGPoint)location;
-(void)resetMovingRow;
-(void)cancelMovingRowIfNeeded;
-(void)finishMovingRow;
-(void)prepareForMovingRowAtTouchPoint:(CGPoint)touchPoint;
-(void)handleLongPress:(id)press;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)awakeFromNib;
-(void)prepareGestureRecognizer;
@end

__attribute__((visibility("hidden")))
@interface VKMainMenu : XXUnknownSuperclass <VKSdkDelegate> {
	UITableView* contentTable;
	NSMutableArray* menuArray;
	UIBarButtonItem* exitItem;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)tryCaptcha:(id)captcha withCode:(id)code andMethod:(id)method;
-(void)captchaRequest:(id)request;
-(void)vkSdkNeedCaptchaEnter:(id)enter;
-(void)vkSdkTokenHasExpired:(id)expired;
-(void)vkSdkShouldPresentViewController:(id)vkSdk;
-(void)vkSdkUserDeniedAccess:(id)access;
-(void)vkSdkReceivedNewToken:(id)token;
-(void)receivedExternalLogout;
-(void)unlockVk;
-(void)authWithSafari_no_messages;
-(void)authWithSafari_messages;
-(void)authWithVkApp_no_messages;
-(void)authWithVkApp_messages;
-(void)authWithSafari;
-(void)authWithVkApp;
-(void)signIn;
-(void)signOut;
-(void)signOutAlert;
-(void)showVKSettings;
-(void)simpleUpdateScreen;
-(void)simpleUpdateList;
-(void)generateMenuList;
-(void)reloadVkMainMenu;
-(void)searchAllTracksOfArtist:(id)artist;
-(void)sendVkTrackByMessage:(id)message;
-(void)openSimilar:(id)similar;
-(void)getUserDataForAds;
-(void)trackStatistics;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)coolTableUpdate;
-(id)generateQueueCell;
-(id)generateBookmarksCell;
-(id)generateAlbumsCell;
-(id)generateMyNewsCell;
-(id)generateMyWallCell;
-(id)generateLikedCell;
-(id)generatePopularCell;
-(id)generateRecommendationsCell;
-(id)generateSearchCell;
-(id)generateMyGroupsCell;
-(id)generateMyFriendsCell;
-(id)generateMyMessagesCell;
-(id)generateMyAudioCell;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MediaList : XXUnknownSuperclass {
	UITableView* contentTable;
	UISearchBar* searchBar;
	NSMutableArray* filesAndFolders;
	NSMutableArray* checkedFilesAndFolders;
	BOOL isEditing;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	UIScrollView* actionsScroller;
	UIImageView* addAllButtonImage;
	UIActivityIndicatorView* addAllActivity;
	LazyDocumentController* sendController;
	UIBarButtonItem* actionsItem;
	UIAlertView* pleaseWaitAlert;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	BOOL _isSearch;
	NSString* _folderPath;
	NSArray* _filesAndFoldersFoundBySearch;
}
@property(assign, nonatomic) BOOL isSearch;
@property(retain, nonatomic) NSArray* filesAndFoldersFoundBySearch;
@property(retain, nonatomic) NSString* folderPath;
-(void).cxx_destruct;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)createFolderWithName:(id)name;
-(void)createFolderAlert;
-(void)selectSingleElementForEditing:(id)editing;
-(void)selectAllElementsForEditing;
-(void)showFileInfo;
-(void)openWith;
-(void)moveToFolder:(id)folder;
-(void)editMoveModal;
-(void)reloadMediaListFromPlayerAfterDeletion;
-(void)editDelete;
-(void)editDeleteAlert;
-(void)editRename:(id)rename withNewFileName:(id)newFileName isDirectory:(BOOL)directory;
-(void)editRenameAlert;
-(void)openEditMenu;
-(void)updateEditPanel;
-(void)setEditModeOff;
-(void)setEditModeOn;
-(id)getRawReloadedLibrary;
-(void)showHideAds:(id)ads;
-(void)simpleUpdateScreen;
-(void)checkVkDownloadedDatabaseAvailability;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)searchWithRequest:(id)request;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)reloadMediaList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SettingsController : XXUnknownSuperclass {
	LazyNavigationController* navController;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)backSettingsControllerToBase;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallScaleRippleMultipleAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface ActivationPayManual : XXUnknownSuperclass {
	UITextView* textView;
	BOOL appeared;
	NSString* _paymentType;
	int _sum;
}
@property(assign, nonatomic) int sum;
@property(retain, nonatomic) NSString* paymentType;
-(void).cxx_destruct;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(void)simpleUpdateScreen;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKBookmarks : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingPeopleList;
	BOOL isLoadingLinksList;
	NSMutableArray* foundPeopleArray;
	NSMutableArray* foundLinksArray;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
}
-(void).cxx_destruct;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)simpleUpdateScreen;
-(void)deleteBookmarkWithDict:(id)dict;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadLinksList;
-(void)loadPeopleList;
-(void)resetArrays;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface STKQueueEntry : XXUnknownSuperclass {
	int spinLock;
	BOOL parsedHeader;
	double sampleRate;
	double packetDuration;
	unsigned long long audioDataOffset;
	unsigned long long audioDataByteCount;
	unsigned long packetBufferSize;
	double seekTime;
	long long framesQueued;
	long long framesPlayed;
	long long lastFrameQueued;
	int processedPacketsCount;
	int processedPacketsSizeTotal;
	AudioStreamBasicDescription audioStreamBasicDescription;
	double durationHint;
	NSObject* _queueItemId;
	STKDataSource* _dataSource;
}
@property(retain) STKDataSource* dataSource;
@property(retain) NSObject* queueItemId;
@property(readonly, assign) unsigned long long audioDataLengthInBytes;
-(void).cxx_destruct;
-(id)description;
-(double)progressInFrames;
-(BOOL)isDefinitelyCompatible:(AudioStreamBasicDescription*)compatible;
-(double)duration;
-(double)calculatedBitRate;
-(void)reset;
-(id)initWithDataSource:(id)dataSource andQueueItemId:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface FolderPickerList : XXUnknownSuperclass {
	UITableView* contentTable;
	NSMutableArray* filesAndFolders;
	NSString* folderPath;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	NSString* _caption;
	id _folderSelectedBlock;
}
@property(copy, nonatomic) id folderSelectedBlock;
@property(retain, nonatomic) NSString* folderPath;
@property(retain, nonatomic) NSString* caption;
-(void).cxx_destruct;
-(void)simpleUpdateScreen;
-(void)coolTableUpdate;
-(void)confirmSelecting;
-(void)cancelSelecting;
-(void)createFolderWithName:(id)name;
-(void)createFolderAlert;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)reloadMediaList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorNineDotsAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKMyGroupsGlobal : XXUnknownSuperclass <UITextFieldDelegate> {
	UITableView* contentTable;
	UISearchBar* searchBar;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	int offset;
	UIAlertView* pleaseWaitAlert;
	NSString* searchRequest;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)addGroupToBookmarks:(id)bookmarks;
-(void)simpleUpdateScreen;
-(void)reloadGroupsSearch;
-(void)showSearchSettings;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface LTNowPlayingIndicator : XXUnknownSuperclass {
	NSNumber* _source;
	NSURL* _url;
	NSString* _vkid;
}
@property(retain, nonatomic) NSString* vkid;
@property(retain, nonatomic) NSURL* url;
@property(retain, nonatomic) NSNumber* source;
-(void).cxx_destruct;
-(void)updateCurrentTrackIsPlayingIndicator:(id)indicator;
-(void)buildView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andSource:(id)source andURL:(id)url andVkID:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallZigZagAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKMessagesTrackPicker : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	NSMutableArray* foundArray;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	id _trackSelectedBlock;
}
@property(copy, nonatomic) id trackSelectedBlock;
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)close;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKRecommendations : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	int offset;
	UIAlertView* pleaseWaitAlert;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	NSString* _user_id;
	NSString* _audio_id;
}
@property(retain, nonatomic) NSString* audio_id;
@property(retain, nonatomic) NSString* user_id;
-(void).cxx_destruct;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface FMResultSet : XXUnknownSuperclass {
	FMDatabase* _parentDB;
	FMStatement* _statement;
	NSString* _query;
	NSMutableDictionary* _columnNameToIndexMap;
}
@property(retain) FMStatement* statement;
@property(readonly, assign) NSMutableDictionary* columnNameToIndexMap;
@property(retain) NSString* query;
+(id)resultSetWithStatement:(id)statement usingParentDatabase:(id)database;
-(void).cxx_destruct;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(id)objectAtIndexedSubscript:(int)indexedSubscript;
-(void)setParentDB:(id)db;
-(id)columnNameForIndex:(int)index;
-(id)objectForColumnName:(id)columnName;
-(id)objectForColumnIndex:(int)columnIndex;
-(const char*)UTF8StringForColumnName:(id)columnName;
-(const char*)UTF8StringForColumnIndex:(int)columnIndex;
-(BOOL)columnIsNull:(id)null;
-(BOOL)columnIndexIsNull:(int)null;
-(id)dataNoCopyForColumnIndex:(int)columnIndex;
-(id)dataNoCopyForColumn:(id)column;
-(id)dataForColumnIndex:(int)columnIndex;
-(id)dataForColumn:(id)column;
-(id)dateForColumnIndex:(int)columnIndex;
-(id)dateForColumn:(id)column;
-(id)stringForColumn:(id)column;
-(id)stringForColumnIndex:(int)columnIndex;
-(double)doubleForColumnIndex:(int)columnIndex;
-(double)doubleForColumn:(id)column;
-(BOOL)boolForColumnIndex:(int)columnIndex;
-(BOOL)boolForColumn:(id)column;
-(unsigned long long)unsignedLongLongIntForColumnIndex:(int)columnIndex;
-(unsigned long long)unsignedLongLongIntForColumn:(id)column;
-(long long)longLongIntForColumnIndex:(int)columnIndex;
-(long long)longLongIntForColumn:(id)column;
-(long)longForColumnIndex:(int)columnIndex;
-(long)longForColumn:(id)column;
-(int)intForColumnIndex:(int)columnIndex;
-(int)intForColumn:(id)column;
-(int)columnIndexForName:(id)name;
-(BOOL)hasAnotherRow;
-(BOOL)nextWithError:(id*)error;
-(BOOL)next;
-(id)resultDictionary;
-(id)resultDict;
-(void)kvcMagic:(id)magic;
-(int)columnCount;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

__attribute__((visibility("hidden")))
@interface VKPopular : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	int offset;
	int genre;
	UIAlertView* pleaseWaitAlert;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
}
-(void).cxx_destruct;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)simpleUpdateScreen;
-(void)reloadPopularWithOnlyEnglish;
-(void)reloadPopularWithNewGenre:(int)newGenre;
-(void)selectGenre;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMessagesPeer : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	NSString* next_from;
	UIAlertView* pleaseWaitAlert;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL isUploading;
	UIAlertView* uploadingAlert;
	int successfulyUploadedTracks;
	int failedUploadedTracks;
	int copyrightFailedUploadedTracks;
	UIBarButtonItem* sendItem;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	BOOL _isMultichat;
	NSString* _peer_id;
}
@property(assign, nonatomic) BOOL isMultichat;
@property(retain, nonatomic) NSString* peer_id;
-(void).cxx_destruct;
-(void)sendToPeer:(id)peer;
-(void)pickSelfTrackToSend;
-(void)sourceSelector;
-(void)updateAlertWithMessage:(id)message;
-(void)uploadingSuccessful;
-(void)saveUploadedTrackWithAudio:(id)audio andHash:(id)hash andServer:(id)server andTracks:(id)tracks andIndex:(int)index;
-(void)uploadTrackToUrl:(id)url andFileUrl:(id)url2 andTracks:(id)tracks andIndex:(int)index;
-(void)cancelUploading;
-(void)uploadingInterrupted:(int)interrupted;
-(void)getUploadServerForFileURL:(id)fileURL andTracks:(id)tracks andIndex:(int)index;
-(void)updloadTracks:(id)tracks index:(int)index;
-(void)prepareUploadTracks:(id)tracks;
-(void)selectFilesToUpload;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorTripleRingsAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface ActivationScreen : XXUnknownSuperclass {
	UITableView* contentTable;
	UIAlertView* pleaseWaitAlert;
	UIImage* warningImage;
	UIImage* updateImage;
}
-(void).cxx_destruct;
-(void)joinCommunityOffer;
-(void)repostOnWallOffer;
-(void)getSpecialOfferInfo;
-(id)generateActivationSpecialOfferSettingView;
-(id)generateActivationDaysLeftSettingView;
-(id)generateActivationLazyToolIdView;
-(void)checkActivation;
-(void)openActivationExtendScreen;
-(void)coolTableUpdate;
-(void)updateActivationScreenWithData;
-(void)setNewLazyID:(id)anId;
-(void)showLazyIdChanger;
-(void)openHelp;
-(void)simpleUpdateScreen;
-(void)cancelSelecting;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ViewController : XXUnknownSuperclass <UITabBarDelegate> {
	UITabBar* tabBar;
	UIView* mainView;
	UITabBarItem* playlistsBarItem;
	UITabBarItem* mediaBarItem;
	UITabBarItem* settingsBarItem;
	UITabBarItem* vkBarItem;
	UITabBarItem* playerBarItem;
	PlaylistsController* playlistsController;
	MediaController* mediaController;
	SettingsController* settingsController;
	VKController* vkController;
	BOOL countedLaunch;
	UIAlertView* activationAlert;
	int launchesLeft;
	BOOL canOpenPlayer;
	UIView* whiteCoverView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)jumpToVK;
-(void)jumpToSettings;
-(void)jumpToMedia;
-(void)jumpToPlaylists;
-(void)backVkControllerToBase;
-(void)backSettingsControllerToBase;
-(void)backMediaControllerToBase;
-(void)backPlaylistsControllerToBase;
-(void)unlockVkAndActivation;
-(void)snapshotMainScreen;
-(void)checkDefaultArtworkIsAvailable;
-(void)sleepTimerCountdown;
-(void)checkVkDownloadedDatabaseAvailability;
-(void)changeAllPermissions;
-(void)openSingleTrackController:(id)controller;
-(void)tabBar:(id)bar didSelectItem:(id)item;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyGroupsSettingsController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyFriendsSettings : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL changed;
}
-(void).cxx_destruct;
-(void)simpleUpdateScreen;
-(id)generateFriendsSortingSettingView;
-(void)somethingChanged;
-(void)cancelSelecting;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface _BKObserver : XXUnknownSuperclass {
	BOOL _isObserving;
	id _observee;
	NSMutableArray* _keyPaths;
	id _task;
	int _context;
}
@property(readonly, assign, nonatomic) int context;
@property(readonly, assign, nonatomic) id task;
@property(readonly, assign, nonatomic) NSMutableArray* keyPaths;
@property(readonly, assign, nonatomic) id observee;
-(void).cxx_destruct;
-(void)dealloc;
-(void)stopObserving;
-(void)_stopObservingLocked;
-(void)stopObservingKeyPath:(id)path;
-(void)startObservingWithOptions:(unsigned)options;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)initWithObservee:(id)observee keyPaths:(id)paths context:(int)mcontext task:(id)task;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicUIWebViewDelegate : A2DynamicDelegate <UIWebViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorFiveDotsAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface SettingsEqualizerPresets : XXUnknownSuperclass {
	UITableView* contentTable;
	NSArray* presetsArray;
	NSArray* customPresetsArray;
	NSMutableArray* currentValsArray;
}
-(void).cxx_destruct;
-(void)simpleUpdateScreen;
-(void)loadPreset:(id)preset;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyAudioEditorController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SingleTrackMain : XXUnknownSuperclass <UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
	NSTimer* updateTimer;
	NSLayoutConstraint* topGuideConstraint;
	NSLayoutConstraint* topLeftActionsButtonTopOffsetConstraint;
	UIView* contentContainer;
	UIView* artworkContainer;
	UIImageView* blurArtView;
	UIImageView* normalArtView;
	UIView* artworkLoadingView;
	UIImageView* shadowImageView;
	UIView* fixMisclickSwipe;
	UIButton* topLeftActionsButton;
	VisualizerView* visualizer;
	UISlider* timeSlider;
	UIView* timeSliderLeftDummy;
	UIView* timeSliderRightDummy;
	UILabel* leftTimeLabel;
	UILabel* rightTimeLabel;
	UIView* topActionsContainer;
	UIButton* downloadButton;
	UIButton* addToVkButton;
	UILabel* bitrateLabel;
	NSLayoutConstraint* downloadButtonWidth;
	NSLayoutConstraint* addToVkButtonWidth;
	UIView* titleContainerView;
	MarqueeLabel* titleLabel;
	MarqueeLabel* artistLabel;
	UILabel* numerationLabel;
	UIButton* repeatButton;
	UIButton* prevButton;
	UIButton* playPauseButton;
	UIButton* nextButton;
	UIButton* randomButton;
	UIButton* lyricsButton;
	UIButton* equalizerButton;
	UIView* volumeSliderContainer;
	LazyVolumeView* volumeSlider;
	LazyDocumentController* sendController;
	UISlider* fakeVolumeSlider;
	NSString* lyrics;
	UIAlertView* pleaseWaitAlert;
	UIAlertView* actionMadeAlert;
	UIView* emptyScreenTapZone;
	UIView* dummyEmpty;
	UILabel* titleEmpty;
	UILabel* subTitleEmpty;
	BOOL _needManualPlayerUpdate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL needManualPlayerUpdate;
-(void).cxx_destruct;
-(void)applyColor:(id)color;
-(void)setThemeFromPrimaryColorOfImage:(id)image;
-(id)resizeImageTo100x100:(id)a100x100;
-(id)makeUIImageFromCIImage:(id)ciimage;
-(id)colorOfPixelImage:(id)pixelImage;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)selectedPlaylist:(id)playlist andDestination:(int)destination;
-(void)selectDestinationForTrackAddingToPlaylist:(id)playlist;
-(void)addToPlaylist;
-(void)showLocalActionsWithFile;
-(void)showLocalActionsWithArtwork;
-(void)openLocalActionsMenu;
-(id)fixOrientation:(id)orientation;
-(id)reduceSize:(id)size;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)downloadSingleTrackToFolder:(id)folder;
-(void)selectFolderToDownload;
-(void)showVkLyrics:(id)lyrics;
-(void)dismissPleaseWaitAlert;
-(void)getVkLyricsForCurrentTrack;
-(void)findByArtist:(id)artist;
-(void)sendWithVkMessages:(id)vkMessages;
-(void)findSimilar:(id)similar;
-(void)postToWall:(id)wall andPhoto:(id)photo;
-(void)saveUploadedPhotoWithPhoto:(id)photo andHash:(id)hash andServer:(id)server andDict:(id)dict;
-(void)uploadAlbumCoverToUrl:(id)url andDict:(id)dict;
-(void)postToWallWithPhoto:(id)photo;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)showVkActionsWithArtwork;
-(void)openVkActionsMenu;
-(void)downloadTrack:(id)track toFolder:(id)folder;
-(void)downloadCurrentTrack;
-(void)songSliderThumbMoved:(id)moved;
-(void)songSliderThumbReleased;
-(void)hideActionMadeAlert;
-(void)rebuildAdditionalButtonsPanel;
-(void)rebuildMainButtonsPanel;
-(void)showHideBufferLabel:(id)label;
-(void)simpleUpdateScreen;
-(void)checkVkDownloadedDatabaseAvailability;
-(void)buildViewIfNoRecordLoaded;
-(void)copyTitleToClipboard;
-(void)showTitleCopyAlert;
-(void)shuffleCurrentPlaylist;
-(void)blurBackground;
-(void)fadeIn;
-(void)fadeVolumeToMax:(int)max;
-(void)makeDefaultArtwork;
-(void)saveArtwork;
-(void)deleteArtwork;
-(void)getArtworkFromID3;
-(void)selectArtwork;
-(void)deleteFile;
-(void)deleteFileAlert;
-(void)openCurrentList;
-(void)addVisualizer;
-(void)openSendMenu;
-(void)addGestures;
-(void)getLyrics:(id)lyrics;
-(void)updateSliderAndPlayButton;
-(void)updateLyricsUI;
-(void)updatePlayerUI;
-(void)fastUpdatePlayerUI;
-(void)close;
-(void)equalizerButtonPressed:(id)pressed;
-(void)lyricsButtonPressed:(id)pressed;
-(void)addToVkButtonPressed:(id)vkButtonPressed;
-(void)downloadButtonPressed:(id)pressed;
-(void)randomButtonPressed:(id)pressed;
-(void)nextButtonPressed:(id)pressed;
-(void)playPauseButtonPressed:(id)pressed;
-(void)prevButtonPressed:(id)pressed;
-(void)repeatButtonPressed:(id)pressed;
-(void)topLeftActionsButtonPressed:(id)pressed;
-(void)dealloc;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(void)viewWillLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKWall : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	int offset;
	int tracksIndex;
	NSMutableArray* foundPosts;
	NSMutableArray* allFoundTracks;
	UIAlertView* pleaseWaitAlert;
	NSDateFormatter* postDateFormatter;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	NSString* _owner_id;
}
@property(retain, nonatomic) NSString* owner_id;
-(void).cxx_destruct;
-(void)downloadSome:(id)some toFolder:(id)folder;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)simpleUpdateScreen;
-(void)downloadPost:(id)post;
-(void)openPostExternal:(id)external;
-(void)savePostPhotoToRoll:(id)roll;
-(void)showActionsMenuForPost:(id)post;
-(void)reloadVkWall;
-(void)showWallSettings;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicUITextFieldDelegate : A2DynamicDelegate {
}
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallSpinFadeLoader : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)createLayerWith:(CGSize)with color:(id)color;
-(id)circleLayer:(float)layer size:(float)size origin:(CGPoint)origin containerSize:(CGSize)size4 color:(id)color;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKSettingsScreen : XXUnknownSuperclass {
	UITableView* contentTable;
}
-(void).cxx_destruct;
-(id)generatePostToStatusSettingView;
-(id)generateDefaultDownloadPathSettingView;
-(id)generateUseMultithreadingSettingView;
-(void)changeDefaultDownloadFolderTo:(id)to;
-(void)selectDefaultDownloadFolder;
-(void)simpleUpdateScreen;
-(void)cancelSelecting;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AFSecurityPolicy : XXUnknownSuperclass {
	BOOL _allowInvalidCertificates;
	BOOL _validatesDomainName;
	unsigned _SSLPinningMode;
	NSArray* _pinnedCertificates;
	NSArray* _pinnedPublicKeys;
}
@property(assign, nonatomic) BOOL validatesDomainName;
@property(assign, nonatomic) BOOL allowInvalidCertificates;
@property(retain, nonatomic) NSArray* pinnedCertificates;
@property(retain, nonatomic) NSArray* pinnedPublicKeys;
@property(assign, nonatomic) unsigned SSLPinningMode;
+(id)keyPathsForValuesAffectingPinnedPublicKeys;
+(id)policyWithPinningMode:(unsigned)pinningMode;
+(id)defaultPolicy;
+(id)defaultPinnedCertificates;
-(void).cxx_destruct;
-(BOOL)evaluateServerTrust:(SecTrust*)trust forDomain:(id)domain;
-(BOOL)evaluateServerTrust:(SecTrust*)trust;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallScaleAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface STKDataSourceWrapper : STKDataSource <STKDataSourceDelegate> {
	STKDataSource* _innerDataSource;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain) STKDataSource* innerDataSource;
-(void).cxx_destruct;
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
-(BOOL)hasBytesAvailable;
-(void)close;
-(void)unregisterForEvents;
-(BOOL)registerForEvents:(id)events;
-(long long)position;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
-(long long)length;
-(void)dealloc;
-(unsigned long)audioFileTypeHint;
-(id)initWithDataSource:(id)dataSource;
@end

__attribute__((visibility("hidden")))
@interface SCSiriWaveformView : XXUnknownSuperclass {
	UIColor* _waveColorLeft;
	UIColor* _waveColorRight;
	float _frequency;
	float _amplitudeLeft;
	float _amplitudeRight;
	float _phaseShiftLeft;
	float _phaseShiftRight;
	float _phaseLeft;
	float _phaseRight;
}
@property(assign, nonatomic) float phaseShiftRight;
@property(assign, nonatomic) float phaseShiftLeft;
@property(assign, nonatomic) float frequency;
@property(retain, nonatomic) UIColor* waveColorRight;
@property(retain, nonatomic) UIColor* waveColorLeft;
@property(assign, nonatomic) float amplitudeRight;
@property(assign, nonatomic) float amplitudeLeft;
@property(assign, nonatomic) float phaseRight;
@property(assign, nonatomic) float phaseLeft;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)updateWithLeft:(float)left andRight:(float)right;
-(void)setup;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VKFriendsLists : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	NSString* _user_id;
}
@property(retain, nonatomic) NSString* user_id;
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface LazySoundEngine : XXUnknownSuperclass <STKAudioPlayerDelegate> {
	BOOL seekingForward;
	BOOL seekingBackward;
	BOOL _pausedForAudioSessionInterruption;
	BOOL _isShuffled;
	BOOL _shouldUpdateNowPlayingInfo;
	BOOL _shouldUpdatePlayerUI;
	BOOL _enableEqualizer;
	STKAudioPlayer* _streamingAudioPlayer;
	NSURL* _streamingAudioPlayerURL;
	NSNumber* _lastIndex;
	NSMutableArray* _playlist;
	NSMutableArray* _playlistNotShuffled;
	NSNumber* _repeat;
	NSNumber* _source;
	int _fuckupCounter;
	int _fadingVolumeStackNumber;
	float _currentDuration;
	NSMutableDictionary* _allAboutCurrentTrack;
	NSTimer* _allAboutCurrentTrackTimer;
	NSURL* _sharedURL;
	NSString* _sharedVKID;
	NSString* _lastAddedToSelfVkTrack;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* lastAddedToSelfVkTrack;
@property(retain, nonatomic) NSString* sharedVKID;
@property(retain, nonatomic) NSURL* sharedURL;
@property(assign, nonatomic) BOOL enableEqualizer;
@property(assign, nonatomic) BOOL shouldUpdatePlayerUI;
@property(assign, nonatomic) BOOL shouldUpdateNowPlayingInfo;
@property(retain, nonatomic) NSTimer* allAboutCurrentTrackTimer;
@property(retain, nonatomic) NSMutableDictionary* allAboutCurrentTrack;
@property(assign, nonatomic) float currentDuration;
@property(assign, nonatomic) BOOL isShuffled;
@property(assign, nonatomic) BOOL pausedForAudioSessionInterruption;
@property(assign, nonatomic) int fadingVolumeStackNumber;
@property(assign, nonatomic) int fuckupCounter;
@property(retain, nonatomic) NSNumber* source;
@property(retain, nonatomic) NSNumber* repeat;
@property(retain, nonatomic) NSMutableArray* playlistNotShuffled;
@property(retain, nonatomic) NSMutableArray* playlist;
@property(retain, nonatomic) NSNumber* lastIndex;
@property(retain, nonatomic) NSURL* streamingAudioPlayerURL;
@property(retain, nonatomic) STKAudioPlayer* streamingAudioPlayer;
+(id)allocWithZone:(NSZone*)zone;
+(id)shared;
-(void).cxx_destruct;
-(void)nextTrackCommandEvent:(id)event;
-(void)previousTrackCommandEvent:(id)event;
-(void)stopCommandEvent:(id)event;
-(void)playPauseCommandEvent:(id)event;
-(void)playCommandEvent:(id)event;
-(void)pauseCommandEvent:(id)event;
-(void)changedThumbSliderOnLockScreen:(id)screen;
-(void)seekingBackward;
-(void)seekingForward;
-(void)seekForwardEvent:(id)event;
-(void)seekBackwardEvent:(id)event;
-(void)generateEqualizerBands;
-(void)fadeIn;
-(void)fadeVolumeToMax:(int)max;
-(void)scrobbleTrackWithTitle:(id)title andArtist:(id)artist;
-(void)sendTrackToLastFm:(id)lastFm orVkDict:(id)dict;
-(void)sendTrackToLastFm_wait:(id)lastFm_wait orVkDict:(id)dict;
-(void)sendTrackToStatus:(id)status orVkDict:(id)dict;
-(void)setArtworkWithImage:(id)image andURL:(id)url andFilePath:(id)path;
-(void)setStandardArtwork:(id)artwork andFilePath:(id)path;
-(void)tryToLoadArtworkFromTags_1:(id)tags_1 andFilePath:(id)path;
-(void)tryToLoadArtworkFromNetwork_2:(id)network_2 andURL:(id)url andFilePath:(id)path andVkDict:(id)dict;
-(void)tryToLoadArtworkFromNetwork_1:(id)network_1 andURL:(id)url andFilePath:(id)path andVkDict:(id)dict;
-(void)getArtworkForURL:(id)url orVkDict:(id)dict;
-(void)reloadAllAboutCurrentTrack:(id)track orVkDict:(id)dict;
-(void)updateAllAboutCurrentTrack;
-(void)actionBackward;
-(void)actionForward;
-(void)actionPause;
-(void)actionPlay;
-(void)startPlayingLocalPlaylist;
-(void)audioPlayer:(id)player unexpectedError:(int)error;
-(void)checkPlayerRealStopReason;
-(void)audioPlayer:(id)player didFinishPlayingQueueItemId:(id)anId withReason:(int)reason andProgress:(double)progress andDuration:(double)duration;
-(void)audioPlayer:(id)player stateChanged:(int)changed previousState:(int)state;
-(void)audioPlayer:(id)player didFinishBufferingSourceWithQueueItemId:(id)queueItemId;
-(void)audioPlayer:(id)player didStartPlayingQueueItemId:(id)anId;
-(void)handleAudioSessionInterruption:(id)interruption;
-(void)routeChange:(id)change;
-(void)receiveNewPlaybackTime;
-(void)receiveBackward;
-(void)receiveForward;
-(void)receivePause;
-(void)receivePlay;
-(void)receivePlayPause;
-(void)selectedTrack;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface VKLastfmAlbums : XXUnknownSuperclass <UITextFieldDelegate> {
	UITableView* contentTable;
	UISearchBar* searchBar;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	UIAlertView* pleaseWaitAlert;
	NSMutableArray* allTrackTitles;
	NSMutableArray* foundTracksBase;
	NSString* searchRequest;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)getTracksFromVkWithOffset:(int)offset andAlbumName:(id)name;
-(void)searchThisTracksInVk:(id)vk withAlbumName:(id)albumName;
-(void)getTracksListFromiTunesForAlbumId:(long long)albumId andAlbumName:(id)name;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)simpleUpdateScreen;
-(id)getBestTrackFromArray:(id)array withOriginalArtist:(id)originalArtist andTitle:(id)title;
-(void)showResultsControllerWithAlbumName:(id)albumName;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)dismissPleaseWait;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SettingsClearContent : XXUnknownSuperclass {
	UITableView* contentTable;
	UIAlertView* pleaseWaitAlert;
	UILabel* library_size_label;
	UILabel* temp_size_label;
	UILabel* images_size_label;
	UILabel* playlists_size_label;
}
-(void).cxx_destruct;
-(void)getSpace_playlists;
-(void)getSpace_images;
-(void)getSpace_temp;
-(void)getSpace_library;
-(void)simpleUpdateList;
-(void)simpleUpdateScreen;
-(void)clearPlaylists;
-(void)clearImagesCache;
-(void)clearRecordsCache;
-(void)clearLibrary;
-(void)clearPlaylistsAlert;
-(void)clearImagesCacheAlert;
-(void)clearLibraryAlert;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPRequestOperationManager : XXUnknownSuperclass <NSSecureCoding, NSCopying> {
	BOOL _shouldUseCredentialStorage;
	NSURL* _baseURL;
	AFHTTPRequestSerializer<AFURLRequestSerialization>* _requestSerializer;
	AFHTTPResponseSerializer<AFURLResponseSerialization>* _responseSerializer;
	NSOperationQueue* _operationQueue;
	NSURLCredential* _credential;
	AFSecurityPolicy* _securityPolicy;
	AFNetworkReachabilityManager* _reachabilityManager;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
}
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(retain, nonatomic) AFNetworkReachabilityManager* reachabilityManager;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) NSURLCredential* credential;
@property(assign, nonatomic) BOOL shouldUseCredentialStorage;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer<AFURLRequestSerialization>* requestSerializer;
@property(retain, nonatomic) NSURL* baseURL;
+(BOOL)supportsSecureCoding;
+(id)manager;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)description;
-(id)DELETE:(id)aDelete parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PATCH:(id)patch parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PUT:(id)put parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters constructingBodyWithBlock:(id)block success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)HEAD:(id)head parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)GET:(id)get parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)HTTPRequestOperationWithRequest:(id)request success:(id)success failure:(id)failure;
-(id)HTTPRequestOperationWithHTTPMethod:(id)httpmethod URLString:(id)string parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)initWithBaseURL:(id)baseURL;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorRotatingSandglassAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicUIImagePickerControllerDelegate : A2DynamicDelegate <UIImagePickerControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPResponseSerializer : XXUnknownSuperclass <AFURLResponseSerialization> {
	unsigned _stringEncoding;
	NSIndexSet* _acceptableStatusCodes;
	NSSet* _acceptableContentTypes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSSet* acceptableContentTypes;
@property(copy, nonatomic) NSIndexSet* acceptableStatusCodes;
@property(assign, nonatomic) unsigned stringEncoding;
+(BOOL)supportsSecureCoding;
+(id)serializer;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(BOOL)validateResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFJSONResponseSerializer : AFHTTPResponseSerializer {
	BOOL _removesKeysWithNullValues;
	unsigned _readingOptions;
}
@property(assign, nonatomic) BOOL removesKeysWithNullValues;
@property(assign, nonatomic) unsigned readingOptions;
+(id)serializerWithReadingOptions:(unsigned)readingOptions;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFXMLParserResponseSerializer : AFHTTPResponseSerializer {
}
+(id)serializer;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFPropertyListResponseSerializer : AFHTTPResponseSerializer {
	unsigned _format;
	unsigned _readOptions;
}
@property(assign, nonatomic) unsigned readOptions;
@property(assign, nonatomic) unsigned format;
+(id)serializerWithFormat:(unsigned)format readOptions:(unsigned)options;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFImageResponseSerializer : AFHTTPResponseSerializer {
	BOOL _automaticallyInflatesResponseImage;
	float _imageScale;
}
@property(assign, nonatomic) BOOL automaticallyInflatesResponseImage;
@property(assign, nonatomic) float imageScale;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFCompoundResponseSerializer : AFHTTPResponseSerializer {
	NSArray* _responseSerializers;
}
@property(copy, nonatomic) NSArray* responseSerializers;
+(id)compoundSerializerWithResponseSerializers:(id)responseSerializers;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)responseObjectForResponse:(id)response data:(id)data error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface VKNewsSettingsController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AppDelegate : XXUnknownSuperclass <UIApplicationDelegate, SSZipArchiveDelegate> {
	UIWindow* _window;
	ViewController* _viewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) ViewController* viewController;
@property(retain, nonatomic) UIWindow* window;
-(void).cxx_destruct;
-(void)offerUnlock;
-(void)startMonitoringNetwork;
-(void)setDarkMode:(BOOL)mode;
-(void)restorePlaylistGo;
-(void)restorePlaylist;
-(void)saveCurrentPlaylist;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface BKControlWrapper : XXUnknownSuperclass <NSCopying> {
	unsigned _controlEvents;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(assign, nonatomic) unsigned controlEvents;
-(void).cxx_destruct;
-(void)invoke:(id)invoke;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithHandler:(id)handler forControlEvents:(unsigned)controlEvents;
@end

__attribute__((visibility("hidden")))
@interface VKMyGroupsGlobalSettingsController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKWallSettingsController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyFriendsSettingsController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface TracksPickerList : XXUnknownSuperclass {
	UITableView* contentTable;
	UISearchBar* searchBar;
	NSMutableArray* filesAndFolders;
	NSString* folderPath;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isSearch;
	NSArray* filesAndFoldersFoundBySearch;
	NSMutableArray* checkedFilesAndFolders;
	UIBarButtonItem* addTracksItem;
	UIBarButtonItem* addTracksItemToTop;
	UIBarButtonItem* addTracksItemToBottom;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL _isVkPicker;
	id _tracksSelectedBlock;
}
@property(assign, nonatomic) BOOL isVkPicker;
@property(retain, nonatomic) NSArray* filesAndFoldersFoundBySearch;
@property(assign, nonatomic) BOOL isSearch;
@property(copy, nonatomic) id tracksSelectedBlock;
@property(retain, nonatomic) NSString* folderPath;
-(void).cxx_destruct;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)simpleUpdateScreen;
-(void)searchWithRequest:(id)request;
-(void)selectAllElements;
-(void)updateEditPanel;
-(void)coolTableUpdate;
-(void)confirmSelectingBottom;
-(void)confirmSelectingTop;
-(void)confirmSelecting;
-(void)cancelSelecting;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)reloadMediaList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicMFMessageComposeViewControllerDelegate : A2DynamicDelegate <MFMessageComposeViewControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

__attribute__((visibility("hidden")))
@interface VKPopularGenres : XXUnknownSuperclass {
	UITableView* contentTable;
	NSArray* allGenres;
	NSNumber* selectedGenreId;
	UIView* headerView;
	id _genreSelectedBlock;
}
@property(copy, nonatomic) id genreSelectedBlock;
-(void).cxx_destruct;
-(void)simpleUpdateScreen;
-(void)confirmSelecting:(id)selecting;
-(void)cancelSelecting;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)createTableHeader;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyAudioPickerController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
	id _tracksSelectedBlock;
	NSArray* _alreadyInAlbum;
	NSString* _albumName;
	NSString* _albumID;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* albumID;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSArray* alreadyInAlbum;
@property(copy, nonatomic) id tracksSelectedBlock;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicDelegate : XXUnknownSuperclass {
	Protocol* _protocol;
	NSMutableDictionary* _handlers;
	id _realDelegate;
	A2DynamicClassDelegate* _classProxy;
	NSMapTable* _invocationsBySelectors;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* handlers;
@property(readonly, assign, nonatomic) Protocol* protocol;
@property(assign, nonatomic) __weak id realDelegate;
@property(readonly, assign, nonatomic) NSMapTable* invocationsBySelectors;
@property(retain, nonatomic) A2DynamicClassDelegate* classProxy;
+(id)description;
-(void).cxx_destruct;
-(void)removeBlockImplementationForClassMethod:(SEL)classMethod;
-(void)implementClassMethod:(SEL)method withBlock:(id)block;
-(id)blockImplementationForClassMethod:(SEL)classMethod;
-(void)removeBlockImplementationForMethod:(SEL)method;
-(void)implementMethod:(SEL)method withBlock:(id)block;
-(id)blockImplementationForMethod:(SEL)method;
-(void)doesNotRecognizeSelector:(SEL)selector;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(void)forwardInvocation:(id)invocation;
-(id)description;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)initWithProtocol:(id)protocol;
-(Class)class;
-(BOOL)isClassProxy;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicClassDelegate : A2DynamicDelegate {
	Class _proxiedClass;
}
@property(retain, nonatomic) Class proxiedClass;
-(void).cxx_destruct;
-(void)removeBlockImplementationForClassMethod:(SEL)classMethod;
-(void)implementClassMethod:(SEL)method withBlock:(id)block;
-(id)blockImplementationForClassMethod:(SEL)classMethod;
-(void)forwardInvocation:(id)invocation;
-(unsigned)hash;
-(id)description;
-(id)methodSignatureForSelector:(SEL)selector;
-(Class)class;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)isEqual:(id)equal;
-(BOOL)isClassProxy;
@end

__attribute__((visibility("hidden")))
@interface VKLastfmResults : XXUnknownSuperclass {
	UITableView* contentTable;
	UIAlertView* pleaseWaitAlert;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	NSArray* _foundArray;
}
@property(retain, nonatomic) NSArray* foundArray;
-(void).cxx_destruct;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)simpleUpdateScreen;
-(void)searchOtherVariantsForTrackIndex:(int)trackIndex;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKNews : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSString* next_from;
	int tracksIndex;
	NSMutableArray* foundPosts;
	NSMutableArray* allFoundTracks;
	UIAlertView* pleaseWaitAlert;
	NSDateFormatter* postDateFormatter;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
}
-(void).cxx_destruct;
-(void)downloadSome:(id)some toFolder:(id)folder;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)reloadVkNews;
-(void)showNewsSettings;
-(void)simpleUpdateScreen;
-(void)downloadPost:(id)post;
-(void)openPostExternal:(id)external;
-(void)savePostPhotoToRoll:(id)roll;
-(void)showActionsMenuForPost:(id)post;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AFNetworkReachabilityManager : XXUnknownSuperclass {
	int _networkReachabilityStatus;
	id _networkReachability;
	unsigned _networkReachabilityAssociation;
	id _networkReachabilityStatusBlock;
}
@property(readonly, assign, nonatomic, getter=isReachableViaWiFi) BOOL reachableViaWiFi;
@property(readonly, assign, nonatomic, getter=isReachableViaWWAN) BOOL reachableViaWWAN;
@property(readonly, assign, nonatomic, getter=isReachable) BOOL reachable;
@property(copy, nonatomic) id networkReachabilityStatusBlock;
@property(assign, nonatomic) int networkReachabilityStatus;
@property(assign, nonatomic) unsigned networkReachabilityAssociation;
@property(retain, nonatomic) id networkReachability;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)managerForAddress:(const void*)address;
+(id)managerForDomain:(id)domain;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)setReachabilityStatusChangeBlock:(id)block;
-(id)localizedNetworkReachabilityStatusString;
-(void)stopMonitoring;
-(void)startMonitoring;
-(void)dealloc;
-(id)init;
-(id)initWithReachability:(SCNetworkReachabilityRef)reachability;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicUIPopoverControllerDelegate : A2DynamicDelegate <UIPopoverControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallZigZagDeflectAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallClipRotateAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface STKDataSource : XXUnknownSuperclass {
	id<STKDataSourceDelegate> delegate;
	NSURL* _recordToFileUrl;
	double _durationHint;
}
@property(retain, nonatomic) NSURL* recordToFileUrl;
@property(assign) id<STKDataSourceDelegate> delegate;
@property(assign, nonatomic) double durationHint;
@property(readonly, assign) BOOL hasBytesAvailable;
@property(readonly, assign) long long length;
@property(readonly, assign) long long position;
@property(readonly, assign) BOOL supportsSeek;
-(void).cxx_destruct;
-(unsigned long)audioFileTypeHint;
-(void)close;
-(void)unregisterForEvents;
-(BOOL)registerForEvents:(id)events;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
@end

__attribute__((visibility("hidden")))
@interface LazyNavigationController : XXUnknownSuperclass <UINavigationControllerDelegate> {
	BOOL ignorePush;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface FtpConnection : XXUnknownSuperclass {
	AsyncSocket* connectionSocket;
	FtpServer* server;
	AsyncSocket* dataListeningSocket;
	AsyncSocket* dataSocket;
	FtpDataConnection* dataConnection;
	NSArray* msgComponents;
	unsigned short dataPort;
	int transferMode;
	NSMutableArray* queuedData;
	NSString* currentUser;
	NSString* currentDir;
	NSString* currentFile;
	NSFileHandle* currentFileHandle;
	NSString* rnfrFilename;
}
@property(retain) NSString* rnfrFilename;
@property(retain) NSString* currentDir;
@property(retain) NSString* currentFile;
@property(assign) int transferMode;
-(id)rootedPath:(id)path;
-(id)visibleCurrentDir;
-(unsigned char)validNewFilePath:(id)path;
-(unsigned char)accessibleFilePath:(id)path;
-(unsigned char)canChangeDirectoryTo:(id)to;
-(unsigned char)changedCurrentDirectoryTo:(id)to;
-(id)fileNameFromArgs:(id)args;
-(unsigned long long)fileSize:(id)size;
-(id)makeFilePathFrom:(id)from;
-(void)doRnto:(id)rnto arguments:(id)arguments;
-(void)doRnfr:(id)rnfr arguments:(id)arguments;
-(void)doCdUp:(id)up arguments:(id)arguments;
-(void)doMkdir:(id)mkdir arguments:(id)arguments;
-(void)doSize:(id)size arguments:(id)arguments;
-(void)doMlst:(id)mlst arguments:(id)arguments;
-(void)doDele:(id)dele arguments:(id)arguments;
-(void)doRetr:(id)retr arguments:(id)arguments;
-(void)doStor:(id)stor arguments:(id)arguments;
-(void)doNlst:(id)nlst arguments:(id)arguments;
-(void)doCwd:(id)cwd arguments:(id)arguments;
-(void)doType:(id)type arguments:(id)arguments;
-(void)doOpts:(id)opts arguments:(id)arguments;
-(void)doPort:(id)port arguments:(id)arguments;
-(void)doEpsv:(id)epsv arguments:(id)arguments;
-(void)doPasv:(id)pasv arguments:(id)arguments;
-(void)doEprt:(id)eprt arguments:(id)arguments;
-(void)doLprt:(id)lprt arguments:(id)arguments;
-(void)doSyst:(id)syst arguments:(id)arguments;
-(void)doNoop:(id)noop arguments:(id)arguments;
-(void)doPwd:(id)pwd arguments:(id)arguments;
-(void)doList:(id)list arguments:(id)arguments;
-(void)doFeat:(id)feat arguments:(id)arguments;
-(void)doStat:(id)stat arguments:(id)arguments;
-(void)doPass:(id)pass arguments:(id)arguments;
-(void)doUser:(id)user arguments:(id)arguments;
-(void)doQuit:(id)quit arguments:(id)arguments;
-(void)processCommand;
-(void)processDataRead:(id)read;
-(void)didFinishReading;
-(void)didReceiveDataRead;
-(void)didReceiveDataWritten;
-(void)sendData:(id)data;
-(void)sendDataString:(id)string;
-(void)sendMessage:(id)message;
-(void)onSocket:(id)socket didWriteDataWithTag:(long)tag;
-(void)onSocket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)onSocket:(id)socket didAcceptNewSocket:(id)socket2;
-(BOOL)onSocketWillConnect:(id)onSocket;
-(int)choosePasvDataPort;
-(BOOL)openDataSocket:(int)socket;
-(id)connectionAddress;
-(void)dealloc;
-(id)initWithAsyncSocket:(id)asyncSocket forServer:(id)server;
@end

__attribute__((visibility("hidden")))
@interface FolderPicker : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
	NSString* _caption;
	id _folderSelectedBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id folderSelectedBlock;
@property(retain, nonatomic) NSString* caption;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(BOOL)disablesAutomaticKeyboardDismissal;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallClipRotatePulseAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKSearchSettings : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL changed;
}
-(void).cxx_destruct;
-(id)generateHideBadQualitySettingView;
-(id)generateOnlyPerformersSettingView;
-(id)generateLyricsOnlySettingView;
-(id)generateAutocompleteSettingView;
-(id)generateSortingSettingView;
-(void)simpleUpdateScreen;
-(void)somethingChanged;
-(void)cancelSelecting;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface STKAutoRecoveringHTTPDataSource : STKDataSourceWrapper {
	int serial;
	int waitSeconds;
	NSTimer* timeoutTimer;
	BOOL waitingForNetwork;
	unsigned long long ticksWhenLastDataReceived;
	SCNetworkReachabilityRef reachabilityRef;
	XXStruct_Bz0WjC options;
}
@property(readonly, assign) STKHTTPDataSource* innerDataSource;
-(void).cxx_destruct;
-(id)description;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceEof:(id)eof;
-(void)processRetryOnError;
-(void)attemptReconnectWithTimer:(id)timer;
-(void)attemptReconnectWithSerial:(id)serial;
-(void)dataSourceDataAvailable:(id)available;
-(void)reachabilityChanged;
-(void)dealloc;
-(void)close;
-(void)seekToOffset:(long long)offset;
-(BOOL)hasGotNetworkConnection;
-(void)stopNotifier;
-(void)destroyTimeoutTimer;
-(void)createTimeoutTimer;
-(void)timeoutTimerTick:(id)tick;
-(void)unregisterForEvents;
-(BOOL)registerForEvents:(id)events;
-(BOOL)startNotifierOnRunLoop:(id)loop;
-(id)initWithHTTPDataSource:(id)httpdataSource andOptions:(XXStruct_Bz0WjC)options;
-(id)initWithHTTPDataSource:(id)httpdataSource;
-(id)initWithDataSource:(id)dataSource;
-(id)innerHTTPDataSource;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorLineScaleAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface VKController : XXUnknownSuperclass {
	LazyNavigationController* navController;
}
-(void).cxx_destruct;
-(void)backVkControllerToBase;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKWallSettings : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL changed;
}
-(void).cxx_destruct;
-(id)generateWallFilterSettingView;
-(void)simpleUpdateScreen;
-(void)somethingChanged;
-(void)cancelSelecting;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorTwoDotsAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface AFNetworkActivityIndicatorManager : XXUnknownSuperclass {
	BOOL _enabled;
	int _activityCount;
	NSTimer* _activityIndicatorVisibilityTimer;
}
@property(readonly, assign, nonatomic) BOOL isNetworkActivityIndicatorVisible;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, assign, nonatomic, getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible;
@property(retain, nonatomic) NSTimer* activityIndicatorVisibilityTimer;
@property(assign, nonatomic) int activityCount;
+(id)keyPathsForValuesAffectingIsNetworkActivityIndicatorVisible;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)networkRequestDidFinish:(id)networkRequest;
-(void)networkRequestDidStart:(id)networkRequest;
-(void)decrementActivityCount;
-(void)incrementActivityCount;
-(void)updateNetworkActivityIndicatorVisibility;
-(void)updateNetworkActivityIndicatorVisibilityDelayed;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AsyncReadPacket : XXUnknownSuperclass {
	NSMutableData* buffer;
	unsigned startOffset;
	unsigned bytesDone;
	unsigned maxLength;
	double timeout;
	unsigned readLength;
	NSData* term;
	BOOL bufferOwner;
	unsigned originalBufferLength;
	long tag;
}
-(void).cxx_destruct;
-(int)searchForTermAfterPreBuffering:(unsigned)termAfterPreBuffering;
-(unsigned)prebufferReadLengthForTerm;
-(unsigned)readLengthForTermWithPreBuffer:(id)preBuffer found:(BOOL*)found;
-(unsigned)readLengthForTerm;
-(unsigned)readLengthForNonTerm;
-(id)initWithData:(id)data startOffset:(unsigned)offset maxLength:(unsigned)length timeout:(double)timeout readLength:(unsigned)length5 terminator:(id)terminator tag:(long)tag;
@end

__attribute__((visibility("hidden")))
@interface AsyncWritePacket : XXUnknownSuperclass {
	NSData* buffer;
	unsigned bytesDone;
	long tag;
	double timeout;
}
-(void).cxx_destruct;
-(id)initWithData:(id)data timeout:(double)timeout tag:(long)tag;
@end

__attribute__((visibility("hidden")))
@interface AsyncSpecialPacket : XXUnknownSuperclass {
	NSDictionary* tlsSettings;
}
-(void).cxx_destruct;
-(id)initWithTLSSettings:(id)tlssettings;
@end

__attribute__((visibility("hidden")))
@interface AsyncSocket : XXUnknownSuperclass {
	int theNativeSocket4;
	int theNativeSocket6;
	CFSocketRef theSocket4;
	CFSocketRef theSocket6;
	CFReadStreamRef theReadStream;
	CFWriteStreamRef theWriteStream;
	CFRunLoopSourceRef theSource4;
	CFRunLoopSourceRef theSource6;
	CFRunLoopRef theRunLoop;
	XXStruct_4pnlqD theContext;
	NSArray* theRunLoopModes;
	NSTimer* theConnectTimer;
	NSMutableArray* theReadQueue;
	AsyncReadPacket* theCurrentRead;
	NSTimer* theReadTimer;
	NSMutableData* partialReadBuffer;
	NSMutableArray* theWriteQueue;
	AsyncWritePacket* theCurrentWrite;
	NSTimer* theWriteTimer;
	id theDelegate;
	unsigned short theFlags;
	long theUserData;
}
+(id)ZeroData;
+(id)LFData;
+(id)CRData;
+(id)CRLFData;
-(void).cxx_destruct;
-(void)doCFWriteStreamCallback:(unsigned long)callback forStream:(CFWriteStreamRef)stream;
-(void)doCFReadStreamCallback:(unsigned long)callback forStream:(CFReadStreamRef)stream;
-(void)doCFSocketCallback:(unsigned long)callback forSocket:(CFSocketRef)socket withAddress:(id)address withData:(const void*)data;
-(void)onTLSHandshakeSuccessful;
-(void)maybeStartTLS;
-(void)startTLS:(id)tls;
-(void)doWriteTimeout:(id)timeout;
-(void)endCurrentWrite;
-(void)completeCurrentWrite;
-(void)doSendBytes;
-(BOOL)canAcceptBytes;
-(void)maybeDequeueWrite;
-(void)scheduleDequeueWrite;
-(void)writeData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)doReadTimeout:(id)timeout;
-(void)endCurrentRead;
-(void)completeCurrentRead;
-(void)doBytesAvailable;
-(long)readIntoBuffer:(void*)buffer maxLength:(unsigned)length;
-(BOOL)hasBytesAvailable;
-(void)maybeDequeueRead;
-(void)scheduleDequeueRead;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout tag:(long)tag;
-(id)description;
-(BOOL)areStreamsConnected;
-(BOOL)isIPv6;
-(BOOL)isIPv4;
-(id)localAddress;
-(id)connectedAddress;
-(unsigned short)portFromAddress6:(sockaddr_in6*)address6;
-(unsigned short)portFromAddress4:(sockaddr_in*)address4;
-(id)hostFromAddress6:(sockaddr_in6*)address6;
-(id)hostFromAddress4:(sockaddr_in*)address4;
-(unsigned short)localPortFromCFSocket6:(CFSocketRef)cfsocket6;
-(unsigned short)localPortFromCFSocket4:(CFSocketRef)cfsocket4;
-(unsigned short)localPortFromNativeSocket6:(int)nativeSocket6;
-(unsigned short)localPortFromNativeSocket4:(int)nativeSocket4;
-(id)localHostFromCFSocket6:(CFSocketRef)cfsocket6;
-(id)localHostFromCFSocket4:(CFSocketRef)cfsocket4;
-(id)localHostFromNativeSocket6:(int)nativeSocket6;
-(id)localHostFromNativeSocket4:(int)nativeSocket4;
-(unsigned short)connectedPortFromCFSocket6:(CFSocketRef)cfsocket6;
-(unsigned short)connectedPortFromCFSocket4:(CFSocketRef)cfsocket4;
-(unsigned short)connectedPortFromNativeSocket6:(int)nativeSocket6;
-(unsigned short)connectedPortFromNativeSocket4:(int)nativeSocket4;
-(id)connectedHostFromCFSocket6:(CFSocketRef)cfsocket6;
-(id)connectedHostFromCFSocket4:(CFSocketRef)cfsocket4;
-(id)connectedHostFromNativeSocket6:(int)nativeSocket6;
-(id)connectedHostFromNativeSocket4:(int)nativeSocket4;
-(unsigned short)localPort6;
-(unsigned short)localPort4;
-(id)localHost6;
-(id)localHost4;
-(unsigned short)connectedPort6;
-(unsigned short)connectedPort4;
-(id)connectedHost6;
-(id)connectedHost4;
-(unsigned short)localPort;
-(id)localHost;
-(unsigned short)connectedPort;
-(id)connectedHost;
-(BOOL)isConnected;
-(BOOL)isDisconnected;
-(id)errorFromCFStreamError:(XXStruct_Bz0WjC)cfstreamError;
-(id)getWriteTimeoutError;
-(id)getReadTimeoutError;
-(id)getReadMaxedOutError;
-(id)getConnectTimeoutError;
-(id)getAbortError;
-(id)getStreamError;
-(id)getSocketError;
-(id)getErrnoError;
-(id)unreadData;
-(void)maybeScheduleDisconnect;
-(void)disconnectAfterReadingAndWriting;
-(void)disconnectAfterWriting;
-(void)disconnectAfterReading;
-(void)disconnect;
-(void)close;
-(void)emptyQueues;
-(void)recoverUnreadData;
-(void)closeWithError:(id)error;
-(BOOL)setSocketFromStreamsAndReturnError:(id*)streamsAndReturnError;
-(void)doStreamOpen;
-(BOOL)openStreamsAndReturnError:(id*)error;
-(BOOL)configureStreamsAndReturnError:(id*)error;
-(BOOL)attachStreamsToRunLoop:(id)runLoop error:(id*)error;
-(BOOL)createStreamsToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)createStreamsFromNative:(int)native error:(id*)error;
-(void)doSocketOpen:(CFSocketRef)open withCFSocketError:(long)cfsocketError;
-(void)doAcceptFromSocket:(CFSocketRef)socket withNewNativeSocket:(int)newNativeSocket;
-(BOOL)connectSocketToAddress:(id)address error:(id*)error;
-(BOOL)configureSocketAndReturnError:(id*)error;
-(BOOL)attachSocketsToRunLoop:(id)runLoop error:(id*)error;
-(BOOL)bindSocketToAddress:(id)address error:(id*)error;
-(BOOL)createSocketForAddress:(id)address error:(id*)error;
-(CFSocketRef)newAcceptSocketForAddress:(id)address error:(id*)error;
-(void)doConnectTimeout:(id)timeout;
-(void)endConnectTimeout;
-(void)startConnectTimeout:(double)timeout;
-(BOOL)connectToAddress:(id)address viaInterfaceAddress:(id)address2 withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnInterface:(id)interface port:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnPort:(unsigned short)port error:(id*)error;
-(id)runLoopModes;
-(BOOL)removeRunLoopMode:(id)mode;
-(BOOL)addRunLoopMode:(id)mode;
-(BOOL)setRunLoopModes:(id)modes;
-(BOOL)moveToRunLoop:(id)runLoop;
-(void)enablePreBuffering;
-(void)runLoopUnscheduleWriteStream;
-(void)runLoopUnscheduleReadStream;
-(void)runLoopRemoveTimer:(id)timer mode:(id)mode;
-(void)runLoopAddTimer:(id)timer mode:(id)mode;
-(void)runLoopRemoveTimer:(id)timer;
-(void)runLoopAddTimer:(id)timer;
-(void)runLoopRemoveSource:(CFRunLoopSourceRef)source mode:(id)mode;
-(void)runLoopAddSource:(CFRunLoopSourceRef)source mode:(id)mode;
-(void)runLoopRemoveSource:(CFRunLoopSourceRef)source;
-(void)runLoopAddSource:(CFRunLoopSourceRef)source;
-(float)progressOfWriteReturningTag:(long*)writeReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(float)progressOfReadReturningTag:(long*)readReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(CFWriteStreamRef)getCFWriteStream;
-(CFReadStreamRef)getCFReadStream;
-(CFSocketRef)getCFSocket;
-(BOOL)canSafelySetDelegate;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)setUserData:(long)data;
-(long)userData;
-(void)checkForThreadSafety;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate userData:(long)data;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface FtpDataConnection : XXUnknownSuperclass {
	AsyncSocket* dataSocket;
	FtpConnection* ftpConnection;
	AsyncSocket* dataListeningSocket;
	id dataConnection;
	NSMutableData* receivedData;
	int connectionState;
}
@property(assign) int connectionState;
@property(readonly, assign) NSMutableData* receivedData;
-(BOOL)onReadStreamEnded:(id)ended;
-(void)onSocket:(id)socket willDisconnectWithError:(id)error;
-(void)onSocket:(id)socket didWriteDataWithTag:(long)tag;
-(void)onSocket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)onSocket:(id)socket didAcceptNewSocket:(id)socket2;
-(BOOL)onSocketWillConnect:(id)onSocket;
-(void)closeConnection;
-(void)writeQueuedData:(id)data;
-(void)writeData:(id)data;
-(void)writeString:(id)string;
-(void)dealloc;
-(id)initWithAsyncSocket:(id)asyncSocket forConnection:(id)connection withQueuedData:(id)queuedData;
@end

__attribute__((visibility("hidden")))
@interface VKDownloadQueue : XXUnknownSuperclass {
	UITableView* contentTable;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
}
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)cancelAll;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)reloadQueueList;
-(void)coolTableUpdate;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyGroups : XXUnknownSuperclass <UITextFieldDelegate> {
	UITableView* contentTable;
	UISearchBar* searchBar;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	BOOL isLoadingNotFromMyGroups;
	NSMutableArray* foundArray;
	NSMutableArray* foundArrayFiltered;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	NSString* _user_id;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* user_id;
-(void).cxx_destruct;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(BOOL)isAllDigits:(id)digits;
-(void)openMyAudioWithDict:(id)dict;
-(void)getProfileById:(int)anId;
-(void)getIdByScreenName:(id)name;
-(void)findNotFromGroups:(id)groups;
-(void)findNotFromGroupsAlert;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)globalSearch;
-(void)simpleUpdateScreen;
-(void)addGroupToBookmarks:(id)bookmarks;
-(void)showGroupsSettings;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)reloadMyGroups;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicQLPreviewControllerDelegate : A2DynamicDelegate <QLPreviewControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)previewControllerDidDismiss:(id)previewController;
-(void)previewControllerWillDismiss:(id)previewController;
-(BOOL)previewController:(id)controller shouldOpenURL:(id)url forPreviewItem:(id)previewItem;
-(id)previewController:(id)controller transitionImageForPreviewItem:(id)previewItem contentRect:(CGRect*)rect;
-(CGRect)previewController:(id)controller frameForPreviewItem:(id)previewItem inSourceView:(id*)sourceView;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPRequestOperation : AFURLConnectionOperation {
	AFHTTPResponseSerializer<AFURLResponseSerialization>* _responseSerializer;
	id _responseObject;
	NSError* _responseSerializationError;
}
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(retain, nonatomic) NSError* responseSerializationError;
@property(retain, nonatomic) id responseObject;
@property(retain, nonatomic) NSHTTPURLResponse* response;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)pause;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(id)error;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPSessionManager : AFURLSessionManager <NSSecureCoding, NSCopying> {
	NSURL* _baseURL;
	AFHTTPRequestSerializer<AFURLRequestSerialization>* _requestSerializer;
}
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer<AFURLRequestSerialization>* requestSerializer;
@property(retain, nonatomic) NSURL* baseURL;
+(BOOL)supportsSecureCoding;
+(id)manager;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)description;
-(id)dataTaskWithHTTPMethod:(id)httpmethod URLString:(id)string parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)DELETE:(id)aDelete parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PATCH:(id)patch parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)PUT:(id)put parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters constructingBodyWithBlock:(id)block success:(id)success failure:(id)failure;
-(id)POST:(id)post parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)HEAD:(id)head parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)GET:(id)get parameters:(id)parameters success:(id)success failure:(id)failure;
-(id)initWithBaseURL:(id)baseURL sessionConfiguration:(id)configuration;
-(id)initWithSessionConfiguration:(id)sessionConfiguration;
-(id)initWithBaseURL:(id)baseURL;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFActivityIndicatorViewNotificationObserver : XXUnknownSuperclass {
	UIActivityIndicatorView* _activityIndicatorView;
}
@property(readonly, assign, nonatomic) __weak UIActivityIndicatorView* activityIndicatorView;
-(void).cxx_destruct;
-(void)dealloc;
-(void)af_stopAnimating;
-(void)af_startAnimating;
-(void)setAnimatingWithStateOfOperation:(id)operation;
-(void)setAnimatingWithStateOfTask:(id)task;
-(id)initWithActivityIndicatorView:(id)activityIndicatorView;
@end

__attribute__((visibility("hidden")))
@interface _BKWeakAssociatedObject : XXUnknownSuperclass {
	id _value;
}
@property(assign, nonatomic) __weak id value;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ActivationPayMethod : XXUnknownSuperclass {
	UITableView* contentTable;
	UIAlertView* pleaseWaitAlert;
	int _sum;
}
@property(assign, nonatomic) int sum;
-(void).cxx_destruct;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)beginAutoPaymentWithType:(id)type andID:(id)anId;
-(void)beginAutoPaymentWithType:(id)type;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicUIActionSheetDelegate : A2DynamicDelegate <UIActionSheetDelegate> {
	BOOL _didHandleButtonClick;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL didHandleButtonClick;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

__attribute__((visibility("hidden")))
@interface SettingsVisualizer : XXUnknownSuperclass {
	UITableView* contentTable;
	int visualizerType;
}
-(void).cxx_destruct;
-(void)simpleUpdateList;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SettingsEqualizer : XXUnknownSuperclass {
	UITableView* contentTable;
	int oldVal_0;
	int oldVal_1;
	int oldVal_2;
	int oldVal_3;
	int oldVal_4;
	int oldVal_5;
	int oldVal_6;
	int oldVal_7;
	int oldVal_8;
	int oldVal_9;
}
-(void).cxx_destruct;
-(id)generateEqViewWithTitle:(id)title andSettingName:(id)name withMinValue:(float)minValue andMaxValue:(float)value andBandIndex:(int)index;
-(id)generateEnableView;
-(void)simpleUpdateList;
-(void)savePresetToSlot:(int)slot;
-(void)simpleUpdateScreen;
-(void)updateEqualizerList;
-(void)coolTableUpdate;
-(void)savePreset;
-(void)openPresets;
-(void)resetEqualizer;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKSearch : XXUnknownSuperclass <UITextFieldDelegate> {
	UITableView* contentTable;
	UISearchBar* searchBar;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	int offset;
	UIAlertView* pleaseWaitAlert;
	NSString* searchRequest;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	NSString* _byThisArtist;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* byThisArtist;
-(void).cxx_destruct;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)playThisTrackNext:(id)next;
-(void)cutBadQualityFromArray:(id)array completionBlock:(id)block;
-(void)simpleUpdateScreen;
-(void)reloadVkSearch;
-(void)showSearchSettings;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyAudio : XXUnknownSuperclass {
	UITableView* contentTable;
	UISearchBar* searchBar;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	NSMutableArray* foundArray;
	NSMutableArray* foundArrayOriginal;
	UIAlertView* pleaseWaitAlert;
	int selfId;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	BOOL accessRestricted;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	NSString* _owner_id;
	NSString* _album_id;
}
@property(retain, nonatomic) NSString* album_id;
@property(retain, nonatomic) NSString* owner_id;
-(void).cxx_destruct;
-(void)addTrackFromVkToSelf:(id)aSelf;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)deleteTrackWithDict:(id)dict;
-(void)downloadAllToFolder:(id)folder;
-(void)downloadAllToFolderAlert:(id)folderAlert;
-(void)downloadAllFolderSelect;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)addTracksToCurrentAlbum:(id)currentAlbum;
-(void)removeAllTracksFromCurrentAlbum:(id)currentAlbum andThenAddTracks:(id)tracks;
-(void)addTracksFromPicker:(id)picker;
-(void)openTracksPickerForAlbum;
-(void)playThisTrackNext:(id)next;
-(void)openEditMode;
-(void)simpleUpdateScreen;
-(void)setAccessRestricted;
-(void)updateMyAudioFromPlayer;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateVkList;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicUIAlertViewDelegate : A2DynamicDelegate <UIAlertViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
@end

__attribute__((visibility("hidden")))
@interface LTDownloadProgressView : XXUnknownSuperclass {
	LLACircularProgressView* progressView;
	UIImageView* downloadStateImage;
	UIButton* button;
	NSString* _hashForTracking;
	NSDictionary* _trackDict;
}
@property(retain, nonatomic) NSDictionary* trackDict;
@property(retain, nonatomic) NSString* hashForTracking;
-(void).cxx_destruct;
-(void)downloadSingleTrackWithSelectedFolder:(id)selectedFolder;
-(void)downloadSingleTrackWithFolderSelection;
-(void)removeAllGestures;
-(void)setButtonCanNothing;
-(void)setButtonCanStop;
-(void)setButtonCanStart;
-(void)checkState;
-(void)downloadProgressChanged:(id)changed;
-(void)downloadTrackTo:(id)to;
-(void)buildView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andTrackingHash:(id)hash andDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface Works : XXUnknownSuperclass {
}
+(void)getBitrateForLabel_offline_player:(id)label_offline_player withFileURL:(id)fileURL;
+(void)getBitrateFromWeb_player:(id)web_player withDuration:(int)duration andLink:(id)link andId:(id)anId;
+(void)getBitrateForLabel_player:(id)label_player withDuration:(int)duration andLink:(id)link andId:(id)anId;
+(id)getRightWordFormForNumber:(int)number andWordsArray:(id)array;
+(id)makeBeautyFooterForNumber:(int)number andWordsArray:(id)array;
+(void)loadLyricsWithId:(id)anId forFile:(id)file withArtist:(id)artist andTitle:(id)title;
+(void)updateDownloadedBaseForPath:(id)path andTrackId:(id)anId;
+(id)createDownloadOperationWithDict:(id)dict andFolder:(id)folder;
+(void)findTransitionInSheed:(id)sheed andItsView:(id)view;
+(id)deviceName;
+(id)colorFromCode:(id)code;
+(void)getWebPhotoForImageView:(id)imageView withLink:(id)link andContentMode:(int)mode needCache:(BOOL)cache andFirstFord:(id)ford andSecondWord:(id)word;
+(void)generatePhotoForImageView:(id)imageView withFirstFord:(id)firstFord andSecondWord:(id)word andLink:(id)link andImage:(id)image andContentMode:(int)mode needCache:(BOOL)cache;
+(void)generatePostImageForImageView:(id)imageView andLink:(id)link needCache:(BOOL)cache;
+(void)getSavedPlaylistCounterForLabel:(id)label andPlaylistLink:(id)link;
+(void)getFileSizeForLabel:(id)label withFileURL:(id)fileURL;
+(void)getSecondsForLabel:(id)label withFileURL:(id)fileURL;
+(void)getBitrateForLabel_offline:(id)label_offline withFileURL:(id)fileURL;
+(void)getBitrateFromWeb:(id)web withDuration:(int)duration andLink:(id)link andId:(id)anId;
+(void)getBitrateForLabel:(id)label withDuration:(int)duration andLink:(id)link andId:(id)anId;
+(id)adjustedColor:(id)color;
+(id)MD5:(id)a5;
+(void)changePermissionsToNormal:(id)normal;
+(id)getErrorMessageByCode:(id)code andOriginalErrorMessage:(id)message;
+(id)clearFileName:(id)name;
+(id)urlForBookmark:(id)bookmark;
+(id)bookmarkForURL:(id)url;
+(id)colorizeImage:(id)image color:(id)color;
+(id)convertToReadableText:(id)readableText;
+(id)secondsToTime:(int)time;
+(id)getPhotosDir;
+(id)getDownloadedDatabaseDir;
+(id)getPlaylistsDir;
+(id)getArtworkDir;
+(id)getCacheDir;
+(id)getDownloadTracksDir;
+(id)getRootDir;
@end

__attribute__((visibility("hidden")))
@interface STKLocalFileDataSource : STKCoreFoundationDataSource {
	long long position;
	long long length;
	unsigned long audioFileTypeHint;
	NSString* filePath;
}
@property(copy) NSString* filePath;
+(unsigned long)audioFileTypeHintFromFileExtension:(id)fileExtension;
-(void).cxx_destruct;
-(id)description;
-(void)seekToOffset:(long long)offset;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(long long)length;
-(long long)position;
-(void)open;
-(void)close;
-(void)dealloc;
-(unsigned long)audioFileTypeHint;
-(id)initWithFilePath:(id)filePath;
@end

__attribute__((visibility("hidden")))
@interface LazyDocumentController : XXUnknownSuperclass {
}
-(void)dealloc;
-(void)statusBarOrientationWillChangeNotification:(id)statusBarOrientation;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface VKMessages : XXUnknownSuperclass {
	UITableView* contentTable;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	NSMutableArray* foundArray;
	int offset;
	UIAlertView* pleaseWaitAlert;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	NSString* _audio_send_id;
}
@property(retain, nonatomic) NSString* audio_send_id;
-(void).cxx_destruct;
-(void)sendTrackSuccess;
-(void)sendToPeer:(id)peer track:(id)track;
-(void)sendToPeerAlert:(id)peerAlert track:(id)track peerName:(id)name;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)resetCounters;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VKMyFriends : XXUnknownSuperclass <UITextFieldDelegate> {
	UITableView* contentTable;
	UISearchBar* searchBar;
	BOOL isLoadedScreen;
	BOOL isLoadingList;
	BOOL isReachedMax;
	BOOL isLoadingNotFromMyFriends;
	NSMutableArray* foundArray;
	NSMutableArray* foundArrayFiltered;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	UIRefreshControl* refreshControl;
	BOOL enableAds;
	AppodealLazyScreen* appodealStaticScreen;
	NSString* _user_id;
	NSString* _list_id;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* list_id;
@property(retain, nonatomic) NSString* user_id;
-(void).cxx_destruct;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(BOOL)isAllDigits:(id)digits;
-(void)openMyAudioWithDict:(id)dict;
-(void)getProfileById:(int)anId;
-(void)getIdByScreenName:(id)name;
-(void)findNotFromFriends:(id)friends;
-(void)findNotFromFriendsAlert;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)simpleUpdateScreen;
-(void)showFriendsSettings;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)loadList;
-(void)reloadMyFriends;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2BlockInvocation : XXUnknownSuperclass {
	NSMethodSignature* _methodSignature;
	id _block;
	NSMethodSignature* _blockSignature;
}
@property(readonly, copy, nonatomic) id block;
@property(readonly, assign, nonatomic) NSMethodSignature* methodSignature;
@property(readonly, assign, nonatomic) NSMethodSignature* blockSignature;
+(id)methodSignatureForBlock:(id)block;
+(id)methodSignatureForBlockSignature:(id)blockSignature;
+(id)typeSignatureForBlock:(id)block;
+(BOOL)isSignature:(id)signature compatibleWithSignature:(id)signature2;
-(void).cxx_destruct;
-(BOOL)invokeWithInvocation:(id)invocation returnValue:(out id*)value;
-(void)invokeWithInvocation:(id)invocation;
-(BOOL)invokeWithInvocation:(id)invocation returnValue:(out id*)value setOnInvocation:(BOOL)invocation3;
-(id)initWithBlock:(id)block methodSignature:(id)signature;
-(id)initWithBlock:(id)block;
-(id)initWithBlock:(id)block methodSignature:(id)signature blockSignature:(id)signature3;
@end

__attribute__((visibility("hidden")))
@interface VKSearchSettingsController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SingleTrackLyrics : XXUnknownSuperclass {
	UITextView* lyricsView;
	UIBarButtonItem* editItem;
	UIBarButtonItem* getItem;
	UIBarButtonItem* activityItem;
	UIBarButtonItem* sendItem;
	BOOL isEditing;
	id IVKeyboardWillShowObserver;
	id IVKeyboardWillHideObserver;
	BOOL appeared;
	BOOL _showEditButton;
	NSString* _lyrics;
	NSURL* _fileURL;
	NSDictionary* _vkDict;
}
@property(assign, nonatomic) BOOL showEditButton;
@property(retain, nonatomic) NSDictionary* vkDict;
@property(retain, nonatomic) NSURL* fileURL;
@property(retain, nonatomic) NSString* lyrics;
-(void).cxx_destruct;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(void)getLyricsFromSongPage:(id)songPage;
-(id)stringByRemovingEmptyDoubleLines:(id)lines;
-(id)stringByStrippingHTML:(id)html;
-(void)searchForLyricsWithTitle:(id)title;
-(void)getLyrics;
-(void)backToPlayerFromLyrics;
-(void)simpleUpdateScreen;
-(void)sendText;
-(void)postLyricsToVk;
-(void)writeNewLyricsToFile;
-(void)updateInsetsWithNewKeyboardRect:(CGRect)newKeyboardRect;
-(void)setLyricsEdit;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallGridBeatAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)createCirleWith:(float)with color:(id)color;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallPulseAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface AFQueryStringPair : XXUnknownSuperclass {
	id _field;
	id _value;
}
@property(retain, nonatomic) id value;
@property(retain, nonatomic) id field;
-(void).cxx_destruct;
-(id)URLEncodedStringValue;
-(id)initWithField:(id)field value:(id)value;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPRequestSerializer : XXUnknownSuperclass <AFURLRequestSerialization> {
	BOOL _allowsCellularAccess;
	BOOL _HTTPShouldHandleCookies;
	BOOL _HTTPShouldUsePipelining;
	unsigned _stringEncoding;
	unsigned _cachePolicy;
	unsigned _networkServiceType;
	NSSet* _HTTPMethodsEncodingParametersInURI;
	NSMutableSet* _mutableObservedChangedKeyPaths;
	NSMutableDictionary* _mutableHTTPRequestHeaders;
	unsigned _queryStringSerializationStyle;
	id _queryStringSerialization;
	double _timeoutInterval;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSSet* HTTPMethodsEncodingParametersInURI;
@property(readonly, assign, nonatomic) NSDictionary* HTTPRequestHeaders;
@property(assign, nonatomic) double timeoutInterval;
@property(assign, nonatomic) unsigned networkServiceType;
@property(assign, nonatomic) BOOL HTTPShouldUsePipelining;
@property(assign, nonatomic) BOOL HTTPShouldHandleCookies;
@property(assign, nonatomic) unsigned cachePolicy;
@property(assign, nonatomic) BOOL allowsCellularAccess;
@property(assign, nonatomic) unsigned stringEncoding;
@property(copy, nonatomic) id queryStringSerialization;
@property(assign, nonatomic) unsigned queryStringSerializationStyle;
@property(retain, nonatomic) NSMutableDictionary* mutableHTTPRequestHeaders;
@property(retain, nonatomic) NSMutableSet* mutableObservedChangedKeyPaths;
+(BOOL)supportsSecureCoding;
+(BOOL)automaticallyNotifiesObserversForKey:(id)key;
+(id)serializer;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
-(id)requestWithMultipartFormRequest:(id)multipartFormRequest writingStreamContentsToFile:(id)file completionHandler:(id)handler;
-(id)multipartFormRequestWithMethod:(id)method URLString:(id)string parameters:(id)parameters constructingBodyWithBlock:(id)block error:(id*)error;
-(id)multipartFormRequestWithMethod:(id)method URLString:(id)string parameters:(id)parameters constructingBodyWithBlock:(id)block;
-(id)requestWithMethod:(id)method URLString:(id)string parameters:(id)parameters error:(id*)error;
-(id)requestWithMethod:(id)method URLString:(id)string parameters:(id)parameters;
-(void)setQueryStringSerializationWithBlock:(id)block;
-(void)setQueryStringSerializationWithStyle:(unsigned)style;
-(void)clearAuthorizationHeader;
-(void)setAuthorizationHeaderFieldWithToken:(id)token;
-(void)setAuthorizationHeaderFieldWithUsername:(id)username password:(id)password;
-(id)valueForHTTPHeaderField:(id)httpheaderField;
-(void)setValue:(id)value forHTTPHeaderField:(id)httpheaderField;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFStreamingMultipartFormData : XXUnknownSuperclass <AFMultipartFormData> {
	NSMutableURLRequest* _request;
	unsigned _stringEncoding;
	NSString* _boundary;
	AFMultipartBodyStream* _bodyStream;
}
@property(retain, nonatomic) AFMultipartBodyStream* bodyStream;
@property(copy, nonatomic) NSString* boundary;
@property(assign, nonatomic) unsigned stringEncoding;
@property(copy, nonatomic) NSMutableURLRequest* request;
-(void).cxx_destruct;
-(id)requestByFinalizingMultipartFormData;
-(void)throttleBandwidthWithPacketSize:(unsigned)packetSize delay:(double)delay;
-(void)appendPartWithHeaders:(id)headers body:(id)body;
-(void)appendPartWithFormData:(id)formData name:(id)name;
-(void)appendPartWithFileData:(id)fileData name:(id)name fileName:(id)name3 mimeType:(id)type;
-(void)appendPartWithInputStream:(id)inputStream name:(id)name fileName:(id)name3 length:(long long)length mimeType:(id)type;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name fileName:(id)name3 mimeType:(id)type error:(id*)error;
-(BOOL)appendPartWithFileURL:(id)fileURL name:(id)name error:(id*)error;
-(id)initWithURLRequest:(id)urlrequest stringEncoding:(unsigned)encoding;
@end

__attribute__((visibility("hidden")))
@interface AFMultipartBodyStream : XXUnknownSuperclass <NSCopying, NSStreamDelegate> {
	id<NSStreamDelegate> delegate;
	unsigned streamStatus;
	NSError* streamError;
	unsigned _numberOfBytesInPacket;
	NSInputStream* _inputStream;
	unsigned _stringEncoding;
	NSMutableArray* _HTTPBodyParts;
	NSEnumerator* _HTTPBodyPartEnumerator;
	AFHTTPBodyPart* _currentHTTPBodyPart;
	NSOutputStream* _outputStream;
	NSMutableData* _buffer;
	double _delay;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isEmpty) BOOL empty;
@property(readonly, assign, nonatomic) unsigned long long contentLength;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(assign, nonatomic) double delay;
@property(assign, nonatomic) unsigned numberOfBytesInPacket;
@property(retain, nonatomic) NSMutableData* buffer;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) AFHTTPBodyPart* currentHTTPBodyPart;
@property(retain, nonatomic) NSEnumerator* HTTPBodyPartEnumerator;
@property(retain, nonatomic) NSMutableArray* HTTPBodyParts;
@property(assign, nonatomic) unsigned stringEncoding;
-(void)setStreamError:(id)error;
-(id)streamError;
-(void)setStreamStatus:(unsigned)status;
-(unsigned)streamStatus;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)_setCFClientFlags:(unsigned long)flags callback:(/*function-pointer*/ void*)callback context:(XXStruct_4pnlqD*)context;
-(void)_unscheduleFromCFRunLoop:(CFRunLoopRef)cfrunLoop forMode:(CFStringRef)mode;
-(void)_scheduleInCFRunLoop:(CFRunLoopRef)cfrunLoop forMode:(CFStringRef)mode;
-(void)removeFromRunLoop:(id)runLoop forMode:(id)mode;
-(void)scheduleInRunLoop:(id)runLoop forMode:(id)mode;
-(BOOL)setProperty:(id)property forKey:(id)key;
-(id)propertyForKey:(id)key;
-(void)close;
-(void)open;
-(BOOL)hasBytesAvailable;
-(BOOL)getBuffer:(char**)buffer length:(unsigned*)length;
-(int)read:(char*)read maxLength:(unsigned)length;
-(void)appendHTTPBodyPart:(id)part;
-(void)setInitialAndFinalBoundaries;
-(id)initWithStringEncoding:(unsigned)stringEncoding;
@end

__attribute__((visibility("hidden")))
@interface AFHTTPBodyPart : XXUnknownSuperclass <NSCopying> {
	int _phase;
	NSInputStream* _inputStream;
	unsigned long long _phaseReadOffset;
	BOOL _hasInitialBoundary;
	BOOL _hasFinalBoundary;
	unsigned _stringEncoding;
	NSDictionary* _headers;
	NSString* _boundary;
	id _body;
	unsigned long long _bodyContentLength;
}
@property(readonly, assign, nonatomic) unsigned long long contentLength;
@property(readonly, assign, nonatomic, getter=hasBytesAvailable) BOOL bytesAvailable;
@property(assign, nonatomic) BOOL hasFinalBoundary;
@property(assign, nonatomic) BOOL hasInitialBoundary;
@property(retain, nonatomic) NSInputStream* inputStream;
@property(assign, nonatomic) unsigned long long bodyContentLength;
@property(retain, nonatomic) id body;
@property(copy, nonatomic) NSString* boundary;
@property(retain, nonatomic) NSDictionary* headers;
@property(assign, nonatomic) unsigned stringEncoding;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)transitionToNextPhase;
-(int)readData:(id)data intoBuffer:(char*)buffer maxLength:(unsigned)length;
-(int)read:(char*)read maxLength:(unsigned)length;
-(id)stringForHeaders;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AFJSONRequestSerializer : AFHTTPRequestSerializer {
	unsigned _writingOptions;
}
@property(assign, nonatomic) unsigned writingOptions;
+(id)serializerWithWritingOptions:(unsigned)writingOptions;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface AFPropertyListRequestSerializer : AFHTTPRequestSerializer {
	unsigned _format;
	unsigned _writeOptions;
}
@property(assign, nonatomic) unsigned writeOptions;
@property(assign, nonatomic) unsigned format;
+(id)serializerWithFormat:(unsigned)format writeOptions:(unsigned)options;
+(id)serializer;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)requestBySerializingRequest:(id)request withParameters:(id)parameters error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface FMDatabasePool : XXUnknownSuperclass {
	NSString* _path;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSMutableArray* _databaseInPool;
	NSMutableArray* _databaseOutPool;
	id _delegate;
	unsigned _maximumNumberOfDatabasesToCreate;
	int _openFlags;
	NSString* _vfsName;
}
@property(copy) NSString* vfsName;
@property(readonly, assign) int openFlags;
@property(assign) unsigned maximumNumberOfDatabasesToCreate;
@property(assign) id delegate;
@property(retain) NSString* path;
+(Class)databaseClass;
+(id)databasePoolWithPath:(id)path flags:(int)flags;
+(id)databasePoolWithPath:(id)path;
-(void).cxx_destruct;
-(id)inSavePoint:(id)savePoint;
-(void)inTransaction:(id)transaction;
-(void)inDeferredTransaction:(id)deferredTransaction;
-(void)beginTransaction:(BOOL)transaction withBlock:(id)block;
-(void)inDatabase:(id)database;
-(void)releaseAllDatabases;
-(unsigned)countOfOpenDatabases;
-(unsigned)countOfCheckedOutDatabases;
-(unsigned)countOfCheckedInDatabases;
-(id)db;
-(void)pushDatabaseBackInPool:(id)pool;
-(void)executeLocked:(id)locked;
-(void)dealloc;
-(id)init;
-(id)initWithPath:(id)path;
-(id)initWithPath:(id)path flags:(int)flags;
-(id)initWithPath:(id)path flags:(int)flags vfs:(id)vfs;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallRotateAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface CurrentPlaylist : XXUnknownSuperclass <FMMoveTableViewDataSource, FMMoveTableViewDelegate> {
	UITableView* contentTable;
	UISearchBar* searchBar;
	UIAlertView* pleaseWaitAlert;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)addTracksToPlaylist:(id)playlist where:(id)where;
-(void)addTracks;
-(void)moveTableView:(id)view moveRowFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)moveTableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(id)moveTableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)createPlaylistWithName:(id)name;
-(void)savePlaylistAlert;
-(void)invertPlaylist;
-(void)clearPlaylist;
-(void)setEditModeOn;
-(void)simpleUpdateList;
-(void)simpleUpdateScreen;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)scrollCurrentPlaylistToCurrentTrack;
-(void)coolTableUpdate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)isRowPresentInTableView:(int)tableView withSection:(int)section;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface DGActivityIndicatorBallClipRotateMultipleAnimation : XXUnknownSuperclass <DGActivityIndicatorAnimationProtocol> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)createAnimationInDuration:(float)duration withTimingFunction:(id)timingFunction reverse:(BOOL)reverse;
-(void)setupAnimationInLayer:(id)layer withSize:(CGSize)size tintColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface STKFrameFilterEntry : XXUnknownSuperclass {
	NSString* name;
	id filter;
}
@property(readonly, assign) id filter;
@property(readonly, assign) NSString* name;
-(void).cxx_destruct;
-(id)initWithFilter:(id)filter andName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface STKAudioPlayer : XXUnknownSuperclass <STKDataSourceDelegate> {
	BOOL muted;
	char* readBuffer;
	int readBufferSize;
	int internalState;
	float volume;
	float peakPowerDb[2];
	float averagePowerDb[2];
	BOOL meteringEnabled;
	BOOL equalizerOn;
	BOOL equalizerEnabled;
	XXStruct_AY4tKB options;
	NSMutableArray* converterNodes;
	OpaqueAUGraph* audioGraph;
	long eqNode;
	long mixerNode;
	long outputNode;
	long eqInputNode;
	long eqOutputNode;
	long mixerInputNode;
	long mixerOutputNode;
	OpaqueAudioComponentInstance* eqUnit;
	OpaqueAudioComponentInstance* mixerUnit;
	OpaqueAudioComponentInstance* outputUnit;
	unsigned long eqBandCount;
	int waitingForDataAfterSeekFrameCount;
	unsigned long framesRequiredToStartPlaying;
	unsigned long framesRequiredToPlayAfterRebuffering;
	unsigned long framesRequiredBeforeWaitingForDataAfterSeekBecomesPlaying;
	STKQueueEntry* currentlyPlayingEntry;
	STKQueueEntry* currentlyReadingEntry;
	NSMutableArray* upcomingQueue;
	NSMutableArray* bufferingQueue;
	int pcmBufferSpinLock;
	int internalStateLock;
	unsigned long pcmBufferTotalFrameCount;
	unsigned long pcmBufferFrameStartIndex;
	unsigned long pcmBufferUsedFrameCount;
	unsigned long pcmBufferFrameSizeInBytes;
	AudioBuffer* pcmAudioBuffer;
	AudioBufferList pcmAudioBufferList;
	OpaqueAudioConverter* audioConverterRef;
	AudioStreamBasicDescription audioConverterAudioStreamBasicDescription;
	BOOL deallocating;
	BOOL discontinuous;
	NSArray* frameFilters;
	NSThread* playbackThread;
	NSRunLoop* playbackThreadRunLoop;
	OpaqueAudioFileStreamID* audioFileStream;
	NSConditionLock* threadStartedLock;
	NSConditionLock* threadFinishedCondLock;
	OpaqueAudioFileID* recordAudioFileId;
	unsigned long recordFilePacketPosition;
	OpaqueAudioConverter* recordAudioConverterRef;
	unsigned long recordOutputBufferSize;
	char* recordOutputBuffer;
	unsigned long recordPacketsPerBuffer;
	unsigned long recordPacketSize;
	AudioStreamPacketDescription* recordPacketDescriptions;
	id stopBackBackgroundTaskBlock;
	int seekVersion;
	int seekLock;
	int currentEntryReferencesLock;
	opaque_pthread_mutex_t playerMutex;
	opaque_pthread_cond_t playerThreadReadyCondition;
	opaque_pthread_mutex_t mainThreadSyncCallMutex;
	opaque_pthread_cond_t mainThreadSyncCallReadyCondition;
	BOOL waiting;
	double requestedSeekTime;
	BOOL disposeWasRequested;
	BOOL seekToTimeWasRequested;
	int stopReason;
	BOOL _isFadingVolume;
	int _state;
	id<STKAudioPlayerDelegate> _delegate;
	int _stateBeforePaused;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign) BOOL isFadingVolume;
@property(assign) id<STKAudioPlayerDelegate> delegate;
@property(readonly, assign) int stopReason;
@property(readonly, assign) XXStruct_AY4tKB options;
@property(assign) int state;
@property(readonly, assign) NSObject* mostRecentlyQueuedStillPendingItem;
@property(readonly, assign) unsigned pendingQueueCount;
@property(readonly, assign) NSArray* pendingQueue;
@property(readonly, assign) NSArray* frameFilters;
@property(assign) BOOL equalizerEnabled;
@property(assign) BOOL meteringEnabled;
@property(readonly, assign) double progress;
@property(readonly, assign) double duration;
@property(assign) BOOL muted;
@property(assign) float volume;
@property(assign) int stateBeforePaused;
@property(assign) int internalState;
+(id)dataSourceFromURL:(id)url;
+(void)initialize;
-(void).cxx_destruct;
-(void)addFrameFilter:(id)filter withName:(id)name afterFilterWithName:(id)name3;
-(void)addFrameFilterWithName:(id)name afterFilterWithName:(id)name2 block:(id)block;
-(void)removeFrameFilterWithName:(id)name;
-(void)appendFrameFilterWithName:(id)name block:(id)block;
-(float)averagePowerInDecibelsForChannel:(unsigned)channel;
-(float)peakPowerInDecibelsForChannel:(unsigned)channel;
-(void)handleRecordingOfAudioPackets:(unsigned long)audioPackets audioBuffer:(AudioBuffer*)buffer;
-(void)handleAudioPackets:(const void*)packets numberBytes:(unsigned long)bytes numberPackets:(unsigned long)packets3 packetDescriptions:(AudioStreamPacketDescription*)descriptions;
-(void)stopAudioUnitWithReason:(int)reason;
-(BOOL)startAudioGraph;
-(BOOL)audioGraphIsRunning;
-(void)connectGraph;
-(void)createAudioGraph;
-(void)setOutputCallbackForFirstNode:(long)firstNode firstUnit:(OpaqueAudioComponentInstance*)unit;
-(void)connectNodes:(long)nodes desNode:(long)node srcUnit:(OpaqueAudioComponentInstance*)unit desUnit:(OpaqueAudioComponentInstance*)unit4;
-(long)createConverterNode:(AudioStreamBasicDescription)node desFormat:(AudioStreamBasicDescription)format;
-(void)setGain:(float)gain forEqualizerBand:(int)equalizerBand;
-(void)createEqUnit;
-(void)createMixerUnit;
-(void)createOutputUnit;
-(void)createAudioConverter:(AudioStreamBasicDescription*)converter;
-(void)destroyAudioConverter;
-(id)currentlyPlayingQueueItemId;
-(void)dispose;
-(void)closeRecordAudioFile;
-(void)unmute;
-(void)mute;
-(void)stopThread;
-(void)stop;
-(void)resetPcmBuffers;
-(void)resume;
-(void)pause;
-(void)dataSourceEof:(id)eof;
-(void)dataSourceErrorOccured:(id)occured;
-(void)dataSourceDataAvailable:(id)available;
-(void)processSeekToTime;
-(void)startInternal;
-(BOOL)processRunloop;
-(void)requeueBufferingEntries;
-(void)playbackThreadQueueMainThreadSyncBlock:(id)block;
-(void)dispatchSyncOnMainThread:(id)thread;
-(void)processFinishPlayingIfAnyAndPlayingNext:(id)next withNext:(id)next2;
-(void)setCurrentlyReadingEntry:(id)entry andStartPlaying:(BOOL)playing clearQueue:(BOOL)queue;
-(void)setCurrentlyReadingEntry:(id)entry andStartPlaying:(BOOL)playing;
-(void)audioQueueFinishedPlaying:(id)playing;
-(void)createPlaybackThread;
-(void)seekToTime:(double)time;
-(void)wakeupPlaybackThread;
-(BOOL)invokeOnPlaybackThread:(id)thread;
-(void)unexpectedError:(int)error;
-(double)currentTimeInFrames;
-(void)handlePropertyChangeForFileStream:(OpaqueAudioFileStreamID*)fileStream fileStreamPropertyID:(unsigned long)anId ioFlags:(unsigned*)flags;
-(void)queueDataSource:(id)source withQueueItemId:(id)queueItemId;
-(void)queueURL:(id)url withQueueItemId:(id)queueItemId;
-(void)queueURL:(id)url;
-(void)queue:(id)queue withQueueItemId:(id)queueItemId;
-(void)queue:(id)queue;
-(void)setDataSource:(id)source withQueueItemId:(id)queueItemId;
-(void)playDataSource:(id)source withQueueItemID:(id)queueItemID;
-(void)playDataSource:(id)source;
-(void)playURL:(id)url withQueueItemID:(id)queueItemID;
-(void)playURL:(id)url;
-(void)play:(id)play withQueueItemID:(id)queueItemID;
-(void)play:(id)play;
-(void)clearQueue;
-(void)stopSystemBackgroundTask;
-(void)startSystemBackgroundTask;
-(void)dealloc;
-(void)destroyAudioResources;
-(id)initWithOptions:(XXStruct_AY4tKB)options;
-(id)init;
-(void)logInfo:(id)info;
-(void)setInternalState:(int)state ifInState:(id)state2;
@end

__attribute__((visibility("hidden")))
@interface VKPopularGenresController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
	id _genreSelectedBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id genreSelectedBlock;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface CaptchaController : XXUnknownSuperclass {
	UIImageView* captchaImage;
	UITextField* captchaField;
	id IVKeyboardWillShowObserver;
	id IVKeyboardWillHideObserver;
	NSLayoutConstraint* bottomGuideConstraint;
	NSLayoutConstraint* topGuideConstraint;
	UIButton* cancelButton;
	UIButton* confirmButton;
	NSString* _captchaImageLink;
	id _captchaValueBlock;
}
@property(copy, nonatomic) id captchaValueBlock;
@property(retain, nonatomic) NSString* captchaImageLink;
-(void).cxx_destruct;
-(void)simpleUpdateScreen;
-(void)updateInsetsWithNewKeyboardRect:(CGRect)newKeyboardRect andDuration:(float)duration;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillLayoutSubviews;
-(void)dealloc;
-(void)cancel;
-(void)confirm;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface VisualizerView : XXUnknownSuperclass {
	CAEmitterLayer* emitterLayer;
	SCSiriWaveformView* waveformView;
	CADisplayLink* dpLink;
	int _visualizerType;
}
@property(assign, nonatomic) int visualizerType;
+(Class)layerClass;
-(void).cxx_destruct;
-(void)update;
-(void)layoutSubviews;
-(void)buildView;
-(void)dealloc;
-(id)initWithVisualizerType:(int)visualizerType;
@end

__attribute__((visibility("hidden")))
@interface VKMessagesTrackPickerController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
	id _trackSelectedBlock;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id trackSelectedBlock;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface A2DynamicMFMailComposeViewControllerDelegate : A2DynamicDelegate <MFMailComposeViewControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

__attribute__((visibility("hidden")))
@interface PlaylistsSingleEdit : XXUnknownSuperclass <UIImagePickerControllerDelegate, UINavigationControllerDelegate, FMMoveTableViewDataSource, FMMoveTableViewDelegate> {
	UITableView* contentTable;
	UISearchBar* searchBar;
	UILabel* editLabel;
	UIBarButtonItem* coverItem;
	BOOL needUpdateCover;
	UIImage* newCoverImage;
	DSTTableIndicator* tableMagicIndicator;
	UIView* verticalScrollbar;
	NSString* _playlist_link;
	NSMutableArray* _playlistArray;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableArray* playlistArray;
@property(retain, nonatomic) NSString* playlist_link;
-(void).cxx_destruct;
-(void)moveTableView:(id)view moveRowFromIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)moveTableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(id)moveTableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(id)resizeImage:(id)image newSize:(CGSize)size;
-(id)fixOrientation:(id)orientation;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)addTracksToPlaylist:(id)playlist where:(id)where;
-(void)addTracks;
-(void)simpleUpdateScreen;
-(void)deleteCover;
-(void)selectCover;
-(void)albumCoverMenu;
-(void)setEditModeOff;
-(void)setEditModeOn;
-(void)clearPlaylist;
-(void)setNewTitle:(id)title;
-(void)renameAlert;
-(void)renameThisPlaylist;
-(void)resaveThisPlaylist;
-(void)updateTablesScrollsToTopPropertyiOS7;
-(void)simpleUpdateList;
-(void)coolTableUpdate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AFRefreshControlNotificationObserver : XXUnknownSuperclass {
	UIRefreshControl* _refreshControl;
}
@property(readonly, assign, nonatomic) __weak UIRefreshControl* refreshControl;
-(void).cxx_destruct;
-(void)dealloc;
-(void)af_endRefreshing;
-(void)af_beginRefreshing;
-(void)setRefreshingWithStateOfOperation:(id)operation;
-(void)setRefreshingWithStateOfTask:(id)task;
-(id)initWithActivityRefreshControl:(id)activityRefreshControl;
@end

__attribute__((visibility("hidden")))
@interface LazyImagePickerController : XXUnknownSuperclass {
}
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface FMDatabaseQueue : XXUnknownSuperclass {
	NSString* _path;
	NSObject<OS_dispatch_queue>* _queue;
	FMDatabase* _db;
	int _openFlags;
	NSString* _vfsName;
}
@property(copy) NSString* vfsName;
@property(readonly, assign) int openFlags;
@property(retain) NSString* path;
+(Class)databaseClass;
+(id)databaseQueueWithPath:(id)path flags:(int)flags;
+(id)databaseQueueWithPath:(id)path;
-(void).cxx_destruct;
-(id)inSavePoint:(id)savePoint;
-(void)inTransaction:(id)transaction;
-(void)inDeferredTransaction:(id)deferredTransaction;
-(void)beginTransaction:(BOOL)transaction withBlock:(id)block;
-(void)inDatabase:(id)database;
-(id)database;
-(void)close;
-(void)dealloc;
-(id)init;
-(id)initWithPath:(id)path;
-(id)initWithPath:(id)path flags:(int)flags;
-(id)initWithPath:(id)path flags:(int)flags vfs:(id)vfs;
@end

__attribute__((visibility("hidden")))
@interface ActivationScreenController : XXUnknownSuperclass <UIGestureRecognizerDelegate> {
	LazyNavigationController* navController;
	UITapGestureRecognizer* tapBehind;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleTapBehind:(id)behind;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface CoreFoundationDataSourceClientInfo : XXUnknownSuperclass {
	CFReadStreamRef readStreamRef;
	STKCoreFoundationDataSource* datasource;
}
@property(retain) STKCoreFoundationDataSource* datasource;
@property(assign) CFReadStreamRef readStreamRef;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface STKCoreFoundationDataSource : STKDataSource {
	CFReadStreamRef stream;
	BOOL isInErrorState;
	NSRunLoop* eventsRunLoop;
}
@property(readonly, assign) BOOL isInErrorState;
-(void).cxx_destruct;
-(void)openCompleted;
-(long)status;
-(BOOL)hasBytesAvailable;
-(BOOL)registerForEvents:(id)events;
-(BOOL)reregisterForEvents;
-(void)unregisterForEvents;
-(int)readIntoBuffer:(char*)buffer withSize:(int)size;
-(void)seekToOffset:(long long)offset;
-(void)open;
-(void)close;
-(void)dealloc;
-(void)errorOccured;
-(void)eof;
-(void)dataAvailable;
@end

@interface GADMRewardBasedVideoAdNetworkConnector : XXUnknownSuperclass <GADMRewardBasedVideoAdNetworkConnector, GADMediationAdRequestInternal> {
	id<GADMRewardBasedVideoAdNetworkAdapter> _adapter;
	NSDictionary* _networkData;
	BOOL _isLocationShared;
	GADMConfig* _mediationConfig;
	GADMAdNetworkConfig* _adNetworkConfig;
	GADAd* _ad;
	id<GADMRewardBasedVideoAdConnectorDelegate> _delegate;
	GADRequest* _request;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) GADRequest* request;
@property(assign, nonatomic) __weak id<GADMRewardBasedVideoAdConnectorDelegate> delegate;
@property(retain, nonatomic) GADAd* ad;
@property(retain, nonatomic) GADMAdNetworkConfig* adNetworkConfig;
@property(retain, nonatomic) GADMConfig* mediationConfig;
-(void).cxx_destruct;
-(id)userKeywords;
-(id)userLocationDescription;
-(float)userLocationAccuracyInMeters;
-(float)userLongitude;
-(float)userLatitude;
-(id)userLocation;
-(BOOL)userHasLocation;
-(id)userBirthday;
-(int)userGender;
-(id)childDirectedTreatment;
-(id)networkExtras;
-(BOOL)testMode;
-(id)credentials;
-(id)publisherId;
-(void)adapterWillLeaveApplication:(id)adapter;
-(void)adapterDidCloseRewardBasedVideoAd:(id)adapter;
-(void)adapterDidStartPlayingRewardBasedVideoAd:(id)adapter;
-(void)adapterDidOpenRewardBasedVideoAd:(id)adapter;
-(void)adapter:(id)adapter didRewardUserWithReward:(id)reward;
-(void)adapterDidGetAdClick:(id)adapter;
-(void)adapter:(id)adapter didFailToLoadRewardBasedVideoAdwithError:(id)loadRewardBasedVideoAdwithError;
-(void)adapterDidReceiveRewardBasedVideoAd:(id)adapter;
-(void)adapter:(id)adapter didFailToSetUpRewardBasedVideoAdWithError:(id)error;
-(void)adapterDidSetUpRewardBasedVideoAd:(id)adapter;
-(id)userRequestAgent;
-(id)currentAdapterName;
-(id)adapterNames;
-(id)extras;
-(id)inlineAd;
-(void)pingFillURLs;
-(void)pingRewardedUserURLs;
-(void)pingVideoStartPlayingURLs;
-(void)pingImpressionURLs;
-(void)pingClickURLs;
-(void)pingURLs:(id)urls defaultTemplate:(id)aTemplate;
-(void)presentRewardBasedVideoAdFromRootViewController:(id)rootViewController;
-(void)requestRewardBasedVideoAd;
-(void)setUpAdapter;
-(void)askAdapterToStopBeingDelegate;
@end

@interface GADDefaultInAppPurchaseFlow : XXUnknownSuperclass <SKPaymentTransactionObserver, GADInAppPurchaseDelegate> {
	NSMutableSet* _activeInAppPurchases;
	id<GADDefaultInAppPurchaseDelegate> _defaultInAppPurchaseDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isDefaultPurchaseFlowEnabled) BOOL defaultPurchaseFlowEnabled;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)didReceiveInAppPurchase:(id)appPurchase;
-(void)notifyUserOfUnavailableProduct;
-(void)purchaseProduct:(id)product inAppPurchase:(id)appPurchase;
-(void)failedTransaction:(id)transaction;
-(void)completeTransaction:(id)transaction;
-(id)dequeueInAppPurchaseForTransaction:(id)transaction;
-(void)enqueueInAppPurchase:(id)appPurchase;
-(void)disableDefaultPurchaseFlow;
-(void)enableDefaultPurchaseFlowWithDelegate:(id)delegate;
-(id)init;
@end

@interface GAD_GTMStringEncoding : XXUnknownSuperclass {
	NSData* charMapData_;
	char* charMap_;
	int reverseCharMap_[128];
	int shift_;
	int mask_;
	BOOL doPad_;
	BOOL paddingChar_;
	int padLen_;
}
+(id)stringEncodingWithString:(id)string;
+(id)rfc4648Base64WebsafeStringEncoding;
+(id)rfc4648Base64StringEncoding;
+(id)crockfordBase32StringEncoding;
+(id)rfc4648Base32HexStringEncoding;
+(id)rfc4648Base32StringEncoding;
+(id)hexStringEncoding;
+(id)binaryStringEncoding;
-(void).cxx_destruct;
-(id)stringByDecoding:(id)decoding;
-(id)decode:(id)decode;
-(id)encodeString:(id)string;
-(id)encode:(id)encode;
-(void)setPaddingChar:(BOOL)aChar;
-(void)setDoPad:(BOOL)pad;
-(BOOL)doPad;
-(void)ignoreCharacters:(id)characters;
-(void)addDecodeSynonyms:(id)synonyms;
-(id)description;
-(id)initWithString:(id)string;
@end

@interface GADSKStoreProductViewControllerDelegate : XXUnknownSuperclass <SKStoreProductViewControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)sharedInstance;
-(void)productViewControllerDidFinish:(id)productViewController;
@end

@interface GADActiveViewMonitor : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* _lockQueue;
	GADScheduler* _updateViewBoundsScheduler;
	id<GADActiveViewMonitorDelegate> _delegate;
	CGRect _monitoredViewVisibleBounds;
	BOOL _monitoredViewVisible;
	UIView* _monitoredView;
	NSString* _adFormat;
	NSDictionary* _activeViewConfiguration;
}
@property(readonly, assign, nonatomic) __weak UIView* monitoredView;
@property(readonly, assign) BOOL monitoredViewVisible;
@property(assign) CGRect monitoredViewVisibleBounds;
@property(assign) __weak id<GADActiveViewMonitorDelegate> delegate;
-(void).cxx_destruct;
-(void)updateViewBounds;
-(void)stopMonitoring;
-(id)activeViewStateWithUnloadedFlag:(BOOL)unloadedFlag;
-(void)sample;
-(void)startMonitoring;
-(void)dealloc;
-(id)init;
-(id)initWithView:(id)view adFormat:(id)format activeViewConfiguration:(id)configuration;
@end

@interface GADMAdNetworkConnectorNativeAd : GADMAdNetworkConnector {
	GADAdLoaderConfiguration* _adLoaderConfiguration;
}
@property(retain, nonatomic) GADAdLoaderConfiguration* adLoaderConfiguration;
-(void).cxx_destruct;
-(void)logIncorrectAdapterNotificationImplementation;
-(void)adapterDidDismissInterstitial:(id)adapter;
-(void)adapterWillDismissInterstitial:(id)adapter;
-(void)adapterWillPresentInterstitial:(id)adapter;
-(void)adapterDidDismissFullScreenModal:(id)adapter;
-(void)adapterWillDismissFullScreenModal:(id)adapter;
-(void)adapterWillPresentFullScreenModal:(id)adapter;
-(void)adapterWillLeaveApplication:(id)adapter;
-(void)adapterDidGetAdClick:(id)adapter;
-(void)adapter:(id)adapter didFailAd:(id)ad;
-(void)adapter:(id)adapter didReceiveMediatedNativeAd:(id)ad;
-(void)getAdFromAdapterWithType:(id)type;
@end

@interface GADAdLoaderConfiguration : XXUnknownSuperclass {
	NSSet* _adTypeClasses;
	NSSet* _adTypes;
	NSDictionary* _options;
}
@property(readonly, copy, nonatomic) NSDictionary* options;
@property(readonly, copy, nonatomic) NSSet* adTypes;
@property(readonly, copy, nonatomic) NSSet* adTypeClasses;
-(void).cxx_destruct;
-(id)initWithAdTypes:(id)adTypes options:(id)options;
@end

@interface GADActiveViewGMSGHandler : GADGMSGHandler {
	id<GADActiveViewGMSGHandlerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<GADActiveViewGMSGHandlerDelegate> delegate;
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)adView:(id)view didReceiveActiveViewUntrackActiveViewNotification:(id)notification;
-(void)adView:(id)view didReceiveActiveViewTrackActiveViewNotification:(id)notification;
-(void)adView:(id)view didReceiveActiveViewVisibilityChangedNotification:(id)notification;
@end

@interface GADCachedFile : XXUnknownSuperclass {
	NSMutableData* _receivedData;
	NSString* _filePath;
	id<GADCachedFileDelegate> _delegate;
	NSURL* _sourceURL;
	unsigned _cachePolicy;
	NSURL* _HTTPDestinationURL;
	int _HTTPStatusCode;
	NSDictionary* _HTTPHeaders;
	NSURLConnection* _connection;
	NSString* _receivedModificationDate;
}
@property(copy, nonatomic) NSString* receivedModificationDate;
@property(retain, nonatomic) NSURLConnection* connection;
@property(readonly, copy, nonatomic) NSDictionary* HTTPHeaders;
@property(readonly, assign, nonatomic) int HTTPStatusCode;
@property(retain, nonatomic) NSURL* HTTPDestinationURL;
@property(readonly, copy, nonatomic) NSString* fileModificationRFC1123DateString;
@property(readonly, assign, nonatomic) BOOL fileExists;
@property(readonly, copy, nonatomic) NSString* filePath;
@property(readonly, copy, nonatomic) NSString* contentAsString;
@property(assign, nonatomic) unsigned cachePolicy;
@property(retain, nonatomic) NSURL* sourceURL;
@property(assign, nonatomic) __weak id<GADCachedFileDelegate> delegate;
+(id)headersForResponse:(id)response;
+(id)formatterForHTTPDate;
-(void).cxx_destruct;
-(void)saveHeadersFromResponse:(id)response;
-(void)cleanUpConnection;
-(void)saveDataToFile;
-(void)processResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)invalidate;
-(void)cancel;
-(void)validateWithCacheBuster;
-(void)validate;
-(void)beginFetchWithCacheBuster:(BOOL)cacheBuster;
-(id)description;
-(void)dealloc;
-(id)init;
-(id)initWithURL:(id)url;
@end

@interface GADMAdNetworkAdapter : XXUnknownSuperclass {
}
+(BOOL)classImplementsCurrentAdapterAPI:(Class)api;
+(BOOL)classIsAdapterClass:(Class)aClass;
+(id)availableAdapterNamesInSet:(id)set;
@end

@interface GADTiming : XXUnknownSuperclass <NSCopying> {
	NSObject<OS_dispatch_queue>* _lockQueue;
	BOOL _explicitEnd;
	NSString* _category;
	unsigned long long _startTimestamp;
	unsigned long long _endTimestamp;
}
@property(assign, nonatomic) unsigned long long endTimestamp;
@property(assign, nonatomic) unsigned long long startTimestamp;
@property(assign, nonatomic) BOOL explicitEnd;
@property(copy, nonatomic) NSString* category;
-(void).cxx_destruct;
-(BOOL)isActive;
-(id)elapsedMillisecondsString;
-(unsigned)elapsedMilliseconds;
-(void)reset;
-(void)end;
-(void)start;
-(id)dictionaryRepresentation;
-(id)copyWithZone:(NSZone*)zone;
-(id)description;
-(id)init;
-(id)initWithDictionaryRepresentation:(id)dictionaryRepresentation;
-(id)initWithCategory:(id)category;
@end

@interface GADPushTransitionView : XXUnknownSuperclass {
	NSArray* _views;
	UIView* _clippingView;
	UIView* _currentView;
	unsigned _currentViewIndex;
	double _presentationDuration;
	double _animationDuration;
	int _animationGroupIdentifier;
}
@property(readonly, assign, nonatomic) int animationGroupIdentifier;
-(void).cxx_destruct;
-(void)animate;
-(void)dispatchAnimation;
-(void)setCurrentView:(id)view;
-(void)setPresentationDuration:(double)duration;
-(void)setAnimationDuration:(double)duration;
-(void)setViews:(id)views;
-(void)commonInit;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GADTimingManager : XXUnknownSuperclass {
	NSString* _identifier;
	NSString* _userDefaultsKey;
	NSMutableDictionary* _timings;
	NSObject<OS_dispatch_queue>* _savingQueue;
}
@property(readonly, copy, nonatomic) NSArray* categories;
@property(readonly, copy, nonatomic) NSArray* timings;
-(void).cxx_destruct;
-(void)removeAllTimings;
-(void)removeTimingsForCategories:(id)categories;
-(void)removeTimingForCategory:(id)category;
-(void)removeTiming:(id)timing;
-(id)timingForCategory:(id)category;
-(id)addTimingWithCategory:(id)category;
-(void)addTiming:(id)timing;
-(void)setIdentifier:(id)identifier;
-(void)savePersistentTimings;
-(void)loadPersistentTimings;
-(void)applicationWillTerminate:(id)application;
-(void)dealloc;
-(id)init;
@end

@interface GADRequestError : XXUnknownSuperclass {
}
+(id)errorWithCode:(int)code underlyingError:(id)error;
+(id)errorWithCode:(int)code customMessage:(id)message;
+(id)errorWithCode:(int)code;
+(id)errorWithCode:(int)code request:(id)request;
+(id)errorWithCode:(int)code request:(id)request HTTPStatusCode:(int)code3;
+(id)errorWithCode:(int)code request:(id)request HTTPStatusCode:(int)code3 customMessage:(id)message;
+(id)errorWithCode:(int)code request:(id)request HTTPStatusCode:(int)code3 customMessage:(id)message underlyingError:(id)error;
-(id)error;
-(id)initWithDomain:(id)domain code:(int)code userInfo:(id)info;
-(id)initWithCode:(int)code request:(id)request HTTPStatusCode:(int)code3 customMessage:(id)message underlyingError:(id)error;
@end

@interface GADProductsRequest : XXUnknownSuperclass <SKProductsRequestDelegate> {
	SKProductsRequest* _productsRequest;
	id _completionHandler;
	NSObject<OS_dispatch_queue>* _queue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(void)requestProductsWithProductIdentifiers:(id)productIdentifiers queue:(id)queue completionHandler:(id)handler;
-(void).cxx_destruct;
-(void)request:(id)request didFailWithError:(id)error;
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
-(void)requestWithQueue:(id)queue completionHandler:(id)handler;
-(id)initWithProductIdentifiers:(id)productIdentifiers;
@end

@interface GADAdPreprocessor : XXUnknownSuperclass <GADSlotAdLoadDelegate> {
	GADSlot* _slot;
	id _completionHandler;
	NSString* _nativeAdJSON;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)slotFinishedLoadingAdContent:(id)content;
-(void)slot:(id)slot didFailToLoadAdContentWithError:(id)error;
-(void)callAndClearCompletionHandlerWithAdConfiguration:(id)adConfiguration slot:(id)slot error:(id)error;
-(id)environmentJSONString;
-(void)handlePreprocessorNotification:(id)notification;
-(void)handleJavaScriptLoadedNotification:(id)notification;
-(void)preprocessNativeAdJSON:(id)json completionHandler:(id)handler;
-(void)dealloc;
-(id)init;
-(id)initWithAdUnitID:(id)adUnitID;
@end

@interface GADImpressionMonitor : XXUnknownSuperclass <GADActiveViewMonitorDelegate> {
	int _impressionDefinition;
	UIView* _monitoredView;
	GADActiveViewMonitor* _viewMonitor;
	id<GADImpressionMonitorDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<GADImpressionMonitorDelegate> delegate;
-(void).cxx_destruct;
-(void)activeViewMonitorDidRefresh:(id)activeViewMonitor;
-(void)startImpressionDefinitionVisible;
-(void)startImpressionDefinitionAdLoaded;
-(void)startMonitoring;
-(void)stopMonitoring;
-(void)didMonitorImpression;
-(void)dealloc;
-(id)initWithView:(id)view impressionDefinition:(int)definition;
@end

@interface GADContentQueue : XXUnknownSuperclass {
	NSMutableDictionary* _contents;
	NSMutableArray* _sequenceNumbers;
	unsigned _size;
}
-(void).cxx_destruct;
-(void)enqueueContent:(id)content;
-(void)deduplicate:(id)deduplicate;
-(id)contentWithSequenceNumber:(unsigned)sequenceNumber;
-(id)contentWithHighestScore;
-(id)init;
-(id)initWithQueueSize:(unsigned)queueSize;
@end

@interface GADNativeAdImageAdLoaderOptions : GADAdLoaderOptions {
	BOOL _disableImageLoading;
	BOOL _shouldRequestMultipleImages;
	int _preferredImageOrientation;
}
@property(assign, nonatomic) int preferredImageOrientation;
@property(assign, nonatomic) BOOL shouldRequestMultipleImages;
@property(assign, nonatomic) BOOL disableImageLoading;
-(id)requestParameters;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface GADSDKCoreController : XXUnknownSuperclass <GADSDKCoreWebViewNotification, GADSDKCoreGMSGHandlerDelegate> {
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSMutableArray* _pendingActiveWebViewLoadDelegates;
	NSMutableArray* _activeViewSDKCoreWebViews;
	unsigned long long _lastWebViewRefreshTimestamp;
	unsigned _requestID;
	unsigned _activeViewUnloadCacheMaxSize;
	BOOL _SDKCoreUpdateHandled;
	GADSDKCoreWebView* _activeViewSDKCoreWebView;
	BOOL _useNewWebViewsForActiveViewProcessing;
	double _activeViewSamplingInterval;
	double _swipeToViewSamplingInterval;
	BOOL _SDKConstantsNeedReload;
	NSArray* _activeViewMonitorRefreshIntervals;
	GADSDKCoreWebView* _activeSDKCoreWebView;
	NSMutableDictionary* _pendingBuildAdURLDelegates;
}
@property(retain, nonatomic) NSMutableDictionary* pendingBuildAdURLDelegates;
@property(retain, nonatomic) GADSDKCoreWebView* activeSDKCoreWebView;
@property(assign) double swipeToViewSamplingInterval;
@property(assign) double activeViewSamplingInterval;
@property(copy) NSArray* activeViewMonitorRefreshIntervals;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)SDKCoreGMSGHandlerDidReceiveSDKCoreUpdateNotification:(id)sdkcoreGMSGHandler;
-(void)SDKCoreGMSGHandler:(id)handler didReceiveInvalidAdWithRequestID:(id)requestID parameters:(id)parameters;
-(void)SDKCoreGMSGHandler:(id)handler loadAdWithRequestID:(id)requestID parameters:(id)parameters;
-(void)SDKCoreGMSGHandler:(id)handler loadAdURLWithRequestID:(id)requestID parameters:(id)parameters;
-(void)SDKCoreGMSGHandler:(id)handler didLoadSDKConstants:(id)constants;
-(void)observeSDKCoreWebViewForSDKCoreLoadRequestCompleted;
-(void)didFinishLoadingSDKCoreInSDKCoreWebView:(id)sdkcoreWebView;
-(void)asynchronouslyRequestURLForDelegate:(id)delegate;
-(id)adRequestParameterJSONFromParameters:(id)parameters;
-(void)refreshActiveWebViewSDKCore;
-(void)attemptToRefreshActiveWebViewSDKCore;
-(void)buildAdURL:(id)url;
-(void)finishedUsingSDKCoreWebViewForActiveViewProcessing:(id)activeViewProcessing;
-(id)SDKCoreWebViewForActiveViewProcessing;
-(void)dealloc;
-(id)init;
-(void)removeFinishedActiveViewWebViews;
-(void)cacheRunningActiveViewWebView:(id)view;
@end

@interface GADClickTracker : XXUnknownSuperclass <GADCachedFileDelegate> {
	unsigned _backgroundTaskID;
	GADCachedFile* _tracker;
	BOOL _hasTracked;
	BOOL _cacheEnabled;
	id<GADClickTrackerDelegate> _delegate;
	NSURL* _trackingURL;
}
@property(assign, nonatomic, getter=isCacheEnabled) BOOL cacheEnabled;
@property(readonly, assign, nonatomic) NSURL* trackingURL;
@property(readonly, assign, nonatomic) BOOL hasTracked;
@property(assign, nonatomic) __weak id<GADClickTrackerDelegate> delegate;
-(void).cxx_destruct;
-(void)endBackgroundTask;
-(void)beginBackgroundTask;
-(void)cachedFile:(id)file downloadDidFail:(id)download;
-(void)cachedFileDownloadDidEnd:(id)cachedFileDownload;
-(id)cachedFile:(id)file shouldRedirectToURL:(id)url;
-(void)trackURL:(id)url;
-(void)reset;
-(void)dealloc;
-(id)init;
@end

@interface GADViewHierarchyTraverser : XXUnknownSuperclass {
	BOOL _traversing;
	int _sequenceNumber;
	NSObject<OS_dispatch_queue>* _SDKLowPrioritySerialQueue;
}
-(void).cxx_destruct;
-(void)setTraversing:(BOOL)traversing;
-(void)traverseView:(id)view traversalBlock:(id)block completionBlock:(id)block3;
-(id)init;
@end

@interface GADViewController : XXUnknownSuperclass <GADIntermitting> {
	id _appForegroundObserver;
	BOOL _viewDidAppear;
	GADIntermission* _intermission;
	unsigned _supportedInterfaceOrientations;
	GADSlot* _slot;
	GADViewController* _retainCycle;
	id<GADOverlayPresenting> _presenter;
	id _dismissalCompletion;
}
@property(readonly, assign, nonatomic) GADIntermission* intermission;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL viewDidAppear;
@property(copy, nonatomic) id dismissalCompletion;
@property(retain, nonatomic) id<GADOverlayPresenting> presenter;
@property(retain, nonatomic) GADViewController* retainCycle;
@property(assign, nonatomic) __weak GADSlot* slot;
@property(assign, nonatomic) unsigned supportedInterfaceOrientations;
-(void).cxx_destruct;
-(void)recordDismissal;
-(void)relinquishScreenWithCompletion:(id)completion;
-(void)presentFromViewController:(id)viewController completion:(id)completion;
-(BOOL)shouldDismissOnApplicationEnteringForeground;
-(void)viewChangedToOrientation:(int)orientation;
-(BOOL)shouldAutorotate;
-(BOOL)prefersStatusBarHidden;
-(void)viewDidDisappear:(BOOL)view;
-(void)finishDismissal;
-(void)finishAppearing;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)addToCurrentIntermission;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)setSupportedOrientations:(unsigned)orientations;
-(void)dealloc;
-(void)commonInit;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface GADNativeAppInstallAd : GADNativeAd <GADMediatedNativeAppInstallAd, GADAdLoading, GADNativeAdSourceAttributing, GADOverlayViewSource> {
	BOOL _disableImageLoading;
	NSArray* _nativeAdImages;
	NSMutableArray* _availableNativeAdImages;
	GADOverlayView* _overlayView;
	NSString* _headline;
	NSString* _callToAction;
	GADNativeAdImage* _icon;
	NSString* _body;
	NSString* _store;
	NSString* _price;
	NSDecimalNumber* _starRating;
	GADNativeAdAttribution* _attribution;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADNativeAdAttribution* attribution;
@property(readonly, copy, nonatomic) NSDecimalNumber* starRating;
@property(readonly, assign, nonatomic) NSArray* images;
@property(readonly, copy, nonatomic) NSString* price;
@property(readonly, copy, nonatomic) NSString* store;
@property(readonly, copy, nonatomic) NSString* body;
@property(readonly, assign, nonatomic) GADNativeAdImage* icon;
@property(readonly, copy, nonatomic) NSString* callToAction;
@property(readonly, copy, nonatomic) NSString* headline;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)requestParametersForAdLoader:(id)adLoader;
+(id)requiredDelegateProtocol;
-(void).cxx_destruct;
-(id)overlayView;
-(void)adLoaderDidReceiveAd:(id)adLoader;
-(void)loadAssetsWithCompletionHandler:(id)completionHandler;
-(id)requiredAssets;
-(id)clickActionTemplateID;
-(void)setSlot:(id)slot;
-(id)initWithMediatedNativeAd:(id)mediatedNativeAd options:(id)options;
-(id)initWithDictionary:(id)dictionary options:(id)options;
-(void)GADNativeAppInstallAd_category;
@end

@interface GADLogger : XXUnknownSuperclass {
}
+(id)sharedInstance;
-(void)logPublicMessage:(id)message;
@end

@interface GADBrowserViewController : GADViewController {
	NSURL* _URLToLoad;
	NSURL* _referringURLToLoad;
	GADAdViewDelegate* _adViewDelegate;
	GADAdView* _adView;
	UIToolbar* _toolbar;
	UIBarButtonItem* _flexibleSpaceButton;
	UIBarButtonItem* _backButton;
	UIBarButtonItem* _forwardButton;
	UIBarButtonItem* _reloadButton;
	UIBarButtonItem* _safariButton;
	UIBarButtonItem* _doneButton;
	UIBarButtonItem* _spinnerContainingButton;
	UIActivityIndicatorView* _spinner;
}
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
@property(retain, nonatomic) UIBarButtonItem* spinnerContainingButton;
@property(retain, nonatomic) UIBarButtonItem* doneButton;
@property(retain, nonatomic) UIBarButtonItem* safariButton;
@property(retain, nonatomic) UIBarButtonItem* reloadButton;
@property(retain, nonatomic) UIBarButtonItem* forwardButton;
@property(retain, nonatomic) UIBarButtonItem* backButton;
@property(retain, nonatomic) UIBarButtonItem* flexibleSpaceButton;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) GADAdView* adView;
@property(retain, nonatomic) GADAdViewDelegate* adViewDelegate;
@property(retain, nonatomic) NSURL* referringURLToLoad;
@property(retain, nonatomic) NSURL* URLToLoad;
-(void).cxx_destruct;
-(void)openInSafari;
-(void)reload;
-(void)stop;
-(void)forward;
-(void)back;
-(void)load:(id)load referringURL:(id)url;
-(void)doneButtonPressed:(id)pressed;
-(void)refreshToolbar;
-(void)createToolbarButtons;
-(id)buttonWithImage:(id)image name:(id)name width:(int)width enabled:(BOOL)enabled action:(SEL)action;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
@end

@interface GADCSITimeRecorder : XXUnknownSuperclass {
	NSMutableDictionary* _completedVariables;
	NSMutableDictionary* _ongoingVariables;
	NSMutableArray* _experimentIDs;
	NSMutableDictionary* _customizedParameters;
	NSObject<OS_dispatch_queue>* _lockQueue;
	BOOL _reportIRT;
	NSString* _action;
	double _startTime;
}
@property(readonly, assign, nonatomic) double startTime;
@property(assign, nonatomic) BOOL reportIRT;
@property(readonly, assign, nonatomic) NSDictionary* customizedParameters;
@property(readonly, assign, nonatomic) NSArray* experimentIDs;
@property(readonly, assign) NSDictionary* completedVariables;
@property(readonly, assign) NSDictionary* ongoingVariables;
@property(copy, nonatomic) NSString* action;
+(double)currentTime;
-(void).cxx_destruct;
-(void)setCustomizedParameterValue:(id)value forKey:(id)key;
-(void)removeExperimentID:(id)anId;
-(void)addExperimentID:(id)anId;
-(void)removeCompletedVariableForKey:(id)key;
-(void)addCompletedVariable:(id)variable forKey:(id)key;
-(void)addCompletedVariable:(id)variable;
-(void)cancelTimingVariableWithName:(id)name key:(id)key;
-(void)endTimingVariableWithName:(id)name key:(id)key;
-(double)durationAfterCommonEndTimingVariableWithName:(id)name key:(id)key;
-(void)startTimingVariableWithName:(id)name key:(id)key;
-(void)cancelTimingVariableWithName:(id)name;
-(int)durationAfterEndTimingVariableWithName:(id)name;
-(void)endTimingVariableWithName:(id)name;
-(void)startTimingVariableWithName:(id)name;
-(void)startTimeRecorder;
-(id)init;
-(id)initWithAction:(id)action;
@end

@interface GADCharacterSets : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSCharacterSet* _characterDelimitedSet;
	NSCharacterSet* _spaceDelimitedSet;
}
@property(readonly, copy) NSCharacterSet* spaceDelimitedSet;
@property(readonly, copy) NSCharacterSet* characterDelimitedSet;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)updateCharacterSets;
-(id)init;
@end

@interface GADRewardBasedVideoAd : XXUnknownSuperclass <GADMRewardBasedVideoAdConnectorDelegate, GADSDKCoreControllerDelegate, GADAdFetcherDelegate, GADInterstitialDelegate, GADInterstitialAdClickDelegate, GADInterstitialRewardBasedVideoAdDelegate> {
	GADInterstitial* _interstitial;
	BOOL _ready;
	BOOL _requestInProgress;
	id<GADRewardBasedVideoAdDelegate> _delegate;
	GADRequest* _request;
	NSString* _adUnitID;
	NSString* _requestID;
	GADAdFetcher* _adFetcher;
	GADMConfig* _mediationConfig;
	NSMutableArray* _pendingAdRequestConnectors;
	GADMRewardBasedVideoAdNetworkConnector* _requestingConnector;
	GADMRewardBasedVideoAdNetworkConnector* _receivedConnector;
	NSMutableDictionary* _pendingSetUpConnectorsTimestamp;
	NSMutableDictionary* _connectors;
	GADAd* _ad;
}
@property(retain, nonatomic) GADAd* ad;
@property(retain, nonatomic) NSMutableDictionary* connectors;
@property(retain, nonatomic) NSMutableDictionary* pendingSetUpConnectorsTimestamp;
@property(retain, nonatomic) GADMRewardBasedVideoAdNetworkConnector* receivedConnector;
@property(retain, nonatomic) GADMRewardBasedVideoAdNetworkConnector* requestingConnector;
@property(retain, nonatomic) NSMutableArray* pendingAdRequestConnectors;
@property(retain, nonatomic) GADMConfig* mediationConfig;
@property(assign, nonatomic) BOOL requestInProgress;
@property(retain, nonatomic) GADAdFetcher* adFetcher;
@property(copy, nonatomic) NSString* requestID;
@property(copy, nonatomic) NSString* adUnitID;
@property(retain, nonatomic) GADRequest* request;
@property(readonly, assign, nonatomic, getter=isReady) BOOL ready;
@property(assign, nonatomic) __weak id<GADRewardBasedVideoAdDelegate> delegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)failedToLoadAdWithError:(id)error;
-(void)adLoadedSuccessfully;
-(void)loadAd:(id)ad;
-(void)presentFromRootViewController:(id)rootViewController;
-(void)loadRequest:(id)request withAdUnitID:(id)adUnitID;
-(id)init;
-(void)connectorWillLeaveApplication:(id)connector;
-(void)connectorDidCloseRewardBasedVideoAd:(id)connector;
-(void)connectorDidStartPlayingRewardBasedVideoAd:(id)connector;
-(void)connectorDidOpenRewardBasedVideoAd:(id)connector;
-(void)connector:(id)connector didRewardUserWithReward:(id)reward;
-(void)connector:(id)connector didFailToReceiveRewardBasedVideoAdWithError:(id)error;
-(void)connectorDidReceiveClick:(id)connector;
-(void)connectorDidReceiveRewardBasedVideoAd:(id)connector;
-(void)connector:(id)connector didFailToSetUpRewardBasedVideoAdWithError:(id)error;
-(void)connectorDidSetUpRewardBasedVideoAd:(id)connector;
-(void)pingNoFillURLs;
-(id)decodedJSONResponseFromAd:(id)ad error:(id*)error;
-(void)requestAdFromConnector:(id)connector;
-(void)removeStaleConnectors;
-(void)buildPendingAdRequestConnectorsList;
-(void)setUpAdapters;
-(void)makeNextAdRequest;
-(void)presentMediatedRewardBasedVideoAdFromViewController:(id)viewController;
-(void)processMediationAd:(id)ad;
-(void)adFetcher:(id)fetcher didFailToFetchAd:(id)fetchAd withError:(id)error responseCode:(unsigned)code;
-(void)adFetcher:(id)fetcher didFetchAd:(id)ad;
-(void)failedJavaScriptFile;
-(void)invalidJavaScriptRequest;
-(void)loadAd:(id)ad headers:(id)headers;
-(void)loadAdURLWithParameters:(id)parameters;
-(int)requestedAdType;
-(id)requestParameters;
-(id)adLoadActionTimeRecorder;
-(void)fetchAdForRequest:(id)request withAdUnitID:(id)adUnitID;
-(void)interstitial:(id)interstitial didRewardUserWithReward:(id)reward;
-(void)interstitialDidStartPlayingRewardBasedVideoAd:(id)interstitial;
-(void)interstitialDidReceiveAdClick:(id)interstitial;
-(void)interstitialWillLeaveApplication:(id)interstitial;
-(void)interstitialDidDismissScreen:(id)interstitial;
-(void)interstitialWillDismissScreen:(id)interstitial;
-(void)interstitialWillPresentScreen:(id)interstitial;
-(void)interstitial:(id)interstitial didFailToReceiveAdWithError:(id)error;
-(void)interstitialDidReceiveAd:(id)interstitial;
-(void)loadInterstitialWithAdRequest:(id)adRequest;
-(void)loadInterstitialWithAd:(id)ad;
@end

@interface GADIntrinsicImages : XXUnknownSuperclass {
}
+(id)sharedInstance;
-(id)transparentImage;
-(id)closeButton;
-(id)browserForwardButton;
-(id)browserBackButton;
-(id)chooseImage:(id)image orDoubleDensityImage:(id)image2;
-(id)imageWithBase64EncodedString:(id)base64EncodedString;
@end

@interface GADOrientationGMSGHandler : GADGMSGHandler {
}
+(id)actionBlockDictionary;
-(void)adView:(id)view didReceiveForcedOrientationAction:(id)action;
@end

@interface GADBluetoothMonitor : XXUnknownSuperclass <CBCentralManagerDelegate> {
	NSObject<OS_dispatch_queue>* _lockQueue;
	CBCentralManager* _bluetoothManager;
	int _bluetoothState;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign) int bluetoothState;
-(void).cxx_destruct;
-(void)centralManagerDidUpdateState:(id)centralManager;
-(id)retrieveConnectedBluetoothAudioDevices;
-(id)retrieveConnectedBluetoothLowEnergyDevices;
-(id)init;
@end

@interface GADAdAppViewController : GADViewController {
	BOOL _viewWasConfigured;
	NSURL* _URLToLoad;
	NSString* _HTMLToLoad;
	NSURL* _HTMLBaseURLToLoad;
	NSString* _originalAudioSessionCategory;
	BOOL _viewHasAppearedAtLeastOnce;
	BOOL _orientationNotifiedToTheAdViewAtLeastOnce;
	BOOL _useCustomClose;
	BOOL _adOrientationsOverridesLockedOrientation;
	int _customClosePosition;
	GADAdView* _adView;
	UIViewController* _hostViewController;
	GADAdAppAdViewDelegate* _adViewDelegate;
	UIButton* _closeButton;
	unsigned _adOrientations;
	float _orientationUpdateAnimationDuration;
	int _forcedAdOrientation;
}
@property(assign, nonatomic) int forcedAdOrientation;
@property(assign, nonatomic) BOOL adOrientationsOverridesLockedOrientation;
@property(assign, nonatomic) float orientationUpdateAnimationDuration;
@property(assign, nonatomic) unsigned adOrientations;
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) GADAdAppAdViewDelegate* adViewDelegate;
@property(readonly, assign, nonatomic) UIViewController* hostViewController;
@property(retain, nonatomic) GADAdView* adView;
@property(assign, nonatomic) int customClosePosition;
@property(assign, nonatomic) BOOL useCustomClose;
-(void).cxx_destruct;
-(void)loadHTML:(id)html baseURL:(id)url;
-(void)load:(id)load;
-(void)viewChangedToOrientation:(int)orientation;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)configureView;
-(void)positionMRAIDCloseButton;
-(void)relinquishScreenWithCompletion:(id)completion;
-(void)viewWillLayoutSubviews;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldDismissOnApplicationEnteringForeground;
-(void)closeButtonPressed:(id)pressed;
-(BOOL)isLoaded;
-(void)updateCloseButtonVisibilityAndImage;
-(void)dealloc;
-(id)initWithAdView:(id)adView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface GADOverlayProxy : XXUnknownSuperclass <GADIntermitting> {
	GADIntermission* _intermission;
	UIViewController* _viewController;
	GADSlot* _slot;
	GADOpener* _opener;
}
@property(readonly, assign, nonatomic) GADIntermission* intermission;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADOpener* opener;
@property(assign, nonatomic) __weak GADSlot* slot;
@property(readonly, assign, nonatomic) __weak UIViewController* viewController;
+(id)overlayProxyForViewController:(id)viewController;
-(void).cxx_destruct;
-(void)relinquishScreenWithCompletion:(id)completion;
-(BOOL)shouldDismissOnApplicationEnteringForeground;
-(void)presentFromViewController:(id)viewController completion:(id)completion;
-(id)init;
-(id)initWithViewController:(id)viewController;
@end

@interface GADMediatedNativeAdNotificationSource : XXUnknownSuperclass {
}
+(void)mediatedNativeAdWillLeaveApplication:(id)mediatedNativeAd;
+(void)mediatedNativeAdDidDismissScreen:(id)mediatedNativeAd;
+(void)mediatedNativeAdWillDismissScreen:(id)mediatedNativeAd;
+(void)mediatedNativeAdWillPresentScreen:(id)mediatedNativeAd;
+(void)mediatedNativeAdDidRecordClick:(id)mediatedNativeAd;
+(void)mediatedNativeAdDidRecordImpression:(id)mediatedNativeAd;
@end

@interface GADOpener : XXUnknownSuperclass <MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate, EKEventEditViewDelegate, UIAlertViewDelegate, GADMRAIDPictureDelegate> {
	NSMapTable* _confirmationAlertURLs;
	NSMutableSet* _allowedAppURLs;
	NSMutableDictionary* _pendingPictureDownloads;
	BOOL _didOpenAnotherApplication;
	UIViewController* _viewController;
	NSURL* _referringURL;
	GADAdView* _adView;
	GADSlot* _slot;
	id<GADOpenerDelegate> _delegate;
	NSString* _navigationURL;
	GADAutoClickProtection* _autoClickProtection;
	NSMutableDictionary* _cachedStoreProductViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableDictionary* cachedStoreProductViewController;
@property(retain, nonatomic) GADAutoClickProtection* autoClickProtection;
@property(copy, nonatomic) NSString* navigationURL;
@property(assign, nonatomic) __weak id<GADOpenerDelegate> delegate;
@property(assign, nonatomic) BOOL didOpenAnotherApplication;
@property(assign, nonatomic) __weak GADSlot* slot;
@property(assign, nonatomic) __weak GADAdView* adView;
@property(retain, nonatomic) NSURL* referringURL;
@property(assign, nonatomic) __weak UIViewController* viewController;
-(void).cxx_destruct;
-(void)MRAIDPicture:(id)picture failedToStorePictureWithURL:(id)url message:(id)message;
-(void)MRAIDPicture:(id)picture didStorePictureWithURL:(id)url;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)eventEditViewController:(id)controller didCompleteWithAction:(int)action;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)openCalendarWithDictionary:(id)dictionary;
-(void)openSmsComposer:(id)composer;
-(void)openEmailComposer:(id)composer;
-(void)presentComposerController:(id)controller;
-(void)openApp:(id)app;
-(void)openPromptToStorePictureAtURL:(id)url;
-(void)openWebAppWithResizeProperties:(id)resizeProperties;
-(void)expandToWebAppWithSupportedOrientations:(unsigned)supportedOrientations usingCustomClose:(BOOL)close;
-(void)openWebAppWithHTML:(id)html supportedOrientations:(unsigned)orientations usingCustomClose:(BOOL)close;
-(void)openWebApp:(id)app supportedOrientations:(unsigned)orientations usingCustomClose:(BOOL)close;
-(id)overlayWithOrientations:(unsigned)orientations useCustomClose:(BOOL)close;
-(void)configureOverlay:(id)overlay orientations:(unsigned)orientations usingCustomClose:(BOOL)close;
-(void)openBrowserToURL:(id)url supportedOrientations:(unsigned)orientations;
-(void)openInAppPurchase:(id)appPurchase quantity:(int)quantity reportingURLStringFormats:(id)formats;
-(void)fetchInAppStoreForProductID:(id)productID;
-(void)openInAppStoreWithProductID:(id)productID fallbackURL:(id)url shouldWaitForFetch:(BOOL)fetch;
-(void)openInAppStore:(id)appStore fallbackURL:(id)url;
-(void)confirmClickToURL:(id)url message:(id)message;
-(id)confirmationMessageForURL:(id)url;
-(BOOL)shouldPerformOpenAction;
-(BOOL)shouldPerformOpenActionWithOrientations:(unsigned)orientations;
-(void)didOpen;
-(void)didOpenInApp;
-(void)didOpenExternalApp;
-(void)disableAutoCollapseForResize;
-(BOOL)canOpenContent:(id)content;
-(id)init;
@end

@interface GADDynamicHeightSearchBannerView : XXUnknownSuperclass <UIWebViewDelegate, UIGestureRecognizerDelegate> {
	UIWebView* _adWebView;
	int _adState;
	NSString* _adUnitID;
	id<GADDynamicHeightSearchBannerViewDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int adState;
@property(assign, nonatomic) __weak id<GADDynamicHeightSearchBannerViewDelegate> delegate;
@property(copy, nonatomic) NSString* adUnitID;
-(void).cxx_destruct;
-(void)handleUserDidTapAdDestinationURL:(id)handleUser;
-(void)handleBannerViewDidReceiveAd;
-(void)updateInternalAdViewHeightAndNotifyDelegateWithHeight:(float)height;
-(void)setFrame:(CGRect)frame;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(CGSize)currentAdSize;
-(void)loadRequest:(id)request;
-(void)configureBannerView;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GADNativeCustomTemplateAd : GADNativeAd <GADAdLoading> {
	BOOL _disableImageLoading;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSDictionary* _optionalImages;
	NSDictionary* _requiredImages;
	NSMutableDictionary* _imageAssets;
	NSDictionary* _stringAssets;
	NSMutableSet* _availableAssetKeys;
	id _customClickHandler;
	NSString* _templateID;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSArray* availableAssetKeys;
@property(readonly, assign, nonatomic) NSString* templateID;
+(id)requestParametersForAdLoader:(id)adLoader;
+(id)requiredDelegateProtocol;
-(void).cxx_destruct;
-(void)adLoaderDidReceiveAd:(id)adLoader;
-(void)loadAssetsWithCompletionHandler:(id)completionHandler;
-(void)loadImageAssetsWithImageDictionary:(id)imageDictionary;
-(void)setImage:(id)image forKey:(id)key;
-(void)handleNativeAdCustomClick:(id)click;
-(id)stringForKey:(id)key;
-(id)imageForKey:(id)key;
-(id)requiredAssets;
-(void)recordImpression;
-(void)performClickOnAssetWithKey:(id)key customClickHandler:(id)handler;
-(id)clickActionTemplateID;
-(BOOL)hasValidConfigurationForRequestParameters:(id)requestParameters;
-(void)setSlot:(id)slot;
-(void)removeCustomClickObserver;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary options:(id)options;
@end

@interface GADBrowserAdViewDelegate : GADAdViewDelegate {
}
-(id)browserControllerForAdView:(id)adView;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(void)adViewDidFinishLoad:(id)adView;
-(void)adViewDidStartLoad:(id)adView;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@interface GADAdAppAdViewDelegate : GADAdViewDelegate {
	GADAdAppViewController* _adAppViewController;
}
-(void).cxx_destruct;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(void)adViewDidFinishLoad:(id)adView;
-(void)adViewDidStartLoad:(id)adView;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(id)initWithAdAppViewController:(id)adAppViewController;
@end

@interface GADDebugOptionsMenuSheet : XXUnknownSuperclass <UIAlertViewDelegate> {
	NSString* _adDebugDialogString;
	UIAlertView* _creativeInformationAlertView;
	NSURL* _inAppPreviewURL;
	UIAlertView* _debugOptionsAlertView;
	UIViewController* _viewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)showInAppPreview;
-(void)creativeInfoAlertViewClickedButtonAtIndex:(int)index;
-(void)debugOptionsAlertViewClickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showCreativeInformationAlertView;
-(void)showWithAdDebugDialogString:(id)adDebugDialogString rootViewController:(id)controller;
@end

@interface GADBannerAdViewDelegate : GADAdViewDelegate <GADDelayLoadDelegate> {
	BOOL _loadDelayed;
	BOOL _loadFinished;
	GADSlot* _slot;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isLoadFinished) BOOL loadFinished;
@property(readonly, assign, nonatomic, getter=isLoadDelayed) BOOL loadDelayed;
@property(readonly, assign, nonatomic) __weak GADSlot* slot;
-(void).cxx_destruct;
-(void)loadHandlerDidCancel:(id)loadHandler;
-(void)loadHandlerDidChangeDelay:(id)loadHandler from:(int)from to:(int)to;
-(void)adView:(id)view contentSizeDidChange:(CGSize)contentSize;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(void)adViewDidFinishLoad:(id)adView;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(BOOL)isClick:(int)click;
-(id)init;
-(id)initWithSlot:(id)slot;
@end

@interface GADLocationService : XXUnknownSuperclass <CLLocationManagerDelegate> {
	CLLocationManager* _locationManager;
	GADLocation* _location;
	NSObject<OS_dispatch_queue>* _locationDataQueue;
	BOOL _featureEnabled;
	BOOL _publisherAuthorized;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) GADLocation* location;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)setPublisherAuthorized:(BOOL)authorized;
-(void)setFeatureEnabled:(BOOL)enabled;
-(void)updateLocation;
-(void)disable;
-(void)startUpdatingLocation;
-(id)init;
@end

@interface GADShingleHashTuple : XXUnknownSuperclass {
	NSArray* _shingle;
	unsigned long long _hashValue;
}
@property(readonly, assign, nonatomic) unsigned long long hashValue;
@property(readonly, copy, nonatomic) NSArray* shingle;
-(void).cxx_destruct;
-(id)init;
-(id)initWithShingle:(id)shingle hashValue:(unsigned long long)value;
@end

@interface GADAdViewController : XXUnknownSuperclass <GADBannerViewDelegate> {
	NSLayoutConstraint* _bannerPositionConstraintVertical;
	NSLayoutConstraint* _bannerPositionConstraintHorizontal;
	NSLayoutConstraint* _topConstraint;
	NSLayoutConstraint* _bottomConstraint;
	NSLayoutConstraint* _leadingConstraint;
	NSLayoutConstraint* _trailingConstraint;
	UIView* _contentView;
	UISwipeGestureRecognizer* _swipeRecognizer;
	BOOL _handlingSwipe;
	BOOL _hasReceivedValidAd;
	GADBannerView* _bannerView;
	BOOL _animatesVisibility;
	BOOL _adViewHidden;
	BOOL _allowsHidingAds;
	UIView* _originalContentView;
	NSString* _adViewAdUnitID;
	GADRequest* _request;
	int _adViewPositionVertical;
	int _adViewPositionHorizontal;
	GADAdSize _adSize;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL allowsHidingAds;
@property(assign, nonatomic) BOOL adViewHidden;
@property(assign, nonatomic) BOOL animatesVisibility;
@property(assign, nonatomic) GADAdSize adSize;
@property(assign, nonatomic) int adViewPositionHorizontal;
@property(assign, nonatomic) int adViewPositionVertical;
@property(retain, nonatomic) GADRequest* request;
@property(copy, nonatomic) NSString* adViewAdUnitID;
@property(readonly, assign, nonatomic) UIView* originalContentView;
-(void).cxx_destruct;
-(void)adViewDidReceiveAd:(id)adView;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)setUpBannerViewIfNeededWithOldBannerView:(id)oldBannerView;
-(void)viewDidLoad;
-(void)setView:(id)view;
-(void)setUpPositionConstraints;
-(void)resetContentViewConstraints;
-(void)updateLayout;
-(void)bannerSwiped;
-(void)updateAdViewHidden:(BOOL)hidden;
-(void)bannerPositionUpdated;
-(void)commonInit;
-(id)init;
-(id)initWithCoder:(id)coder;
@end

@interface GADNativeAdAttribution : XXUnknownSuperclass {
	NSArray* _loadingImages;
	NSMutableArray* _availableImages;
	id _assetCompletionHandler;
	NSArray* _icons;
	NSString* _text;
	UIFont* _font;
	UIColor* _textColor;
	UIColor* _backgroundColor;
	double _iconPresentationDuration;
	double _iconAnimationDuration;
}
@property(readonly, copy, nonatomic) UIColor* backgroundColor;
@property(readonly, copy, nonatomic) UIColor* textColor;
@property(readonly, copy, nonatomic) UIFont* font;
@property(readonly, copy, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) double iconAnimationDuration;
@property(readonly, assign, nonatomic) double iconPresentationDuration;
@property(readonly, assign, nonatomic) NSArray* icons;
-(void).cxx_destruct;
-(void)loadAssetsWithCompletionHandler:(id)completionHandler;
-(void)failedLoadingNativeAdImageWithError:(id)error;
-(void)finishedLoadingNativeAdImage:(id)image;
-(id)initWithDictionary:(id)dictionary;
-(id)init;
@end

@interface GADContent : XXUnknownSuperclass {
	int _contentAgeWeight;
	int _contentLengthWeight;
	unsigned _contentTotalLength;
	GADBinaryHeap* _heap;
	unsigned _maximumShingleCount;
	unsigned _minimumParagraphLength;
	unsigned _shingleLength;
	NSString* _fingerprint;
	int _score;
	unsigned _sequenceNumber;
}
@property(readonly, assign, nonatomic) unsigned sequenceNumber;
@property(readonly, assign, nonatomic) int score;
@property(readonly, assign, nonatomic) NSString* fingerprint;
-(void).cxx_destruct;
-(id)shingleHash;
-(void)updateHeapWithHash:(unsigned long long)hash shingle:(id)shingle;
-(void)applyRollingHashToTokens:(id)tokens baseHash:(unsigned long long)hash;
-(void)selectShinglesFromTokens:(id)tokens;
-(void)updateContentWithText:(id)text;
-(void)deductServedPenalty;
-(id)initWithSequenceNumber:(unsigned)sequenceNumber;
-(id)init;
@end

@interface GADMWebViewRenderedChecker : XXUnknownSuperclass {
	UIWebView* _webView;
	id<GADMWebViewRenderedCheckerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<GADMWebViewRenderedCheckerDelegate> delegate;
@property(assign, nonatomic) __weak UIWebView* webView;
-(void).cxx_destruct;
-(float)percentOfImage:(id)image ofColor:(id)color;
-(void)checkIsContentRenderedInWebView;
-(id)init;
-(id)initWithWebView:(id)webView delegate:(id)delegate;
@end

@interface GADNotification : XXUnknownSuperclass {
	NSString* _name;
	NSDictionary* _parameters;
}
@property(readonly, copy, nonatomic) NSDictionary* parameters;
@property(readonly, copy, nonatomic) NSString* name;
+(BOOL)isNotificationURL:(id)url;
-(void).cxx_destruct;
-(id)description;
-(id)initWithNotificationURL:(id)notificationURL;
-(id)initWithName:(id)name parameters:(id)parameters;
-(id)init;
@end

@interface GADMobileAds : XXUnknownSuperclass {
	BOOL _applicationMuted;
	float _applicationVolume;
}
@property(readonly, assign, nonatomic) float clampedApplicationVolume;
@property(assign, nonatomic) BOOL applicationMuted;
@property(assign, nonatomic) float applicationVolume;
+(void)enableBackgroundAdLoading;
+(void)disableSDKCrashReporting;
+(void)disableAutomatedInAppPurchaseReporting;
+(id)sharedInstance;
-(id)init;
@end

@interface GADMAdapterSafariViewControllerInterstitial : XXUnknownSuperclass <GADMAdNetworkAdapter, SFSafariViewControllerDelegate> {
	GADMAdNetworkConnectorInterstitial* _connector;
	SFSafariViewController* _safariViewController;
	NSURL* _tabURL;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(Class)networkExtrasClass;
+(id)adapterVersion;
-(void).cxx_destruct;
-(void)reportLoadFailureWithCode:(int)code errorMessage:(id)message;
-(void)safariViewControllerDidFinish:(id)safariViewController;
-(void)safariViewController:(id)controller didCompleteInitialLoad:(BOOL)load;
-(BOOL)handlesUserClicks;
-(void)changeAdSizeTo:(GADAdSize)to;
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)isBannerAnimationOK:(int)ok;
-(void)stopBeingDelegate;
-(void)getNativeAdWithAdTypes:(id)adTypes options:(id)options;
-(void)getInterstitial;
-(void)getBannerWithSize:(GADAdSize)size;
-(id)initWithGADMAdNetworkConnector:(id)gadmadNetworkConnector;
-(void)dealloc;
@end

@interface GADCacheSet : XXUnknownSuperclass {
	id<NSObject> _observer;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSMutableSet* _set;
	unsigned _maxCapacity;
}
@property(readonly, assign, nonatomic) unsigned maxCapacity;
-(void).cxx_destruct;
-(void)removeAllObjects;
-(void)addObject:(id)object;
-(id)anyObject;
-(void)dealloc;
-(id)initWithMaxCapacity:(unsigned)maxCapacity;
-(id)init;
@end

@interface GADStatisticsCore : XXUnknownSuperclass {
	NSMutableDictionary* _statistics;
	NSString* _userDefaultsKey;
	NSObject<OS_dispatch_queue>* _lockQueue;
}
@property(readonly, copy, nonatomic) NSDictionary* statistics;
-(void).cxx_destruct;
-(void)removeObjectForKey:(id)key;
-(void)appendDictionary:(id)dictionary toArrayForKey:(id)key;
-(void)appendString:(id)string toArrayForKey:(id)key;
-(id)arrayForKey:(id)key;
-(void)setIdentifier:(id)identifier;
-(void)savePersistentStatistics;
-(void)applicationWillTerminate:(id)application;
-(void)dealloc;
-(id)init;
@end

@interface GADNativeAdImage : XXUnknownSuperclass {
	BOOL _required;
	UIImage* _image;
	NSURL* _imageURL;
	float _scale;
}
@property(assign, nonatomic) BOOL required;
@property(assign, nonatomic) float scale;
@property(retain, nonatomic) NSURL* imageURL;
@property(retain, nonatomic) UIImage* image;
+(id)nativeAdImagesFromImageConfigurationArray:(id)imageConfigurationArray options:(id)options;
-(void).cxx_destruct;
-(void)loadImageWithCompletionHandler:(id)completionHandler;
-(id)description;
-(id)init;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithURL:(id)url scale:(float)scale;
-(id)initWithImage:(id)image;
@end

@interface GADInterstitial : XXUnknownSuperclass <GADRewardBasedVideoAdGMSGHandlerDelegate, GADAdMediationDelegate, GADSlotAdEventDelegate, GADSlotAdLoadDelegate, GADSlotDelegate, GADSlotAdResponseDelegate> {
	GADRequestError* _alreadyUsedError;
	BOOL _hasBeenUsed;
	NSString* _adUnitID;
	id<GADInterstitialDelegate> _delegate;
	id<GADInAppPurchaseDelegate> _inAppPurchaseDelegate;
	GADInterstitialViewController* _viewController;
	GADSlot* _slot;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) GADSlot* slot;
@property(retain, nonatomic) GADInterstitialViewController* viewController;
@property(readonly, copy, nonatomic) NSString* adNetworkClassName;
@property(assign, nonatomic) BOOL hasBeenUsed;
@property(readonly, assign, nonatomic) BOOL isReady;
@property(assign, nonatomic) __weak id<GADInAppPurchaseDelegate> inAppPurchaseDelegate;
@property(assign, nonatomic) __weak id<GADInterstitialDelegate> delegate;
@property(readonly, copy, nonatomic) NSString* adUnitID;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)setAdUnitID:(id)anId;
-(id)init;
-(Class)connectorClassForAd:(id)ad;
-(BOOL)slot:(id)slot shouldProcessMediatedAdResponse:(id)response error:(id*)error;
-(BOOL)slot:(id)slot shouldProcessAdResponse:(id)response error:(id*)error;
-(BOOL)canPresentFullScreen;
-(BOOL)canFitAdSize:(CGSize)size inWindowSize:(CGSize)windowSize withThreshold:(float)threshold;
-(void)presentFromRootViewController:(id)rootViewController;
-(void)adPresentationDidFail;
-(void)loadRequest:(id)request;
-(void)loadSlotFromCacheEntry:(id)cacheEntry;
-(void)createSlot;
-(void)slotWillLeaveApplication:(id)slot;
-(void)slotDidDismissScreen:(id)slot;
-(void)slotWillDismissScreen:(id)slot;
-(void)slotWillPresentScreen:(id)slot;
-(void)slot:(id)slot didFailToLoadAdContentWithError:(id)error;
-(void)slotFinishedLoadingAdContent:(id)content;
-(BOOL)slot:(id)slot shouldChangeAudioSessionCategoryTo:(id)to;
-(id)coordinatesOfContentInScreen:(id)screen;
-(void)slotDidReceiveAdClick:(id)slot;
-(BOOL)slot:(id)slot shouldLoadRequest:(id)request error:(id*)error;
-(BOOL)slotShouldReloadCurrentRequest:(id)slot;
-(void)cancel;
-(void)dealloc;
-(id)initWithAdUnitID:(id)adUnitID;
-(void)rewardBasedVideoAdGMSGHandlerDidReceiveStartVideoNotification:(id)rewardBasedVideoAdGMSGHandler;
-(void)rewardBasedVideoAdGMSGHandler:(id)handler didReceiveRewardNotificationWithRewardItem:(id)rewardItem;
@end

@interface GADBannerView : XXUnknownSuperclass <GADAdMediationDelegate, GADSlotAdEventDelegate, GADSlotAdLoadDelegate, GADSlotDelegate, GADSlotAdKeyDelegate, GADSlotAdResponseDelegate> {
	BOOL _hasLoadedAd;
	BOOL _hasInitialized;
	NSDictionary* _viewHierarchy;
	NSObject<OS_dispatch_queue>* _lockQueue;
	BOOL _autoloadEnabled;
	UIViewController* _rootViewController;
	id<GADBannerViewDelegate> _delegate;
	id<GADInAppPurchaseDelegate> _inAppPurchaseDelegate;
	id<GADAdSizeDelegate> _adSizeDelegate;
	UIView* _rootAdView;
	GADSlot* _slot;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADSlot* slot;
@property(retain, nonatomic) UIView* rootAdView;
@property(readonly, assign, nonatomic) __weak GADAdView* adView;
@property(readonly, assign, nonatomic) GADVideoController* videoController;
@property(readonly, assign, nonatomic) __weak UIView* mediatedAdView;
@property(readonly, assign, nonatomic) BOOL hasAutoRefreshed;
@property(readonly, copy, nonatomic) NSString* adNetworkClassName;
@property(assign, nonatomic, getter=isAutoloadEnabled) BOOL autoloadEnabled;
@property(assign, nonatomic) __weak id<GADAdSizeDelegate> adSizeDelegate;
@property(assign, nonatomic) __weak id<GADInAppPurchaseDelegate> inAppPurchaseDelegate;
@property(assign, nonatomic) __weak id<GADBannerViewDelegate> delegate;
@property(assign, nonatomic) GADAdSize adSize;
@property(assign, nonatomic) __weak UIViewController* rootViewController;
@property(copy, nonatomic) NSString* adUnitID;
-(void).cxx_destruct;
-(Class)connectorClassForAd:(id)ad;
-(BOOL)slot:(id)slot shouldProcessMediatedAdResponse:(id)response error:(id*)error;
-(BOOL)slot:(id)slot shouldProcessAdResponse:(id)response error:(id*)error;
-(void)didMoveToWindow;
-(void)loadRequest:(id)request;
-(id)viewHierarchyInformationForSlot:(id)slot;
-(void)cacheViewHierarchyInformationForSlot:(id)slot;
-(void)slotWillLeaveApplication:(id)slot;
-(void)slotDidDismissScreen:(id)slot;
-(void)slotWillDismissScreen:(id)slot;
-(void)slotWillPresentScreen:(id)slot;
-(BOOL)slot:(id)slot shouldChangeAudioSessionCategoryTo:(id)to;
-(void)slot:(id)slot didFailToLoadAdContentWithError:(id)error;
-(void)slotFinishedLoadingAdContent:(id)content;
-(BOOL)slot:(id)slot shouldLoadRequest:(id)request error:(id*)error;
-(void)slot:(id)slot contentSizeDidChange:(CGSize)contentSize;
-(id)swipeToViewControllerView;
-(id)coordinatesOfContentInScreen:(id)screen;
-(CGRect)frameInInterface;
-(void)slot:(id)slot didReceiveAdView:(id)view;
-(BOOL)slotShouldReloadCurrentRequest:(id)slot;
-(void)setAlpha:(float)alpha;
-(void)setAdSizeFromExternalCGSize:(CGSize)externalCGSize;
-(CGSize)intrinsicContentSize;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(void)setAdSize:(GADAdSize)size andReload:(BOOL)reload;
-(void)dealloc;
-(id)initWithAdSize:(GADAdSize)adSize origin:(CGPoint)origin;
-(id)initWithAdSize:(GADAdSize)adSize;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame adSize:(GADAdSize)size;
-(void)commonInitWithAdSize:(GADAdSize)adSize;
@end

@interface GADSlot : XXUnknownSuperclass <GADActiveViewMonitorDelegate, GADAdViewActiveViewMonitoring, GADPercentDrivenUserInteractionAnimationControllerDelegate, GADSDKCoreControllerDelegate, GADImpressionMonitorDelegate, SKStoreProductViewControllerDelegate, GADMRAIDEventHandling, GADAdFetcherDelegate> {
	int _state;
	unsigned _activeViewID;
	GADImpressionMonitor* _impressionMonitor;
	int _swipeToViewControllerCheckerTaskID;
	GADMAdManager* _mediationManager;
	GADMConfig* _mediationConfiguration;
	BOOL _slotHasAttemptedAnAdRequestAtLeastOnce;
	BOOL _isListeningToDeviceOrientationChangeEvent;
	CGRect _usableInterfaceFrame;
	CGRect _creativeWebViewFrame;
	CGRect _creativeAdFrame;
	GADAd* _pendingCustomRenderingAd;
	GADCSITimeRecorder* _adLoadActionTimeRecorder;
	GADActiveViewMonitor* _activeViewMonitor;
	BOOL _sendActiveViewMessagesToAdView;
	BOOL _viewHasMadeImpression;
	BOOL _monitoredViewVisible;
	BOOL _hasAutoRefreshed;
	BOOL _reloadable;
	BOOL _manualImpressionsEnabled;
	BOOL _calledLoadAndDisplayRequest;
	BOOL _swipeToViewControllerEnabled;
	BOOL _swipeToViewControllerAnimationControllerInitialized;
	BOOL _adCustomRendered;
	id<GADSlotDelegate> _slotDelegate;
	id<GADSlotAdLoadDelegate> _adLoadDelegate;
	id<GADSlotAdEventDelegate> _adEventDelegate;
	id<GADSlotAdResponseDelegate> _adResponseDelegate;
	id<GADSlotAdKeyDelegate> _adKeyDelegate;
	NSString* _adUnitID;
	GADAd* _ad;
	GADAdType* _adType;
	GADRequest* _loadingRequest;
	GADCorrelator* _correlator;
	NSNumber* _timeLastLoaded;
	GADAdView* _adView;
	GADSlotStatistics* _slotStats;
	GADIntermission* _intermission;
	id _placement;
	GADBannerAdViewDelegate* _adViewDelegate;
	GADAd* _loadingAd;
	GADAdFetcher* _adFetcher;
	NSDictionary* _applicationStatistics;
	NSSet* _pendingAdStatistics;
	NSTimer* _reloadTimer;
	NSString* _requestID;
	GADRequest* _nextRequest;
	GADSDKCoreWebView* _SDKCoreWebView;
	UIView* _activeViewMonitoredView;
	NSDictionary* _savedParamsForCheckingSwipeToViewController;
	GADPercentDrivenUserInteractionAnimationController* _animationController;
	GADViewControllerFullScreenSwipeAnimation* _animation;
	SKStoreProductViewController* _swipeableStoreProductViewController;
	UIPanGestureRecognizer* _swipeGestureRecognizer;
	GADSlot* _strongSlotForSwipeToViewController;
	GADScheduler* _swipeToViewControllerChecker;
	double _reloadInterval;
	CGSize _newAdSize;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADScheduler* swipeToViewControllerChecker;
@property(assign, nonatomic, getter=isAdCustomRendered) BOOL adCustomRendered;
@property(retain, nonatomic) GADSlot* strongSlotForSwipeToViewController;
@property(retain, nonatomic) UIPanGestureRecognizer* swipeGestureRecognizer;
@property(retain, nonatomic) SKStoreProductViewController* swipeableStoreProductViewController;
@property(retain, nonatomic) GADViewControllerFullScreenSwipeAnimation* animation;
@property(retain, nonatomic) GADPercentDrivenUserInteractionAnimationController* animationController;
@property(assign, nonatomic) BOOL swipeToViewControllerAnimationControllerInitialized;
@property(assign, nonatomic) BOOL swipeToViewControllerEnabled;
@property(copy, nonatomic) NSDictionary* savedParamsForCheckingSwipeToViewController;
@property(retain, nonatomic) UIView* activeViewMonitoredView;
@property(retain, nonatomic) GADSDKCoreWebView* SDKCoreWebView;
@property(assign, nonatomic) CGSize newAdSize;
@property(copy, nonatomic) GADRequest* nextRequest;
@property(copy, nonatomic) NSString* requestID;
@property(assign, nonatomic) double reloadInterval;
@property(retain, nonatomic) NSTimer* reloadTimer;
@property(copy, nonatomic) NSSet* pendingAdStatistics;
@property(copy, nonatomic) NSDictionary* applicationStatistics;
@property(retain, nonatomic) GADAdFetcher* adFetcher;
@property(retain, nonatomic) GADAd* loadingAd;
@property(retain, nonatomic) GADBannerAdViewDelegate* adViewDelegate;
@property(assign, nonatomic) __weak id placement;
@property(assign, nonatomic) __weak GADIntermission* intermission;
@property(assign, nonatomic) BOOL calledLoadAndDisplayRequest;
@property(readonly, assign, nonatomic) GADSlotStatistics* slotStats;
@property(readonly, assign, nonatomic) GADAdView* adView;
@property(retain, nonatomic) NSNumber* timeLastLoaded;
@property(retain, nonatomic) GADCorrelator* correlator;
@property(copy, nonatomic) GADRequest* loadingRequest;
@property(retain, nonatomic) GADAdType* adType;
@property(readonly, assign, nonatomic) GADAd* ad;
@property(assign, nonatomic) BOOL manualImpressionsEnabled;
@property(assign, nonatomic) BOOL reloadable;
@property(assign, nonatomic) BOOL hasAutoRefreshed;
@property(copy, nonatomic) NSString* adUnitID;
@property(assign, nonatomic) __weak id<GADSlotAdKeyDelegate> adKeyDelegate;
@property(assign, nonatomic) __weak id<GADSlotAdResponseDelegate> adResponseDelegate;
@property(assign, nonatomic) __weak id<GADSlotAdEventDelegate> adEventDelegate;
@property(assign, nonatomic) __weak id<GADSlotAdLoadDelegate> adLoadDelegate;
@property(assign, nonatomic) __weak id<GADSlotDelegate> slotDelegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int state;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL monitoredViewVisible;
@property(assign, nonatomic) BOOL viewHasMadeImpression;
+(void)initialize;
-(void).cxx_destruct;
-(void)adFetcher:(id)fetcher didFailToFetchAd:(id)fetchAd withError:(id)error responseCode:(unsigned)code;
-(void)adFetcher:(id)fetcher didFetchAd:(id)ad;
-(void)setViewForAdUsingView:(id)adUsingView;
-(BOOL)validateAdResponseWithAdSize:(GADAdSize)adSize andValidAdSizes:(id)sizes;
-(void)processCustomRenderingAdResponse:(id)response;
-(void)renderPendingCustomRenderingAd;
-(BOOL)isMRAIDEnabled;
-(void)sendCSIAdLoadTimings;
-(void)pingManualTrackingURLs;
-(void)pingImpressionURLs;
-(void)pingClickURLs;
-(void)startImpressionMonitoring;
-(void)processStandardAdResponse:(id)response;
-(void)finishedLoadingAdResponse:(id)response;
-(id)gestureClickURLWithURL:(id)url;
-(BOOL)isGoogleAdURL:(id)url;
-(void)cancelPendingAndFutureActions;
-(void)cancelPendingActions;
-(void)cancelLoad;
-(void)invalidate;
-(void)dealloc;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
-(void)loadAd:(id)ad headers:(id)headers;
-(void)resetRequestState;
-(void)interstitialViewWillDisappear;
-(void)interstitialViewWillAppear;
-(void)bannerDidMoveToWindow:(id)banner;
-(void)mediatedAdNetworkAutoRefreshed;
-(void)logRequestTestAdInstructions;
-(void)loadNextRequestWithAutoRefresh:(BOOL)autoRefresh;
-(void)loadRequest:(id)request;
-(BOOL)shouldMakeRequest:(id)request;
-(BOOL)isMakingRequest;
-(void)adDidRelinquishFullScreen:(id)ad;
-(void)adWillPresentFullScreen:(id)ad;
-(void)appDidBecomeActive:(id)app;
-(void)appWillBecomeInactive:(id)app;
-(void)scheduleAdReloadTimer;
-(void)deactivateReloadTimer;
-(void)reloadCurrentRequest;
-(void)setAdType:(id)type andReloadRequest:(BOOL)request;
-(BOOL)canEnableActiveViewMonitoring;
-(id)adFormat;
-(id)activeViewJSCommandWithParams:(id)params;
-(unsigned)identifierForActiveViewMonitor:(id)activeViewMonitor;
-(BOOL)isMRAIDEnabledForActiveViewMonitor:(id)activeViewMonitor;
-(void)activeViewMonitorDidRefresh:(id)activeViewMonitor;
-(void)activeViewMonitorWillUnload;
-(void)unloadActiveViewMonitor;
-(void)finishActiveViewReporting;
-(void)startActiveViewReportingIfEnabled;
-(void)createActiveViewMonitor;
-(BOOL)monitoredViewIsSubviewOfDeviceScreen;
-(void)activeViewMonitoringDidStop;
-(BOOL)activeViewMonitoringStarted;
-(void)activeViewVisibilityChanged:(BOOL)changed;
-(void)didReceiveInAppPurchase:(id)appPurchase;
-(id)inAppPurchaseDelegate;
-(void)animationControllerDidCancelAnimationTransition:(id)animationController;
-(void)animationControllerDidFinishAnimationTransition:(id)animationController;
-(id)viewControllerForPresentingModalView;
-(BOOL)hasConsistentMediationConfigForAdType:(id)adType;
-(void)requestAdWithType:(id)type mediationConfig:(id)config;
-(void)processMediationAdResponse:(id)response;
-(void)presentMediatedInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)isMediating;
-(BOOL)changeAdTypeTo:(id)to;
-(id)adNetworkClassName;
-(void)loadAdURLWithParameters:(id)parameters;
-(id)requestParameters;
-(void)invalidJavaScriptRequest;
-(void)failedJavaScriptFile;
-(int)requestedAdType;
-(id)multipleAdSizeParameterFromSizes:(id)sizes;
-(id)adLoadActionTimeRecorder;
-(void)adWillLeaveApplication;
-(void)adDidDismissScreen;
-(void)adWillDismissScreen;
-(void)adWillPresentScreen;
-(void)adWasClicked;
-(void)adFinishedLoadingContent;
-(void)adFailedToReceiveContentWithError:(id)error;
-(void)willProcessAd;
-(void)processAdResponse:(id)response;
-(void)applicationVolumeDidChange:(id)applicationVolume;
-(void)postVolumeNotification;
-(BOOL)shouldChangeAudioSessionCategoryTo:(id)to;
-(void)updateContentSize:(CGSize)size;
-(void)impressionMonitorDidMonitorImpression:(id)impressionMonitor;
-(void)invalidateState;
-(void)resetState;
-(void)willLeaveAppDueToClick;
-(void)didMakeAdImpression;
-(void)didLoadAdHTMLInWebView;
-(void)willLoadAdHTMLInWebView;
-(void)willStartAdRendering;
-(void)didReceiveValidAd;
-(void)didFailToReceiveAdWithError:(id)error shouldCancelPendingActions:(BOOL)actions;
-(void)willProcessMediationResponse;
-(void)didFetchAdContent;
-(void)willFetchAdContent;
-(void)didReceiveAdURL;
-(void)didFailToRetrieveSDKCoreWithError:(id)error;
-(void)willRequestAdURL;
-(void)setState:(int)state;
-(void)loadAdNetworkJavaScriptRequest:(id)request;
-(void)productViewControllerDidFinish:(id)productViewController;
-(BOOL)shouldProcessTouch:(CGPoint)touch inView:(id)view;
-(void)loadStoreProductViewController;
-(void)handlePanGesture:(id)gesture;
-(void)setUpAnimationController;
-(void)disableSwipeToViewController;
-(void)enableSwipeToViewController;
-(void)canEnableSwipeToViewController;
-(void)unscheduleSwipeToViewControllerChecker;
-(void)scheduleSwipeToViewControllerChecker;
-(void)didChangeDeviceOrientation;
-(void)addCreativeOrientationChangeObserver:(id)observer selector:(SEL)selector;
-(void)endListeningToDeviceOrientationChangeEvent;
-(void)beginListeningToDeviceOrientationChangeEvent;
-(void)handleError:(id)error action:(id)action;
-(id)forcedAdOrientation;
-(void)updatePositionFromView:(id)view;
-(void)updateVisibility:(BOOL)visibility;
-(void)MRAIDAdDidUnload;
-(void)MRAIDAdDidLoad;
-(void)SDKDidBecomeReady;
-(void)notifyDeviceFeatures;
-(void)notifyOrientationToMRAIDCreative;
-(id)creativePositionDictionaryForActiveViewBounds:(CGRect)activeViewBounds;
@end

@interface GADApplication : XXUnknownSuperclass <GADStatisticDictionaryDelegate> {
	GADAd* _backgroundingAd;
	id<NSObject> _appBecameActiveObserver;
	id<NSObject> _appWillEnterForegroundObserver;
	GADContentQueue* _contentQueue;
	GADScheduler* _scheduler;
	NSObject<OS_dispatch_queue>* _serialQueue;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSArray* _availableAdapterNames;
	unsigned _activeViewID;
	NSString* _version;
	NSString* _mainBundleIdentifier;
	BOOL _appFinishedLaunching;
	BOOL _backgroundLoadingEnabled;
	GADSession* _currentSession;
	GADStatisticDictionary* _statistics;
	NSObject<OS_dispatch_queue>* _notificationSerialQueue;
	NSObject<OS_dispatch_queue>* _statisticsSerialQueue;
	NSMutableSet* _adStatistics;
	unsigned long long _sequenceNumber;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSMutableSet* adStatistics;
@property(assign, nonatomic) unsigned long long sequenceNumber;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* statisticsSerialQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* notificationSerialQueue;
@property(readonly, assign, nonatomic) BOOL active;
@property(readonly, assign, nonatomic) BOOL backgroundReloadingEnabled;
@property(readonly, assign, nonatomic) BOOL backgroundLoadingEnabled;
@property(readonly, assign, nonatomic) GADStatisticDictionary* statistics;
@property(readonly, assign, nonatomic) GADSession* currentSession;
@property(readonly, copy, nonatomic) NSString* mainBundleIdentifier;
@property(readonly, copy, nonatomic) NSString* version;
@property(readonly, copy) NSArray* availableAdapterNames;
+(id)sharedInstance;
+(void)load;
-(void).cxx_destruct;
-(unsigned)mainWindowSupportedInterfaceOrientations;
-(BOOL)isSplitScreenEnabled;
-(id)parameters;
-(unsigned)nextActiveViewID;
-(void)GADLinkCategories;
-(void)didUpdateStatisticDictionary:(id)dictionary;
-(id)notificationQueue;
-(id)pendingAdStatistics;
-(id)mainWindow;
-(id)placeholderWindow;
-(id)iTunesMetadata;
-(id)iTunesMetadataPath;
-(void)enableBackgroundAdLoading;
-(void)appDidFinishLaunching;
-(void)runEarlyActivities;
-(void)dealloc;
-(id)init;
-(void)stopContentHashing;
-(void)startContentHashing;
-(id)fingerprintWithServedPenaltyDeduction;
-(void)updateAvailableAdapterNamesWithPotentialAdapterNames:(id)potentialAdapterNames;
-(void)setAvailableAdapterNames:(id)names;
-(id)nextRequestStatisticsDictionaryForSlot:(id)slot;
-(id)timeSinceFirstAdRequestInMilliseconds;
-(id)nextSequenceNumberAsString;
-(void)incrementSequenceNumber;
-(void)incrementTotalAdClickCount;
-(void)decrementTotalAdRequestCount;
-(void)incrementTotalAdRequestCount;
-(void)didNotSendAdStatistics:(id)statistics;
-(void)willEnterForeground;
-(void)didBecomeActive;
-(void)willLeaveApplicationDueToClickOnAd:(id)clickOnAd;
@end

@interface GADCSIGMSGHandler : GADGMSGHandler {
}
+(id)subActionBlockDictionary;
+(id)actionBlockDictionary;
-(void)adView:(id)view didReceiveExtraAction:(id)action;
-(void)adView:(id)view didReceiveExperimentAction:(id)action;
-(void)adView:(id)view didReceiveTickAction:(id)action;
-(void)adView:(id)view didReceiveCSINotification:(id)notification;
@end

@interface GADLocation : XXUnknownSuperclass <NSCopying> {
	float _latitude;
	float _longitude;
	float _accuracy;
	NSString* _locationDescription;
	NSDictionary* _dictionaryRepresentation;
	double _timestamp;
}
@property(assign, nonatomic) double timestamp;
@property(copy, nonatomic) NSDictionary* dictionaryRepresentation;
@property(copy, nonatomic) NSString* locationDescription;
@property(readonly, assign, nonatomic) float accuracy;
@property(readonly, assign, nonatomic) float longitude;
@property(readonly, assign, nonatomic) float latitude;
@property(readonly, assign, nonatomic) BOOL isPreciseLocation;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithLocationDescription:(id)locationDescription;
-(id)initWithLatitude:(float)latitude longitude:(float)longitude accuracy:(float)accuracy;
@end

@interface GADCSI : XXUnknownSuperclass {
	GADCSIConfiguration* _configuration;
	NSObject<OS_dispatch_queue>* _lockQueue;
	int _requestCount;
	NSMutableDictionary* _timeRecorders;
	NSMutableDictionary* _timestamps;
	NSString* _GWSQueryID;
}
@property(copy) NSString* GWSQueryID;
+(id)sharedInstance;
-(void).cxx_destruct;
-(long long)timestampForLabel:(id)label;
-(void)setTimestamp:(long long)timestamp forLabel:(id)label;
-(void)recordTimestampForLabel:(id)label;
-(id)timeRecorderForAction:(id)action;
-(void)sendReport;
-(id)init;
@end

@interface GADPercentDrivenUserInteractionAnimationController : XXUnknownSuperclass <UIViewControllerTransitioningDelegate> {
	id<GADPercentDrivenUserInteractionAnimationControllerDelegate> _delegate;
	GADViewControllerFullScreenSwipeAnimation* _transitionAnimation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADViewControllerFullScreenSwipeAnimation* transitionAnimation;
@property(assign, nonatomic) __weak id<GADPercentDrivenUserInteractionAnimationControllerDelegate> delegate;
-(void).cxx_destruct;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(BOOL)isAnimatingBottomToTop;
-(BOOL)isAnimatingTopToBottom;
-(void)handlePanGesture:(id)gesture;
-(id)initWithAnimation:(id)animation;
@end

@interface GADInterstitialCacheEntry : XXUnknownSuperclass <GADSlotDelegate, GADAdMediationDelegate, GADSlotAdLoadDelegate, GADSlotAdResponseDelegate> {
	GADCSITimeRecorder* _timeRecorder;
	BOOL _loaded;
	GADSlot* _slot;
	GADRequestError* _error;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) GADRequestError* error;
@property(readonly, assign, nonatomic) BOOL loaded;
@property(readonly, assign, nonatomic) GADSlot* slot;
+(void)sendCSIPingForTimeRecorder:(id)timeRecorder;
-(void).cxx_destruct;
-(Class)connectorClassForAd:(id)ad;
-(BOOL)slot:(id)slot shouldProcessMediatedAdResponse:(id)response error:(id*)error;
-(BOOL)slot:(id)slot shouldProcessAdResponse:(id)response error:(id*)error;
-(BOOL)slot:(id)slot shouldLoadRequest:(id)request error:(id*)error;
-(void)slot:(id)slot didFailToLoadAdContentWithError:(id)error;
-(void)slotFinishedLoadingAdContent:(id)content;
-(void)slotDidMoveToPlacement;
-(void)dealloc;
-(id)initWithRequest:(id)request adUnitID:(id)anId;
@end

@interface GADMAdManager : XXUnknownSuperclass <GADMSlotDelegate, GADMConnectorDelegate> {
	NSMutableArray* _adNetworkConfigQueue;
	GADMAdNetworkConnector* _lastConnectorNotifiedForAClick;
	id _lastMediatedInterstitial;
	int _pendingActionGroup;
	NSMutableArray* _failedAdapterNamesAndDurations;
	GADCSITimeRecorder* _timeRecorder;
	BOOL _requestInProgress;
	GADMConfig* _config;
	GADAdType* _adType;
	GADMAdNetworkConnector* _requestingConnector;
	GADMAdNetworkConnector* _receivedConnector;
	GADSlot* _slot;
	NSTimer* _adNetworkTimeoutTimer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSTimer* adNetworkTimeoutTimer;
@property(assign, nonatomic) BOOL requestInProgress;
@property(assign, nonatomic) __weak GADSlot* slot;
@property(retain, nonatomic) GADMAdNetworkConnector* receivedConnector;
@property(retain, nonatomic) GADMAdNetworkConnector* requestingConnector;
@property(retain, nonatomic) GADAdType* adType;
@property(retain, nonatomic) GADMConfig* config;
-(void).cxx_destruct;
-(void)endCSITimingWithFailedAdapter:(id)failedAdapter;
-(void)endCSITimingWithSucceededAdapter:(id)succeededAdapter;
-(void)startCSITiming;
-(void)adRequestFailedFromConnector:(id)connector withError:(id)error;
-(void)updateAdapterTimingsForConnector:(id)connector error:(id)error;
-(void)adRequestReturnsFromConnector:(id)connector withMediatedAd:(id)mediatedAd;
-(void)adRequestReturnsFromConnector:(id)connector withInterstitial:(id)interstitial;
-(void)adRequestReturnsFromConnector:(id)connector withView:(id)view;
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)changeAdTypeTo:(id)to;
-(void)mediateForAdType:(id)adType config:(id)config;
-(BOOL)shouldProcessResponseFromConnector:(id)connector;
-(void)adNetworkTimeoutHandler:(id)handler;
-(void)resetRequestingState;
-(void)notifyDelegateOfFailureToReceiveWithError:(id)error;
-(void)reportNoFill;
-(id)dequeueAdNetworkConfig;
-(void)makeAdRequest;
-(void)cancelPendingActions;
-(void)cancel;
-(void)dealloc;
-(id)init;
@end

@interface GADModalOverlayPresenter : XXUnknownSuperclass <GADOverlayPresenting> {
	GADViewController* _presentedViewController;
	BOOL _statusBarWasHidden;
	id<NSObject> _appForegroundObserver;
}
@property(readonly, assign, nonatomic, getter=isReadyToPresent) BOOL readyToPresent;
@property(assign, nonatomic) __weak GADViewController* presentedViewController;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)hideStatusBar;
-(void)appDidEnterForeground:(id)app;
-(void)forceUpdateViewControllerOrientation:(id)orientation;
-(void)updateViewControllerOrientation:(id)orientation;
-(void)setNeedsUpdateOrientation;
-(void)dismissWithCompletionHandler:(id)completionHandler;
-(void)presentFromViewController:(id)viewController completion:(id)completion;
-(id)presentationViewController;
-(void)dealloc;
@end

@interface GADMAdNetworkConfig : XXUnknownSuperclass {
	NSString* _networkID;
	NSDictionary* _credentials;
	NSDictionary* _extras;
	NSDictionary* _ad;
	NSArray* _adapterList;
	Class _adapterClass;
	NSString* _allocationID;
	NSArray* _impressionURLs;
	NSArray* _clickURLs;
	NSArray* _fillURLs;
	NSArray* _videoStartURLs;
	NSArray* _rewardedUserURLs;
	NSDictionary* _nativeExpressAdLoaderOptions;
	NSString* _nativeExpressHTMLTemplate;
	NSString* _nativeExpressAdBaseURL;
	NSArray* _nativeExpressTemplateIDs;
	NSDictionary* _nativeExpressAssets;
}
@property(readonly, copy, nonatomic) NSDictionary* nativeExpressAssets;
@property(readonly, copy, nonatomic) NSArray* nativeExpressTemplateIDs;
@property(readonly, copy, nonatomic) NSString* nativeExpressAdBaseURL;
@property(readonly, copy, nonatomic) NSString* nativeExpressHTMLTemplate;
@property(readonly, copy, nonatomic) NSDictionary* nativeExpressAdLoaderOptions;
@property(readonly, copy, nonatomic) NSArray* rewardedUserURLs;
@property(readonly, copy, nonatomic) NSArray* videoStartURLs;
@property(readonly, copy, nonatomic) NSArray* fillURLs;
@property(readonly, copy, nonatomic) NSArray* clickURLs;
@property(readonly, copy, nonatomic) NSArray* impressionURLs;
@property(readonly, copy, nonatomic) NSString* allocationID;
@property(readonly, assign, nonatomic) Class adapterClass;
@property(readonly, copy, nonatomic) NSArray* adapterList;
@property(readonly, copy, nonatomic) NSDictionary* ad;
@property(readonly, copy, nonatomic) NSDictionary* extras;
@property(readonly, copy, nonatomic) NSDictionary* credentials;
@property(readonly, copy, nonatomic) NSString* publisherID;
@property(readonly, copy, nonatomic) NSString* networkID;
-(void).cxx_destruct;
-(void)setError:(id*)error withErrorCode:(int)errorCode errorMessage:(id)message;
-(id)errorMessageForMissingAdapterClasses:(id)missingAdapterClasses;
-(id)description;
-(void)resolveAdNetworkClassForCustomEventWithError:(id*)error;
-(id)initWithDictionary:(id)dictionary error:(id*)error;
@end

@interface GADStubsForGID : XXUnknownSuperclass {
	id _clientID;
	id _currentUser;
	id _authentication;
	id _idToken;
	id _refreshToken;
}
@property(retain, nonatomic) id refreshToken;
@property(retain, nonatomic) id idToken;
@property(retain, nonatomic) id authentication;
@property(retain, nonatomic) id currentUser;
@property(retain, nonatomic) id clientID;
+(BOOL)supportsCurrentUserKVO;
-(void).cxx_destruct;
@end

@interface GADSignedInUser : XXUnknownSuperclass <NSCopying, NSCoding> {
	NSString* _issuer;
	NSString* _userID;
	NSString* _refreshToken;
	NSString* _applicationID;
}
@property(readonly, copy, nonatomic) NSString* applicationID;
@property(readonly, copy, nonatomic) NSString* refreshToken;
@property(readonly, copy, nonatomic) NSString* userID;
@property(readonly, copy, nonatomic) NSString* issuer;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(id)init;
-(id)initWithIssuer:(id)issuer userID:(id)anId applicationID:(id)anId3 refreshToken:(id)token;
@end

@interface GADRequest : XXUnknownSuperclass <NSCopying> {
	NSMutableDictionary* _networkExtrasMap;
	BOOL _nativeExpressEnabled;
	NSArray* _testDevices;
	int _gender;
	NSDate* _birthday;
	NSArray* _keywords;
	NSString* _contentURL;
	NSString* _requestAgent;
	GADLocation* _location;
	NSNumber* _childDirectedTreatment;
	NSDictionary* _customTargeting;
	NSDictionary* _privateMediationExtras;
	NSArray* _formatParameters;
	int _responseType;
	NSDictionary* _adConfigurations;
	NSString* _origin;
}
@property(assign, nonatomic, getter=isNativeExpressEnabled) BOOL nativeExpressEnabled;
@property(copy, nonatomic) NSString* origin;
@property(copy, nonatomic) NSDictionary* adConfigurations;
@property(readonly, assign, nonatomic) BOOL cacheable;
@property(assign, nonatomic) int responseType;
@property(copy, nonatomic) NSArray* formatParameters;
@property(copy, nonatomic) NSDictionary* privateMediationExtras;
@property(copy, nonatomic) NSDictionary* customTargeting;
@property(copy, nonatomic) NSNumber* childDirectedTreatment;
@property(copy, nonatomic) GADLocation* location;
@property(copy, nonatomic) NSString* requestAgent;
@property(copy, nonatomic) NSString* contentURL;
@property(copy, nonatomic) NSArray* keywords;
@property(copy, nonatomic) NSDate* birthday;
@property(assign, nonatomic) int gender;
@property(copy, nonatomic) NSArray* testDevices;
+(id)sdkVersion;
+(int)requestTypeFromString:(id)string;
+(void)initialize;
+(id)request;
+(id)requestWithMediationAdRequest:(id)mediationAdRequest;
+(id)extendedSDKVersionNumber;
+(id)sdkVersionIdentifiers;
+(id)sdkVersionMetadata;
-(void).cxx_destruct;
-(void)setLocationWithDescription:(id)description;
-(void)setBirthdayWithMonth:(int)month day:(int)day year:(int)year;
-(id)parameters;
-(id)threadSafeParameters;
-(BOOL)isATestDevice;
-(void)tagForChildDirectedTreatment:(BOOL)childDirectedTreatment;
-(void)setLocationWithLatitude:(float)latitude longitude:(float)longitude accuracy:(float)accuracy;
-(id)contentURLString;
-(id)birthdayString;
-(id)genderString;
-(id)networkExtrasAdditionalParameters;
-(void)removeAdNetworkExtrasFor:(Class)aFor;
-(id)adNetworkExtrasFor:(Class)aFor;
-(void)registerAdNetworkExtras:(id)extras;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithParameters:(id)parameters;
-(id)init;
-(void)configureNetworkExtrasWithMediationAdRequest:(id)mediationAdRequest;
-(void)addAdapterListWithMediationAdRequest:(id)mediationAdRequest;
@end

@interface GADBlockTimerTarget : XXUnknownSuperclass {
	id _block;
}
@property(copy, nonatomic) id block;
-(void).cxx_destruct;
-(void)timerFired:(id)fired;
@end

@interface GADSDKCoreGMSGHandler : GADGMSGHandler <GADAdFetcherDelegate> {
	NSMutableDictionary* _adFetchers;
	NSObject<OS_dispatch_queue>* _lockQueue;
	GADSDKCoreWebView* _SDKCoreWebView;
	id<GADSDKCoreGMSGHandlerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<GADSDKCoreGMSGHandlerDelegate> delegate;
@property(assign, nonatomic) __weak GADSDKCoreWebView* SDKCoreWebView;
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)adFetcher:(id)fetcher didFailToFetchAd:(id)fetchAd withError:(id)error responseCode:(unsigned)code;
-(void)adFetcher:(id)fetcher didFetchAd:(id)ad;
-(BOOL)isFetchInProgressForFetchRequestID:(id)fetchRequestID;
-(void)removeAdFetcherForFetchRequestID:(id)fetchRequestID;
-(void)setAdFetcher:(id)fetcher forFetchRequestID:(id)fetchRequestID;
-(id)fetchRequestIDForAdFetcher:(id)adFetcher;
-(void)failedToFetchAd:(id)fetchAd forRequestID:(id)requestID withError:(id)error responseCode:(int)code;
-(void)fetchedAd:(id)ad forFetchRequestID:(id)fetchRequestID responseCode:(int)code;
-(void)adView:(id)view didReceiveFetchAdAction:(id)action;
-(void)adView:(id)view didReceiveSDKCoreReloadRequestWithParameters:(id)parameters;
-(void)adView:(id)view didReceiveLoadAdAction:(id)action;
-(void)adView:(id)view didReceiveloadSDKConstantsAction:(id)action;
-(void)adView:(id)view didReceiveInvalidAdRequestAction:(id)action;
-(void)adView:(id)view didReceiveloadAdURLAction:(id)action;
-(id)init;
@end

@interface GADStatisticDictionary : XXUnknownSuperclass {
	NSMutableDictionary* _statistics;
	BOOL _allowDictionaryModification;
	BOOL _hasEnqueuedNotificationBlock;
	id<GADStatisticDictionaryDelegate> _delegate;
	NSLock* _delegateLock;
	NSObject<OS_dispatch_queue>* _serialQueue;
}
@property(assign, nonatomic) BOOL hasEnqueuedNotificationBlock;
@property(assign, nonatomic) BOOL allowDictionaryModification;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* serialQueue;
@property(retain, nonatomic) NSLock* delegateLock;
@property(assign, nonatomic) __weak id<GADStatisticDictionaryDelegate> delegate;
-(void).cxx_destruct;
-(id)dictionary;
-(void)addObject:(id)object toArrayWithKey:(id)key shouldNotifyDelegate:(BOOL)delegate;
-(void)decrementNumberForKey:(id)key shouldNotifyDelegate:(BOOL)delegate;
-(void)incrementNumberForKey:(id)key shouldNotifyDelegate:(BOOL)delegate;
-(void)addDecimalNumber:(id)number toNumberForKey:(id)key shouldNotifyDelegate:(BOOL)delegate;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(void)setObject:(id)object forKey:(id)key shouldNotifyDelegate:(BOOL)delegate;
-(void)dispatchAsyncShouldNotifyDelegate:(BOOL)dispatchAsync block:(id)block;
-(void)enqueueNotificationBlock;
-(void)didFinishModifying;
-(id)description;
-(id)init;
-(id)initWithDelegate:(id)delegate;
-(id)initWithQueueLabel:(const char*)queueLabel delegate:(id)delegate;
@end

@interface GADNetwork : XXUnknownSuperclass {
	GADNetwork* _selfReference;
	unsigned _changeCount;
	unsigned _networkType;
	unsigned _lastKnownNetworkType;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSObject<OS_dispatch_queue>* _enableCheckingQueue;
	SCNetworkReachabilityRef _networkReachabilityRef;
}
@property(assign) unsigned networkType;
-(void).cxx_destruct;
-(void)disableNetworkChecking;
-(void)enableNetworkChecking;
-(void)setNetworkTypeFromFlags:(unsigned)flags;
-(unsigned)changeCount;
-(id)lastKnownNetworkTypeString;
-(id)networkTypeString;
-(void)dealloc;
-(id)init;
@end

@interface GADMConfig : XXUnknownSuperclass {
	NSArray* _adNetworkConfigs;
	int _bannerAnimationType;
	int _impressionDefinition;
	NSArray* _impressionURLs;
	NSArray* _clickURLs;
	NSArray* _noFillURLs;
	NSString* _qdata;
	GADAdType* _adType;
	NSString* _appKey;
	NSArray* _rewards;
	double _refreshInterval;
	double _adNetworkTimeout;
}
@property(copy, nonatomic) NSArray* rewards;
@property(copy, nonatomic) NSString* appKey;
@property(retain, nonatomic) GADAdType* adType;
@property(copy, nonatomic) NSString* qdata;
@property(copy, nonatomic) NSArray* noFillURLs;
@property(copy, nonatomic) NSArray* clickURLs;
@property(copy, nonatomic) NSArray* impressionURLs;
@property(readonly, assign, nonatomic) int impressionDefinition;
@property(assign, nonatomic) double adNetworkTimeout;
@property(assign, nonatomic) int bannerAnimationType;
@property(assign, nonatomic) double refreshInterval;
@property(copy, nonatomic) NSArray* adNetworkConfigs;
+(id)adTypeFromString:(id)string;
+(id)peekAdTypeFromConfig:(id)config;
-(void).cxx_destruct;
-(BOOL)parseConfig:(id)config error:(id*)error;
-(BOOL)parseSettingsConfig:(id)config error:(id*)error;
-(id)description;
-(id)init;
-(id)initWithAppKey:(id)appKey configDict:(id)dict error:(id*)error;
@end

@interface GADSDKCoreWebView : XXUnknownSuperclass <GADActiveViewGMSGHandlerDelegate, GADAdViewDelegate> {
	int _state;
	BOOL _hasSDKCoreLoadedAtLeastOnce;
	NSMutableArray* _pendingJSCommands;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSObject<OS_dispatch_queue>* _commandQueue;
	NSMutableSet* _SDKCoreObservers;
	GADAdViewDelegate* _adViewDelegate;
	GADAdView* _adView;
	GADActiveViewGMSGHandler* _activeViewGMSGHandler;
	NSMapTable* _activeViewObservers;
	NSMutableSet* _runningActiveViewObserverIdentifiers;
	GADSDKCoreGMSGHandler* _SDKCoreGMSGHandler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADSDKCoreGMSGHandler* SDKCoreGMSGHandler;
@property(assign) BOOL hasSDKCoreLoadedAtLeastOnce;
@property(assign) int state;
-(void).cxx_destruct;
-(BOOL)isActiveViewRunning;
-(void)clearAllActiveViewInstances;
-(void)removeActiveViewObserverForActiveViewID:(unsigned)activeViewID;
-(void)setActiveViewObserver:(id)observer forActiveViewID:(unsigned)activeViewID;
-(void)postJSNotification:(id)notification userInfo:(id)info;
-(void)dispatchPendingJavaScriptCommands;
-(void)enqueueJavaScriptCommand:(id)command;
-(void)notifyAllObserversOnlyOnceThatSDKCoreRequestIsFinished;
-(void)adViewDidFinishLoad:(id)adView;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)refreshSDKCoreAndNotifyObserver:(id)observer;
-(void)removeObserver:(id)observer;
-(void)addObserverForOneTimeNotification:(id)oneTimeNotification;
-(void)dealloc;
-(id)init;
-(void)activeViewGMSGHandler:(id)handler didReceiveVisibilityNotification:(BOOL)notification forActiveViewID:(unsigned)activeViewID;
-(void)activeViewGMSGHandler:(id)handler didReceiveUntrackNotificationForActiveViewID:(unsigned)activeViewID;
@end

@interface GADMediatedAd : XXUnknownSuperclass {
	NSMutableArray* _clickHandlers;
	NSMutableArray* _impressionHandlers;
	NSString* _adNetworkClassName;
}
@property(copy, nonatomic) NSString* adNetworkClassName;
-(void).cxx_destruct;
-(void)addImpressionHandler:(id)handler;
-(void)addClickHandler:(id)handler;
-(void)reportImpression;
-(void)reportClick;
-(id)init;
@end

@interface GADAutoClickProtection : XXUnknownSuperclass {
	NSArray* _reportingURLStringTemplates;
	BOOL _enabled;
}
@property(readonly, assign, nonatomic) BOOL enabled;
-(void).cxx_destruct;
-(void)reportSpamOpenActionWithNavigationURLString:(id)navigationURLString;
-(void)reportSpamOpenActionWithAdDebugDialogString:(id)adDebugDialogString navigationURLString:(id)string;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithAutoClickProtectionEnabled:(BOOL)autoClickProtectionEnabled;
@end

@interface GADCSIVariableTiming : XXUnknownSuperclass {
	NSString* _name;
	double _start;
	double _length;
}
@property(readonly, assign, nonatomic) BOOL isValid;
@property(assign, nonatomic) double length;
@property(assign, nonatomic) double start;
@property(readonly, assign, nonatomic) NSString* name;
-(void).cxx_destruct;
-(void)resigningActive;
-(void)dealloc;
-(id)initWithName:(id)name startTime:(double)time;
-(id)init;
@end

@interface GADMAdNetworkConnector : XXUnknownSuperclass <GADMInternalAdNetworkConnector, GADMediationAdRequestInternal> {
	NSDictionary* _strippedCredentials;
	BOOL _isLocationShared;
	BOOL _didNetworkRefresh;
	BOOL _clicked;
	GADMAdNetworkConfig* _networkConfig;
	GADMAdManager* _adManager;
	GADMConfig* _mediationConfig;
	id<GADMAdNetworkAdapter> _adapter;
}
@property(retain, nonatomic) GADMAdNetworkConfig* networkConfig;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isClicked) BOOL clicked;
@property(assign, nonatomic) BOOL didNetworkRefresh;
@property(retain, nonatomic) id<GADMAdNetworkAdapter> adapter;
@property(retain, nonatomic) GADMConfig* mediationConfig;
@property(assign, nonatomic) __weak GADMAdManager* adManager;
-(void).cxx_destruct;
-(void)adapter:(id)adapter clickDidOccurInBanner:(id)click;
-(void)adapter:(id)adapter didReceiveInterstitial:(id)interstitial;
-(void)reportFill;
-(void)reportImpression;
-(void)reportClick;
-(void)pingMediationURLs:(id)urls defaultURL:(id)url durations:(id)durations exitCodes:(id)codes fillStatus:(id)status;
-(void)adapterDidGetAdClick:(id)adapter;
-(void)adapterWillLeaveApplication:(id)adapter;
-(void)adapterDidDismissInterstitial:(id)adapter;
-(void)adapterWillDismissInterstitial:(id)adapter;
-(void)adapterWillPresentInterstitial:(id)adapter;
-(void)adapterDidDismissFullScreenModal:(id)adapter;
-(void)adapterWillDismissFullScreenModal:(id)adapter;
-(void)adapterWillPresentFullScreenModal:(id)adapter;
-(void)adapter:(id)adapter didFailInterstitial:(id)interstitial;
-(void)adapterDidReceiveInterstitial:(id)adapter;
-(void)adapter:(id)adapter didFailAd:(id)ad;
-(void)adapter:(id)adapter didReceiveMediatedNativeAd:(id)ad;
-(void)adapter:(id)adapter didReceiveAdView:(id)view;
-(float)croppedContentThreshold;
-(CGSize)adSize;
-(BOOL)autoClickProtectionEnabled;
-(id)childDirectedTreatment;
-(id)userKeywords;
-(id)userLocationDescription;
-(float)userLocationAccuracyInMeters;
-(float)userLongitude;
-(float)userLatitude;
-(BOOL)userHasLocation;
-(id)userLocation;
-(id)userBirthday;
-(int)userGender;
-(id)viewControllerForPresentingModalView;
-(id)networkExtrasForClass:(Class)aClass;
-(id)networkExtras;
-(BOOL)testMode;
-(id)credentials;
-(id)publisherId;
-(id)slot;
-(id)userRequestAgent;
-(id)currentAdapterName;
-(id)adapterNames;
-(id)extras;
-(id)inlineAd;
-(void)dealloc;
-(void)askAdapterToStopBeingDelegate;
-(void)getAdFromAdapterWithType:(id)type;
-(id)adapterVersion;
-(void)setUpAdapter;
-(id)initWithConfig:(id)config networkConfig:(id)config2;
-(id)init;
@end

@interface GADMAdapterGoogleAdMobAds : XXUnknownSuperclass <GADMRewardBasedVideoAdNetworkAdapter, GADRewardBasedVideoAdClickDelegate, GADRewardBasedVideoAdDelegate, GADMAdNetworkAdapter, GADBannerViewDelegate, GADInterstitialDelegate, GADInterstitialAdClickDelegate, GADNativeAppInstallAdLoaderDelegate, GADNativeContentAdLoaderDelegate> {
	GADBannerView* _bannerView;
	GADInterstitial* _interstitial;
	GADRewardBasedVideoAd* _rewardBasedVideoAd;
	GADAdLoader* _adLoader;
	GADMAdNetworkConnector<GADMAdNetworkConnector>* _connector;
	id<GADMRewardBasedVideoAdNetworkConnector> _rewardBasedVideoAdNetworkConnector;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(Class)networkExtrasClass;
+(id)adapterVersion;
-(void).cxx_destruct;
-(void)adLoader:(id)loader didFailToReceiveAdWithError:(id)error;
-(void)adLoader:(id)loader didReceiveNativeContentAd:(id)ad;
-(void)adLoader:(id)loader didReceiveNativeAppInstallAd:(id)ad;
-(void)interstitialDidReceiveAdClick:(id)interstitial;
-(void)interstitialWillLeaveApplication:(id)interstitial;
-(void)interstitialDidDismissScreen:(id)interstitial;
-(void)interstitialWillDismissScreen:(id)interstitial;
-(void)interstitialWillPresentScreen:(id)interstitial;
-(void)interstitial:(id)interstitial didFailToReceiveAdWithError:(id)error;
-(void)interstitialDidReceiveAd:(id)interstitial;
-(void)adViewWillLeaveApplication:(id)adView;
-(void)adViewDidDismissScreen:(id)adView;
-(void)adViewWillDismissScreen:(id)adView;
-(void)adViewWillPresentScreen:(id)adView;
-(void)adView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)adViewDidReceiveAd:(id)adView;
-(BOOL)handlesUserImpressions;
-(BOOL)handlesUserClicks;
-(void)changeAdSizeTo:(GADAdSize)to;
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)isBannerAnimationOK:(int)ok;
-(void)stopBeingDelegate;
-(void)getNativeAdWithAdTypes:(id)adTypes options:(id)options;
-(void)getInterstitial;
-(void)getBannerWithSize:(GADAdSize)size;
-(id)initWithGADMAdNetworkConnector:(id)gadmadNetworkConnector;
-(void)dealloc;
-(id)request;
-(void)rewardBasedVideoAdDidReceiveAdClick:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAd:(id)ad didFailToLoadWithError:(id)error;
-(void)rewardBasedVideoAd:(id)ad didRewardUserWithReward:(id)reward;
-(void)rewardBasedVideoAdWillLeaveApplication:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidClose:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidStartPlaying:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidOpen:(id)rewardBasedVideoAd;
-(void)rewardBasedVideoAdDidReceiveAd:(id)rewardBasedVideoAd;
-(void)presentRewardBasedVideoAdWithRootViewController:(id)rootViewController;
-(void)requestRewardBasedVideoAd;
-(void)setUp;
-(id)initWithRewardBasedVideoAdNetworkConnector:(id)rewardBasedVideoAdNetworkConnector;
@end

@interface GADSearchBannerView : GADBannerView <GADDynamicHeightSearchBannerViewDelegate> {
	GADDynamicHeightSearchBannerView* _dynamicHeightAdView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADDynamicHeightSearchBannerView* dynamicHeightAdView;
@property(assign, nonatomic) __weak id<GADAdSizeDelegate> adSizeDelegate;
-(void).cxx_destruct;
-(void)bannerView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)bannerView:(id)view didUpdateDesiredContentSize:(CGSize)size;
-(void)bannerView:(id)view didReceiveLandingPageURL:(id)url;
-(void)bannerViewDidReceiveAd:(id)bannerView;
-(void)setAdUnitID:(id)anId;
-(void)setFrame:(CGRect)frame;
-(void)loadRequest:(id)request;
-(void)commonInitWithAdSize:(GADAdSize)adSize;
@end

@interface GADSearchRequest : GADRequest {
	NSString* _query;
	UIColor* _backgroundColor;
	UIColor* _gradientFrom;
	UIColor* _gradientTo;
	UIColor* _headerColor;
	UIColor* _descriptionTextColor;
	UIColor* _anchorTextColor;
	NSString* _fontFamily;
	unsigned _headerTextSize;
	UIColor* _borderColor;
	unsigned _borderType;
	unsigned _borderThickness;
	NSString* _customChannels;
	unsigned _callButtonColor;
}
@property(assign, nonatomic) unsigned callButtonColor;
@property(copy, nonatomic) NSString* customChannels;
@property(assign, nonatomic) unsigned borderThickness;
@property(assign, nonatomic) unsigned borderType;
@property(copy, nonatomic) UIColor* borderColor;
@property(assign, nonatomic) unsigned headerTextSize;
@property(copy, nonatomic) NSString* fontFamily;
@property(copy, nonatomic) UIColor* anchorTextColor;
@property(copy, nonatomic) UIColor* descriptionTextColor;
@property(copy, nonatomic) UIColor* headerColor;
@property(copy, nonatomic) UIColor* gradientTo;
@property(copy, nonatomic) UIColor* gradientFrom;
@property(copy, nonatomic) UIColor* backgroundColor;
@property(copy, nonatomic) NSString* query;
-(void).cxx_destruct;
-(BOOL)cacheable;
-(void)setBackgroundGradientFrom:(id)from toColor:(id)color;
-(void)setBackgroundSolid:(id)solid;
-(id)threadSafeParameters;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithParameters:(id)parameters;
@end

@interface GADClickTrackerCollection : XXUnknownSuperclass <GADClickTrackerDelegate> {
	NSMutableSet* _trackers;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableSet* trackers;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)tracker:(id)tracker didFailWithError:(id)error;
-(void)tracker:(id)tracker didRedirect:(id)redirect;
-(void)cleanupTrackers;
-(void)trackURL:(id)url;
-(void)trackURL:(id)url cacheEnabled:(BOOL)enabled;
-(void)trackURLs:(id)urls cacheEnabled:(BOOL)enabled;
-(void)dealloc;
-(id)init;
-(void)trackMediationURLsFromTemplates:(id)templates defaultTemplate:(id)aTemplate networkID:(id)anId allocationID:(id)anId4 qData:(id)data appKey:(id)key refresh:(BOOL)refresh durations:(id)durations exitCodes:(id)codes fillStatus:(id)status;
@end

@interface GADAdViewRenderedChecker : XXUnknownSuperclass {
	GADAdView* _adView;
	id<GADAdViewRenderedCheckerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<GADAdViewRenderedCheckerDelegate> delegate;
@property(assign, nonatomic) __weak GADAdView* adView;
-(void).cxx_destruct;
-(float)percentOfImage:(id)image ofColor:(id)color;
-(void)checkIsContentRenderedInAdView;
@end

@interface GADAdFetcher : XXUnknownSuperclass <GADURLConnectionDelegate> {
	BOOL _hasStartedFetch;
	BOOL _hasNotifiedDelegate;
	NSString* _signedInAdsToken;
	BOOL _adConnectionHasCompleted;
	NSRecursiveLock* _recursiveLock;
	GADAd* _ad;
	GADRequest* _request;
	id<GADAdFetcherDelegate> _delegate;
	GADTiming* _timer;
	GADURLConnection* _adConnection;
}
@property(assign, nonatomic) BOOL adConnectionHasCompleted;
@property(retain, nonatomic) GADURLConnection* adConnection;
@property(retain, nonatomic) GADTiming* timer;
@property(assign, nonatomic) __weak id<GADAdFetcherDelegate> delegate;
@property(retain, nonatomic) GADRequest* request;
@property(retain, nonatomic) GADAd* ad;
@property(retain, nonatomic) NSRecursiveLock* recursiveLock;
+(id)whitelistedDomains;
-(void).cxx_destruct;
-(void)connection:(id)connection loadDidFail:(id)load httpStatusCode:(int)code;
-(void)connection:(id)connection loadDidFinish:(id)load baseURL:(id)url;
-(void)connection:(id)connection loadDidReceiveCachedResponse:(id)load;
-(BOOL)connection:(id)connection loadShouldUseCachedResponse:(id)load;
-(void)connection:(id)connection loadDidReceiveRedirectResponse:(id)load;
-(id)connection:(id)connection shouldRedirectToURL:(id)url;
-(unsigned)adResponseTypeFromHeaders:(id)headers requestError:(id*)error;
-(void)processHTTPHeaders:(id)headers;
-(void)resourceFailedToLoadWithError:(id)error responseCode:(unsigned)code;
-(void)markFetchComplete;
-(void)markFetchStart;
-(void)completedURLConnection;
-(BOOL)startFetchWithRequestURL:(id)requestURL responseHeaders:(id)headers error:(id*)error;
-(id)requestHeadersForURL:(id)url;
-(BOOL)fetchRequestURL:(id)url delegate:(id)delegate responseHeaders:(id)headers responseAd:(id)ad error:(id*)error;
-(BOOL)fetchRequestURL:(id)url delegate:(id)delegate error:(id*)error;
-(BOOL)fetchRemainingContentForAd:(id)ad headers:(id)headers delegate:(id)delegate error:(id*)error;
-(void)cancel;
-(void)dealloc;
-(id)init;
@end

@interface GADVideoMetadataGMSGHandler : GADGMSGHandler {
}
+(id)actionBlockDictionary;
-(void)adView:(id)view didReceiveVideoMetadataAction:(id)action;
@end

@interface GADInterstitialPool : XXUnknownSuperclass {
	NSMutableArray* _entries;
	GADRequest* _request;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSString* _adUnitID;
}
@property(readonly, copy, nonatomic) NSString* adUnitID;
@property(copy) GADRequest* request;
-(void).cxx_destruct;
-(id)nextEntry;
-(void)fillQueue;
-(void)addCacheEntryWithTimeout:(double)timeout maxCount:(int)count;
-(void)scheduleTimeout:(double)timeout cacheEntry:(id)entry;
-(id)initWithRequest:(id)request adUnitID:(id)anId;
-(id)init;
@end

@interface GADMAdNetworkConnectorNativeExpressAd : GADMAdNetworkConnector {
	GADMAdNetworkConnectorNativeAd* _nativeAdConnector;
	GADAdType* _adType;
	GADAdLoaderConfiguration* _adLoaderConfiguration;
}
@property(retain, nonatomic) GADAdLoaderConfiguration* adLoaderConfiguration;
+(id)JSONAssetsFromMediatedNativeAppInstallAd:(id)mediatedNativeAppInstallAd;
+(id)JSONAssetsFromMediatedNativeContentAd:(id)mediatedNativeContentAd;
-(void).cxx_destruct;
-(void)loadNativeExpressHTMLTemplateForMediatedNativeAd:(id)mediatedNativeAd;
-(id)assetsFromMediatedNativeAd:(id)mediatedNativeAd;
-(void)adapter:(id)adapter didFailAd:(id)ad;
-(void)adapter:(id)adapter didReceiveMediatedNativeAd:(id)ad;
-(void)getAdFromAdapterWithType:(id)type;
-(void)setUpAdapter;
-(void)setAdManager:(id)manager;
-(id)initWithConfig:(id)config networkConfig:(id)config2;
@end

@interface GADAdReward : XXUnknownSuperclass {
	NSString* _type;
	NSDecimalNumber* _amount;
}
@property(readonly, copy, nonatomic) NSDecimalNumber* amount;
@property(readonly, copy, nonatomic) NSString* type;
-(void).cxx_destruct;
-(id)initWithRewardType:(id)rewardType rewardAmount:(id)amount;
-(id)initWithRewardDictionary:(id)rewardDictionary;
-(id)init;
@end

@interface GADDynamicHeightSearchRequest : GADRequest {
	NSMutableDictionary* _requestParameters;
	BOOL _adTestEnabled;
	BOOL _clickToCallExtensionEnabled;
	BOOL _locationExtensionEnabled;
	BOOL _plusOnesExtensionEnabled;
	BOOL _sellerRatingsExtensionEnabled;
	BOOL _siteLinksExtensionEnabled;
	BOOL _titleUnderlineHidden;
	BOOL _boldTitleEnabled;
	BOOL _detailedAttributionExtensionEnabled;
	BOOL _longerHeadlinesExtensionEnabled;
	NSString* _query;
	int _adPage;
	NSString* _channel;
	NSString* _hostLanguage;
	NSString* _locationExtensionTextColor;
	float _locationExtensionFontSize;
	NSString* _CSSWidth;
	int _numberOfAds;
	NSString* _fontFamily;
	NSString* _attributionFontFamily;
	float _annotationFontSize;
	float _attributionFontSize;
	float _descriptionFontSize;
	float _domainLinkFontSize;
	float _titleFontSize;
	NSString* _adBorderColor;
	NSString* _adSeparatorColor;
	NSString* _annotationTextColor;
	NSString* _attributionTextColor;
	NSString* _backgroundColor;
	NSString* _borderColor;
	NSString* _domainLinkColor;
	NSString* _textColor;
	NSString* _titleLinkColor;
	NSString* _adBorderCSSSelections;
	float _adjustableLineHeight;
	float _attributionBottomSpacing;
	NSString* _borderCSSSelections;
	float _verticalSpacing;
}
@property(assign, nonatomic) BOOL longerHeadlinesExtensionEnabled;
@property(assign, nonatomic) BOOL detailedAttributionExtensionEnabled;
@property(assign, nonatomic) float verticalSpacing;
@property(assign, nonatomic) BOOL boldTitleEnabled;
@property(assign, nonatomic) BOOL titleUnderlineHidden;
@property(copy, nonatomic) NSString* borderCSSSelections;
@property(assign, nonatomic) float attributionBottomSpacing;
@property(assign, nonatomic) float adjustableLineHeight;
@property(copy, nonatomic) NSString* adBorderCSSSelections;
@property(copy, nonatomic) NSString* titleLinkColor;
@property(copy, nonatomic) NSString* textColor;
@property(copy, nonatomic) NSString* domainLinkColor;
@property(copy, nonatomic) NSString* borderColor;
@property(copy, nonatomic) NSString* backgroundColor;
@property(copy, nonatomic) NSString* attributionTextColor;
@property(copy, nonatomic) NSString* annotationTextColor;
@property(copy, nonatomic) NSString* adSeparatorColor;
@property(copy, nonatomic) NSString* adBorderColor;
@property(assign, nonatomic) float titleFontSize;
@property(assign, nonatomic) float domainLinkFontSize;
@property(assign, nonatomic) float descriptionFontSize;
@property(assign, nonatomic) float attributionFontSize;
@property(assign, nonatomic) float annotationFontSize;
@property(copy, nonatomic) NSString* attributionFontFamily;
@property(copy, nonatomic) NSString* fontFamily;
@property(assign, nonatomic) int numberOfAds;
@property(copy, nonatomic) NSString* CSSWidth;
@property(assign, nonatomic) BOOL siteLinksExtensionEnabled;
@property(assign, nonatomic) BOOL sellerRatingsExtensionEnabled;
@property(assign, nonatomic) BOOL plusOnesExtensionEnabled;
@property(assign, nonatomic) BOOL locationExtensionEnabled;
@property(assign, nonatomic) BOOL clickToCallExtensionEnabled;
@property(assign, nonatomic) float locationExtensionFontSize;
@property(copy, nonatomic) NSString* locationExtensionTextColor;
@property(copy, nonatomic) NSString* hostLanguage;
@property(copy, nonatomic) NSString* channel;
@property(assign, nonatomic) BOOL adTestEnabled;
@property(assign, nonatomic) int adPage;
@property(copy, nonatomic) NSString* query;
-(void).cxx_destruct;
-(id)CSADynamicHeightSearchRequestURLWithAdUnitID:(id)adUnitID;
-(id)dynamicHeightAdURLFragmentsWithAdUnitID:(id)adUnitID;
-(void)parameterHelperSetValue:(id)value forKey:(id)key;
-(void)setAdvancedOptionValue:(id)value forKey:(id)key;
-(id)copyWithZone:(NSZone*)zone;
-(id)init;
@end

@interface GADStubsForGTMOAuth2Authentication : XXUnknownSuperclass {
}
+(id)encodedQueryParametersForDictionary:(id)dictionary;
@end

@interface GADTokenCacheEntry : XXUnknownSuperclass <NSCoding> {
	NSString* _token;
	NSDate* _lastAccess;
	NSDate* _expiration;
	double _lifespanInSeconds;
}
@property(assign, nonatomic) double lifespanInSeconds;
@property(copy, nonatomic) NSDate* expiration;
@property(copy, nonatomic) NSDate* lastAccess;
@property(copy, nonatomic) NSString* token;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface GADTokenDispenser : XXUnknownSuperclass {
	NSMutableDictionary* _cachedTokens;
	NSMutableDictionary* _cachedTokenUsers;
	NSOperationQueue* _tokenRequestQueue;
	GADSignedInUser* _currentUser;
	BOOL _observingIdentitySDK;
	NSTimer* _refreshTimer;
	double _minLifespan;
}
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)rescheduleRefreshes;
-(void)refreshTokens;
-(void)requestTokenForUser:(id)user;
-(void)cacheTokenFromResponseData:(id)responseData user:(id)user;
-(void)removeCacheEntryForUser:(id)user;
-(void)setCacheEntry:(id)entry forUser:(id)user;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setCurrentUser:(id)user;
-(void)refreshSignedInUser;
-(void)refreshToken:(id)token;
-(id)token;
-(void)dealloc;
-(id)init;
@end

@interface GADCachedURLResponse : XXUnknownSuperclass {
	NSCachedURLResponse* _cachedURLResponse;
	NSDate* _expirationDate;
	NSURL* _destinationURL;
}
@property(copy, nonatomic) NSURL* destinationURL;
@property(copy, nonatomic) NSDate* expirationDate;
@property(readonly, copy, nonatomic) NSData* data;
@property(readonly, copy, nonatomic) NSURLResponse* response;
-(void).cxx_destruct;
-(id)initWithResponse:(id)response data:(id)data expirationDate:(id)date destinationURL:(id)url;
@end

@interface GADCSIReporter : XXUnknownSuperclass {
	GADCSIConfiguration* _configuration;
}
-(void).cxx_destruct;
-(id)URLForTimeRecorder:(id)timeRecorder;
-(void)reportTimeRecorder:(id)recorder completionBlock:(id)block;
-(id)initWithConfiguration:(id)configuration;
-(id)init;
@end

@interface GADCrashReporter : XXUnknownSuperclass {
	/*function-pointer*/ void* _previousUncaughtExceptionHandler;
	BOOL _reportingEnabled;
}
@property(assign, nonatomic) BOOL reportingEnabled;
+(id)sharedInstance;
-(void)handleUncaughtException:(id)exception;
-(void)reportUncaughtException:(id)exception;
-(id)init;
@end

@interface GADURLConnection : XXUnknownSuperclass <NSURLConnectionDataDelegate> {
	BOOL _isInProgress;
	BOOL _allowCache;
	NSURL* _sourceURL;
	NSURL* _destinationURL;
	id<GADURLConnectionDelegate> _delegate;
	NSURLConnection* _connection;
	NSURLResponse* _response;
	NSMutableData* _receivedData;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableData* receivedData;
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSURLConnection* connection;
@property(assign, nonatomic) __weak id<GADURLConnectionDelegate> delegate;
@property(assign, nonatomic) BOOL allowCache;
@property(copy, nonatomic) NSURL* destinationURL;
@property(copy, nonatomic) NSURL* sourceURL;
@property(assign, nonatomic) BOOL isInProgress;
+(void)clearCache;
+(id)cacheKeyForURL:(id)url;
+(id)defaultCachePath;
+(id)memoryCache;
-(void).cxx_destruct;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)tryToStoreResponseAndData;
-(id)cachedResponseForURL:(id)url;
-(void)dealloc;
-(void)cancel;
-(void)stop;
-(BOOL)startWithRequestURL:(id)requestURL delegate:(id)delegate error:(id*)error;
@end

@interface GADWiggleGestureRecognizer : XXUnknownSuperclass {
	float _distanceMoved;
	int _gestureState;
	int _gestureAxis;
}
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)isMovementInOppositeAxisWithCurrentPoint:(CGPoint)currentPoint previousPoint:(CGPoint)point;
-(float)positionFromPoint:(CGPoint)point inAxis:(int)axis;
-(void)reset;
-(id)initWithGestureAxis:(int)gestureAxis;
@end

@interface GADAdConfiguration : XXUnknownSuperclass {
	NSDictionary* _options;
}
@property(readonly, copy, nonatomic) NSDictionary* options;
-(void).cxx_destruct;
-(id)initWithOptions:(id)options;
@end

@interface GADNativeAd : XXUnknownSuperclass <GADMediatedNativeAd, GADSlotAdEventDelegate, GADNativeAdViewPolicyDelegate> {
	BOOL _hasRecordedImpression;
	NSSet* _impressionTrackingURLs;
	NSMutableSet* _requestedAssets;
	NSMutableSet* _completedAssets;
	BOOL _failedToLoadARequiredAsset;
	BOOL _assetLoadingStarted;
	NSMutableArray* _assetLoadCompletionHandlers;
	NSObject<OS_dispatch_queue>* _lockQueue;
	id<GADNativeAdDelegate> _delegate;
	UIViewController* _rootViewController;
	NSDictionary* _extraAssets;
	NSString* _adNetworkClassName;
	NSString* _adUnitID;
	NSDictionary* _adConfiguration;
	GADMediatedNativeAd* _mediatedNativeAd;
	GADSlot* _slot;
	NSSet* _thirdPartyClickTrackingURLs;
	NSString* _googleClickTrackingURLString;
	NSArray* _clickActions;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSArray* clickActions;
@property(copy, nonatomic) NSString* googleClickTrackingURLString;
@property(copy, nonatomic) NSSet* thirdPartyClickTrackingURLs;
@property(retain, nonatomic) GADSlot* slot;
@property(retain, nonatomic) GADMediatedNativeAd* mediatedNativeAd;
@property(readonly, copy, nonatomic) NSDictionary* adConfiguration;
@property(copy, nonatomic) NSString* adUnitID;
@property(copy, nonatomic) NSString* adNetworkClassName;
@property(copy, nonatomic) NSDictionary* extraAssets;
@property(assign, nonatomic) __weak UIViewController* rootViewController;
@property(assign, nonatomic) __weak id<GADNativeAdDelegate> delegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)supportHTMLURL;
+(Class)classFromMediatedNativeAd:(id)mediatedNativeAd;
+(Class)classFromAdConfigurationDictionary:(id)adConfigurationDictionary;
+(id)firstAdObjectInAdConfigurationDictionary:(id)adConfigurationDictionary;
-(void).cxx_destruct;
-(void)slotWillLeaveApplication:(id)slot;
-(void)slotDidDismissScreen:(id)slot;
-(void)slotWillDismissScreen:(id)slot;
-(void)slotWillPresentScreen:(id)slot;
-(void)nativeAdViewPolicy:(id)policy didUnloadNativeAd:(id)ad fromView:(id)view;
-(void)nativeAdViewPolicy:(id)policy didBeginTrackingView:(id)view;
-(void)callAndClearAssetLoadCompletionHandlersWithError:(id)error;
-(void)addAssetWithNameToRequestedAssets:(id)requestedAssets;
-(void)loadAssetsWithCompletionHandler:(id)completionHandler;
-(BOOL)shouldLoadAssets;
-(void)failedToLoadAssetWithName:(id)name;
-(void)finishedLoadingAssetWithName:(id)name;
-(void)notifyLoadingDelegateIfAllRequestedAssetsHaveLoaded;
-(id)requiredAssets;
-(BOOL)hasRecordedImpression;
-(void)recordImpression;
-(void)performClickOnView:(id)view assetName:(id)name environment:(id)environment;
-(id)clickActionTemplateID;
-(BOOL)hasValidConfigurationForRequestParameters:(id)requestParameters;
-(void)gadNativeAd_commonInit;
-(void)dealloc;
-(id)init;
-(id)initWithMediatedNativeAd:(id)mediatedNativeAd options:(id)options;
-(id)initWithDictionary:(id)dictionary options:(id)options;
-(void)mediatedNativeAdWillLeaveApplication:(id)mediatedNativeAd;
-(void)mediatedNativeAdDidDismissScreen:(id)mediatedNativeAd;
-(void)mediatedNativeAdWillDismissScreen:(id)mediatedNativeAd;
-(void)mediatedNativeAdWillPresentScreen:(id)mediatedNativeAd;
-(void)mediatedNativeAdDidRecordClick:(id)mediatedNativeAd;
-(void)mediatedNativeAdDidRecordImpression:(id)mediatedNativeAd;
-(void)stopObservingMediatedNativeAd;
-(void)observeNotificationsFromMediatedNativeAd;
-(id)mediatedNativeAdDelegate;
@end

@interface GADBinaryHeap : XXUnknownSuperclass {
	CFBinaryHeapRef _heap;
}
@property(readonly, assign, nonatomic) unsigned count;
-(id)sortedObjects;
-(id)removedMinimum;
-(id)minimum;
-(BOOL)containsObject:(id)object;
-(void)addObject:(id)object;
-(void)dealloc;
-(id)initWithComparator:(/*function-pointer*/ void*)comparator;
-(id)init;
@end

@interface GADSwipeToViewControllerGMSGHandler : GADGMSGHandler {
	GADSlot* _slot;
}
@property(assign, nonatomic) __weak GADSlot* slot;
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)adView:(id)view disableSwipeToViewController:(id)viewController;
-(void)adView:(id)view enableSwipeToViewController:(id)viewController;
-(id)initWithSlot:(id)slot;
@end

@interface GADMRAIDInterceptor : XXUnknownSuperclass {
	NSString* _mraidLocationToLoad;
}
@property(copy, nonatomic) NSString* mraidLocationToLoad;
+(void)resetCanInitWithRequestCounter;
+(void)resetToDefaultPaths;
+(BOOL)isAllowed;
+(id)canonicalRequestForRequest:(id)request;
+(BOOL)canInitWithRequest:(id)request;
+(BOOL)shouldRedirectForMRAID:(id)mraid;
+(id)refererURLFromRequest:(id)request;
+(id)expandedBannerImplementationPath;
+(void)setExpandedBannerImplementationPath:(id)path;
+(id)interstitialImplementationPath;
+(void)setInterstitialImplementationPath:(id)path;
+(id)bannerImplementationPath;
+(void)setBannerImplementationPath:(id)path;
+(void)updateImplementationsPaths;
+(BOOL)urlIsAnImplementationPath:(id)path;
+(void)initialize;
+(void)allow;
+(void)disallow;
+(BOOL)canInitWithRequestIsEnabled;
+(void)disableCanInitWithRequest;
+(void)enableCanInitWithRequest;
+(id)classLock;
-(void).cxx_destruct;
-(void)stopLoading;
-(void)startLoading;
-(id)initWithRequest:(id)request cachedResponse:(id)response client:(id)client;
@end

@interface GADAdURLStash : XXUnknownSuperclass {
}
+(id)urlStashLock;
+(CFDictionaryRef)urlStash;
+(id)canonicalURLForURL:(id)url;
+(BOOL)hasStashedURLs;
+(id)viewForURL:(id)url;
+(void)remove:(id)remove;
+(void)add:(id)add forView:(id)view;
@end

@interface GADNativeContentAdView : XXUnknownSuperclass {
	GADNativeAdViewPolicy* _nativeAdViewPolicy;
	UIView* _headlineView;
	UIView* _bodyView;
	UIView* _imageView;
	UIView* _logoView;
	UIView* _callToActionView;
	UIView* _advertiserView;
}
@property(assign, nonatomic) __weak UIView* advertiserView;
@property(assign, nonatomic) __weak UIView* callToActionView;
@property(assign, nonatomic) __weak UIView* logoView;
@property(assign, nonatomic) __weak UIView* imageView;
@property(assign, nonatomic) __weak UIView* bodyView;
@property(assign, nonatomic) __weak UIView* headlineView;
@property(retain, nonatomic) GADNativeContentAd* nativeContentAd;
-(void).cxx_destruct;
-(void)didMoveToSuperview;
-(void)layoutSubviews;
-(void)commonInit;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

@interface GADMUtilities : XXUnknownSuperclass {
}
+(id)mediationURLFrom:(id)from adLocationID:(id)anId adNetworkRefresh:(BOOL)refresh allocationID:(id)anId4 adNetworkID:(id)anId5 qData:(id)data sessionID:(id)anId7 sequenceNumber:(id)number exitCodes:(id)codes durations:(id)durations fillStatus:(id)status;
@end

@interface GADSession : XXUnknownSuperclass {
	NSString* _uniqueID;
}
@property(readonly, copy, nonatomic) NSString* uniqueID;
-(void).cxx_destruct;
-(id)init;
@end

@interface GADSupplementalAdAppViewController : GADAdAppViewController {
}
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)finishDismissal;
-(void)finishAppearing;
@end

@interface GADInAppPurchaseTransactionReporter : XXUnknownSuperclass <SKPaymentTransactionObserver> {
	BOOL _reportingEnabled;
	BOOL _wasDisabled;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL shouldBeEnabled;
+(id)sharedInstance;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)reportTransactionsFromArray:(id)array sharedParameters:(id)parameters;
-(void)reportTransactionsFromArray:(id)array;
-(BOOL)wasDisabled;
-(void)disableReporting;
-(void)enableReporting;
-(void)dealloc;
@end

@interface GADMessageComposeDelegateProxy : XXUnknownSuperclass <MFMessageComposeViewControllerDelegate> {
	GADMessageComposeDelegateProxy* _strongSelf;
	id<MFMessageComposeViewControllerDelegate> _messageComposeDelegate;
	MFMessageComposeViewController* _messageComposeViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MFMessageComposeViewController* messageComposeViewController;
@property(assign, nonatomic) __weak id<MFMessageComposeViewControllerDelegate> messageComposeDelegate;
+(id)associatedDelegateProxyForController:(id)controller;
-(void).cxx_destruct;
-(void)stopProxying;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(id)initInternal;
-(id)init;
@end

@interface GADVideoPlayerGMSGHandler : GADGMSGHandler {
}
+(id)subActionBlockDictionary;
+(id)actionBlockDictionary;
-(void)adView:(id)view didReceiveSeekToCurrentTimeAction:(id)currentTimeAction;
-(void)adView:(id)view didReceivePauseVideoAction:(id)action;
-(void)adView:(id)view didReceivePlayVideoAction:(id)action;
-(void)adView:(id)view didReceiveLoadVideoAction:(id)action;
-(void)adView:(id)view didReceiveSetVolumeAction:(id)action;
-(void)adView:(id)view didReceiveMutedVideoAction:(id)action;
-(void)adView:(id)view didReceiveBackgroundAction:(id)action;
-(void)adView:(id)view didReceiveShowVideoAction:(id)action;
-(void)adView:(id)view didReceiveHideVideoAction:(id)action;
-(void)adView:(id)view didReceiveSetVideoSourceAction:(id)action;
-(void)adView:(id)view didReceiveNewVideoAction:(id)action;
-(void)adView:(id)view didReceiveRotationVideoAction:(id)action;
-(void)adView:(id)view didReceivePositionVideoAction:(id)action;
-(void)adView:(id)view didReceiveVideoAction:(id)action;
@end

@interface GADMAdapterCustomEvents : XXUnknownSuperclass <GADMAdNetworkAdapter, GADCustomEventBannerDelegate, GADCustomEventInterstitialDelegate, GADCustomEventNativeAdDelegate> {
	id<GADMAdNetworkConnector> _connector;
	id<GADCustomEventBanner> _customEventBanner;
	id<GADCustomEventInterstitial> _customEventInterstitial;
	id<GADCustomEventNativeAd> _customEventNativeAd;
}
@property(readonly, assign, nonatomic) UIViewController* viewControllerForPresentingModalView;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<GADCustomEventNativeAd> customEventNativeAd;
@property(retain, nonatomic) id<GADCustomEventInterstitial> customEventInterstitial;
@property(retain, nonatomic) id<GADCustomEventBanner> customEventBanner;
@property(assign, nonatomic) __weak id<GADMAdNetworkConnector> connector;
+(Class)networkExtrasClass;
+(id)adapterVersion;
-(void).cxx_destruct;
-(void)customEventInterstitial:(id)interstitial didReceiveAd:(id)ad;
-(void)customEventBanner:(id)banner clickDidOccurInAd:(id)click;
-(void)customEventNativeAd:(id)ad didFailToLoadWithError:(id)error;
-(void)customEventNativeAd:(id)ad didReceiveMediatedNativeAd:(id)ad2;
-(void)customEventInterstitialWillLeaveApplication:(id)customEventInterstitial;
-(void)customEventInterstitialDidDismiss:(id)customEventInterstitial;
-(void)customEventInterstitialWillDismiss:(id)customEventInterstitial;
-(void)customEventInterstitialWillPresent:(id)customEventInterstitial;
-(void)customEventInterstitialWasClicked:(id)clicked;
-(void)customEventInterstitial:(id)interstitial didFailAd:(id)ad;
-(void)customEventInterstitialDidReceiveAd:(id)customEventInterstitial;
-(void)customEventBannerWillLeaveApplication:(id)customEventBanner;
-(void)customEventBannerDidDismissModal:(id)customEventBanner;
-(void)customEventBannerWillDismissModal:(id)customEventBanner;
-(void)customEventBannerWillPresentModal:(id)customEventBanner;
-(void)customEventBannerWasClicked:(id)clicked;
-(void)customEventBanner:(id)banner didFailAd:(id)ad;
-(void)customEventBanner:(id)banner didReceiveAd:(id)ad;
-(void)callBackToConnectorWithError:(id)error isInterstitial:(BOOL)interstitial;
-(void)dealloc;
-(BOOL)handlesUserImpressions;
-(BOOL)handlesUserClicks;
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)isBannerAnimationOK:(int)ok;
-(void)stopBeingDelegate;
-(void)getNativeAdWithAdTypes:(id)adTypes options:(id)options;
-(void)getInterstitial;
-(void)getBannerWithSize:(GADAdSize)size;
-(id)customEventWithCredentials:(id)credentials isInterstitial:(BOOL)interstitial;
-(id)initWithGADMAdNetworkConnector:(id)gadmadNetworkConnector;
@end

@interface GADCustomEventRequest : XXUnknownSuperclass {
	BOOL _userHasLocation;
	BOOL _isTesting;
	int _userGender;
	NSDate* _userBirthday;
	float _userLatitude;
	float _userLongitude;
	float _userLocationAccuracyInMeters;
	NSString* _userLocationDescription;
	NSArray* _userKeywords;
	NSDictionary* _additionalParameters;
}
@property(readonly, assign, nonatomic) BOOL isTesting;
@property(readonly, copy, nonatomic) NSDictionary* additionalParameters;
@property(readonly, copy, nonatomic) NSArray* userKeywords;
@property(readonly, copy, nonatomic) NSString* userLocationDescription;
@property(readonly, assign, nonatomic) float userLocationAccuracyInMeters;
@property(readonly, assign, nonatomic) float userLongitude;
@property(readonly, assign, nonatomic) float userLatitude;
@property(readonly, assign, nonatomic) BOOL userHasLocation;
@property(readonly, copy, nonatomic) NSDate* userBirthday;
@property(readonly, assign, nonatomic) int userGender;
-(void).cxx_destruct;
-(id)initWithConnector:(id)connector;
@end

@interface GADDelayPageLoadGMSGHandler : GADGMSGHandler {
	int _delayCount;
	id<GADDelayLoadDelegate> _delegate;
}
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)handleDelayLoadWithParameters:(id)parameters;
-(void)adView:(id)view delayPageLoadWithArguments:(id)arguments;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

@interface GADAdViewActiveViewReporter : XXUnknownSuperclass {
	BOOL _reporting;
	id<GADAdViewActiveViewMonitoring> _observer;
}
@property(readonly, assign, nonatomic) BOOL reporting;
@property(assign, nonatomic) __weak id<GADAdViewActiveViewMonitoring> observer;
-(void).cxx_destruct;
-(void)dealloc;
-(void)stop;
-(void)start;
@end

@interface GADPinger : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* _lockQueue;
	GADScheduler* _scheduler;
	int _maximumRetryURLCount;
	int _URLRetryCount;
	NSMutableArray* _retryGroupKeys;
	NSMutableSet* _pingedURLs;
}
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)removeRetryURLString:(id)string retryGroupKey:(id)key;
-(void)storeRetryURLString:(id)string retryGroupKey:(id)key;
-(void)start;
-(void)pingWithRetryGroupKey:(id)retryGroupKey URL:(id)url retryURLString:(id)string;
-(void)pingRetryURLs;
-(void)pingURLString:(id)string queue:(id)queue completionBlock:(id)block;
-(id)init;
@end

@interface GADExtras : XXUnknownSuperclass <GADAdNetworkExtras> {
	NSDictionary* _additionalParameters;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSDictionary* additionalParameters;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface GADCorrelatorAdLoaderOptions : GADAdLoaderOptions {
	GADCorrelator* _correlator;
}
@property(retain, nonatomic) GADCorrelator* correlator;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface GADAdLoader : XXUnknownSuperclass <GADAdMediationDelegate, GADSlotAdLoadDelegate, GADSlotAdResponseDelegate, GADSlotDelegate> {
	GADSlot* _slot;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSDictionary* _adClassRequestParameters;
	id<GADAdLoaderDelegate> _delegate;
	NSString* _adUnitID;
	GADAdLoaderConfiguration* _adLoaderConfiguration;
	UIViewController* _rootViewController;
	NSMutableArray* _appEventAdLoaders;
	NSMutableArray* _adPreprocessors;
	NSMutableArray* _nativeAds;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSMutableArray* nativeAds;
@property(readonly, assign, nonatomic) NSMutableArray* adPreprocessors;
@property(readonly, assign, nonatomic) NSMutableArray* appEventAdLoaders;
@property(readonly, assign, nonatomic) __weak UIViewController* rootViewController;
@property(retain, nonatomic) GADAdLoaderConfiguration* adLoaderConfiguration;
@property(copy) NSDictionary* adClassRequestParameters;
@property(readonly, assign, nonatomic) NSString* adUnitID;
@property(assign, nonatomic) __weak id<GADAdLoaderDelegate> delegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)nativeAdDidFinishLoadingAssets:(id)nativeAd;
-(void)nativeAdDidFailToLoadRequiredAssets:(id)nativeAd;
-(void)slot:(id)slot didFailToLoadAdContentWithError:(id)error;
-(void)slotFinishedLoadingAdContent:(id)content;
-(CGRect)bounds;
-(CGRect)frame;
-(void)loadAssetsForNativeAd:(id)nativeAd;
-(BOOL)slot:(id)slot shouldProcessMediatedAdResponse:(id)response error:(id*)error;
-(BOOL)slot:(id)slot shouldProcessAdResponse:(id)response error:(id*)error;
-(void)handleFailedRequestWithRequestError:(id)requestError;
-(void)loadRequest:(id)request;
-(id)init;
-(id)initWithAdUnitID:(id)adUnitID rootViewController:(id)controller adTypes:(id)types options:(id)options;
-(void)ad:(id)ad processMediatedAd:(id)ad2 withCompletionHandler:(id)completionHandler;
-(id)adLoaderConfigurationForAd:(id)ad;
-(Class)connectorClassForAd:(id)ad;
-(void)processMediatedNativeAd:(id)ad withCompletionHandler:(id)completionHandler;
@end

@interface GADCustomEventExtras : XXUnknownSuperclass <GADAdNetworkExtras> {
	NSMutableDictionary* _extras;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(id)allExtras;
-(void)removeAllExtras;
-(id)extrasForLabel:(id)label;
-(void)setExtras:(id)extras forLabel:(id)label;
-(id)init;
@end

@interface GADCorrelator : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* _lockQueue;
	unsigned _correlationID;
}
@property(readonly, assign) unsigned correlationID;
-(void).cxx_destruct;
-(void)reset;
-(id)init;
@end

@interface GADInAppPurchaseProductCache : XXUnknownSuperclass {
	NSMutableSet* _invalidProducts;
	NSMutableDictionary* _validProductIDs;
	NSObject<OS_dispatch_queue>* _lockQueue;
}
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)requestProductsWithProductIdentifiers:(id)productIdentifiers queue:(id)queue completionHandler:(id)handler;
-(id)cachedProductForProductID:(id)productID;
-(id)init;
@end

@interface GADInterstitialAd : GADAd {
}
@end

@interface GADAdType : XXUnknownSuperclass {
	BOOL _isRewardBasedVideoAd;
	BOOL _isInterstitial;
	GADAdSize _adSize;
}
@property(assign, nonatomic) GADAdSize adSize;
@property(readonly, assign, nonatomic) BOOL isInterstitial;
+(id)interstitialAdType;
+(id)bannerAdTypeForSize:(GADAdSize)size;
-(id)description;
-(BOOL)isValid;
-(BOOL)isRewardBasedVideoAd;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)initForRewardBasedVideoAd;
-(id)initForInterstitial;
-(id)initWithAdSize:(GADAdSize)adSize;
-(id)init;
@end

@interface GADWeakReference : XXUnknownSuperclass {
	id _weakObject;
	NSValue* _uniqueID;
}
@property(readonly, assign, nonatomic) NSValue* uniqueID;
@property(readonly, assign, nonatomic) __weak id weakObject;
+(BOOL)set:(id)set containsObject:(id)object;
-(void).cxx_destruct;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)initWithObject:(id)object;
-(id)init;
@end

@interface GADMAdapterHTML : XXUnknownSuperclass <GADMAdNetworkAdapter, GADMWebViewRenderedCheckerDelegate, UIWebViewDelegate> {
	unsigned _checkRenderingCount;
	NSTimer* _checkRenderingTimer;
	GADMWebViewRenderedChecker* _webViewRenderedChecker;
	UIWebView* _webView;
	NSURL* _passbackURL;
	id<GADMAdNetworkConnector> _connector;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) id<GADMAdNetworkConnector> connector;
+(Class)networkExtrasClass;
+(id)adapterVersion;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(BOOL)isPassbackRequest:(id)request;
-(BOOL)isPath:(id)path equivalentToPath:(id)path2;
-(id)stripTrailingSlashFromPath:(id)path;
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)isBannerAnimationOK:(int)ok;
-(void)stopBeingDelegate;
-(void)getInterstitial;
-(void)createWebViewWithSize:(GADAdSize)size;
-(void)getBannerWithSize:(GADAdSize)size;
-(void)webView:(id)view isRendered:(BOOL)rendered;
-(id)errorWithCode:(int)code text:(id)text;
-(void)stopRenderingTimer;
-(void)startRenderingTimer;
-(void)failInterstitialRequest;
-(void)clearWebView;
-(void)dealloc;
-(id)init;
-(id)initWithGADMAdNetworkConnector:(id)gadmadNetworkConnector;
@end

@interface GADCSIConfiguration : XXUnknownSuperclass {
	NSString* _cachedUserAgentString;
	BOOL _reportingEnabled;
	NSString* _server;
	NSString* _serviceName;
	int _version;
}
@property(assign, nonatomic) int version;
@property(readonly, copy, nonatomic) NSString* userAgent;
@property(copy, nonatomic) NSString* serviceName;
@property(copy, nonatomic) NSString* server;
@property(assign, nonatomic) BOOL reportingEnabled;
+(id)deviceVersionString;
+(id)defaultConfiguration;
-(void).cxx_destruct;
-(void)setReportingProbability:(float)probability;
-(id)init;
-(id)initWithServiceName:(id)serviceName;
@end

@interface GADMailComposeDelegateProxy : XXUnknownSuperclass <MFMailComposeViewControllerDelegate> {
	GADMailComposeDelegateProxy* _strongSelf;
	id<MFMailComposeViewControllerDelegate> _mailComposeDelegate;
	MFMailComposeViewController* _mailComposeViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MFMailComposeViewController* mailComposeViewController;
@property(assign, nonatomic) __weak id<MFMailComposeViewControllerDelegate> mailComposeDelegate;
+(id)associatedDelegateProxyForController:(id)controller;
-(void).cxx_destruct;
-(void)stopProxying;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(id)initInternal;
-(id)init;
@end

@interface GADNativeExpressAdView : XXUnknownSuperclass <GADBannerViewDelegate, GADAdMediationDelegate, GADSlotAdResponseDelegate> {
	GADBannerView* _bannerView;
	GADAdConfiguration* _adConfiguration;
	id<GADNativeExpressAdViewDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) __weak NSString* adNetworkClassName;
@property(assign, nonatomic, getter=isAutoloadEnabled) BOOL autoloadEnabled;
@property(assign, nonatomic) __weak id<GADNativeExpressAdViewDelegate> delegate;
@property(assign, nonatomic) GADAdSize adSize;
@property(assign, nonatomic) __weak UIViewController* rootViewController;
@property(copy, nonatomic) NSString* adUnitID;
@property(readonly, assign, nonatomic) GADVideoController* videoController;
-(void).cxx_destruct;
-(BOOL)slot:(id)slot shouldProcessMediatedAdResponse:(id)response error:(id*)error;
-(BOOL)slot:(id)slot shouldProcessAdResponse:(id)response error:(id*)error;
-(id)adLoaderConfigurationForAd:(id)ad networkConfiguration:(id)configuration;
-(Class)connectorClassForAd:(id)ad;
-(void)adViewWillLeaveApplication:(id)adView;
-(void)adViewDidDismissScreen:(id)adView;
-(void)adViewWillDismissScreen:(id)adView;
-(void)adViewWillPresentScreen:(id)adView;
-(void)adView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)adViewDidReceiveAd:(id)adView;
-(id)videoOptions;
-(void)processAdOptions;
-(void)setAdOptions:(id)options;
-(void)loadRequest:(id)request;
-(id)initWithAdSize:(GADAdSize)adSize origin:(CGPoint)origin;
-(id)initWithAdSize:(GADAdSize)adSize;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame adSize:(GADAdSize)size;
-(void)commonInitWithBannerView:(id)bannerView;
@end

@interface GADMAdNetworkConnectorBanner : GADMAdNetworkConnector <GADImpressionMonitorDelegate> {
	GADImpressionMonitor* _impressionMonitor;
	BOOL _didNetworkReturn;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL didNetworkReturn;
-(void).cxx_destruct;
-(void)impressionMonitorDidMonitorImpression:(id)impressionMonitor;
-(void)adapterDidDismissInterstitial:(id)adapter;
-(void)adapterWillDismissInterstitial:(id)adapter;
-(void)adapterWillPresentInterstitial:(id)adapter;
-(void)adapter:(id)adapter didFailInterstitial:(id)interstitial;
-(void)adapterDidReceiveInterstitial:(id)adapter;
-(void)adapterWillLeaveApplication:(id)adapter;
-(void)adapterDidDismissFullScreenModal:(id)adapter;
-(void)adapterWillDismissFullScreenModal:(id)adapter;
-(void)adapterWillPresentFullScreenModal:(id)adapter;
-(void)adapter:(id)adapter didFailAd:(id)ad;
-(void)adapter:(id)adapter didReceiveAdView:(id)view;
-(void)getAdFromAdapterWithType:(id)type;
@end

@interface GADUnclickableView : XXUnknownSuperclass {
}
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface GADTransparentOverlayPresenter : XXUnknownSuperclass <GADOverlayPresenting> {
	GADViewController* _presentedViewController;
	UIView* _pivotView;
	UIView* _cropView;
	id _orientationChangeListener;
	id _placementDisappearanceObserver;
}
@property(readonly, assign, nonatomic, getter=isReadyToPresent) BOOL readyToPresent;
@property(assign, nonatomic) __weak GADViewController* presentedViewController;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id placementDisappearanceObserver;
@property(retain, nonatomic) id orientationChangeListener;
@property(retain, nonatomic) UIView* cropView;
@property(retain, nonatomic) UIView* pivotView;
+(CGRect)frameWithSize:(CGSize)size centeredInFrame:(CGRect)frame;
-(void).cxx_destruct;
-(void)setNeedsUpdateOrientation;
-(void)animateTransparentInterstitialPresentationWithCompletionHandler:(id)completionHandler;
-(void)composeTransparentInterstitialViewsForPresentation;
-(void)updateTransparentInterstitialOrientation;
-(CGRect)pivotedApplicationFrameForOrientation:(int)orientation;
-(CGAffineTransform)transformForOrientation:(int)orientation;
-(id)presentationViewController;
-(void)dismissWithCompletionHandler:(id)completionHandler;
-(void)presentFromViewController:(id)viewController completion:(id)completion;
-(void)dealloc;
-(id)init;
@end

@interface GADMAdNetworkConnectorInterstitial : GADMAdNetworkConnector {
	BOOL _calledWillDismissInterstitial;
}
@property(assign, nonatomic) BOOL calledWillDismissInterstitial;
-(void)adapter:(id)adapter didFailInterstitial:(id)interstitial;
-(void)adapter:(id)adapter didReceiveInterstitial:(id)interstitial;
-(void)adapterDidDismissFullScreenModal:(id)adapter;
-(void)adapterWillDismissFullScreenModal:(id)adapter;
-(void)adapterWillPresentFullScreenModal:(id)adapter;
-(void)adapter:(id)adapter clickDidOccurInBanner:(id)click;
-(void)adapter:(id)adapter didReceiveAdView:(id)view;
-(void)adapterWillLeaveApplication:(id)adapter;
-(void)adapterDidDismissInterstitial:(id)adapter;
-(void)adapterWillDismissInterstitial:(id)adapter;
-(void)adapterWillPresentInterstitial:(id)adapter;
-(void)adapter:(id)adapter didFailAd:(id)ad;
-(void)adapterDidReceiveInterstitial:(id)adapter;
-(void)getAdFromAdapterWithType:(id)type;
@end

@interface GADVideoPlayer : XXUnknownSuperclass <NSURLConnectionDelegate, NSURLConnectionDataDelegate> {
	BOOL _hasPostedCanPlayThrough;
	BOOL _isObserving;
	id _timeObserver;
	AVPlayer* _player;
	GADAdView* _adView;
	BOOL _muted;
	id<GADVideoPlayerDelegate> _delegate;
	NSURL* _sourceURL;
	float _volume;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL muted;
@property(assign, nonatomic) float volume;
@property(copy, nonatomic) NSURL* sourceURL;
@property(assign, nonatomic) __weak id<GADVideoPlayerDelegate> delegate;
-(void).cxx_destruct;
-(void)seekToTime:(double)time;
-(void)setAudioMixVolume:(float)volume;
-(void)pause;
-(void)pauseNativePlayer;
-(void)play;
-(void)playNativePlayer;
-(void)load;
-(void)notifyVideoRateChanged;
-(void)notifyVideoPlayerWithNewStatus:(int)newStatus;
-(void)notifyVideoReadyToPlay;
-(void)notifyVideoPlayerWithTime:(XXStruct_oHBkXC)time;
-(void)itemDidPlayToEnd:(id)item;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)stopObservingPlayer;
-(void)observePlayer;
-(void)dealloc;
-(id)initWithAdView:(id)adView;
-(id)init;
@end

@interface DFPInterstitial : GADInterstitial <DFPCustomRenderedAdEventHandler> {
	unsigned _previousCorrelationID;
	BOOL _customAdRenderingEnabled;
	id<GADAppEventDelegate> _appEventDelegate;
	id<DFPCustomRenderedInterstitialDelegate> _customRenderedInterstitialDelegate;
}
@property(assign, nonatomic, getter=isCustomAdRenderingEnabled) BOOL customAdRenderingEnabled;
@property(assign, nonatomic) __weak id<DFPCustomRenderedInterstitialDelegate> customRenderedInterstitialDelegate;
@property(assign, nonatomic) __weak id<GADAppEventDelegate> appEventDelegate;
@property(retain, nonatomic) GADCorrelator* correlator;
@property(readonly, copy, nonatomic) NSString* adUnitID;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)slot:(id)slot willLoadAdWithRequest:(id)request;
-(BOOL)slotShouldPreemptInProgressRequest:(id)slot;
-(void)slot:(id)slot didReceiveAppEvent:(id)event withInfo:(id)info;
-(void)presentFromRootViewController:(id)rootViewController;
-(BOOL)slot:(id)slot notifyPublisherToRenderCustomRenderingAd:(id)renderCustomRenderingAd error:(id*)error;
-(void)finishedRenderingAdView:(id)view;
-(void)recordCustomAdImpression;
-(void)recordClick;
@end

@interface DFPBannerView : GADBannerView <DFPCustomRenderedAdEventHandler> {
	unsigned _previousCorrelationID;
	id<GADAppEventDelegate> _appEventDelegate;
	NSArray* _validAdSizes;
	id<DFPCustomRenderedBannerViewDelegate> _customRenderedBannerViewDelegate;
}
@property(assign, nonatomic) __weak id<DFPCustomRenderedBannerViewDelegate> customRenderedBannerViewDelegate;
@property(assign, nonatomic) BOOL enableManualImpressions;
@property(retain, nonatomic) GADCorrelator* correlator;
@property(copy, nonatomic) NSArray* validAdSizes;
@property(assign, nonatomic) __weak id<GADAdSizeDelegate> adSizeDelegate;
@property(assign, nonatomic) __weak id<GADAppEventDelegate> appEventDelegate;
@property(copy, nonatomic) NSString* adUnitID;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)slot:(id)slot willLoadAdWithRequest:(id)request;
-(BOOL)slotShouldPreemptInProgressRequest:(id)slot;
-(BOOL)slot:(id)slot notifyPublisherToRenderCustomRenderingAd:(id)renderCustomRenderingAd error:(id*)error;
-(void)slot:(id)slot didReceiveAppEvent:(id)event withInfo:(id)info;
-(void)slot:(id)slot willResizeToAdSize:(GADAdSize)adSize;
-(void)setValidAdSizesWithSizes:(GADAdSize*)sizes;
-(void)recordImpression;
-(void)resize:(GADAdSize)resize;
-(void)finishedRenderingAdView:(id)view;
-(void)recordCustomAdImpression;
-(void)recordClick;
@end

@interface GADMAdURLAdapter : XXUnknownSuperclass <GADSDKCoreControllerDelegate, GADBannerViewDelegate, GADInterstitialDelegate, GADInterstitialAdClickDelegate, GADMAdNetworkAdapter> {
	BOOL _shouldRespondToSDKCore;
	GADBannerView* _banner;
	GADInterstitial* _interstitial;
	id<GADMInternalAdNetworkConnector> _connector;
	NSString* _requestID;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL shouldRespondToSDKCore;
@property(copy, nonatomic) NSString* requestID;
@property(assign, nonatomic) __weak id<GADMInternalAdNetworkConnector> connector;
@property(retain, nonatomic) GADInterstitial* interstitial;
@property(retain, nonatomic) GADBannerView* banner;
+(Class)networkExtrasClass;
+(id)adapterVersion;
-(void).cxx_destruct;
-(void)reportInterstitialLoadFailureWithCode:(int)code errorMessage:(id)message;
-(void)reportBannerLoadFailureWithCode:(int)code errorMessage:(id)message;
-(void)reportAdLoadFailureWithCode:(int)code errorMessage:(id)message;
-(void)interstitialDidReceiveAdClick:(id)interstitial;
-(void)interstitialWillLeaveApplication:(id)interstitial;
-(void)interstitialDidDismissScreen:(id)interstitial;
-(void)interstitialWillDismissScreen:(id)interstitial;
-(void)interstitialWillPresentScreen:(id)interstitial;
-(void)interstitial:(id)interstitial didFailToReceiveAdWithError:(id)error;
-(void)interstitialDidReceiveAd:(id)interstitial;
-(void)adViewWillLeaveApplication:(id)adView;
-(void)adViewDidDismissScreen:(id)adView;
-(void)adViewWillDismissScreen:(id)adView;
-(void)adViewWillPresentScreen:(id)adView;
-(void)adView:(id)view didFailToReceiveAdWithError:(id)error;
-(void)adViewDidReceiveAd:(id)adView;
-(void)failedJavaScriptFile;
-(void)invalidJavaScriptRequest;
-(void)loadAd:(id)ad headers:(id)headers;
-(void)loadAdURLWithParameters:(id)parameters;
-(int)requestedAdType;
-(id)requestParameters;
-(id)adLoadActionTimeRecorder;
-(void)loadRequest;
-(void)changeAdSizeTo:(GADAdSize)to;
-(void)presentInterstitialFromRootViewController:(id)rootViewController;
-(BOOL)isBannerAnimationOK:(int)ok;
-(void)stopBeingDelegate;
-(void)getInterstitial;
-(void)getBannerWithSize:(GADAdSize)size;
-(id)initWithGADMAdNetworkConnector:(id)gadmadNetworkConnector;
-(id)init;
@end

@interface GADMRAIDResizeOverlayPresenter : GADTransparentOverlayPresenter {
	BOOL _dismissToDefaultState;
	GADMRAIDResizeProperties* _resizeProperties;
	id<GADMRAIDEventHandling> _MRAIDEventHandler;
	UIView* _referenceView;
}
@property(retain, nonatomic) UIView* referenceView;
@property(assign, nonatomic) __weak id<GADMRAIDEventHandling> MRAIDEventHandler;
@property(assign, nonatomic) BOOL dismissToDefaultState;
@property(retain, nonatomic) GADMRAIDResizeProperties* resizeProperties;
+(CGRect)adjustedContentFrame:(CGRect)frame inBounds:(CGRect)bounds;
-(void).cxx_destruct;
-(void)updateTransparentInterstitialOrientation;
-(void)composeTransparentInterstitialViewsForPresentation;
-(BOOL)isReadyToPresent;
-(void)repositionContentIfNeeded;
-(CGRect)contentFrame;
-(BOOL)resizePropertiesAreValid:(id)valid relativeToView:(id)view;
-(id)initWithReferenceView:(id)referenceView;
-(id)init;
@end

@interface GADRewardBasedVideoAdGMSGHandler : GADGMSGHandler {
}
+(id)actionBlockDictionary;
-(void)adView:(id)view didReceiveGrantRewardAction:(id)action;
-(void)adView:(id)view didReceiveStartVideoAction:(id)action;
-(void)adView:(id)view didReceiveRewardBasedVideoAdAction:(id)action;
@end

@interface DFPRequest : GADRequest {
	NSString* _publisherProvidedID;
	NSArray* _categoryExclusions;
}
@property(copy, nonatomic) NSDictionary* customTargeting;
@property(copy, nonatomic) NSArray* categoryExclusions;
@property(copy, nonatomic) NSString* publisherProvidedID;
+(void)updateCorrelator;
-(void).cxx_destruct;
-(id)threadSafeParameters;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithParameters:(id)parameters;
@end

@interface GADPrecacheGMSGHandler : GADGMSGHandler <NSURLConnectionDelegate, NSURLConnectionDataDelegate> {
	GADAdView* _adView;
	NSURL* _cachedURL;
	NSURL* _sourceURL;
	BOOL _hasStartedPreloading;
	NSURLConnection* _preloadConnection;
	NSFileHandle* _cacheFileHandle;
	int _expectedDataLength;
	NSOperationQueue* _cacheOperationQueue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)dispatchPrecacheEventWithBytesLoaded:(int)bytesLoaded totalBytes:(int)bytes event:(id)event;
-(void)abort;
-(int)lastBytesAfterCleanUp;
-(void)preload;
-(void)adView:(id)view didReceivePrecacheNotification:(id)notification;
-(void)dealloc;
@end

@interface GADAdNetworkJavaScriptAdViewDelegate : GADBannerAdViewDelegate <GADAdViewRenderedCheckerDelegate> {
	unsigned _checkRenderingCount;
	NSTimer* _checkRenderingTimer;
	GADAdViewRenderedChecker* _adViewRenderedChecker;
	BOOL _renderingCheckHasStarted;
	BOOL _wasPassbackReceived;
	NSURL* _passbackURL;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL wasPassbackReceived;
@property(copy, nonatomic) NSURL* passbackURL;
-(void).cxx_destruct;
-(void)adViewDidFailToRenderContent:(id)adView;
-(void)adViewDidRenderContent:(id)adView;
-(void)adViewDidFinishLoad:(id)adView;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)stopRenderingTimer;
-(void)startRenderingTimerForAdView:(id)adView;
-(BOOL)isPassbackRequest:(id)request;
-(id)initWithSlot:(id)slot;
-(id)initWithSlot:(id)slot passbackURL:(id)url;
@end

@interface GADAbsoluteTime : XXUnknownSuperclass {
}
+(id)absoluteTimeInMilliseconds;
@end

@interface GADViewUtilities : XXUnknownSuperclass {
}
+(id)positionOfView:(id)view inScreen:(id)screen;
@end

@interface GADNativeAppInstallAdView : XXUnknownSuperclass {
	GADNativeAdViewPolicy* _nativeAdViewPolicy;
	UIView* _headlineView;
	UIView* _callToActionView;
	UIView* _iconView;
	UIView* _bodyView;
	UIView* _storeView;
	UIView* _priceView;
	UIView* _imageView;
	UIView* _starRatingView;
}
@property(assign, nonatomic) __weak UIView* starRatingView;
@property(assign, nonatomic) __weak UIView* imageView;
@property(assign, nonatomic) __weak UIView* priceView;
@property(assign, nonatomic) __weak UIView* storeView;
@property(assign, nonatomic) __weak UIView* bodyView;
@property(assign, nonatomic) __weak UIView* iconView;
@property(assign, nonatomic) __weak UIView* callToActionView;
@property(assign, nonatomic) __weak UIView* headlineView;
@property(retain, nonatomic) GADNativeAppInstallAd* nativeAppInstallAd;
-(void).cxx_destruct;
-(void)didMoveToSuperview;
-(void)layoutSubviews;
-(void)commonInit;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

@interface GADBannerAd : GADAd {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface GADInterstitialViewController : GADAdAppViewController {
	id _placement;
	NSString* _screenName;
}
@property(copy, nonatomic) NSString* screenName;
-(void).cxx_destruct;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(void)finishDismissal;
-(void)relinquishScreenWithCompletion:(id)completion;
-(void)finishAppearing;
-(BOOL)isLoaded;
-(void)presentFromViewController:(id)viewController completion:(id)completion;
-(id)initWithAdView:(id)adView;
-(id)initWithSlot:(id)slot;
@end

@interface GADStatistics : XXUnknownSuperclass {
	GADStatisticsCore* _statisticsCore;
	GADTimingManager* _timingManager;
}
-(void).cxx_destruct;
-(void)endTimingNamed:(id)named;
-(void)startTimingNamed:(id)named withExplicitEnd:(BOOL)explicitEnd;
-(id)timingNamed:(id)named;
@end

@interface GADMediatedNativeAd : GADMediatedAd {
	UIView* _renderedView;
	BOOL _adapterHandlesUserClicks;
	BOOL _adapterHandlesUserImpressions;
	id<GADMediatedNativeAd> _ad;
}
@property(assign, nonatomic) BOOL adapterHandlesUserImpressions;
@property(assign, nonatomic) BOOL adapterHandlesUserClicks;
@property(retain, nonatomic) id<GADMediatedNativeAd> ad;
-(void).cxx_destruct;
-(void)reportMediatedAdShouldUntrackView:(id)reportMediatedAd;
-(void)reportMediatedAdRenderedInView:(id)view viewController:(id)controller;
-(void)reportClickOnAssetWithWithName:(id)name view:(id)view viewController:(id)controller;
-(void)reportAdNetworkImpression;
-(void)reportAdNetworkClick;
-(void)reportImpression;
@end

@interface GADSlotStatistics : GADStatistics {
	NSString* _identifier;
}
@property(readonly, copy, nonatomic) NSDictionary* statistics;
-(void).cxx_destruct;
-(id)adapterFillStatusParameter;
-(id)adapterDurationsParameter;
-(id)adapterExitCodesParameter;
-(void)resetFillStatus;
-(void)resetTimingAdapters;
-(void)endTimingAdapterWithFillStatus:(int)fillStatus allocationID:(id)anId;
-(void)endTimingAdapterWithExitCode:(int)exitCode;
-(void)startTimingAdapter;
-(void)setIdentifier:(id)identifier;
-(id)init;
@end

@interface GADMRAIDGMSGHandler : GADGMSGHandler {
	GADOpener* _opener;
}
+(id)subActionBlockDictionary;
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)adView:(id)view actionSetOrientationProperties:(id)properties;
-(void)adView:(id)view actionCreateCalendarEvent:(id)event;
-(void)adView:(id)view actionStorePicture:(id)picture;
-(void)adView:(id)view actionResize:(id)resize;
-(void)adView:(id)view didReceiveMRAIDNotification:(id)notification;
-(void)adView:(id)view didReceiveMRAIDLoadNotification:(id)notification;
-(id)initWithOpener:(id)opener;
@end

@interface GADNativeAdViewPolicy : XXUnknownSuperclass <GADActiveViewMonitorDelegate, UIGestureRecognizerDelegate> {
	GADNativeAdAttributionView* _attributionView;
	UIView* _adView;
	GADOverlayView* _overlayView;
	NSMapTable* _assetViewAssetNames;
	NSString* _attributionIconAssetName;
	NSString* _attributionTextAssetName;
	NSString* _backgroundAssetName;
	GADActiveViewMonitor* _impressionMonitor;
	GADDebugOptionsMenuSheet* _debugOptionsMenuSheet;
	id<GADNativeAdViewPolicyDelegate> _delegate;
	GADNativeAd<GADNativeAdSourceAttributing, GADOverlayViewSource>* _nativeAd;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADNativeAd<GADNativeAdSourceAttributing, GADOverlayViewSource>* nativeAd;
@property(assign, nonatomic) __weak id<GADNativeAdViewPolicyDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)activeViewMonitorDidRefresh:(id)activeViewMonitor;
-(void)recordImpression;
-(void)stopImpressionMonitoring;
-(void)startImpressionMonitoring;
-(void)checkForImpression;
-(void)adViewDidMoveToSuperview;
-(void)adViewDidLayoutSubviews;
-(void)orderViews;
-(void)replaceAssetWithName:(id)name withAssetView:(id)assetView weakReferencePointer:(id*)pointer;
-(void)updateAttributionView;
-(void)updateOverlay;
-(id)tapHandlingEnvironmentWithTapLocation:(CGPoint)tapLocation;
-(void)handleTap:(id)tap;
-(void)handleDebugGesture:(id)gesture;
-(void)addAttributionViewAndUserInteractionToAdView;
-(void)dealloc;
-(id)initWithAdView:(id)adView attributionIconAssetName:(id)name attributionTextAssetName:(id)name3 backgroundAssetName:(id)name4;
@end

@interface GADIntermission : XXUnknownSuperclass {
	BOOL _publisherIdleTimerDisabled;
	GADSlot* _slot;
	BOOL _statusBarWasOriginallyHidden;
	NSMutableSet* _activeParticipants;
	NSMutableSet* _deactivatingParticipants;
	NSOperationQueue* _deactivationQueue;
	BOOL _statusBarOverridden;
}
-(void).cxx_destruct;
-(void)applicationWillEnterForegroundWithNotification:(id)application;
-(void)participantDidRelinquishScreen:(id)participant;
-(void)participantWillRelinquishScreen:(id)participant;
-(void)participantWillOverrideStatusBarVisibility:(id)participant;
-(void)addParticipant:(id)participant;
-(void)didEnd;
-(void)willEnd;
-(void)begin;
-(void)cleanUpDeallocatedParticipants;
-(id)activeParticipants;
-(void)dealloc;
-(id)initWithSlot:(id)slot;
-(id)init;
@end

@interface GADAdViewState : XXUnknownSuperclass {
	UIView* _superview;
	id<GADAdViewDelegate> _delegate;
	UIViewController* _viewController;
	CGRect _frame;
}
@property(assign, nonatomic) __weak UIViewController* viewController;
@property(assign, nonatomic) __weak id<GADAdViewDelegate> delegate;
@property(retain, nonatomic) UIView* superview;
@property(assign, nonatomic) CGRect frame;
-(void).cxx_destruct;
@end

@interface GADAdView : XXUnknownSuperclass <GADVideoPlayerDelegate, UIGestureRecognizerDelegate, UIAlertViewDelegate, UIWebViewDelegate> {
	UIWebView* _webView;
	NSURL* _URL;
	GADAdViewState* _savedState;
	NSOperationQueue* _eventQueue;
	UIGestureRecognizer* _touchGestureRecognizer;
	GADWiggleGestureRecognizer* _debugGestureRecognizer;
	BOOL _useAutoLayoutForResizingAdView;
	GADDebugOptionsMenuSheet* _debugOptionsMenuSheet;
	BOOL _touched;
	BOOL _showDebug;
	UIViewController* _viewController;
	NSString* _adDebugDialogString;
	int _orientation;
	GADAdViewActiveViewReporter* _activeViewReporter;
	id<GADAdViewDelegate> _delegate;
	AVPlayerLayer* _videoPlayerLayer;
	GADVideoPlayer* _videoPlayer;
	GADVideoController* _videoController;
	id<GADRewardBasedVideoAdGMSGHandlerDelegate> _rewardBasedVideoAdGMSGHandlerDelegate;
	CGRect _cachedVideoPlayerFrame;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<GADRewardBasedVideoAdGMSGHandlerDelegate> rewardBasedVideoAdGMSGHandlerDelegate;
@property(retain, nonatomic) GADVideoController* videoController;
@property(retain, nonatomic) GADVideoPlayer* videoPlayer;
@property(assign, nonatomic) CGRect cachedVideoPlayerFrame;
@property(retain, nonatomic) AVPlayerLayer* videoPlayerLayer;
@property(readonly, assign, nonatomic) NSURLRequest* request;
@property(readonly, assign, nonatomic, getter=isLoading) BOOL loading;
@property(readonly, assign, nonatomic, getter=canGoForward) BOOL canGoForward;
@property(readonly, assign, nonatomic, getter=canGoBack) BOOL canGoBack;
@property(assign, nonatomic) __weak id<GADAdViewDelegate> delegate;
@property(assign, nonatomic) unsigned dataDetectorTypes;
@property(readonly, retain, nonatomic) UIScrollView* scrollView;
@property(readonly, assign, nonatomic) NSURL* URL;
@property(retain, nonatomic) GADAdViewActiveViewReporter* activeViewReporter;
@property(assign, nonatomic) int orientation;
@property(assign, nonatomic) BOOL showDebug;
@property(copy, nonatomic) NSString* adDebugDialogString;
@property(assign, nonatomic) BOOL touched;
@property(assign, nonatomic) __weak UIViewController* viewController;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)JSCommandForNotificationName:(id)notificationName userInfo:(id)info;
+(void)cacheWebView:(id)view;
+(id)cachedWebView;
+(id)webViewCache;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)postJSNotification:(id)notification userInfo:(id)info;
-(void)layoutSubviews;
-(id)backgroundColor;
-(void)setBackgroundColor:(id)color;
-(BOOL)isOpaque;
-(void)setOpaque:(BOOL)opaque;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)reload;
-(void)stopLoading;
-(void)goForward;
-(void)goBack;
-(void)loadRequest:(id)request;
-(void)executeJavaScriptAsynchronouslyFromString:(id)string;
-(id)stringByEvaluatingJavaScriptFromString:(id)string;
-(void)didMoveToPlacement:(id)placement;
-(void)setURL:(id)url forView:(id)view;
-(void)didRotateToOrientation:(int)orientation;
-(void)forceRotateHTMLToOrientation:(int)orientation;
-(void)setHTMLWindowOrientation:(int)orientation shouldDispatchOrientationChangeEvent:(BOOL)event;
-(void)dispatchSDKEvent:(id)event parameters:(id)parameters;
-(void)willLoadHTML;
-(void)restoreState;
-(void)saveState;
-(CGSize)contentSize;
-(void)dealloc;
-(void)handleGesture:(id)gesture;
-(void)reset;
-(void)addGestureRecognizers;
-(void)loadHTMLString:(id)string baseURL:(id)url;
-(void)configureAsBannerAdView;
-(void)configureAsInterstitialAdView;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
-(void)rotateVideoToDegrees:(float)degrees;
-(void)player:(id)player didCreateAVPlayer:(id)player2;
-(void)player:(id)player didCacheFileAtURL:(id)url;
-(void)pauseVideo;
-(void)showVideo;
-(void)hideVideo;
-(void)setVideoPlayerFrame:(CGRect)frame;
-(void)setUpVideoPlayerWithURL:(id)url;
@end

@interface GADWebViewCacheSet : GADCacheSet <UIWebViewDelegate> {
	NSMutableSet* _clearingWebViews;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)clearWebView:(id)view;
-(id)anyObject;
-(void)addObject:(id)object;
-(void)dealloc;
-(id)initWithMaxCapacity:(unsigned)maxCapacity;
@end

@interface GADNativeAdAttributionView : XXUnknownSuperclass {
	GADPushTransitionView* _iconView;
	UILabel* _textView;
	UIView* _textPaddingLeft;
	UIView* _textPaddingRight;
}
@property(readonly, assign, nonatomic) UIView* textView;
@property(readonly, assign, nonatomic) UIView* iconView;
-(void).cxx_destruct;
-(void)setAttribution:(id)attribution;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GADVideoController : XXUnknownSuperclass {
	GADAdView* _adView;
	BOOL _videoMuted;
	BOOL _startMuted;
	BOOL _hasVideoContent;
	id<GADVideoControllerDelegate> _delegate;
	unsigned _videoPlaybackState;
	float _currentPlaybackTime;
	double _videoDuration;
}
@property(assign, nonatomic) BOOL hasVideoContent;
@property(assign, nonatomic) BOOL startMuted;
@property(assign, nonatomic) BOOL videoMuted;
@property(assign, nonatomic) float currentPlaybackTime;
@property(assign, nonatomic) double videoDuration;
@property(assign, nonatomic) unsigned videoPlaybackState;
@property(assign, nonatomic) __weak id<GADVideoControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)pause;
-(void)play;
-(void)setMute:(BOOL)mute;
-(id)initWithAdView:(id)adView;
@end

@interface GADAnimationContext : XXUnknownSuperclass {
	UIViewController* _animatedViewController;
	UIView* _draggableViewSnapshot;
	CGRect _animatedViewStartFrame;
	CGRect _animatedViewEndFrame;
	CGRect _draggableViewStartFrame;
	CGRect _draggableViewEndFrame;
}
@property(retain, nonatomic) UIView* draggableViewSnapshot;
@property(assign, nonatomic) CGRect draggableViewEndFrame;
@property(assign, nonatomic) CGRect draggableViewStartFrame;
@property(assign, nonatomic) CGRect animatedViewEndFrame;
@property(assign, nonatomic) CGRect animatedViewStartFrame;
@property(retain, nonatomic) UIViewController* animatedViewController;
-(void).cxx_destruct;
@end

@interface GADViewControllerFullScreenSwipeAnimation : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	BOOL _presenting;
	BOOL _draggableViewShownOnPresentation;
	int _direction;
	float _startY;
	UIView* _draggableView;
	double _transitionDuration;
	CGRect _draggableViewEndFrameAfterAnimation;
	CGRect _animatedViewFrameBeforeAnimation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL draggableViewShownOnPresentation;
@property(assign, nonatomic) CGRect animatedViewFrameBeforeAnimation;
@property(assign, nonatomic) CGRect draggableViewEndFrameAfterAnimation;
@property(assign, nonatomic) double transitionDuration;
@property(retain, nonatomic) UIView* draggableView;
@property(assign, nonatomic) float startY;
@property(assign, nonatomic) int direction;
-(void).cxx_destruct;
-(double)transitionDuration:(id)duration;
-(BOOL)removeDraggableViewAnimationIfInvalidForAnimationContext:(id)animationContext;
-(id)animationContextForRestoringAnimationToSavedState:(id)savedState;
-(id)animationContextForBottomToTopAnimationDismissalWithTransitionContext:(id)transitionContext;
-(id)animationContextForTopToBottomAnimationDismissalWithTransitionContext:(id)transitionContext;
-(id)animationContextForBottomToTopAnimationPresentationWithTransitionContext:(id)transitionContext;
-(id)animationContextForTopToBottomAnimationPresentationWithTransitionContext:(id)transitionContext;
-(void)willAnimateDismissal;
-(void)willAnimatePresentation;
-(BOOL)isPresenting;
-(void)animateTransition:(id)transition;
-(id)init;
@end

@interface GADNativeContentAd : GADNativeAd <GADMediatedNativeContentAd, GADAdLoading, GADNativeAdSourceAttributing, GADOverlayViewSource> {
	BOOL _disableImageLoading;
	NSArray* _nativeAdImages;
	NSMutableArray* _availableNativeAdImages;
	GADOverlayView* _overlayView;
	NSString* _headline;
	NSString* _body;
	NSString* _callToAction;
	GADNativeAdImage* _logo;
	NSString* _advertiser;
	GADNativeAdAttribution* _attribution;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADNativeAdAttribution* attribution;
@property(readonly, copy, nonatomic) NSString* advertiser;
@property(readonly, copy, nonatomic) NSString* callToAction;
@property(readonly, assign, nonatomic) GADNativeAdImage* logo;
@property(readonly, copy, nonatomic) NSArray* images;
@property(readonly, copy, nonatomic) NSString* body;
@property(readonly, copy, nonatomic) NSString* headline;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)requestParametersForAdLoader:(id)adLoader;
+(id)requiredDelegateProtocol;
-(void).cxx_destruct;
-(id)overlayView;
-(void)adLoaderDidReceiveAd:(id)adLoader;
-(void)loadAssetsWithCompletionHandler:(id)completionHandler;
-(id)requiredAssets;
-(id)clickActionTemplateID;
-(void)setSlot:(id)slot;
-(id)initWithMediatedNativeAd:(id)mediatedNativeAd options:(id)options;
-(id)initWithDictionary:(id)dictionary options:(id)options;
-(void)GADNativeContentAd_category;
@end

@interface GADMRAIDPicture : XXUnknownSuperclass <NSURLConnectionDataDelegate, UIAlertViewDelegate> {
	BOOL _downloadStarted;
	NSURL* _pictureURL;
	id<GADMRAIDPictureDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<GADMRAIDPictureDelegate> delegate;
-(void).cxx_destruct;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)storeImage:(id)image;
-(void)downloadImageWithURL:(id)url;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)storeInPhotoAlbum;
-(id)initWithURL:(id)url;
@end

@interface GADDefaultInAppPurchase : XXUnknownSuperclass {
	NSString* _productID;
	int _quantity;
	SKPaymentTransaction* _paymentTransaction;
	GADInAppPurchase* _inAppPurchase;
}
@property(retain, nonatomic) GADInAppPurchase* inAppPurchase;
@property(retain, nonatomic) SKPaymentTransaction* paymentTransaction;
@property(assign, nonatomic) int quantity;
@property(copy, nonatomic) NSString* productID;
+(void)disableDefaultPurchaseFlow;
+(void)enableDefaultPurchaseFlowWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)finishTransaction;
@end

@interface GADAdLoaderOptions : XXUnknownSuperclass <NSCopying> {
}
-(id)requestParameters;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface GADMRAIDCalendarProperties : XXUnknownSuperclass {
	NSDate* _startTime;
	NSDate* _endTime;
	NSString* _summary;
	NSString* _eventDescription;
	NSString* _location;
}
@property(readonly, assign, nonatomic) NSString* location;
@property(readonly, assign, nonatomic) NSString* eventDescription;
@property(readonly, assign, nonatomic) NSString* summary;
@property(readonly, assign, nonatomic) NSDate* endTime;
@property(readonly, assign, nonatomic) NSDate* startTime;
-(void).cxx_destruct;
-(id)initWithDictionary:(id)dictionary;
@end

@interface GADSwipeToViewControllerConfigurations : XXUnknownSuperclass {
	BOOL _adDraggable;
	NSString* _swipeableInAppStoreProductID;
	NSArray* _swipeableRectangles;
	int _swipeDirection;
	NSDictionary* _swipeEventCreativeMetadata;
	double _swipeAnimationTransitionDuration;
}
@property(readonly, copy, nonatomic) NSDictionary* swipeEventCreativeMetadata;
@property(readonly, assign, nonatomic) double swipeAnimationTransitionDuration;
@property(assign, nonatomic, getter=isAdDraggable) BOOL adDraggable;
@property(assign, nonatomic) int swipeDirection;
@property(readonly, copy, nonatomic) NSArray* swipeableRectangles;
@property(readonly, copy, nonatomic) NSString* swipeableInAppStoreProductID;
-(void).cxx_destruct;
-(id)initWithSwipeConfigurations:(id)swipeConfigurations;
-(id)init;
@end

@interface GADOverlayView : XXUnknownSuperclass <GADAdViewDelegate> {
	GADAdView* _overlayView;
	NSDictionary* _loadOverlayUserInfo;
	GADAdViewDelegate* _adViewDelegate;
	NSString* _overlayIdentifier;
	GADAdView* _adView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) GADAdView* adView;
-(void).cxx_destruct;
-(void)adViewDidFinishLoad:(id)adView;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(void)adViewDidStartLoad:(id)adView;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)handleSendMessageToOverlayView:(id)overlayView;
-(void)handleHideOverlayView:(id)view;
-(void)handleShowOverlayView:(id)view;
-(void)handleLoadOverlayView:(id)view;
-(void)handleSendMessageToAdViewNotification:(id)adViewNotification;
-(void)handleHideOverlayNotification:(id)notification;
-(void)sendMessageToOverlayWithUserInfo:(id)userInfo;
-(void)loadOverlayWithUserInfo:(id)userInfo;
-(void)addOverlaySubview;
-(void)removeOverlaySubview;
-(void)dealloc;
@end

@interface GADAdViewDelegate : XXUnknownSuperclass <GADAdViewDelegate> {
	BOOL _hasLoadedAtLeastOnce;
	GADOpener* _opener;
	NSMutableArray* _gmsgHandlers;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSMutableArray* gmsgHandlers;
@property(readonly, assign, nonatomic) BOOL hasLoadedAtLeastOnce;
@property(readonly, assign, nonatomic) GADOpener* opener;
-(void).cxx_destruct;
-(void)adView:(id)view didMoveToPlacement:(id)placement;
-(void)adView:(id)view didFailLoadWithError:(id)error;
-(void)adViewDidFinishLoad:(id)adView;
-(void)adViewDidStartLoad:(id)adView;
-(BOOL)adView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)handleDeeplinkPlusURL:(id)url;
-(void)handleGMSGURL:(id)gmsgurl adView:(id)view;
-(void)dealloc;
-(id)init;
-(void)addGMSGHandler:(id)handler;
@end

@interface GADBrowserAdView : GADAdView {
}
-(id)browserViewController;
-(void)setViewController:(id)controller;
@end

@interface GADInAppPurchase : XXUnknownSuperclass {
	GADViewController* _adViewController;
	NSString* _productID;
	int _quantity;
	NSArray* _reportingURLStringFormats;
	int _purchaseStatus;
}
@property(assign, nonatomic) int purchaseStatus;
@property(copy, nonatomic) NSArray* reportingURLStringFormats;
@property(assign, nonatomic) int quantity;
@property(copy, nonatomic) NSString* productID;
+(id)stringForStatus:(int)status;
+(BOOL)quantityIsValid:(int)valid;
-(void).cxx_destruct;
-(void)pingReportingURLStrings:(id)strings;
-(id)expandedURLStringForURLStringFormat:(id)urlstringFormat;
-(void)reportPurchaseStatus:(int)status;
-(id)description;
-(id)initWithViewController:(id)viewController;
-(id)init;
@end

@interface GADAppEventGMSGHandler : GADGMSGHandler {
	GADSlot* _slot;
}
@property(assign, nonatomic) __weak GADSlot* slot;
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(BOOL)shouldBufferNotification:(id)notification adView:(id)view;
-(void)adView:(id)view didReceiveAppEventNotification:(id)notification;
-(id)initWithSlot:(id)slot;
-(id)init;
@end

@interface GADCategories : XXUnknownSuperclass {
}
-(void)linkCategoriesAndClasses;
@end

@interface GADAd : XXUnknownSuperclass {
	NSMutableSet* _clickURLs;
	NSMutableSet* _impressionURLs;
	NSMutableSet* _manualImpressionURLs;
	BOOL _scrollEnabled;
	BOOL _fluid;
	BOOL _hasAdNetworkJavaScript;
	GADStatisticDictionary* _statistics;
	NSURL* _adBaseURL;
	NSString* _adHTML;
	NSURL* _adURL;
	NSDictionary* _responseHeaders;
	NSDictionary* _activeViewConfigurations;
	int _impressionDefinition;
	GADSwipeToViewControllerConfigurations* _swipeToViewControllerConfigurations;
	unsigned _responseType;
	id<GADMRAIDEventHandling> _MRAIDEventHandler;
	unsigned _supportedOrientations;
	NSString* _debugDialogString;
	NSString* _customAdSizeString;
	GADAutoClickProtection* _autoClickProtection;
	float _croppedContentThreshold;
	NSURL* _adNetworkPassbackURL;
	id<GADAdMediationDelegate> _mediationDelegate;
	CGSize _size;
	double _reloadInterval;
}
@property(assign, nonatomic) __weak id<GADAdMediationDelegate> mediationDelegate;
@property(readonly, copy, nonatomic) NSURL* adNetworkPassbackURL;
@property(readonly, assign, nonatomic) BOOL hasAdNetworkJavaScript;
@property(assign, nonatomic) float croppedContentThreshold;
@property(retain, nonatomic) GADAutoClickProtection* autoClickProtection;
@property(copy, nonatomic) NSString* customAdSizeString;
@property(copy, nonatomic) NSString* debugDialogString;
@property(assign, nonatomic) unsigned supportedOrientations;
@property(assign, nonatomic) double reloadInterval;
@property(assign, nonatomic, getter=isFluid) BOOL fluid;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) __weak id<GADMRAIDEventHandling> MRAIDEventHandler;
@property(assign, nonatomic, getter=isScrollEnabled) BOOL scrollEnabled;
@property(assign, nonatomic) unsigned responseType;
@property(retain, nonatomic) GADSwipeToViewControllerConfigurations* swipeToViewControllerConfigurations;
@property(assign, nonatomic) int impressionDefinition;
@property(copy, nonatomic) NSDictionary* activeViewConfigurations;
@property(copy, nonatomic) NSDictionary* responseHeaders;
@property(copy, nonatomic) NSURL* adURL;
@property(copy, nonatomic) NSString* adHTML;
@property(copy, nonatomic) NSURL* adBaseURL;
@property(retain, nonatomic) GADStatisticDictionary* statistics;
-(void).cxx_destruct;
-(void)pingManualImpressionURLs;
-(void)pingImpressionURLs;
-(void)pingClickURLs;
-(void)addManualImpressionURLsFromArray:(id)array;
-(void)addImpressionURLsFromArray:(id)array;
-(void)addClickURLsFromArray:(id)array;
-(id)initWithDictionary:(id)dictionary;
-(id)init;
@end

@interface GADDefaultGMSGHandler : GADGMSGHandler {
}
+(id)actionBlockDictionary;
+(int)integerForKey:(id)key fromDictionary:(id)dictionary withDefaultValue:(int)defaultValue;
-(void)adView:(id)view didReceiveCloseNotification:(id)notification;
-(void)adView:(id)view didReceiveCanOpenURLsNotification:(id)notification;
-(void)adView:(id)view didReceiveVibrateNotification:(id)notification;
-(void)adView:(id)view didReceiveTouchNotification:(id)notification;
-(void)adView:(id)view didReceiveLogNotification:(id)notification;
-(void)adView:(id)view didReceiveTrackHTTPNotification:(id)notification;
@end

@interface GADAdViewTouchGestureRecognizer : XXUnknownSuperclass {
	double _touchesBeganTimestamp;
}
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface GADGMSGHandler : XXUnknownSuperclass {
	NSMutableArray* _bufferedNotifications;
}
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)flushBuffer;
-(BOOL)shouldBufferNotification:(id)notification adView:(id)view;
-(BOOL)handleNotification:(id)notification adView:(id)view;
-(BOOL)handleRequest:(id)request adView:(id)view;
-(id)init;
@end

@interface GADSchedulerTask : XXUnknownSuperclass {
	id _block;
	NSObject<OS_dispatch_queue>* _queue;
}
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(copy, nonatomic) id block;
-(void).cxx_destruct;
@end

@interface GADScheduler : XXUnknownSuperclass {
	int _taskID;
	NSMutableDictionary* _blocks;
	double _interval;
	NSTimer* _timer;
}
-(void).cxx_destruct;
-(void)stop;
-(void)start;
-(void)executeBlocks;
-(void)unscheduleTaskWithID:(int)anId;
-(int)taskIDScheduledOnQueue:(id)queue block:(id)block;
-(id)description;
-(id)initWithInterval:(double)interval;
-(id)init;
@end

@interface GADOpenerGMSGHandler : GADGMSGHandler {
	GADOpener* _opener;
}
@property(retain, nonatomic) GADOpener* opener;
+(id)subActionBlockDictionary;
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(BOOL)shouldUseCustomClose:(id)close;
-(unsigned)orientationFromParams:(id)params;
-(id)URLFromParams:(id)params;
-(void)adView:(id)view actionOpenApp:(id)app;
-(void)adView:(id)view actionExpand:(id)expand;
-(void)adView:(id)view actionOpenWebApp:(id)app;
-(void)adView:(id)view actionOpenBrowser:(id)browser;
-(void)adView:(id)view actionOpenInAppPurchase:(id)appPurchase;
-(void)adView:(id)view fetchInAppStore:(id)appStore;
-(void)adView:(id)view actionOpenInAppStore:(id)appStore;
-(void)adView:(id)view didReceiveOpenNotification:(id)notification;
-(void)adView:(id)view didReceiveClickNotification:(id)notification;
-(id)initWithOpener:(id)opener;
@end

@interface DFPCustomRenderedAd : XXUnknownSuperclass {
	BOOL _isRendered;
	id<DFPCustomRenderedAdEventHandler> _eventHandler;
	NSString* _adHTML;
	NSURL* _adBaseURL;
}
@property(readonly, copy, nonatomic) NSURL* adBaseURL;
@property(readonly, copy, nonatomic) NSString* adHTML;
-(void).cxx_destruct;
-(void)finishedRenderingAdView:(id)view;
-(void)recordImpression;
-(void)recordClick;
-(id)init;
-(id)initWithAdHTML:(id)adHTML adBaseURL:(id)url eventHandler:(id)handler;
@end

@interface GADMRAIDResizeProperties : XXUnknownSuperclass {
	BOOL _allowOffscreen;
	int _customClosePosition;
	CGSize _size;
	CGVector _offset;
}
@property(assign, nonatomic) BOOL allowOffscreen;
@property(assign, nonatomic) int customClosePosition;
@property(assign, nonatomic) CGVector offset;
@property(assign, nonatomic) CGSize size;
+(BOOL)isContentFrameValid:(CGRect)valid forBounds:(CGRect)bounds allowOffscreen:(BOOL)offscreen closeButtonPosition:(int)position;
+(unsigned)autoresizingMaskForClosePosition:(int)closePosition;
+(CGRect)closeButtonRectForPosition:(int)position contentFrame:(CGRect)frame;
+(id)MRAIDResizePropertiesWithDictionary:(id)dictionary;
-(id)initWithDictionary:(id)dictionary;
@end

@interface GADAdRefreshGMSGHandler : GADGMSGHandler {
	GADOpener* _opener;
}
+(id)actionBlockDictionary;
-(void).cxx_destruct;
-(void)adView:(id)view didReceiveRefreshAction:(id)action;
-(id)initWithOpener:(id)opener;
@end

@interface GADExpandedAdAppViewController : GADAdAppViewController {
	UIImageView* _renderedBanner;
}
-(void).cxx_destruct;
-(void)relinquishScreenWithCompletion:(id)completion;
-(void)configureView;
-(BOOL)isLoaded;
-(void)dealloc;
-(id)initWithAdView:(id)adView;
@end

@interface GADInterstitialCache : XXUnknownSuperclass {
	NSMutableDictionary* _interstitialPoolsByRequestKey;
	NSMutableArray* _recentlyAccessedRequestKeys;
	NSMutableDictionary* _observedRequestsByRequestKey;
	NSObject<OS_dispatch_queue>* _lockQueue;
}
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)loadInterstitialsForSavedRequests;
-(void)didAccessKey:(id)key request:(id)request;
-(id)cacheEntryForRequest:(id)request adUnitID:(id)anId;
-(void)loadRequest:(id)request adUnitID:(id)anId;
-(id)init;
@end

@interface GADDevice : XXUnknownSuperclass {
	NSObject<OS_dispatch_queue>* _lockQueue;
	id<NSObject> _radioAccessTechnologyChangeObserver;
	int _statusBarOrientation;
	unsigned _supportedInterfaceOrientationsForKeyWindow;
	CGRect _standardizedMainScreenPortraitBounds;
	CGRect _standardizedMainScreenLandscapeBounds;
	BOOL _userInterfaceIdiomIsPhone;
	unsigned _bookstores;
	float _audioVolume;
	NSArray* _audioRoutePortNames;
	CTTelephonyNetworkInfo* _telephonyNetworkInfo;
	NSDictionary* _infoPlist;
	BOOL _hasCachedStaticParameters;
	CGSize _standardizedOrientedKeyWindowSize;
	MPVolumeView* _volumeView;
	UISlider* _volumeSliderView;
	GADBluetoothMonitor* _bluetoothMonitor;
	NSString* _lastKnownRadioAccessTechnology;
	NSString* _radioAccessTechnology;
	NSString* _mobileCountryCode;
	NSString* _mobileNetworkCode;
	NSString* _userAgentString;
	NSString* _deviceModel;
	NSString* _systemVersion;
	GADNetwork* _network;
	float _mainScreenDensity;
	BOOL _canText;
	BOOL _canMakePhoneCalls;
	XXStruct_Paw9VA _operatingSystemVersion;
}
@property(copy) NSString* mobileNetworkCode;
@property(copy) NSString* mobileCountryCode;
@property(copy) NSString* radioAccessTechnology;
@property(readonly, assign, nonatomic) CGRect standardizedOrientedApplicationFrame;
@property(readonly, assign, nonatomic) CGSize standardizedPortraitKeyWindowSize;
@property(readonly, assign, nonatomic) CGSize standardizedOrientedKeyWindowSize;
@property(readonly, assign, nonatomic) CGRect standardizedOrientedScreenBounds;
@property(readonly, assign, nonatomic) CGRect standardizedLandscapeScreenBounds;
@property(readonly, assign, nonatomic) CGRect standardizedPortraitScreenBounds;
@property(readonly, assign, nonatomic) float mainScreenDensity;
@property(readonly, assign, nonatomic) BOOL orientationLandscape;
@property(readonly, assign, nonatomic) float audioVolume;
@property(readonly, copy, nonatomic) NSArray* audioRoutePortNames;
@property(readonly, assign, nonatomic) NSString* locale;
@property(readonly, assign, nonatomic) NSString* deviceSubmodel;
@property(readonly, assign, nonatomic) NSString* deviceModel;
@property(readonly, assign, nonatomic) NSString* systemVersion;
@property(readonly, assign, nonatomic) BOOL jailbroken;
@property(readonly, assign, nonatomic) BOOL canMakePhoneCalls;
@property(readonly, assign, nonatomic) BOOL canText;
@property(readonly, assign, nonatomic) XXStruct_Paw9VA operatingSystemVersion;
@property(copy) NSString* userAgentString;
@property(readonly, assign, nonatomic) GADNetwork* network;
@property(readonly, copy, nonatomic) NSString* limitAdTrackingString;
@property(readonly, assign, nonatomic) BOOL limitAdTracking;
+(id)sharedInstance;
-(void).cxx_destruct;
-(id)temporaryPathWithCreation:(BOOL)creation;
-(BOOL)isSimulator;
-(id)lastKnownRadioAccessTechnology;
-(id)deviceIdentifier;
-(id)rawDeviceIdentifier;
-(id)canOpenURLs:(id)urls;
-(BOOL)OSIsSupported;
-(BOOL)isOSAtLeastMajor:(int)leastMajor minor:(int)minor patch:(int)patch;
-(void)updateOperatingSystemVersionProperties;
-(id)baseSDKVersion;
-(id)parameters;
-(void)disableRadioAccessTechnologyChecking;
-(void)enableRadioAccessTechnologyChecking;
-(void)updateAudioPortNames;
-(void)updateAudioVolume;
-(void)updateOrientedKeyWindowSize;
-(void)updateMobileCarrierInformation;
-(void)updateBookstores;
-(void)updateOrientation;
-(void)updateDynamicParameters;
-(void)cacheStaticParameters;
-(void)dealloc;
-(id)init;
@end

@interface GADAdAppGMSGHandler : GADGMSGHandler {
}
+(id)actionBlockDictionary;
-(BOOL)shouldBufferNotification:(id)notification adView:(id)view;
-(void)adView:(id)view updateInterstitialPropertiesWithArguments:(id)arguments;
-(void)adView:(id)view configureCustomCloseButtonWithArguments:(id)arguments;
@end

@interface GADVideoOptions : GADAdLoaderOptions {
	BOOL _startMuted;
}
@property(assign, nonatomic) BOOL startMuted;
-(id)requestParameters;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface GADGestureUtil : XXUnknownSuperclass {
}
+(void)reachability:(unsigned*)reachability;
@end

@interface GADGestureIdUtil : XXUnknownSuperclass {
	NSUserDefaults* userDefaults_;
}
@property(retain, nonatomic) NSUserDefaults* userDefaults;
+(BOOL)isOSAtLeastMajor:(long)leastMajor minor:(long)minor bug:(long)bug;
+(void)getOSMajor:(int*)major minor:(int*)minor bugFix:(int*)fix;
+(id)sharedInstance;
-(BOOL)deviceOptedOut;
-(id)deviceIdentifierType;
-(id)deviceIdentifier;
-(id)osVersion;
-(void)dealloc;
-(id)init;
@end

@interface VKBundle : VKObject {
}
+(id)localizedString:(id)string;
+(id)vkLibraryImageNamed:(id)named;
+(id)vkLibraryResourcesBundle;
@end

@interface VKBatchRequest : VKObject {
	NSMutableArray* _requests;
	NSMutableArray* _responses;
	BOOL _canceled;
	id _completeBlock;
	id _errorBlock;
}
@property(copy, nonatomic) id errorBlock;
@property(copy, nonatomic) id completeBlock;
-(void).cxx_destruct;
-(void)provideError:(id)error;
-(void)provideResponse:(id)response;
-(void)cancel;
-(void)executeWithResultBlock:(id)resultBlock errorBlock:(id)block;
-(id)initWithRequestsArray:(id)requestsArray;
-(id)initWithRequests:(id)requests;
@end

@interface VKAccessToken : VKObject {
	NSString* _accessToken;
	BOOL _httpsRequired;
	BOOL _isExpired;
	NSString* _expiresIn;
	NSString* _userId;
	NSString* _secret;
	NSArray* _permissions;
	NSString* _email;
	double _created;
}
@property(copy, nonatomic) NSString* email;
@property(retain, nonatomic) NSArray* permissions;
@property(assign, nonatomic) BOOL isExpired;
@property(assign, nonatomic) double created;
@property(assign, nonatomic) BOOL httpsRequired;
@property(retain, nonatomic) NSString* secret;
@property(retain, nonatomic) NSString* userId;
@property(retain, nonatomic) NSString* expiresIn;
@property(readonly, assign, nonatomic) NSString* accessToken;
+(id)tokenFromDefaults:(id)defaults;
+(id)tokenFromFile:(id)file;
+(id)tokenFromUrlString:(id)urlString;
+(id)tokenWithToken:(id)token secret:(id)secret userId:(id)anId;
-(void).cxx_destruct;
-(id)serialize;
-(void)saveTokenToDefaults:(id)defaults;
-(void)saveTokenToFile:(id)file;
-(void)checkIfExpired;
-(id)initWithUrlString:(id)urlString;
-(id)initWithToken:(id)token secret:(id)secret userId:(id)anId;
@end

@interface VKSdk : XXUnknownSuperclass {
	id<VKSdkDelegate> _delegate;
	NSString* _currentAppId;
	NSString* _apiVersion;
	unsigned _authState;
	VKAccessToken* _accessToken;
	NSArray* _permissions;
}
@property(retain, nonatomic) NSArray* permissions;
@property(retain, nonatomic) VKAccessToken* accessToken;
@property(assign, nonatomic) unsigned authState;
@property(copy, nonatomic) NSString* apiVersion;
@property(copy, nonatomic) NSString* currentAppId;
@property(assign, nonatomic) __weak id<VKSdkDelegate> delegate;
+(void)setSchedulerEnabled:(BOOL)enabled;
+(BOOL)hasPermissions:(id)permissions;
+(BOOL)wakeUpSession:(id)session;
+(BOOL)wakeUpSession;
+(BOOL)isLoggedIn;
+(void)forceLogout;
+(BOOL)processOpenURL:(id)url fromApplication:(id)application;
+(BOOL)processOpenURL:(id)url;
+(id)getAccessToken;
+(void)setAccessTokenError:(id)error;
+(void)setAccessToken:(id)token;
+(BOOL)vkAppMayExists;
+(void)authorize:(id)authorize revokeAccess:(BOOL)access forceOAuth:(BOOL)auth inApp:(BOOL)app display:(id)display;
+(void)authorize:(id)authorize revokeAccess:(BOOL)access forceOAuth:(BOOL)auth inApp:(BOOL)app;
+(void)authorize:(id)authorize revokeAccess:(BOOL)access forceOAuth:(BOOL)auth;
+(void)authorize:(id)authorize revokeAccess:(BOOL)access;
+(void)authorize:(id)authorize;
+(void)initializeWithDelegate:(id)delegate andAppId:(id)anId andCustomToken:(id)token;
+(void)initializeWithDelegate:(id)delegate andAppId:(id)anId apiVersion:(id)version;
+(void)initializeWithDelegate:(id)delegate andAppId:(id)anId;
+(id)instance;
+(void)initialize;
-(void).cxx_destruct;
-(void)trackVisitor;
-(id)initUniqueInstance;
@end

@interface VKRequestTiming : VKObject {
	NSDate* _parseStartTime;
	NSDate* _startTime;
	NSDate* _finishTime;
	double _loadTime;
	double _parseTime;
}
@property(readonly, assign, nonatomic) double totalTime;
@property(assign, nonatomic) double parseTime;
@property(assign, nonatomic) double loadTime;
@property(retain, nonatomic) NSDate* finishTime;
@property(retain, nonatomic) NSDate* startTime;
-(void).cxx_destruct;
-(void)finished;
-(void)parseFinished;
-(void)parseStarted;
-(void)loaded;
-(void)started;
-(id)description;
@end

@interface VKRequest : VKObject {
	NSObject<OS_dispatch_semaphore>* _waitUntilDoneSemaphore;
	float _waitMultiplier;
	NSString* _preferredLang;
	BOOL _secure;
	BOOL _useSystemLanguage;
	BOOL _parseModel;
	BOOL _debugTiming;
	BOOL _waitUntilDone;
	id _progressBlock;
	id _completeBlock;
	id _errorBlock;
	int _attempts;
	int _requestTimeout;
	NSObject<OS_dispatch_queue>* _responseQueue;
	NSString* _methodName;
	NSString* _httpMethod;
	NSDictionary* _methodParameters;
	NSOperation* _executionOperation;
	VKRequestTiming* _requestTiming;
	OrderedDictionary* _preparedParameters;
	NSString* _uploadUrl;
	NSMutableArray* _postRequestsQueue;
	Class _modelClass;
	NSArray* _photoObjects;
	int _attemptsUsed;
	VKResponse* _response;
	NSError* _error;
}
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) VKResponse* response;
@property(assign) int attemptsUsed;
@property(retain, nonatomic) NSArray* photoObjects;
@property(retain, nonatomic) Class modelClass;
@property(retain, nonatomic) NSMutableArray* postRequestsQueue;
@property(retain, nonatomic) NSString* uploadUrl;
@property(retain, nonatomic) OrderedDictionary* preparedParameters;
@property(readonly, assign, nonatomic) BOOL isExecuting;
@property(retain, nonatomic) VKRequestTiming* requestTiming;
@property(retain, nonatomic) NSOperation* executionOperation;
@property(retain, nonatomic) NSDictionary* methodParameters;
@property(retain, nonatomic) NSString* httpMethod;
@property(retain, nonatomic) NSString* methodName;
@property(assign, nonatomic) BOOL waitUntilDone;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* responseQueue;
@property(assign, nonatomic) int requestTimeout;
@property(assign, nonatomic) BOOL debugTiming;
@property(assign, nonatomic) BOOL parseModel;
@property(assign, nonatomic) BOOL useSystemLanguage;
@property(assign, nonatomic) BOOL secure;
@property(assign, nonatomic) int attempts;
@property(copy, nonatomic) id errorBlock;
@property(copy, nonatomic) id completeBlock;
@property(copy, nonatomic) id progressBlock;
@property(copy, nonatomic) NSString* preferredLang;
+(id)photoRequestWithPostUrl:(id)postUrl withPhotos:(id)photos;
+(id)requestWithMethod:(id)method andParameters:(id)parameters andHttpMethod:(id)method3 classOfModel:(Class)model;
+(id)requestWithMethod:(id)method andParameters:(id)parameters andHttpMethod:(id)method3;
+(id)processingQueue;
-(void).cxx_destruct;
-(BOOL)processCommonError:(id)error;
-(id)generateSig:(id)sig token:(id)token;
-(void)addExtraParameters:(id)parameters;
-(void)setupProgress:(id)progress;
-(void)cancel;
-(void)repeat;
-(void)cleanUp;
-(void)finishRequest;
-(void)provideError:(id)error;
-(void)provideResponse:(id)response responseString:(id)string;
-(void)operationDidStart:(id)operation;
-(void)start;
-(id)getPreparedRequest;
-(void)addPostRequest:(id)request;
-(void)executeAfter:(id)after withResultBlock:(id)resultBlock errorBlock:(id)block;
-(void)executeWithResultBlock:(id)resultBlock errorBlock:(id)block;
-(id)description;
-(id)init;
-(void)dealloc;
@end

@interface VKHTTPOperation : VKOperation <NSURLConnectionDataDelegate, NSURLConnectionDelegate, NSCoding, NSCopying> {
	BOOL _wasCanceled;
	VKRequest* _loadingRequest;
	NSSet* _runLoopModes;
	VKRequest* _vkRequest;
	NSURLRequest* _request;
	NSError* _error;
	NSData* _responseData;
	NSString* _responseString;
	id _responseJson;
	NSHTTPURLResponse* _response;
	NSObject<OS_dispatch_queue>* _successCallbackQueue;
	NSObject<OS_dispatch_queue>* _failureCallbackQueue;
	NSURLConnection* _connection;
	unsigned _responseStringEncoding;
	unsigned _backgroundTaskIdentifier;
	id _uploadProgress;
	id _downloadProgress;
	NSError* _HTTPError;
	NSOutputStream* _outputStream;
	NSError* _JSONError;
	long long _totalBytesRead;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSError* JSONError;
@property(retain, nonatomic) NSOutputStream* outputStream;
@property(retain, nonatomic) NSError* HTTPError;
@property(copy, nonatomic) id downloadProgress;
@property(copy, nonatomic) id uploadProgress;
@property(assign, nonatomic) unsigned backgroundTaskIdentifier;
@property(assign, nonatomic) long long totalBytesRead;
@property(assign, nonatomic) unsigned responseStringEncoding;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic, getter=isCancelled) BOOL wasCanceled;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* failureCallbackQueue;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* successCallbackQueue;
@property(retain, nonatomic) NSHTTPURLResponse* response;
@property(copy, nonatomic) id responseJson;
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) NSData* responseData;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSURLRequest* request;
@property(assign, nonatomic) __weak VKRequest* vkRequest;
@property(retain, nonatomic) NSSet* runLoopModes;
@property(retain, nonatomic) VKRequest* loadingRequest;
+(id)networkRequestThread;
+(void)networkRequestThreadEntryPoint:(id)point;
+(id)operationWithRequest:(id)request;
-(void).cxx_destruct;
-(void)setCompletionBlockWithSuccess:(id)success failure:(id)failure;
-(BOOL)hasAcceptableStatusCode;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)cancelConnection;
-(void)cancel;
-(void)finish;
-(void)operationDidStart;
-(void)start;
-(void)resume;
-(BOOL)isPaused;
-(void)pause;
-(void)setDownloadProgressBlock:(id)block;
-(void)setUploadProgressBlock:(id)block;
-(void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)executeAsBackgroundTaskWithExpirationHandler;
-(void)dealloc;
-(id)initWithURLRequest:(id)urlrequest;
@end

@interface VKHTTPClient : VKObject <NSCoding> {
	NSOperationQueue* _operationQueue;
	NSMutableDictionary* _defaultHeaders;
}
@property(retain, nonatomic) NSMutableDictionary* defaultHeaders;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
+(id)getClient;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)enqueueBatchOfHTTPRequestOperations:(id)httprequestOperations progressBlock:(id)block completionBlock:(id)block3;
-(void)enqueueOperation:(id)operation;
-(id)multipartFormRequestWithMethod:(id)method path:(id)path images:(id)images;
-(id)requestWithMethod:(id)method path:(id)path parameters:(id)parameters secure:(BOOL)secure;
-(void)setDefaultHeader:(id)header value:(id)value;
-(id)defaultValueForHeader:(id)header;
-(id)init;
@end

@interface VKError : VKObject {
	NSError* _httpError;
	VKError* _apiError;
	VKRequest* _request;
	int _errorCode;
	NSString* _errorMessage;
	NSString* _errorReason;
	NSDictionary* _requestParams;
	NSString* _captchaSid;
	NSString* _captchaImg;
	NSString* _redirectUri;
}
@property(retain, nonatomic) NSString* redirectUri;
@property(retain, nonatomic) NSString* captchaImg;
@property(retain, nonatomic) NSString* captchaSid;
@property(retain, nonatomic) NSDictionary* requestParams;
@property(retain, nonatomic) NSString* errorReason;
@property(retain, nonatomic) NSString* errorMessage;
@property(assign, nonatomic) int errorCode;
@property(retain, nonatomic) VKRequest* request;
@property(retain, nonatomic) VKError* apiError;
@property(retain, nonatomic) NSError* httpError;
+(id)errorWithQuery:(id)query;
+(id)errorWithJson:(id)json;
+(id)errorWithCode:(int)code;
-(void).cxx_destruct;
-(id)description;
-(void)answerCaptcha:(id)captcha;
@end

@interface VKResponse : VKObject {
	VKRequest* _request;
	id _json;
	id _parsedModel;
	NSString* _responseString;
}
@property(copy, nonatomic) NSString* responseString;
@property(retain, nonatomic) id parsedModel;
@property(retain, nonatomic) id json;
@property(assign, nonatomic) __weak VKRequest* request;
-(void).cxx_destruct;
-(id)description;
@end

@interface VKOperation : XXUnknownSuperclass {
	BOOL _wasCancelled;
	int _state;
	NSRecursiveLock* _lock;
	NSObject<OS_dispatch_queue>* _responseQueue;
}
@property(assign, nonatomic, getter=isCancelled) BOOL wasCancelled;
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* responseQueue;
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(assign, nonatomic) int state;
-(void).cxx_destruct;
-(void)setCompletionBlock:(id)block;
-(void)cancel;
-(BOOL)isConcurrent;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isReady;
-(id)init;
@end

@interface VKObject : XXUnknownSuperclass {
}
@end

@interface VKApi : XXUnknownSuperclass {
}
+(id)uploadMessagePhotoRequest:(id)request parameters:(id)parameters;
+(id)uploadAlbumPhotoRequest:(id)request parameters:(id)parameters albumId:(int)anId groupId:(int)anId4;
+(id)uploadWallPhotoRequest:(id)request parameters:(id)parameters userId:(int)anId groupId:(int)anId4;
+(id)requestWithMethod:(id)method andParameters:(id)parameters andHttpMethod:(id)method3;
+(id)groups;
+(id)friends;
+(id)photos;
+(id)wall;
+(id)users;
@end

@interface VKPhotoAttachmentCell : XXUnknownSuperclass {
	float _progress;
	UIProgressView* _progressView;
	UIActivityIndicatorView* _activity;
	UIButton* _deleteButton;
	UIImageView* _attachImageView;
	id _onDeleteBlock;
}
@property(copy, nonatomic) id onDeleteBlock;
@property(retain, nonatomic) UIImageView* attachImageView;
@property(retain, nonatomic) UIButton* deleteButton;
@property(retain, nonatomic) UIActivityIndicatorView* activity;
@property(retain, nonatomic) UIProgressView* progressView;
@property(assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)willMoveToSuperview:(id)superview;
-(void)cancelButtonClick:(id)click;
-(void)hideProgress;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKUploadingAttachment : VKObject {
	BOOL _isUploaded;
	BOOL _isDownloading;
	NSString* _attachmentString;
	UIImage* _preview;
	VKUploadImage* _targetUpload;
	VKRequest* _uploadingRequest;
	CGSize _attachSize;
}
@property(assign, nonatomic) __weak VKRequest* uploadingRequest;
@property(retain, nonatomic) VKUploadImage* targetUpload;
@property(retain, nonatomic) UIImage* preview;
@property(retain, nonatomic) NSString* attachmentString;
@property(assign, nonatomic) CGSize attachSize;
@property(assign, nonatomic) BOOL isDownloading;
@property(assign, nonatomic) BOOL isUploaded;
-(void).cxx_destruct;
@end

@interface VKPostSettings : VKObject {
	NSNumber* _friendsOnly;
	NSNumber* _exportTwitter;
	NSNumber* _exportFacebook;
	NSNumber* _exportLivejournal;
}
@property(retain, nonatomic) NSNumber* exportLivejournal;
@property(retain, nonatomic) NSNumber* exportFacebook;
@property(retain, nonatomic) NSNumber* exportTwitter;
@property(retain, nonatomic) NSNumber* friendsOnly;
-(void).cxx_destruct;
@end

@interface VKShareDialogController : XXUnknownSuperclass {
	UINavigationController* _internalNavigation;
	VKSharedTransitioningObject* _transitionDelegate;
	VKShareDialogControllerInternal* _targetShareDialog;
	int defaultBarStyle;
	BOOL _dismissAutomatically;
	BOOL _authorizeInApp;
	NSArray* _uploadImages;
	NSArray* _vkImages;
	VKShareLink* _shareLink;
	NSString* _text;
	NSArray* _requestedScope;
	id _completionHandler;
}
@property(assign, nonatomic) BOOL authorizeInApp;
@property(assign, nonatomic) BOOL dismissAutomatically;
@property(copy, nonatomic) id completionHandler;
@property(retain, nonatomic) NSArray* requestedScope;
@property(copy, nonatomic) NSString* text;
@property(retain, nonatomic) VKShareLink* shareLink;
@property(retain, nonatomic) NSArray* vkImages;
@property(retain, nonatomic) NSArray* uploadImages;
-(void).cxx_destruct;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)presentIn:(id)anIn;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)rotateToInterfaceOrientation:(int)interfaceOrientation appear:(BOOL)appear;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewWillAppear:(BOOL)view;
-(CGSize)preferredContentSize;
-(void)viewWillLayoutSubviews;
-(void)loadView;
-(id)init;
@end

@interface VKPlaceholderTextView : XXUnknownSuperclass {
	NSString* _placeholder;
	UIColor* _placeholderColor;
	UILabel* _placeholderLabel;
}
@property(retain, nonatomic) UILabel* placeholderLabel;
@property(retain, nonatomic) UIColor* placeholderColor;
@property(retain, nonatomic) NSString* placeholder;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(float)measureHeightOfUITextView;
-(void)setText:(id)text;
-(void)textChanged:(id)changed;
-(id)initWithFrame:(CGRect)frame;
-(void)awakeFromNib;
-(void)dealloc;
@end

@interface VKPrivacyButton : XXUnknownSuperclass {
}
-(CGRect)titleRectForContentRect:(CGRect)contentRect;
-(CGRect)imageRectForContentRect:(CGRect)contentRect;
-(void)setHighlighted:(BOOL)highlighted;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKLinkAttachView : XXUnknownSuperclass {
	UILabel* _linkTitle;
	UILabel* _linkHost;
	VKShareLink* _targetLink;
}
@property(retain, nonatomic) VKShareLink* targetLink;
@property(retain, nonatomic) UILabel* linkHost;
@property(retain, nonatomic) UILabel* linkTitle;
-(void).cxx_destruct;
-(void)sizeToFit;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKShareDialogView : XXUnknownSuperclass <UITextViewDelegate> {
	float lastTextViewHeight;
	UIView* _notAuthorizedView;
	UILabel* _notAuthorizedLabel;
	UIButton* _notAuthorizedButton;
	UIScrollView* _contentScrollView;
	UIButton* _privacyButton;
	UICollectionView* _attachmentsCollection;
	VKPlaceholderTextView* _textView;
	VKLinkAttachView* _linkAttachView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) VKLinkAttachView* linkAttachView;
@property(retain, nonatomic) VKPlaceholderTextView* textView;
@property(retain, nonatomic) UICollectionView* attachmentsCollection;
@property(retain, nonatomic) UIButton* privacyButton;
@property(retain, nonatomic) UIScrollView* contentScrollView;
@property(retain, nonatomic) UIButton* notAuthorizedButton;
@property(retain, nonatomic) UILabel* notAuthorizedLabel;
@property(retain, nonatomic) UIView* notAuthorizedView;
-(void).cxx_destruct;
-(int)preferredStatusBarStyle;
-(void)setShareLink:(id)link;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)positionSubviews;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VKShareDialogControllerInternal : XXUnknownSuperclass <UITextViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate, VKSdkDelegate> {
	NSObject<OS_dispatch_queue>* imageProcessingQueue;
	BOOL _prepared;
	VKShareDialogController* _parent;
	UIBarButtonItem* _sendButton;
	NSMutableArray* _attachmentsArray;
	id _targetOwner;
	VKPostSettings* _postSettings;
	id<VKSdkDelegate> _originalSdkDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<VKSdkDelegate> originalSdkDelegate;
@property(assign, nonatomic) BOOL prepared;
@property(retain, nonatomic) VKPostSettings* postSettings;
@property(retain, nonatomic) id targetOwner;
@property(retain, nonatomic) NSMutableArray* attachmentsArray;
@property(retain, nonatomic) UIBarButtonItem* sendButton;
@property(readonly, assign, nonatomic) UICollectionView* attachmentsScrollView;
@property(assign, nonatomic) __weak VKShareDialogController* parent;
-(void).cxx_destruct;
-(void)textViewDidChange:(id)textView;
-(void)removeAttachIfExists:(id)exists;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)createAttachments;
-(void)vkSdkReceivedNewToken:(id)token;
-(void)vkSdkShouldPresentViewController:(id)vkSdk;
-(void)vkSdkUserDeniedAccess:(id)access;
-(void)vkSdkTokenHasExpired:(id)expired;
-(void)vkSdkNeedCaptchaEnter:(id)enter;
-(void)authorize:(id)authorize;
-(void)openSettings:(id)settings;
-(void)sendMessage:(id)message;
-(void)close:(id)close;
-(id)rightBarButtonItems;
-(void)prepare;
-(void)dealloc;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)init;
@end

@interface VKShareSettingsController : XXUnknownSuperclass {
	VKPostSettings* _currentSettings;
	NSArray* _rows;
}
@property(retain, nonatomic) NSArray* rows;
@property(retain, nonatomic) VKPostSettings* currentSettings;
-(void).cxx_destruct;
-(void)switchChanged:(id)changed;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidLoad;
-(id)initWithPostSettings:(id)postSettings;
@end

@interface VKShareLink : VKObject {
	NSString* _title;
	NSURL* _link;
}
@property(copy, nonatomic) NSURL* link;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title link:(id)link;
@end

@interface VKAuthorizeController : XXUnknownSuperclass <UIWebViewDelegate> {
	BOOL _finished;
	UIWebView* _webView;
	NSString* _appId;
	NSString* _scope;
	NSString* _redirectUri;
	UIActivityIndicatorView* _activityMark;
	UILabel* _warningLabel;
	UILabel* _statusBar;
	VKError* _validationError;
	NSURLRequest* _lastRequest;
	UINavigationController* _internalNavigationController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL finished;
@property(assign, nonatomic) __weak UINavigationController* internalNavigationController;
@property(retain, nonatomic) NSURLRequest* lastRequest;
@property(retain, nonatomic) VKError* validationError;
@property(retain, nonatomic) UILabel* statusBar;
@property(retain, nonatomic) UILabel* warningLabel;
@property(retain, nonatomic) UIActivityIndicatorView* activityMark;
@property(retain, nonatomic) NSString* redirectUri;
@property(retain, nonatomic) NSString* scope;
@property(retain, nonatomic) NSString* appId;
@property(retain, nonatomic) UIWebView* webView;
+(id)buildAuthorizationUrl:(id)url clientId:(id)anId scope:(id)scope revoke:(BOOL)revoke display:(id)display;
+(void)presentThisController:(id)controller;
+(void)presentForValidation:(id)validation;
+(void)presentForAuthorizeWithAppId:(id)appId andPermissions:(id)permissions revokeAccess:(BOOL)access displayType:(id)type;
-(void).cxx_destruct;
-(int)preferredStatusBarStyle;
-(void)dismiss;
-(void)cancelAuthorization:(id)authorization;
-(void)makeViewport;
-(void)webViewDidFinishLoad:(id)webView;
-(void)setRightBarButtonActivity;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)startLoading;
-(void)viewDidLoad;
-(id)initWith:(id)with andPermissions:(id)permissions revokeAccess:(BOOL)access displayType:(id)type;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)loadView;
@end

@interface VKCaptchaViewController : XXUnknownSuperclass {
	VKError* _captchaError;
	VKSharedTransitioningObject* _transitionDelegate;
	VKCaptchaView* _captchaView;
}
+(id)captchaControllerWithError:(id)error;
-(void).cxx_destruct;
-(void)dealloc;
-(CGSize)preferredContentSize;
-(int)preferredStatusBarStyle;
-(void)presentIn:(id)anIn;
-(void)captchaDidAnswered;
-(void)loadView;
@end

@interface VKCaptchaView : XXUnknownSuperclass <UITextFieldDelegate> {
	VKError* _error;
	UIImageView* _captchaImage;
	UILabel* _infoLabel;
	UITextField* _captchaTextField;
	UIButton* _doneButton;
	UIActivityIndicatorView* _imageLoadingActivity;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)didMoveToSuperview;
-(void)doneButtonPressed:(id)pressed;
-(void)deviceDidRotate:(id)device;
-(id)initWithFrame:(CGRect)frame andError:(id)error;
-(void)dealloc;
@end

@interface VKActivity : XXUnknownSuperclass {
	VKShareDialogController* shareDialog;
}
+(int)activityCategory;
-(void).cxx_destruct;
-(id)activityViewController;
-(void)prepareWithActivityItems:(id)activityItems;
-(BOOL)canPerformWithActivityItems:(id)activityItems;
-(id)activityTitle;
-(id)activityImage;
-(id)activityType;
@end

@interface VKUtil : XXUnknownSuperclass {
}
+(id)queryStringFromParams:(id)params;
+(id)escapeString:(id)string;
+(id)colorWithRGB:(int)rgb;
+(id)parseNumberString:(id)string;
+(id)generateGUID;
+(id)explodeQueryString:(id)string;
@end

@interface OrderedDictionary : XXUnknownSuperclass {
	NSMutableDictionary* dictionary;
	NSMutableArray* array;
}
-(void).cxx_destruct;
-(id)descriptionWithLocale:(id)locale indent:(unsigned)indent;
-(id)keyAtIndex:(unsigned)index;
-(void)insertObject:(id)object forKey:(id)key atIndex:(unsigned)index;
-(id)reverseKeyEnumerator;
-(id)keyEnumerator;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)copy;
-(id)initWithCapacity:(unsigned)capacity;
-(id)init;
@end

@interface VKApiBase : VKObject {
	NSString* _methodGroup;
}
-(void).cxx_destruct;
-(id)prepareRequestWithMethodName:(id)methodName andParameters:(id)parameters andHttpMethod:(id)method andClassOfModel:(Class)model;
-(id)prepareRequestWithMethodName:(id)methodName andParameters:(id)parameters andHttpMethod:(id)method;
-(id)prepareRequestWithMethodName:(id)methodName andParameters:(id)parameters;
-(void)setMethodGroup:(id)group;
-(id)getMethodGroup;
-(id)init;
@end

@interface VKApiWall : VKApiBase {
}
-(id)post:(id)post;
@end

@interface VKApiUsers : VKApiBase {
}
-(id)getFollowers:(id)followers;
-(id)getFollowers;
-(id)getSubscriptions:(id)subscriptions;
-(id)getSubscriptions;
-(id)isAppUser:(int)user;
-(id)isAppUser;
-(id)search:(id)search;
-(id)get:(id)get;
-(id)get;
@end

@interface VKApiGroups : VKApiBase {
}
-(id)getById:(id)anId;
@end

@interface VKApiPhotos : VKApiBase {
}
-(id)save:(id)save;
-(id)saveWallPhoto:(id)photo;
-(id)getWallUploadServer:(int)server;
-(id)getWallUploadServer;
-(id)getUploadServer:(int)server andGroupId:(int)anId;
-(id)getUploadServer:(int)server;
@end

@interface VKApiCaptcha : VKApiBase {
}
-(id)force;
@end

@interface VKApiFriends : VKApiBase {
}
-(id)get:(id)get;
-(id)get;
@end

@interface VKRequestsScheduler : VKObject {
	NSObject<OS_dispatch_queue>* _schedulerQueue;
	int _currentLimitPerSecond;
	NSMutableDictionary* _scheduleDict;
	BOOL _enabled;
}
+(id)instance;
+(id)limits;
-(void).cxx_destruct;
-(void)scheduleRequest:(id)request;
-(double)currentAvailableInterval;
-(void)setEnabled:(BOOL)enabled;
-(id)init;
@end

@interface VKBanInfo : VKApiObject {
	NSNumber* _admin_id;
	NSNumber* _date;
	NSNumber* _reason;
	NSString* _comment;
	NSNumber* _end_date;
}
@property(retain, nonatomic) NSNumber* end_date;
@property(retain, nonatomic) NSString* comment;
@property(retain, nonatomic) NSNumber* reason;
@property(retain, nonatomic) NSNumber* date;
@property(retain, nonatomic) NSNumber* admin_id;
-(void).cxx_destruct;
@end

@interface VKLastSeen : VKApiObject {
	NSNumber* _time;
	NSNumber* _platform;
}
@property(retain, nonatomic) NSNumber* platform;
@property(retain, nonatomic) NSNumber* time;
-(void).cxx_destruct;
@end

@interface VKUser : VKApiObject {
	bool _status_loaded;
	NSNumber* _id;
	NSString* _first_name;
	NSString* _last_name;
	NSString* _first_name_acc;
	NSString* _last_name_acc;
	NSString* _first_name_gen;
	NSString* _last_name_gen;
	NSString* _first_name_dat;
	NSString* _last_name_dat;
	NSString* _first_name_ins;
	NSString* _last_name_ins;
	VKPersonal* _personal;
	NSNumber* _sex;
	NSNumber* _invited_by;
	NSNumber* _online;
	NSString* _bdate;
	VKCity* _city;
	VKCountry* _country;
	NSMutableArray* _lists;
	NSString* _screen_name;
	NSNumber* _has_mobile;
	NSNumber* _rate;
	NSString* _mobile_phone;
	NSString* _home_phone;
	NSNumber* _can_post;
	NSNumber* _can_see_all_posts;
	NSString* _status;
	VKAudio* _status_audio;
	VKLastSeen* _last_seen;
	NSNumber* _relation;
	VKUser* _relation_partner;
	VKCounters* _counters;
	NSString* _nickname;
	VKExports* _exports;
	NSNumber* _wall_comments;
	NSNumber* _can_write_private_message;
	NSString* _phone;
	NSNumber* _can_call;
	NSNumber* _online_mobile;
	NSNumber* _faculty;
	NSNumber* _university;
	VKUniversities* _universities;
	VKSchools* _schools;
	NSNumber* _graduation;
	NSNumber* _friendState;
	NSString* _faculty_name;
	NSString* _university_name;
	NSString* _books;
	NSString* _games;
	NSString* _interests;
	NSString* _movies;
	NSString* _tv;
	NSString* _about;
	NSString* _music;
	NSString* _quoutes;
	NSString* _activities;
	NSString* _photo_max;
	NSString* _photo_50;
	NSString* _photo_100;
	NSString* _photo_200;
	NSString* _photo_200_orig;
	NSString* _photo_400_orig;
	NSString* _photo_max_orig;
	VKPhotoArray* _photos;
	NSNumber* _photos_count;
	VKRelativities* _relatives;
	NSNumber* _verified;
	NSString* _deactivated;
	NSString* _site;
	NSString* _home_town;
	NSNumber* _blacklisted;
	NSNumber* _blacklisted_by_me;
	NSString* _twitter;
	NSString* _skype;
	NSString* _facebook;
	NSString* _livejournal;
	NSString* _wall_default;
	NSString* _contact;
	NSNumber* _request_sent;
	NSNumber* _common_count;
	VKBanInfo* _ban_info;
	NSString* _name;
	NSString* _name_gen;
	NSNumber* _followers_count;
	double _bdateIntervalSort;
}
@property(retain, nonatomic) NSNumber* followers_count;
@property(retain, nonatomic) NSString* name_gen;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) VKBanInfo* ban_info;
@property(retain, nonatomic) NSNumber* common_count;
@property(retain, nonatomic) NSNumber* request_sent;
@property(retain, nonatomic) NSString* contact;
@property(retain, nonatomic) NSString* wall_default;
@property(retain, nonatomic) NSString* livejournal;
@property(retain, nonatomic) NSString* facebook;
@property(retain, nonatomic) NSString* skype;
@property(retain, nonatomic) NSString* twitter;
@property(retain, nonatomic) NSNumber* blacklisted_by_me;
@property(retain, nonatomic) NSNumber* blacklisted;
@property(retain, nonatomic) NSString* home_town;
@property(retain, nonatomic) NSString* site;
@property(retain, nonatomic) NSString* deactivated;
@property(retain, nonatomic) NSNumber* verified;
@property(assign, nonatomic) double bdateIntervalSort;
@property(retain, nonatomic) VKRelativities* relatives;
@property(retain, nonatomic) NSNumber* photos_count;
@property(retain, nonatomic) VKPhotoArray* photos;
@property(retain, nonatomic) NSString* photo_max_orig;
@property(retain, nonatomic) NSString* photo_400_orig;
@property(retain, nonatomic) NSString* photo_200_orig;
@property(retain, nonatomic) NSString* photo_200;
@property(retain, nonatomic) NSString* photo_100;
@property(retain, nonatomic) NSString* photo_50;
@property(retain, nonatomic) NSString* photo_max;
@property(retain, nonatomic) NSString* activities;
@property(retain, nonatomic) NSString* quoutes;
@property(retain, nonatomic) NSString* music;
@property(retain, nonatomic) NSString* about;
@property(retain, nonatomic) NSString* tv;
@property(retain, nonatomic) NSString* movies;
@property(retain, nonatomic) NSString* interests;
@property(retain, nonatomic) NSString* games;
@property(retain, nonatomic) NSString* books;
@property(retain, nonatomic) NSString* university_name;
@property(retain, nonatomic) NSString* faculty_name;
@property(retain, nonatomic) NSNumber* friendState;
@property(retain, nonatomic) NSNumber* graduation;
@property(retain, nonatomic) VKSchools* schools;
@property(retain, nonatomic) VKUniversities* universities;
@property(retain, nonatomic) NSNumber* university;
@property(retain, nonatomic) NSNumber* faculty;
@property(retain, nonatomic) NSNumber* online_mobile;
@property(retain, nonatomic) NSNumber* can_call;
@property(retain, nonatomic) NSString* phone;
@property(retain, nonatomic) NSNumber* can_write_private_message;
@property(retain, nonatomic) NSNumber* wall_comments;
@property(retain, nonatomic) VKExports* exports;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) VKCounters* counters;
@property(retain, nonatomic) VKUser* relation_partner;
@property(retain, nonatomic) NSNumber* relation;
@property(retain, nonatomic) VKLastSeen* last_seen;
@property(assign, nonatomic) bool status_loaded;
@property(retain, nonatomic) VKAudio* status_audio;
@property(retain, nonatomic) NSString* status;
@property(retain, nonatomic) NSNumber* can_see_all_posts;
@property(retain, nonatomic) NSNumber* can_post;
@property(retain, nonatomic) NSString* home_phone;
@property(retain, nonatomic) NSString* mobile_phone;
@property(retain, nonatomic) NSNumber* rate;
@property(retain, nonatomic) NSNumber* has_mobile;
@property(retain, nonatomic) NSString* screen_name;
@property(retain, nonatomic) NSMutableArray* lists;
@property(retain, nonatomic) VKCountry* country;
@property(retain, nonatomic) VKCity* city;
@property(retain, nonatomic) NSString* bdate;
@property(retain, nonatomic) NSNumber* online;
@property(retain, nonatomic) NSNumber* invited_by;
@property(retain, nonatomic) NSNumber* sex;
@property(retain, nonatomic) VKPersonal* personal;
@property(retain, nonatomic) NSString* last_name_ins;
@property(retain, nonatomic) NSString* first_name_ins;
@property(retain, nonatomic) NSString* last_name_dat;
@property(retain, nonatomic) NSString* first_name_dat;
@property(retain, nonatomic) NSString* last_name_gen;
@property(retain, nonatomic) NSString* first_name_gen;
@property(retain, nonatomic) NSString* last_name_acc;
@property(retain, nonatomic) NSString* first_name_acc;
@property(retain, nonatomic) NSString* last_name;
@property(retain, nonatomic) NSString* first_name;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKGeoObject : VKApiObject {
	NSNumber* _id;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKCity : VKGeoObject {
}
@end

@interface VKCountry : VKGeoObject {
}
@end

@interface VKExports : VKApiObject {
	NSNumber* _twitter;
	NSNumber* _facebook;
	NSNumber* _livejournal;
	NSNumber* _instagram;
}
@property(retain, nonatomic) NSNumber* instagram;
@property(retain, nonatomic) NSNumber* livejournal;
@property(retain, nonatomic) NSNumber* facebook;
@property(retain, nonatomic) NSNumber* twitter;
-(void).cxx_destruct;
@end

@interface VKUsersArray : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKAudio : VKApiObject {
	BOOL _fromCache;
	BOOL _ignoreCache;
	NSNumber* _id;
	NSNumber* _owner_id;
	NSString* _artist;
	NSString* _title;
	NSNumber* _duration;
	NSString* _url;
	NSNumber* _lyrics_id;
	NSNumber* _album_id;
	NSNumber* _genre_id;
}
@property(assign, nonatomic) BOOL ignoreCache;
@property(assign, nonatomic) BOOL fromCache;
@property(retain, nonatomic) NSNumber* genre_id;
@property(retain, nonatomic) NSNumber* album_id;
@property(retain, nonatomic) NSNumber* lyrics_id;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSNumber* duration;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* artist;
@property(retain, nonatomic) NSNumber* owner_id;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKAudios : VKApiObjectArray {
	VKUser* _user;
}
@property(retain, nonatomic) VKUser* user;
-(void).cxx_destruct;
-(id)parseItems:(id)items asClass:(Class)aClass;
-(Class)objectClass;
@end

@interface VKGeoPlace : VKApiObject {
	NSNumber* _id;
	NSString* _title;
	NSNumber* _latitude;
	NSNumber* _longitude;
	NSNumber* _created;
	NSString* _icon;
	NSNumber* _group_id;
	NSNumber* _group_photo;
	NSNumber* _checkins;
	NSNumber* _updated;
	NSNumber* _type;
	NSNumber* _country;
	NSString* _city;
	NSString* _address;
	NSNumber* _showmap;
}
@property(retain, nonatomic) NSNumber* showmap;
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSNumber* country;
@property(retain, nonatomic) NSNumber* type;
@property(retain, nonatomic) NSNumber* updated;
@property(retain, nonatomic) NSNumber* checkins;
@property(retain, nonatomic) NSNumber* group_photo;
@property(retain, nonatomic) NSNumber* group_id;
@property(retain, nonatomic) NSString* icon;
@property(retain, nonatomic) NSNumber* created;
@property(retain, nonatomic) NSNumber* longitude;
@property(retain, nonatomic) NSNumber* latitude;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKGroupContact : VKApiObject {
	NSNumber* _user_id;
	NSString* _desc;
	NSString* _email;
}
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSNumber* user_id;
-(void).cxx_destruct;
@end

@interface VKGroupContacts : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKGroupLink : VKApiObject {
	NSString* _url;
	NSString* _name;
	NSString* _desc;
	NSString* _photo_50;
	NSString* _photo_100;
}
@property(retain, nonatomic) NSString* photo_100;
@property(retain, nonatomic) NSString* photo_50;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* url;
-(void).cxx_destruct;
@end

@interface VKGroupLinks : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKGroup : VKApiObject {
	NSString* _description;
	NSNumber* _id;
	NSString* _name;
	NSString* _screen_name;
	NSNumber* _is_closed;
	NSString* _type;
	NSNumber* _is_admin;
	NSNumber* _admin_level;
	NSNumber* _is_member;
	VKCity* _city;
	VKCountry* _country;
	VKGeoPlace* _place;
	NSString* _wiki_page;
	NSNumber* _members_count;
	VKCounters* _counters;
	NSNumber* _start_date;
	NSNumber* _end_date;
	NSNumber* _finish_date;
	NSNumber* _can_post;
	NSNumber* _can_see_all_posts;
	NSNumber* _can_create_topic;
	NSNumber* _can_upload_doc;
	NSString* _activity;
	NSString* _status;
	VKAudio* _status_audio;
	VKGroupContacts* _contacts;
	VKGroupLinks* _links;
	NSNumber* _fixed_post;
	NSNumber* _verified;
	NSString* _site;
	NSString* _photo_50;
	NSString* _photo_100;
	NSString* _photo_200;
	NSString* _photo_max_orig;
	NSNumber* _is_request;
	NSNumber* _is_invite;
	VKPhotoArray* _photos;
	NSNumber* _photos_count;
	NSNumber* _invited_by;
	int _invite_state;
	NSString* _deactivated;
	NSNumber* _blacklisted;
}
@property(retain, nonatomic) NSNumber* blacklisted;
@property(retain, nonatomic) NSString* deactivated;
@property(assign, nonatomic) int invite_state;
@property(retain, nonatomic) NSNumber* invited_by;
@property(retain, nonatomic) NSNumber* photos_count;
@property(retain, nonatomic) VKPhotoArray* photos;
@property(retain, nonatomic) NSNumber* is_invite;
@property(retain, nonatomic) NSNumber* is_request;
@property(retain, nonatomic) NSString* photo_max_orig;
@property(retain, nonatomic) NSString* photo_200;
@property(retain, nonatomic) NSString* photo_100;
@property(retain, nonatomic) NSString* photo_50;
@property(retain, nonatomic) NSString* site;
@property(retain, nonatomic) NSNumber* verified;
@property(retain, nonatomic) NSNumber* fixed_post;
@property(retain, nonatomic) VKGroupLinks* links;
@property(retain, nonatomic) VKGroupContacts* contacts;
@property(retain, nonatomic) VKAudio* status_audio;
@property(retain, nonatomic) NSString* status;
@property(retain, nonatomic) NSString* activity;
@property(retain, nonatomic) NSNumber* can_upload_doc;
@property(retain, nonatomic) NSNumber* can_create_topic;
@property(retain, nonatomic) NSNumber* can_see_all_posts;
@property(retain, nonatomic) NSNumber* can_post;
@property(retain, nonatomic) NSNumber* finish_date;
@property(retain, nonatomic) NSNumber* end_date;
@property(retain, nonatomic) NSNumber* start_date;
@property(retain, nonatomic) VKCounters* counters;
@property(retain, nonatomic) NSNumber* members_count;
@property(retain, nonatomic) NSString* wiki_page;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) VKGeoPlace* place;
@property(retain, nonatomic) VKCountry* country;
@property(retain, nonatomic) VKCity* city;
@property(retain, nonatomic) NSNumber* is_member;
@property(retain, nonatomic) NSNumber* admin_level;
@property(retain, nonatomic) NSNumber* is_admin;
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSNumber* is_closed;
@property(retain, nonatomic) NSString* screen_name;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKGroups : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKLikes : VKApiObject {
	NSNumber* _count;
	NSNumber* _user_likes;
	NSNumber* _can_like;
	NSNumber* _can_publish;
}
@property(retain, nonatomic) NSNumber* can_publish;
@property(retain, nonatomic) NSNumber* can_like;
@property(retain, nonatomic) NSNumber* user_likes;
@property(retain, nonatomic) NSNumber* count;
-(void).cxx_destruct;
@end

@interface VKPhoto : VKApiObject {
	NSNumber* _id;
	NSNumber* _album_id;
	NSNumber* _owner_id;
	NSString* _photo_75;
	NSString* _photo_130;
	NSString* _photo_604;
	NSString* _photo_807;
	NSString* _photo_1280;
	NSString* _photo_2560;
	NSNumber* _width;
	NSNumber* _height;
	NSString* _text;
	NSNumber* _date;
	VKPhotoSizes* _sizes;
}
@property(readonly, assign, nonatomic) NSString* attachmentString;
@property(retain, nonatomic) VKPhotoSizes* sizes;
@property(retain, nonatomic) NSNumber* date;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSNumber* height;
@property(retain, nonatomic) NSNumber* width;
@property(retain, nonatomic) NSString* photo_2560;
@property(retain, nonatomic) NSString* photo_1280;
@property(retain, nonatomic) NSString* photo_807;
@property(retain, nonatomic) NSString* photo_604;
@property(retain, nonatomic) NSString* photo_130;
@property(retain, nonatomic) NSString* photo_75;
@property(retain, nonatomic) NSNumber* owner_id;
@property(retain, nonatomic) NSNumber* album_id;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKPhotoArray : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKSchool : VKApiObject {
	NSNumber* _id;
	NSNumber* _country;
	NSNumber* _city;
	NSString* _name;
	NSNumber* _year_from;
	NSNumber* _year_to;
	NSNumber* _year_graduated;
	NSString* _Mclass;
	NSString* _speciality;
	NSNumber* _type;
	NSString* _type_str;
}
@property(retain, nonatomic) NSString* type_str;
@property(retain, nonatomic) NSNumber* type;
@property(retain, nonatomic) NSString* speciality;
@property(retain, nonatomic) NSString* Mclass;
@property(retain, nonatomic) NSNumber* year_graduated;
@property(retain, nonatomic) NSNumber* year_to;
@property(retain, nonatomic) NSNumber* year_from;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* city;
@property(retain, nonatomic) NSNumber* country;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKSchools : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKCounters : VKApiObject {
	NSNumber* _friends;
	NSNumber* _messages;
	NSNumber* _photos;
	NSNumber* _videos;
	NSNumber* _notifications;
	NSNumber* _groups;
	NSNumber* _gifts;
	NSNumber* _events;
	NSNumber* _albums;
	NSNumber* _audios;
	NSNumber* _online_friends;
	NSNumber* _mutual_friends;
	NSNumber* _user_videos;
	NSNumber* _followers;
	NSNumber* _user_photos;
	NSNumber* _subscriptions;
	NSNumber* _documents;
	NSNumber* _topics;
	NSNumber* _pages;
}
@property(retain, nonatomic) NSNumber* pages;
@property(retain, nonatomic) NSNumber* topics;
@property(retain, nonatomic) NSNumber* documents;
@property(retain, nonatomic) NSNumber* subscriptions;
@property(retain, nonatomic) NSNumber* user_photos;
@property(retain, nonatomic) NSNumber* followers;
@property(retain, nonatomic) NSNumber* user_videos;
@property(retain, nonatomic) NSNumber* mutual_friends;
@property(retain, nonatomic) NSNumber* online_friends;
@property(retain, nonatomic) NSNumber* audios;
@property(retain, nonatomic) NSNumber* albums;
@property(retain, nonatomic) NSNumber* events;
@property(retain, nonatomic) NSNumber* gifts;
@property(retain, nonatomic) NSNumber* groups;
@property(retain, nonatomic) NSNumber* notifications;
@property(retain, nonatomic) NSNumber* videos;
@property(retain, nonatomic) NSNumber* photos;
@property(retain, nonatomic) NSNumber* messages;
@property(retain, nonatomic) NSNumber* friends;
-(void).cxx_destruct;
@end

@interface VKRelative : VKApiObject {
	NSNumber* _id;
	NSString* _type;
}
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKRelativities : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKPropertyHelper : VKObject {
	BOOL _isPrimitive;
	BOOL _isModelsArray;
	BOOL _isModel;
	NSString* _propertyName;
	NSString* _propertyClassName;
	Class _propertyClass;
	objc_property* _property;
}
@property(assign, nonatomic) objc_property* property;
@property(assign, nonatomic) BOOL isModel;
@property(assign, nonatomic) BOOL isModelsArray;
@property(assign, nonatomic) BOOL isPrimitive;
@property(retain, nonatomic) Class propertyClass;
@property(retain, nonatomic) NSString* propertyClassName;
@property(retain, nonatomic) NSString* propertyName;
-(void).cxx_destruct;
-(id)initWith:(objc_property*)with;
@end

@interface VKApiObject : VKObject <VKApiObject> {
	NSDictionary* _fields;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDictionary* fields;
+(id)createWithArray:(id)array;
+(id)createWithDictionary:(id)dictionary;
-(void).cxx_destruct;
-(id)serialize;
-(id)ignoredProperties;
-(void)enumPropertiesWithBlock:(id)block;
-(void)parse:(id)parse;
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKPhotoSize : VKApiObject {
	NSString* _src;
	NSNumber* _width;
	NSNumber* _height;
	NSString* _type;
}
@property(copy, nonatomic) NSString* type;
@property(copy, nonatomic) NSNumber* height;
@property(copy, nonatomic) NSNumber* width;
@property(copy, nonatomic) NSString* src;
-(void).cxx_destruct;
@end

@interface VKPhotoSizes : VKApiObjectArray {
	NSDictionary* sizesDictionary;
}
-(void).cxx_destruct;
-(id)photoSizeWithType:(id)type;
-(id)initWithArray:(id)array;
-(Class)objectClass;
@end

@interface VKUniversity : VKApiObject {
	NSNumber* _id;
	NSNumber* _country;
	NSNumber* _city;
	NSString* _name;
	NSNumber* _faculty;
	NSString* _faculty_name;
	NSNumber* _chair;
	NSString* _chair_name;
	NSNumber* _graduation;
	NSString* _education_form;
	NSString* _education_status;
}
@property(retain, nonatomic) NSString* education_status;
@property(retain, nonatomic) NSString* education_form;
@property(retain, nonatomic) NSNumber* graduation;
@property(retain, nonatomic) NSString* chair_name;
@property(retain, nonatomic) NSNumber* chair;
@property(retain, nonatomic) NSString* faculty_name;
@property(retain, nonatomic) NSNumber* faculty;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSNumber* city;
@property(retain, nonatomic) NSNumber* country;
@property(retain, nonatomic) NSNumber* id;
-(void).cxx_destruct;
@end

@interface VKUniversities : VKApiObjectArray {
}
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKApiObjectArray : VKApiObject <NSFastEnumeration> {
	unsigned _count;
	NSMutableArray* _items;
}
@property(retain, nonatomic) NSMutableArray* items;
@property(assign, nonatomic) unsigned count;
+(id)createWithArray:(id)array;
+(id)createWithDictionary:(id)dictionary;
-(void).cxx_destruct;
-(Class)objectClass;
-(void)serializeTo:(id)to withName:(id)name;
-(id)serialize;
-(id)lastObject;
-(id)firstObject;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(void)removeObject:(id)object;
-(void)addObject:(id)object;
-(id)reverseObjectEnumerator;
-(id)objectEnumerator;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndex:(int)index;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)parseItems:(id)items asClass:(Class)aClass;
-(id)initWithArray:(id)array;
-(id)initWithArray:(id)array objectClass:(Class)aClass;
-(id)initWithDictionary:(id)dictionary objectClass:(Class)aClass;
-(id)initWithDictionary:(id)dictionary;
@end

@interface VKUploadPhotoBase : VKRequest {
	int _albumId;
	int _groupId;
	int _userId;
	VKImageParameters* _imageParameters;
	UIImage* _image;
}
@property(retain, nonatomic) NSOperation* executionOperation;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) VKImageParameters* imageParameters;
@property(assign, nonatomic) int userId;
@property(assign, nonatomic) int groupId;
@property(assign, nonatomic) int albumId;
-(void).cxx_destruct;
-(id)methodName;
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
-(id)initWithImage:(id)image parameters:(id)parameters;
@end

@interface VKUploadImageOperation : VKOperation {
	VKUploadPhotoBase* _uploadRequest;
	VKRequest* _lastLoadingRequest;
}
@property(retain, nonatomic) VKRequest* lastLoadingRequest;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) VKUploadPhotoBase* uploadRequest;
+(id)operationWithUploadRequest:(id)uploadRequest;
-(void).cxx_destruct;
-(void)cancel;
-(void)finish;
-(void)start;
@end

@interface VKUploadPhotoRequest : VKUploadPhotoBase {
}
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
-(id)initWithImage:(id)image parameters:(id)parameters albumId:(int)anId groupId:(int)anId4;
@end

@interface VKUploadWallPhotoRequest : VKUploadPhotoBase {
}
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
-(id)initWithImage:(id)image parameters:(id)parameters userId:(int)anId groupId:(int)anId4;
@end

@interface VKUploadMessagesPhotoRequest : VKUploadPhotoBase {
}
-(id)getSaveRequest:(id)request;
-(id)getServerRequest;
@end

@interface VKUploadImage : VKObject {
	NSData* _imageData;
	UIImage* _sourceImage;
	VKImageParameters* _parameters;
}
@property(retain, nonatomic) VKImageParameters* parameters;
@property(retain, nonatomic) UIImage* sourceImage;
@property(retain, nonatomic) NSData* imageData;
+(id)uploadImageWithImage:(id)image andParams:(id)params;
+(id)uploadImageWithData:(id)data andParams:(id)params;
-(void).cxx_destruct;
@end

@interface VKImageParameters : VKObject {
	int _imageType;
	float _jpegQuality;
}
@property(assign, nonatomic) float jpegQuality;
@property(assign, nonatomic) int imageType;
+(id)jpegImageWithQuality:(float)quality;
+(id)pngImage;
-(id)mimeType;
-(id)fileExtension;
@end

@interface VKSharedTransitioningObject : XXUnknownSuperclass <UIViewControllerTransitioningDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
@end

@interface AnimatedTransitioning : XXUnknownSuperclass <UIViewControllerAnimatedTransitioning> {
	BOOL _isPresenting;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL isPresenting;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

@interface XXUnknownSuperclass (BlocksKitPrivate)
@property(assign, nonatomic, setter=bk_setResponseLength:) unsigned bk_responseLength;
@property(retain, nonatomic, setter=bk_setResponse:) NSURLResponse* bk_response;
@property(retain, nonatomic, setter=bk_setResponseData:) NSMutableData* bk_responseData;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setDownloadBlock:) id bk_downloadBlock;
@property(copy, nonatomic, setter=bk_setUploadBlock:) id bk_uploadBlock;
@property(copy, nonatomic, setter=bk_setSuccessBlock:) id bk_successBlock;
@property(copy, nonatomic, setter=bk_setFailureBlock:) id bk_failureBlock;
@property(copy, nonatomic, setter=bk_setResponseBlock:) id bk_responseBlock;
@property(assign, nonatomic, setter=setDelegate:) __weak id delegate;
+(id)bk_startConnectionWithRequest:(id)request successHandler:(id)handler failureHandler:(id)handler3;
+(id)bk_connectionWithRequest:(id)request;
+(void)load;
-(void)bk_startWithCompletionBlock:(id)completionBlock;
-(id)bk_initWithRequest:(id)request completionHandler:(id)handler;
-(id)bk_initWithRequest:(id)request;
@end

@interface XXUnknownSuperclass (MarqueeLabelHelpers)
-(id)traverseResponderChainForFirstViewController;
-(id)firstAvailableViewController;
@end

@interface XXUnknownSuperclass (MarqueeLabelHelpers)
-(id)controlPoints;
-(float)derivativeYValueForCurveAt:(float)at withControlPoints:(id)controlPoints;
-(float)XforCurveAt:(float)at withControlPoints:(id)controlPoints;
-(float)YforCurveAt:(float)at withControlPoints:(id)controlPoints;
-(float)solveTForY:(float)y withEpsilon:(float)epsilon controlPoints:(id)points;
-(float)durationPercentageForPositionPercentage:(float)positionPercentage withDuration:(double)duration;
@end

@interface XXUnknownSuperclass (AFNetworking)
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setProgressWithDownloadProgressOfOperation:(id)operation animated:(BOOL)animated;
-(void)setProgressWithUploadProgressOfOperation:(id)operation animated:(BOOL)animated;
-(void)setProgressWithDownloadProgressOfTask:(id)task animated:(BOOL)animated;
-(void)setProgressWithUploadProgressOfTask:(id)task animated:(BOOL)animated;
-(void)af_setDownloadProgressAnimated:(BOOL)animated;
-(BOOL)af_downloadProgressAnimated;
-(void)af_setUploadProgressAnimated:(BOOL)animated;
-(BOOL)af_uploadProgressAnimated;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setWillEvictBlock:) id bk_willEvictBlock;
+(void)load;
-(id)bk_objectForKey:(id)key withGetter:(id)getter;
@end

@interface XXUnknownSuperclass (_AFNetworking)
@property(retain, nonatomic, setter=af_setImageRequestOperation:) AFHTTPRequestOperation* af_imageRequestOperation;
+(id)af_sharedImageRequestOperationQueue;
@end

@interface XXUnknownSuperclass (AFNetworking)
@property(retain, nonatomic) id<AFURLResponseSerialization> imageResponseSerializer;
+(void)setSharedImageCache:(id)cache;
+(id)sharedImageCache;
-(void)cancelImageRequestOperation;
-(void)setImageWithURLRequest:(id)urlrequest placeholderImage:(id)image success:(id)success failure:(id)failure;
-(void)setImageWithURL:(id)url placeholderImage:(id)image;
-(void)setImageWithURL:(id)url;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_corresponds:(id)corresponds withBlock:(id)block;
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(float)bk_reduceFloat:(float)aFloat withBlock:(id)block;
-(int)bk_reduceInteger:(int)integer withBlock:(id)block;
-(id)bk_reduce:(id)reduce withBlock:(id)block;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (BlocksKit)
+(id)bk_invocationWithTarget:(id)target block:(id)block;
@end

@interface XXUnknownSuperclass (_AFNetworking)
+(id)af_sharedImageRequestOperationQueue;
-(void)af_setBackgroundImageRequestOperation:(id)operation forState:(unsigned)state;
-(id)af_backgroundImageRequestOperationForState:(unsigned)state;
-(void)af_setImageRequestOperation:(id)operation forState:(unsigned)state;
-(id)af_imageRequestOperationForState:(unsigned)state;
@end

@interface XXUnknownSuperclass (AFNetworking)
@property(retain, nonatomic) id<AFURLResponseSerialization> imageResponseSerializer;
+(void)setSharedImageCache:(id)cache;
+(id)sharedImageCache;
-(void)cancelBackgroundImageRequestOperationForState:(unsigned)state;
-(void)cancelImageRequestOperationForState:(unsigned)state;
-(void)setBackgroundImageForState:(unsigned)state withURLRequest:(id)urlrequest placeholderImage:(id)image success:(id)success failure:(id)failure;
-(void)setBackgroundImageForState:(unsigned)state withURL:(id)url placeholderImage:(id)image;
-(void)setBackgroundImageForState:(unsigned)state withURL:(id)url;
-(void)setImageForState:(unsigned)state withURLRequest:(id)urlrequest placeholderImage:(id)image success:(id)success failure:(id)failure;
-(void)setImageForState:(unsigned)state withURL:(id)url placeholderImage:(id)image;
-(void)setImageForState:(unsigned)state withURL:(id)url;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_mapIndex:(id)index;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(unsigned)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (RunTimeLanguage)
-(id)runTimeLocalizedStringForKey:(id)key value:(id)value table:(id)table;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_each:(id)each;
-(void)bk_enumerateKeysAndObjectsUsingBlock:(id)block;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (FMUtilities)
-(void)cancelTouch;
@end

@interface XXUnknownSuperclass (STKAudioPlayer)
-(id)peek;
-(id)dequeue;
-(void)skipQueueWithQueue:(id)queue;
-(void)skipQueue:(id)queue;
-(void)enqueue:(id)enqueue;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_reduce:(id)reduce withBlock:(id)block;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (A2DynamicDelegate)
-(id)bk_dynamicDelegateWithClass:(Class)aClass forProtocol:(id)protocol;
-(id)bk_dynamicDelegateForProtocol:(id)protocol;
-(id)bk_dynamicDelegate;
-(id)bk_dynamicDataSource;
@end

@interface XXUnknownSuperclass (BlockObservation)
+(id)bk_observedClassesHash;
-(id)bk_observerBlocks;
-(void)bk_setObserverBlocks:(id)blocks;
-(void)bk_addObserverForKeyPaths:(id)keyPaths identifier:(id)identifier options:(unsigned)options context:(int)context task:(id)task;
-(void)bk_removeAllBlockObservers;
-(void)bk_removeObserversWithIdentifier:(id)identifier;
-(void)bk_removeObserverForKeyPath:(id)keyPath identifier:(id)identifier;
-(void)bk_addObserverForKeyPaths:(id)keyPaths identifier:(id)identifier options:(unsigned)options task:(id)task;
-(void)bk_addObserverForKeyPath:(id)keyPath identifier:(id)identifier options:(unsigned)options task:(id)task;
-(id)bk_addObserverForKeyPaths:(id)keyPaths options:(unsigned)options task:(id)task;
-(id)bk_addObserverForKeyPath:(id)keyPath options:(unsigned)options task:(id)task;
-(id)bk_addObserverForKeyPaths:(id)keyPaths task:(id)task;
-(id)bk_addObserverForKeyPath:(id)keyPath task:(id)task;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setDidFinishWithErrorBlock:) id bk_didFinishWithErrorBlock;
@property(copy, nonatomic, setter=bk_setDidFinishLoadBlock:) id bk_didFinishLoadBlock;
@property(copy, nonatomic, setter=bk_setDidStartLoadBlock:) id bk_didStartLoadBlock;
@property(copy, nonatomic, setter=bk_setShouldStartLoadBlock:) id bk_shouldStartLoadBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic) id bk_shouldReturnBlock;
@property(copy, nonatomic) id bk_shouldClearBlock;
@property(copy, nonatomic) id bk_shouldChangeCharactersInRangeWithReplacementStringBlock;
@property(copy, nonatomic) id bk_didEndEditingBlock;
@property(copy, nonatomic) id bk_shouldEndEditingBlock;
@property(copy, nonatomic) id bk_didBeginEditingBlock;
@property(copy, nonatomic) id bk_shouldBeginEditingBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (A2BlockDelegate)
+(void)bk_registerDynamicDelegateNamed:(id)named forProtocol:(id)protocol;
+(void)bk_registerDynamicDelegateNamed:(id)named;
+(void)bk_registerDynamicDataSourceNamed:(id)named;
+(void)bk_registerDynamicDelegate;
+(void)bk_registerDynamicDataSource;
+(void)bk_linkProtocol:(id)protocol methods:(id)methods;
+(void)bk_linkDelegateMethods:(id)methods;
+(void)bk_linkDataSourceMethods:(id)methods;
+(const XXStruct_bmT6iB*)bk_delegateInfoForProtocol:(id)protocol;
+(id)bk_delegateInfoByProtocol:(BOOL)protocol;
-(id)bk_ensuredDynamicDelegateForProtocol:(id)protocol;
-(id)bk_ensuredDynamicDelegate;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_eachSubview:(id)subview;
-(void)bk_whenDoubleTapped:(id)tapped;
-(void)bk_whenTapped:(id)tapped;
-(void)bk_whenTouches:(unsigned)touches tapped:(unsigned)tapped handler:(id)handler;
@end

@interface XXUnknownSuperclass (BlocksKit)
+(void)bk_executeBlockFromTimer:(id)timer;
+(id)bk_timerWithTimeInterval:(double)timeInterval block:(id)block repeats:(BOOL)repeats;
+(id)bk_scheduledTimerWithTimeInterval:(double)timeInterval block:(id)block repeats:(BOOL)repeats;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic) id bk_didCancelBlock;
@property(copy, nonatomic) id bk_didFinishPickingMediaBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
+(void)bk_cancelBlock:(id)block;
+(id)bk_performBlock:(id)block onQueue:(id)queue afterDelay:(double)delay;
+(id)bk_performBlockInBackground:(id)background afterDelay:(double)delay;
+(id)bk_performBlock:(id)block afterDelay:(double)delay;
-(id)bk_performBlock:(id)block onQueue:(id)queue afterDelay:(double)delay;
-(id)bk_performBlockInBackground:(id)background afterDelay:(double)delay;
-(id)bk_performBlock:(id)block afterDelay:(double)delay;
@end

@interface XXUnknownSuperclass (AFNetworkingSafeImageLoading)
+(id)af_safeImageWithData:(id)data;
@end

@interface XXUnknownSuperclass (AFNetworking)
+(void)showAlertViewForRequestOperationWithErrorOnCompletion:(id)errorOnCompletion delegate:(id)delegate cancelButtonTitle:(id)title otherButtonTitles:(id)titles;
+(void)showAlertViewForRequestOperationWithErrorOnCompletion:(id)errorOnCompletion delegate:(id)delegate;
+(void)showAlertViewForTaskWithErrorOnCompletion:(id)errorOnCompletion delegate:(id)delegate cancelButtonTitle:(id)title otherButtonTitles:(id)titles;
+(void)showAlertViewForTaskWithErrorOnCompletion:(id)errorOnCompletion delegate:(id)delegate;
@end

@interface XXUnknownSuperclass (FontAppearance)
@property(copy, nonatomic) UIFont* appearanceFont;
-(void)findSuperviewAndChangeItToBlack:(id)black;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_hasEventHandlersForControlEvents:(unsigned)controlEvents;
-(void)bk_removeEventHandlersForControlEvents:(unsigned)controlEvents;
-(void)bk_addEventHandler:(id)handler forControlEvents:(unsigned)controlEvents;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_handleAction:(id)action;
-(id)bk_initWithTitle:(id)title style:(int)style handler:(id)handler;
-(id)bk_initWithImage:(id)image landscapeImagePhone:(id)phone style:(int)style handler:(id)handler;
-(id)bk_initWithImage:(id)image style:(int)style handler:(id)handler;
-(id)bk_initWithBarButtonSystemItem:(int)barButtonSystemItem handler:(id)handler;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setCompletionBlock:) id bk_completionBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BKAdditions)
+(id)bk_selectorsToStrongObjectsMapTable;
-(void)bk_setObject:(id)object forSelector:(SEL)selector;
-(void)bk_removeObjectForSelector:(SEL)selector;
-(id)bk_objectForSelector:(SEL)selector;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(assign, nonatomic, setter=bk_setHandlerDelay:) double bk_handlerDelay;
@property(copy, nonatomic, setter=bk_setHandler:) id bk_handler;
+(id)bk_recognizerWithHandler:(id)handler;
+(id)bk_recognizerWithHandler:(id)handler delay:(double)delay;
-(void)bk_cancel;
-(BOOL)bk_shouldHandleAction;
-(void)bk_setShouldHandleAction:(BOOL)bk_set;
-(void)bk_handleAction:(id)action;
-(id)bk_initWithHandler:(id)handler;
-(id)bk_initWithHandler:(id)handler delay:(double)delay;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setDidDismissBlock:) id bk_didDismissBlock;
@property(copy, nonatomic, setter=bk_setShouldDismissBlock:) id bk_shouldDismissBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setDidDismissBlock:) id bk_didDismissBlock;
@property(copy, nonatomic, setter=bk_setWillDismissBlock:) id bk_willDismissBlock;
@property(copy, nonatomic, setter=bk_setShouldOpenURLForPreviewItem:) id bk_shouldOpenURLForPreviewItem;
@property(copy, nonatomic, setter=bk_setTransitionImageForPreviewItem:) id bk_transitionImageForPreviewItem;
@property(copy, nonatomic, setter=bk_setFrameForPreviewItemInSourceView:) id bk_frameForPreviewItem;
+(void)load;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (AFNetworking)
-(void)setAnimatingWithStateOfOperation:(id)operation;
-(void)setAnimatingWithStateOfTask:(id)task;
-(id)af_notificationObserver;
@end

@interface XXUnknownSuperclass (BKAssociatedObjects)
+(void)bk_removeAllAssociatedObjects;
+(id)bk_associatedValueForKey:(const void*)key;
+(void)bk_weaklyAssociateValue:(id)value withKey:(const void*)key;
+(void)bk_atomicallyAssociateCopyOfValue:(id)value withKey:(const void*)key;
+(void)bk_associateCopyOfValue:(id)value withKey:(const void*)key;
+(void)bk_atomicallyAssociateValue:(id)value withKey:(const void*)key;
+(void)bk_associateValue:(id)value withKey:(const void*)key;
-(void)bk_removeAllAssociatedObjects;
-(id)bk_associatedValueForKey:(const void*)key;
-(void)bk_weaklyAssociateValue:(id)value withKey:(const void*)key;
-(void)bk_atomicallyAssociateCopyOfValue:(id)value withKey:(const void*)key;
-(void)bk_associateCopyOfValue:(id)value withKey:(const void*)key;
-(void)bk_atomicallyAssociateValue:(id)value withKey:(const void*)key;
-(void)bk_associateValue:(id)value withKey:(const void*)key;
@end

@interface XXUnknownSuperclass (BlocksKit) <UIActionSheetDelegate>
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic, setter=bk_setDidDismissBlock:) id bk_didDismissBlock;
@property(copy, nonatomic, setter=bk_setWillDismissBlock:) id bk_willDismissBlock;
@property(copy, nonatomic, setter=bk_setDidShowBlock:) id bk_didShowBlock;
@property(copy, nonatomic, setter=bk_setWillShowBlock:) id bk_willShowBlock;
@property(copy, nonatomic, setter=bk_setCancelBlock:) id bk_cancelBlock;
+(id)bk_actionSheetWithTitle:(id)title;
+(void)load;
-(id)bk_handlerForButtonAtIndex:(int)index;
-(void)bk_setHandler:(id)handler forButtonAtIndex:(int)index;
-(int)bk_setCancelButtonWithTitle:(id)title handler:(id)handler;
-(int)bk_setDestructiveButtonWithTitle:(id)title handler:(id)handler;
-(int)bk_addButtonWithTitle:(id)title handler:(id)handler;
-(id)bk_initWithTitle:(id)title;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_SetShouldEnableFirstOtherButtonBlock:) id bk_shouldEnableFirstOtherButtonBlock;
@property(copy, nonatomic, setter=bk_setDidDismissBlock:) id bk_didDismissBlock;
@property(copy, nonatomic, setter=bk_setWillDismissBlock:) id bk_willDismissBlock;
@property(copy, nonatomic, setter=bk_setDidShowBlock:) id bk_didShowBlock;
@property(copy, nonatomic, setter=bk_setWillShowBlock:) id bk_willShowBlock;
@property(copy, nonatomic, setter=bk_setCancelBlock:) id bk_cancelBlock;
+(id)bk_alertViewWithTitle:(id)title message:(id)message;
+(id)bk_alertViewWithTitle:(id)title;
+(id)bk_showAlertViewWithTitle:(id)title message:(id)message cancelButtonTitle:(id)title3 otherButtonTitles:(id)titles handler:(id)handler;
+(void)load;
-(id)bk_handlerForButtonAtIndex:(int)index;
-(void)bk_setHandler:(id)handler forButtonAtIndex:(int)index;
-(int)bk_setCancelButtonWithTitle:(id)title handler:(id)handler;
-(int)bk_addButtonWithTitle:(id)title handler:(id)handler;
-(id)bk_initWithTitle:(id)title message:(id)message;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(BOOL)bk_corresponds:(id)corresponds withBlock:(id)block;
-(BOOL)bk_all:(id)all;
-(BOOL)bk_none:(id)none;
-(BOOL)bk_any:(id)any;
-(id)bk_reduce:(id)reduce withBlock:(id)block;
-(id)bk_map:(id)map;
-(id)bk_reject:(id)reject;
-(id)bk_select:(id)select;
-(id)bk_match:(id)match;
-(void)bk_apply:(id)apply;
-(void)bk_each:(id)each;
@end

@interface XXUnknownSuperclass (BlocksKit)
@property(copy, nonatomic, setter=bk_setCompletionBlock:) id bk_completionBlock;
+(void)load;
@end

@interface XXUnknownSuperclass (AFNetworking)
-(void)setRefreshingWithStateOfOperation:(id)operation;
-(void)setRefreshingWithStateOfTask:(id)task;
-(id)af_notificationObserver;
@end

@interface XXUnknownSuperclass (_AFNetworking)
@property(retain, nonatomic, setter=af_setHTTPRequestOperation:) AFHTTPRequestOperation* af_HTTPRequestOperation;
@end

@interface XXUnknownSuperclass (AFNetworking)
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization>* responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer<AFURLRequestSerialization>* requestSerializer;
-(void)loadRequest:(id)request MIMEType:(id)type textEncodingName:(id)name progress:(id)progress success:(id)success failure:(id)failure;
-(void)loadRequest:(id)request progress:(id)progress success:(id)success failure:(id)failure;
@end

@interface XXUnknownSuperclass (BlocksKit)
-(void)bk_performMap:(id)map;
-(void)bk_performReject:(id)reject;
-(void)bk_performSelect:(id)select;
@end

@interface XXUnknownSuperclass (GADURLEncoding)
-(id)gad_stringByEscapingAsURLParameter;
@end

@interface XXUnknownSuperclass (GADNSURLRequestUtilities)
+(id)gad_requestForURL:(id)url data:(id)data headers:(id)headers type:(id)type;
@end

@interface XXUnknownSuperclass (GADInternalErrorAdditions)
+(id)gad_localizedDescriptionForErrorCode:(int)errorCode;
+(id)gad_errorWithCode:(int)code description:(id)description;
+(id)gad_errorWithDomain:(id)domain code:(int)code description:(id)description;
@end

@interface XXUnknownSuperclass (GADPathValidation)
-(BOOL)gad_isEquivalentToURLString:(id)urlstring;
-(id)gad_stripTrailingSlash;
@end

@interface XXUnknownSuperclass (GADObjectValidation)
-(id)gad_objectForKey:(id)key ifIsKindOfClass:(Class)aClass;
@end

@interface XXUnknownSuperclass (GADNSURLUtilities)
-(BOOL)gad_isSchemeEqualToString:(id)string caseSensitive:(BOOL)sensitive;
-(BOOL)gad_isHostEqualToString:(id)string caseSensitive:(BOOL)sensitive;
-(id)gad_absoluteStringWithoutFragmentComponent;
-(id)gad_impressionTicket;
-(id)gad_dictionaryFromQueryParametersAndConvertKeysToLowercase:(BOOL)lowercase;
-(id)gad_parameterValuesForKey:(id)key;
-(id)gad_parameterValueForKey:(id)key;
-(id)gad_URLByAppendingQueryParameters:(id)parameters;
@end

@interface XXUnknownSuperclass (GADWeakTargetAdditions)
+(id)gad_scheduledTimerWithTimeInterval:(double)timeInterval repeats:(BOOL)repeats tolerance:(double)tolerance block:(id)block;
@end

@interface XXUnknownSuperclass (GADReplaceContentAdditions)
-(id)gad_escapeAts;
@end

@interface XXUnknownSuperclass (GADReplaceContentAdditions)
-(void)gad_unescapeAts;
-(void)gad_removeAtQuotedKeywords;
-(void)gad_replaceAtQuotedKeywordPattern:(id)quotedKeywordPattern withString:(id)string;
-(void)gad_substituteAtQuotedKeywordsWithExpansionDictionary:(id)expansionDictionary;
@end

@interface XXUnknownSuperclass (GADStringNumberAdditions)
-(id)gad_MD5String;
-(id)gad_MD5Data;
@end

@interface XXUnknownSuperclass (GADJSONAdditions)
-(id)gad_decodedJSONObjectError:(id*)error;
@end

@interface XXUnknownSuperclass (GADJSONAdditions)
-(id)gad_JSONSafeDictionary;
-(id)gad_JSONStringPretty:(BOOL)pretty error:(id*)error;
@end

@interface XXUnknownSuperclass (GADHeaderParser)
-(id)gad_dateFromHttpDateString:(id)httpDateString;
-(id)gad_expirationDate;
@end

@interface XXUnknownSuperclass (GADMobileAdsAdditions)
-(void)gad_fillSuperview;
-(void)gad_matchSuperviewSize;
-(void)gad_centerInSuperviewWithSize:(CGSize)size;
-(void)gad_setSize:(CGSize)size;
-(void)gad_centerInSuperview;
-(BOOL)gad_supportsOrientations:(unsigned)orientations;
-(CGRect)gad_visibleBounds;
-(id)gad_render;
@end

@interface XXUnknownSuperclass (VKError)
@property(readonly, assign, nonatomic) VKError* vkError;
+(id)errorWithVkError:(id)vkError;
-(id)copyWithVkError:(id)vkError;
@end

@interface XXUnknownSuperclass (RoundedImage)
-(id)vkRoundCornersImage:(float)image resultSize:(CGSize)size;
-(void)addRoundedRectToPath:(CGContextRef)path rect:(CGRect)rect width:(float)width height:(float)height toCorners:(int)corners;
@end

@interface XXUnknownSuperclass (LastControllerBar)
-(int)preferredStatusBarStyle;
@end

@interface XXUnknownSuperclass (MD5)
-(id)MD5;
@end

@interface XXUnknownSuperclass (MD5)
-(id)MD5;
@end

